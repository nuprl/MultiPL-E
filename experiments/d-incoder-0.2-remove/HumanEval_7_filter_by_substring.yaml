name: HumanEval_7_filter_by_substring
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
  \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
  \ strings, string substring) \n"
tests: "unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\"\
  , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring))\n            result[i] = strings[i];\n  \
    \      else if(!caseSensitive && !strings[i].contains(substring))\n          \
    \  result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring, ignoreCase))\n            result[i] = strings[i];\n\
    \        else if(!caseSensitive && !strings[i].contains(substring, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!caseSensitive && strings[i].contains(substring, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n        else if(!caseSensitive\
    \ && !strings[i].contains(substring, ignoreCase, ignoreCase))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n    ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, int startIndex,\
    \ int endIndex) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].matches(regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].matches(regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string regex) \n{\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer the question at all.\
    \ He wants to filter out all strings that don't contain `substring`, not just\
    \ ones that do contain it.\n<|/ c |>\n<| c |>\nI believe that he wants to filter\
    \ out all strings that don't contain `substring`, not just ones that do contain\
    \ it.\n<|/ c |>\n<| c |>\nYes, I believe that he wants to filter out all strings\
    \ that don't contain `substring`, not just ones that do contain it.\n<|/ c |>\n\
    <| c |>\nI believe that he wants to filter out all strings that don't contain\
    \ `substring`, not just ones that do contain it.\n<|/ c |>\n<| c |>\nI believe\
    \ that he wants to filter out all strings that don't contain `substring`, not\
    \ just ones that do contain it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring substring = \"a\";\nstring[]\
    \ filteredArray = stringArray.Where(x => x.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer the question at all.\
    \ He wants to filter out all strings that don't contain `substring`, not just\
    \ ones that do contain it.\n<|/ c |>\n<| c |>\nI believe that he wants to filter\
    \ out all strings that don't contain `substring`, not just ones that do contain\
    \ it.\n<|/ c |>\n<| c |>\nI believe that he wants to filter out all strings that\
    \ don't contain `substring`, not just ones that do contain it.\n<|/ c |>\n<| c\
    \ |>\nI believe that he wants to filter out all strings that don't contain `substring`,\
    \ not just ones that do contain it.\n<|/ c |>\n<| c |>\nI believe that he wants\
    \ to filter out all strings that don't contain `substring`, not just ones that\
    \ do contain it.\n<|/ c |>\n<| a dscore=0 |>\n", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }", "{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, int startIndex,\
    \ int endIndex) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].contains(substring, caseSensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].contains(substring, ignoreCase))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].contains(substring, ignoreCase, ignoreCase))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase, ignoreCase, ignoreCase))", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex, endIndex) : !strings[i].contains(substring, startIndex, endIndex,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex, bool caseSensitive, int startIndexInclusive,\
    \ int endIndexInclusive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring, startIndex, endIndex, startIndexInclusive,\
    \ endIndexInclusive) : !strings[i].contains(sub", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.List;", "{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring\n    \
    \        \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring) ",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring))\n            result[i] = strings[i];\n  \
    \      else if(!caseSensitive && !strings[i].contains(substring))\n          \
    \  result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring, partialMatch))\n            result[i] = strings[i];\n\
    \        else if(!caseSensitive && !strings[i].contains(substring, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive && strings[i].contains(substring, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n       \
    \ else if(!caseSensitive && !strings[i].contains(substring, partialMatch, partialMatchCaseInsensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatch", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for the answer. I am not allowed to use any\
    \ libraries. I only need to use basic libraries.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that uses only basic libraries.\n<|/ c |>\n<| c |>\nThanks for the\
    \ answer. I tried your solution and it works perfectly. I just had to change `string[]\
    \ result = new string[strings.length];` to `string[] result = new string[strings.length\
    \ - 1];` because I only want to return the last element of the array.\n<|/ c |>\n\
    <| c |>\nOh, I see. Yes, I forgot that `string[]` has `length` property. Thanks\
    \ for the reminder!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex) \n{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(!s.contains(substring, startIndex, endIndex))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex) \n{\n    string[] result = new string[strings.length];\n   \
    \ int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring,\
    \ startIndex))\n        {\n            result[i++] = s;\n        }\n    }\n  \
    \  return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex) \n{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(!s.contains(substring, startIndex, endIndex))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, ", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].contains(substring, ignoreCase: true))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase: ignoreCase, ignoreCase: ignoreCase))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !string", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring\n    \
    \        \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, allowEmpty))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool allowEmpty, bool allowEmptyString) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, allowEmpty,\
    \ allowEmptyString))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty, bool allowEmptyString,\
    \ bool allowEmptyStrings) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, allowEmpty, allowEmptyString, allowEmptyStrings))\n         \
    \   result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input ",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. I tried your solution and it works fine, but I still don't understand\
    \ why my code didn't work. Can you please explain why my code didn't work?\n<|/\
    \ c |>\n<| c |>\nThe reason why your code didn't work is that your `filter_by_substring`\
    \ function doesn't return anything (it returns `null`). So the compiler doesn't\
    \ know what to do with the return value. And since you didn't assign the return\
    \ value to anything, it just gets discarded. Your code works because you assign\
    \ the return value to `result`, so it's assigned to `result`. The compiler knows\
    \ what to do with that return value.\n<|/ c |>\n<| c |>\nOh I see. Thanks for\
    \ your explanation. I didn't know that compiler doesn't know what to do with the\
    \ return value. Now I understand why my code didn't work.\n<|/ c |>\n<| c |>\n\
    The compiler knows what to do with the return value because you assigned it to\
    \ `result`. So the compiler knows what to do with that return value.\n<|/ c |>\n\
    <| c |>\nOh I see. Thanks for your explanation. I didn't know that compiler doesn't\
    \ know what to do with the return value. Now I understand why my code didn't work.\n\
    <|/ c |>\n<| a tags=c++,arrays |>\nThe reason why your code didn't work is that\
    \ your filter_by_substring function doesn't return anything (it returns null).\
    \ So the compiler doesn't know what to do with the return value. And since you\
    \ didn't assign the return value to anything, it just gets discarded. Your code\
    \ works because you assign the return value to result, so it's assigned to result.\
    \ The compiler knows what to do with that return value.\nThe compiler knows what\
    \ to do with that return value because you assigned it to result. So the compiler\
    \ knows what to do with that return value.\nThe compiler knows what to do with\
    \ that return value because you assigned it to result. So the compiler knows what\
    \ to do with that return value.\nThe compiler knows what to do with that return\
    \ value because you assigned it to result. So the compiler knows what to do with\
    \ that return value.\nThe compiler knows what to do with that return value because\
    \ you assigned it to result. So the compiler knows what to do with that return\
    \ value.\nThe compiler knows what to do with that return value because you assigned\
    \ it to result. So ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchCaseInsensitiveCaseInsensitive)\
    \ \n{\n    ", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your answer, but I'm getting a syntax error\
    \ on the `string[] result = new string[strings.length];` line. Can you explain\
    \ why?\n<|/ c |>\n<| c |>\nI got it working by changing `string[] result = new\
    \ string[strings.length];` to `string[] result = new string[strings.length - 1];`\n\
    <|/ c |>\n<| c |>\nOops, I forgot to add the `-1` to the `string.length` call.\
    \ Fixed now.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < string", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, startIndex, endIndex))\n  \
    \      {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, startIndex, endIndex))\n  \
    \      {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex) \n{\n    string", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, int startIndex,\
    \ int endIndex) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchIgnoreCase)\
    \ \n{\n    string[] result = new ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question. He wants to filter out all strings\
    \ that don't contain `substring`.\n<|/ c |>\n<| c |>\n: I see your point. I missed\
    \ that part. I'll update my answer.\n<|/ c |>\n<| c |>\nI updated my answer to\
    \ include a solution that does exactly what he asked for.\n<|/ c |>\n<| c |>\n\
    : I updated my answer to include a solution that does exactly what he asked for.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = new string[] { \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\" };\nstring substring = \"a\";\nstring[] filteredArray =\
    \ stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = new string[]\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" };\nstring substring = \"a\";\nstring[] filteredArray\
    \ = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = new string[]\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" };\nstring substring = \"a\";\nstring[] filteredArray\
    \ = stringArray.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray = new string[]\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"", "{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring, ignoreCase) : !strings[i].contains(substring,\
    \ ignoreCase, caseSensitive))\n            result[i] = strings[i];\n    }\n  \
    \  return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring,\
    \ ignoreCase) : !strings[i].contains(substring, ignoreCase, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring, ignoreCase",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nI used your solution and it worked perfectly. Thank you very much!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\" };\nstring search = \"def\";\nstring[] result = strings.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\",\
    \ \"ghi\", \"jkl\" };\nstring search = \"def\";\nstring[] result = strings.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\",\
    \ \"ghi\", \"jkl\" };\nstring search = \"def\";\nstring[] result = strings.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\",\
    \ \"jkl\" };\nstring search = \"def\";\nstring[] result = strings.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search\
    \ = \"def\";\nstring[] result = strings.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring\
    \ search = \"def\";\nstring[] result = strings.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool case_insensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive, ignore_case))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive,\
    \ ignore_case, ignore_whitespace))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool case_insensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool ", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n\
    \    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \     {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThank you very much for your\
    \ answer! I appreciate it!\n<|/ c |>\n<| c |>\nI added a more efficient solution\
    \ that doesn't require a loop.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThank you very much for your answer! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| c |>\nThank you very much for your answer! I appreciate it!\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n\
    string search = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\n\
    string", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use\
    \ any external libraries. I edited my question to make it more clear.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that uses only built-in libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any external\
    \ libraries. I edited my question to make it more clear.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a solution that uses only built-in libraries.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, int startIndex, int endIndex)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex, endIndex) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, int startIndex, int endIndex,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring, startIndex, endIndex) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, end", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain given substring\n  \
    \          \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n  \
    \      {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring) : !s.contains(substring, ignoreCase: true))\n     \
    \   {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that do not contain given substring\n            \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring, int startIndex,\
    \ int endIndex, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring, startIndex: startIndex, endIndex: endIndex) : !s.contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex, ignoreCase: true))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex, bool caseSensitive, int limit) \n{\n    string[]\
    \ result = new ", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool allowEmpty, bool allowEmptyString) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty,\
    \ allowEmptyString))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty, bool allowEmptyString,\
    \ bool allowEmptySubstring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, allowEmpty, allowEmptyString, allowEmptySubstring))\n       \
    \     result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring", "{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nThe `Contains` method is not case sensitive, so `Contains(\"abc\"\
    )` will return `true` for `\"ABC\"`.\n<|/ c |>\n<| c |>\nI know, but I assumed\
    \ that OP wanted to match substrings case-insensitively.\n<|/ c |>\n<| c |>\n\
    Yes, I do want to match substrings case-insensitively.\n<|/ c |>\n<| c |>\nI added\
    \ a case insensitive version that uses `IndexOf` instead of `Contains`.\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. I'm going to try it out and see how it\
    \ goes. I do want to match substrings case-insensitively.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\" };\nstring search = \"abc\";\nvar result = strings.Where(s => s.IndexOf(search,\
    \ StringComparison.OrdinalIgnoreCase) >= 0);\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nThis doesn't work. `s.IndexOf(search, StringComparison.OrdinalIgnoreCase)\
    \ >= 0` returns `true` for `\"ABC\"`.\n<|/ c |>\n<| c |>\nI added a case insensitive\
    \ version that uses `IndexOf` instead of `Contains`.\n<|/ c |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\" };\nstring search = \"abc\";\nvar result = strings.Where(s => s.IndexOf(search,\
    \ StringComparison.OrdinalIgnoreCase) >= 0);\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis doesn't work. `s.IndexOf(search, StringComparison.OrdinalIgnoreCase)\
    \ >= 0` returns `true` for `\"ABC\"`.\n<|/ c |>\n<| c |>\nI added a case insensitive\
    \ version that uses `IndexOf` instead of `Contains`.\n<|/ c |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\n", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, int startIndex,\
    \ int endIndex) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `string[] strings = { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\" };\n    string substring = \"a\";\n    string[] result = filter_by_substring(strings,\
    \ substring);\n    \n    for(int i = 0; i < result.length; ++i)\n    {\n     \
    \   Console.WriteLine(result[i]);\n    }` prints `a`, `b`, `c`, `d`, `e`, `f`,\
    \ `g`, `h`, `i`, `j`, `k`, `l`, `m`, `n`, `o`, `p`, `q`, `r`, `s`, `t`, `u`, `v`,\
    \ `w`, `x`, `y`, `z`\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| a dscore=0 |>\nThe solution I came up with is as\
    \ follows:\n<code>\nsub filter_by_substring {\n    my ($strings, $substring) =;\n\
    \    my %seen;\n    my $i = 0;\n    foreach my $string ($strings) {\n        my\
    \ $found = 0;\n        foreach my $char (split //, $string) {\n            next\
    \ if $char eq $substring;\n            $found = 1;\n            last;\n      \
    \  }\n        next unless $found;\n        $seen{$i} = $string;\n        $i++;\n\
    \    }\n    return values %seen;\n}\n</code>\n<|/ a tags=raku,string |>\n<| c\
    \ |>\nThis doesn't work. `string[] ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n<| c |>\nNo problem. Glad\
    \ I could help.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring substring = \"\
    def\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\" };\nstring substring = \"def\";\nstring[] result =\
    \ strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring\
    \ substring = \"def\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks so much for the help!\n\
    <|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring substring = \"def\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\" };\nstring substring = \"def\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks so much for the help!\n\
    <|/ c |>\n<| a dscore=0 ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nI didn't downvote, but this doesn't answer the question. OP wants to filter\
    \ out all strings that don't contain `substring`, not just those that contain\
    \ it.\n<|/ c |>\n<| c |>\nI agree with you, but I thought that OP wants to filter\
    \ out all strings that don't contain `substring`, not just those that contain\
    \ it.\n<|/ c |>\n<| c |>\nI agree, but I thought that OP wants to filter out all\
    \ strings that don't contain `substring`, not just those that contain it.\n<|/\
    \ c |>\n<| c |>\nI agree, but I thought that OP wants to filter out all strings\
    \ that don't contain `substring`, not just those that contain it.\n<|/ c |>\n\
    <| c |>\nI agree, but I thought that OP wants to filter out all strings that don't\
    \ contain `substring`, not just those that contain it.\n<|/ c |>\n<| a tags=string,c#\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring substring = \"abc\"\
    ;\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"\
    \ };\nstring substring = \"abc\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c# |>\n<| a |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"\
    yz\" };\nstring substring = \"abc\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c# dscore=1 |>\n<| a tags=string,c# |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"\
    , \"stu\", \"v", "{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use LINQ as my project is using .NET 2.0. I'm looking for a solution\
    \ that doesn't require LINQ.\n<|/ c |>\n<| c |>\n: I added a solution without\
    \ LINQ. Hope it helps.\n<|/ c |>\n<| a tags=c#,string,.net,string-comparison |>\n\
    <code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\",\
    \ \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring search = \"abc\";\nvar\
    \ result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use LINQ as my project\
    \ is using .NET 2.0. I'm looking for a solution that doesn't require LINQ.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring\
    \ search = \"abc\";\nvar result = strings.Where(s => s.IndexOf(search) > -1).ToArray();\n\
    </code>\n<|/ a tags=c#,string,.net,string-comparison |>\n<| c |>\nThanks for your\
    \ answer. Unfortunately I cannot use LINQ as my project is using .NET 2.0. I'm\
    \ looking for a solution that doesn't require LINQ.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\",\
    \ \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring search = \"abc\";\nvar\
    \ result = strings.Where(s => s.IndexOf(search) > -1).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,.net,string-comparison |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately I cannot use LINQ as my project is using .NET 2.0. I'm looking\
    \ for a solution that doesn't require LINQ.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"def\", \"ghi", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_regex(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not match given regex\n            \n*/\nstring[] filter_by_not_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex and are longer\
    \ than given length\n            \n*/\nstring[] filter_by_regex_and_longer_than(string[]\
    \ strings, string regex, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex)\
    \ && strings[i].length() > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseInsensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive, partialMatchCaseInsensitiveCaseInsensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an ", "{\n    string[] result = new string[strings.length];\n    for(int i =\
    \ 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_regex(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not match given regex\n            \n*/\nstring[] filter_by_not_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_regex(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].matches(regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not match given regex\n            \n*/\nstring[] filter_by_not_regex(string[]\
    \ strings, string regex) \n{", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry but I'm a beginner at C#. Can\
    \ you please explain to me what this line is doing? `string[] result = new string[strings.length];`\n\
    <|/ c |>\n<| c |>\nIt creates an array of strings with the same length as the\
    \ input array. `string[] result = new string[strings.length];` creates an array\
    \ with the length of the input array. `result[i++] = s;` adds the string to the\
    \ result array at the position `i`. `i++` increments `i` by one and `s` becomes\
    \ the new value of the `i`th element of the result array. `result[i++] = s;` adds\
    \ the string to the result array at the position `i`. `i++` increments `i` by\
    \ one and `s` becomes the new value of the `i`th element of the result array.\
    \ `result[i++] = s;` adds the string to the result array at the position `i`.\
    \ `i++` increments `i` by one and `s` becomes the new value of the `i`th element\
    \ of the result array. `result[i++] = s;` adds the string to the result array\
    \ at the position `i`. `i++` increments `i` by one and `s` becomes the new value\
    \ of the `i`th element of the result array. `result[i++] = s;` adds the string\
    \ to the result array at the position `i`. `i++` increments `i` by one and `s`\
    \ becomes the new value of the `i`th element of the result array. `result[i++]\
    \ = s;` adds the string to the result array at the position `i`. `i++` increments\
    \ `i` by one and `s` becomes the new value of the `i`th element of the result\
    \ array. `result[i++] = s;` adds the string to the result array at the position\
    \ `i`. `i++` increments `i` by one and `s` becomes the new value of the `i`th\
    \ element of the result array. `result[i++] = s;` adds the string to the result\
    \ array at the position `i`. `i++` increments `i` by one and `s` becomes the new\
    \ value of the `i`th element of the result array. `result[i++] = s;` adds the\
    \ string to the result array at the position `i`. `i++` increments `i` by one\
    \ and ", "{\n    string[] result = new string[strings.length];\n    int i = 0;\n\
    \    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \     {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do it without using LINQ. I'm still learning C# and I haven't\
    \ learned LINQ yet, so I wanted to see if I could do it without it.\n<|/ c |>\n\
    <| c |>\nI added a solution without LINQ\n<|/ c |>\n<| c |>\nI added a solution\
    \ without LINQ\n<|/ c |>\n<| c |>\nI added a solution without LINQ\n<|/ c |>\n\
    <| a |>\n<code>\nstring[] strings = new string[] { \"one\", \"two\", \"three\"\
    , \"four\", \"five\" };\nstring substring = \"o\";\nvar result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1 tags=c#,arrays,string\
    \ |>\n<| a tags=c#,arrays,string |>\n<code>\nstring[] strings = new string[] {\
    \ \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring = \"o\"\
    ;\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,arrays,string |>\n<code>\nstring[] strings = new\
    \ string[] { \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring\
    \ = \"o\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring = \"\
    o\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new\
    \ string[] { \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring\
    \ = \"o\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\n\
    string[] strings = new string[] { \"one\", \"two", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with given substring\n\
    \            \n*/\nstring[] ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive))\n        {\n     \
    \       result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n        {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n        {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchCaseInsensitiveCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, case",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n\
    string searchString = \"a\";\nstring[] filteredArray = stringArray.Where(x =>\
    \ x.Contains(searchString)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays dscore=2\
    \ |>\n<| a |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n\
    string searchString = \"a\";\nstring[] filteredArray = stringArray.Where(x =>\
    \ x.Contains(searchString)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\" };\nstring searchString = \"a\";\nstring[] filteredArray = stringArray.Where(x\
    \ => x.Contains(searchString)).ToArray();\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray = { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\" };\nstring searchString = \"a\";\nstring[] filteredArray = stringArray.Where(x\
    \ => x.Contains(searchString)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            bool found = false;\n            for(int j = 0; j < result.length;\
    \ ++j)\n            {\n                if(result[j].contains(substring))\n   \
    \             {\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if(!found)\n                result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            bool found = false;\n            for(int j = 0; j < result.length;\
    \ ++j)\n            {\n                if(result[j].contains(substring))\n   \
    \             {\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if(!found)\n            {\n   \
    \             bool foundCaseInsensitive = false;\n                for(int j =\
    \ 0; j < result.length; ++j)\n", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer. I'm a beginner\
    \ at C# and I didn't know about LINQ. I'll look into it.\n<|/ c |>\n<| c |>\n\
    LINQ is very powerful and very easy to use. LINQ is also very easy to read and\
    \ understand. LINQ also has some nice features like deferred execution and lazy\
    \ evaluation. LINQ is also very easy to write in C#.\n<|/ c |>\n<| c |>\nLINQ\
    \ is also very easy to write in C#. LINQ is also very easy to read and understand.\
    \ LINQ also has some nice features like deferred execution and lazy evaluation.\
    \ LINQ is also very easy to write in C#.\n<|/ c |>\n<| c |>\nLINQ is also very\
    \ easy to write in C#. LINQ is also very easy to read and understand. LINQ also\
    \ has some nice features like deferred execution and lazy evaluation. LINQ is\
    \ also very easy to write in C#.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nstring[] substrings = new string[] { \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring[] result = new string[substrings.Length];",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchCaseInsensitiveCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool allowEmpty, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty, bool ignoreCase, bool\
    \ allowEmptyStrings) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, allowEmpty, ignoreCase, allowEmptyStrings))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/", "{\n \
    \   string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain given substring\n  \
    \          \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n  \
    \      {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring) : !s.contains(substring, caseSensitive))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring, partialMatch) : !s.contains(substring, caseSensitive,\
    \ partialMatch))\n        {\n            result[i++] = s;\n        }\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(!caseSensitive ? !s.contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !s.contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that do not contain given substring\n            \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring, bool caseSensi",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partial) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partial))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partial) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            if(partialMatch)\n            {\n                bool\
    \ found = false;\n                for(int j = 0; j < result.length; ++j)\n   \
    \             {\n                    if(result[j].contains(substring))\n     \
    \               {\n                        found = true;\n                   \
    \     break;\n                    }\n                }\n                if(!found)\n\
    \                    result[i] = strings[i];\n            }\n            else\n\
    \                result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n        {\n\
    \            if(partialMatch)\n            {\n                bool found = false;\n\
    \                for(int j = 0; j < result.length; ++j)\n                {\n \
    \                   if(result[j].contains(substring))\n                    {\n\
    \                        found = true;\n                        ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays,list\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any built in functions.\
    \ I should also mention that I am not allowed to use any built in libraries. I\
    \ should also mention that I am not allowed to use any built in libraries. I should\
    \ also mention that I am not allowed to use any built in libraries. I should also\
    \ mention that I am not allowed to use any built in libraries. I should also mention\
    \ that I am not allowed to use any built in libraries. I should also mention that\
    \ I am not allowed to use any built in libraries. I should also mention that I\
    \ am not allowed to use any built in libraries. I should also mention that I am\
    \ not allowed to use any built in libraries. I should also mention that I am not\
    \ allowed to use any built in libraries. I should also mention that I am not allowed\
    \ to use any built in libraries. I should also mention that I am not allowed to\
    \ use any built in libraries. I should also mention that I am not allowed to use\
    \ any built in libraries. I should also mention that I am not allowed to use any\
    \ built in libraries. I should also mention that I am not allowed to use any built\
    \ in libraries. I should also mention that I am not allowed to use any built in\
    \ libraries. I should also mention that I am not allowed to use any built in libraries.\
    \ I should also mention that I am not allowed to use any built in libraries. I\
    \ should also mention that I am not allowed to use any built in libraries. I should\
    \ also mention that I am not allowed to use any built in libraries. I should also\
    \ mention that I am not allowed to use any built in libraries. I should also mention\
    \ that I am not allowed to use any built in libraries. I should also mention that\
    \ I am not allowed to use any built in libraries. I should also mention that I\
    \ am not allowed to use any built in libraries. I should also mention that I am\
    \ not allowed to use any built in libraries. I should also mention that I am not\
    \ allowed to use any built in libraries. I should also mention that I am not allowed\
    \ to use any built in libraries. I should also mention that I am not allowed to\
    \ use any built in libraries. I should also mention that I am not allowed to use\
    \ any built in libraries. I should also mention that I am not allowed to use any\
    \ built in libraries. I should also mention that I am not allowed to use any built\
    \ in libraries. I should also mention that I am not allowed to use any built in\
    \ libraries. I should also ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase: true))\n        {\n            result[i] = strings[i];\n       \
    \ }\n    }\n    return result;\n}\n/*\n Filter an input list of strings only for\
    \ ones that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, startIndex: startIndex, endIndex:\
    \ endIndex))\n        {\n            result[i] = strings[i];\n        }\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex) : !strings[i].contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex, ignoreCase: true))\n        {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex, bool caseSensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < string", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring) ",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase))\n            result[i] = strings[i];\n    }\n  \
    \  return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive,\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex, endIndex) : !strings[i].contains(substring, startIndex, endIndex,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex, bool caseSensitive) \n{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring, startIndex,\
    \ endIndex) : !strings[i].contains(substring, startIndex, endIndex, caseSen",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work. `string[] result = new\
    \ string[strings.length];` will throw an `ArgumentOutOfRangeException` because\
    \ `strings.length` is `0`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n\
    <| c |>\nThis code doesn't work. `string[] result = new string[strings.length];`\
    \ will throw an `ArgumentOutOfRangeException` because `strings.length` is `0`.\n\
    <|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\nThis code doesn't\
    \ work. `string[] result = new string[strings.length];` will throw an `ArgumentOutOfRangeException`\
    \ because `strings.length` is `0`.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\n</code>\nThis line is wrong.\
    \ strings.length is 0, so you get an ArgumentOutOfRangeException.\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0, so you get an ArgumentOutOfRangeException.\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0, so you get an ArgumentOutOfRangeException.\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\n</code>\nThis line is wrong. strings.length is 0, so\
    \ you get an ArgumentOutOfRangeException.\n<|/ a tags=c#,string,arrays |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0, so you get an ArgumentOutOfRangeException.\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new\
    \ string[", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new string[] {\
    \ \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring[] substrings = new\
    \ string[] { \"one\", \"two\" };", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer the question. OP\
    \ wants to remove all strings that don't contain `substring`, not just those that\
    \ contain it.\n<|/ c |>\n<| c |>\nI misunderstood the question. I'll update my\
    \ answer.\n<|/ c |>\n<| c |>\nI updated my answer to reflect your comment. Thanks.\n\
    <|/ c |>\n<| c |>\nI updated my answer to reflect your comment. Thanks.\n<|/ c\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] {\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't answer the question. OP wants to remove all strings that don't contain\
    \ `substring`, not just those that contain it.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n\
    string[] result = new string[strings.Length];\nfor (int i = 0; i < strings.Length;\
    \ i++)\n{\n    if (strings[i].Contains(\"a\"))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to remove all strings that don't contain `substring`, not just those that contain\
    \ it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\" };\nstring[] result = new string[", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].contains(substring, ignoreCase: true))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase: ignoreCase, ignoreCase: ignoreCase))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !string", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase())\
    \ && !ignoreCase ? !strings[i].toLowerCase().contains(substring.toLowerCase())\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()) && !ignoreCase)\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()) && !ignoreCase\
    \ ? !strings[i].toLowerCase().contains(substring.toLowerCase()) : !strings[i].toLowerCase().contains(substring.toLowerCase())\
    \ && !ignoreCase)\n        {\n            result[i] = strings[i];\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool case_insensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool ", "{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nI added a more generic solution that should\
    \ work for any type of string\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\n\
    string[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\nstring[] result =\
    \ stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray\
    \ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\nstring[] result =\
    \ stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\",\
    \ \"d\", \"", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ this error `The method filter_by_substring(String[], String) in the type Main\
    \ is not applicable for the arguments (String[], String)`\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a full working example. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I tried your code, but I got this error `The\
    \ method filter_by_substring(String[], String) in the type Main is not applicable\
    \ for the arguments (String[], String)`\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a full working example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I tried your code, but I got this error `The method filter_by_substring(String[],\
    \ String) in the type Main is not applicable for the arguments (String[], String)`\n\
    <|/ c |>\n<| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\n\
    import java.util.Scanner;", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseInsensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive, partialMatchCaseInsensitiveCaseIn", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase))\n            result[i] = strings[i];\n    }\n  \
    \  return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive,\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThank you very much for your answer! I really appreciate it! I\
    \ really appreciate your help! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really ", "{\n    string[] result = new string[strings.length];\n    int i\
    \ = 0;\n    for (string s : strings) {\n        if (s.contains(substring)) {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, int start) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, start))\n          \
    \  result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int start, int end) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ start, end))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int start, int end, int length) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(!strings[i].contains(substring, start, end, length))\n     \
    \       result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain given substring\n  \
    \          \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int start, int end, int length, int startIndex) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, start, end, length, startIndex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int start, int end, int length, int startIndex, int endIndex) \n{\n    string[]\
    \ result = new string[strings.length];\n", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            if(partialMatch)\n            {\n                bool\
    \ found = false;\n                for(int j = 0; j < strings[i].length(); ++j)\n\
    \                {\n                    if(strings[i].charAt(j) == substring.charAt(j))\n\
    \                    {\n                        found = true;\n              \
    \          break;\n                    }\n                }\n                if(!found)\n\
    \                    result[i] = strings[i];\n            }\n            else\n\
    \                result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n        {\n\
    \            if(partialMatch)\n            {\n                bool found = false;\n\
    \                for(int j = 0; j < strings[i].length(); ++j)\n              \
    \  {\n                    if(strings[i].charAt(j) == sub", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchIgnoreCase)\
    \ \n{\n    string[] result = new string[strings.length];", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\n\
    Thanks for your answer! I didn't know about `Contains`. However, I still don't\
    \ understand why my code doesn't work. Can you please explain why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added a comment to my answer. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer! I still don't understand why my code\
    \ doesn't work. Can you please explain why my code doesn't work?\n<|/ c |>\n<|\
    \ c |>\nI added a comment to my answer. Hope it helps.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\" };\nstring substring = \"2\";\nstring[] result\
    \ = strings.Where(x => x.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer! I didn't know about `Contains`. However,\
    \ I still don't understand why my code doesn't work. Can you please explain why\
    \ my code doesn't work?\n<|/ c |>\n<| c |>\nThe code you posted doesn't work because\
    \ you didn't assign the result of the `Where` call to a variable. `Where` returns\
    \ a `IEnumerable<T>`, which you then need to convert to an array using `ToArray`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" };\nstring substring = \"\
    2\";\nstring[] result = strings.Where(x => x.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer! I didn't\
    \ know about `Contains`. However, I still don't understand why my code doesn't\
    \ work. Can you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\n\
    The code you posted doesn't work because you didn't assign the result of the `Where`\
    \ call to a variable. `Where` returns a `IEnumerable<T>`, which you then need\
    \ to convert to an array using `ToArray", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis code doesn't compile for me. `string[] result = new string[strings.length];`\
    \ gives an error `Cannot implicitly convert type 'string[]' to 'string'`\n<|/\
    \ c |>\n<| c |>\nIt compiles fine for me. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it exactly as you wrote it. I'm running it on\
    \ Visual Studio 2015.\n<|/ c |>\n<| c |>\nI see it now. `string[] result = new\
    \ string[strings.length];` should be `string[] result = new string[strings.length\
    \ - 1];`\n<|/ c |>\n<| c |>\nYes, I see it now. `string[] result = new string[strings.length];`\
    \ should be `string[] result = new string[strings.length - 1];`\n<|/ c |>\n<|\
    \ a |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings is an array of strings, so strings.length will return the\
    \ number of strings in the array. \nYou probably meant to write:\n<code>\nstring[]\
    \ result = new string[strings.length - 1];\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings is an array of strings, so strings.length\
    \ will return the number of strings in the array. You probably meant to write:\n\
    <code>\nstring[] result = new string[strings.length - 1];\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings is an array of strings, so strings.length\
    \ will return the number of strings in the array. You probably meant to write:\n\
    <code>\nstring[] result = new string[strings.length - 1];\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings is an array of strings, so strings.length\
    \ will return the number of strings in the array. You probably meant to write:\n\
    <code>\nstring[] result = new ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive))\n        {\n     \
    \       result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase))\n        {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool ignoreCase, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase))\n        {\n            result[i] =\
    \ strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain given substring\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring, bool\
    \ caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase, ignoreCase))\n        {", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string,list |>\n<| c |>\nThanks for your answer! I appreciate\
    \ it! I didn't know about `Contains`. However, I still have a question: why does\
    \ `string[] result = new string[strings.length];` work? I thought that `string[]\
    \ result = new string[strings.length];` would create a new array and copy the\
    \ contents of `strings` into it? Why does it not work if I do `string[] result\
    \ = strings;`?\n<|/ c |>\n<| c |>\nBecause strings are reference types. When you\
    \ do `string[] result = strings;` you just copy the references to the same strings.\
    \ So when you change `result[0]` you also change `strings[0]`. When you do `string[]\
    \ result = new string[strings.length];` you create a new array and copy the references\
    \ to the same strings. So when you change `result[0]` you also change `strings[0]`.\n\
    <|/ c |>\n<| c |>\nOh I see. So `string[] result = strings;` would create a new\
    \ array and copy the references to the same strings. But `string[] result = new\
    \ string[strings.length];` would create a new array and copy the references to\
    \ the same strings. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\n</code>\nThis line creates a new array\
    \ and copies the contents of strings into it. strings is just a reference to the\
    \ original array, so when you change result[0], you are changing strings[0] as\
    \ well. \n<code>\nstring[] result = strings;\n</code>\nThis line creates a new\
    \ array and copies the references to the same strings into it. strings is just\
    \ a reference to the original array, so when you change result[0], you are changing\
    \ strings[0] as well.\n<|/ a tags=arrays,c#,string,list |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\n</code>\nThis line creates\
    \ a new array and copies the contents of strings into it. strings is just a reference\
    \ to the original array, so when you change result[0], you are changing strings[0]\
    \ as well. \n<code>\nstring[] result = strings;\n</code>\nThis line creates a\
    \ new array and copies the references to the same strings into it. strings is\
    \ just a reference to the original array, so when you change result[0], you are\
    \ changing strings[0] as well.\n<|/ a tags=arrays,c", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }", "{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search\
    \ = \"you\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = { \"hello\"\
    , \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search\
    \ = \"you\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tag", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ true))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].contains(substring, ignoreCase: ignoreCase, ignoreCase: ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].contains(substring, ignore", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n    {\n        if (s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer. I'm new to C# and\
    \ I didn't know about LINQ. I'll look into it.\n<|/ c |>\n<| c |>\nI added a solution\
    \ using LINQ. Hope it helps.\n<|/ c |>\n<| c |>\nThanks again. I'll look into\
    \ LINQ. I'm still a beginner at C#.\n<|/ c |>\n<| c |>\nI added a solution using\
    \ LINQ. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.IO;",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool case_insensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive, ignore_case))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive,\
    \ ignore_case, ignore_whitespace))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, int startIndex,\
    \ int endIndex) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works fine. However I wanted to know if there is a way to do it with\
    \ LINQ. Thanks again.\n<|/ c |>\n<| c |>\nI added a LINQ solution to my answer\n\
    <|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works fine. However I wanted to know if there is a way to do it with\
    \ LINQ. Thanks again.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings =\
    \ new string[] { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"\
    , \"vwx\", \"yz\" };\nstring substring = \"abc\";\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThanks\
    \ for your answer. I tried your solution and it works fine. However I wanted to\
    \ know if there is a way to do it with LINQ. Thanks again.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring substring = \"abc\"\
    ;\nvar result = strings.Where(s => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| c |>\nThanks for your answer. I tried your solution and it works fine.\
    \ However I wanted to know if there is a way to do it with LINQ. Thanks again.\n\
    <|/ c |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring\
    \ substring = \"abc\";\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works fine. ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseInsensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive, partialMatchCaseInsensitiveCaseIn", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I like your solution, however I cannot use any external libraries. I should have\
    \ mentioned that in my original question. Sorry about that.\n<|/ c |>\n<| c |>\n\
    I added a solution without external libraries.\n<|/ c |>\n<| a tags=c#,linq |>\n\
    <code>\nvar result = strings.Where(s => s.Contains(substring));\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a dscore=2 tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(substring));\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a dscore=2 tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result\
    \ = strings.Where(s => s.Contains(substring));\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n\
    <code>\nvar result = strings.Where(s => s.Contains(substring));\n</code>\n<|/\
    \ a tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s =>\
    \ s.Contains(substring));\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n\
    <code>\nvar result = strings.Where(s => s.Contains(substring));\n</code>\n<|/\
    \ a tags=c#,linq |>\n<| a tags=c#,lin", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, but I believe it would be better to use\
    \ a `foreach` loop to avoid the extra array allocations.\n<|/ c |>\n<| c |>\n\
    I agree, I'll add that to my answer.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't use any extra arrays. I believe it would be more efficient than using\
    \ an extra array and `foreach`.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use any extra arrays. I believe it would be more efficient than using an extra\
    \ array and `foreach`.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use\
    \ any extra arrays. I believe it would be more efficient than using an extra array\
    \ and `foreach`.\n<|/ c |>\n<| a tags=string,c#,linq |>\n<code>\nvar result =\
    \ strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to return an array of\
    \ the strings that contain the substring.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to return an array of the strings that contain the substring.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to return an array\
    \ of the strings that contain the substring.\n<|/ c |>\n<| a tags=string,c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=string,c#,linq |>\n\
    <| a tags=string,c#,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=string,c#,linq |>\n<code>\nvar result =\
    \ strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=string,c#,linq |>\n<code>", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an ", "{\n    string[] result = new string[strings.length];\n    for(int i =\
    \ 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ i++)\n    {\n        if (strings[i].contains(substring))\n        {\n      \
    \      result[i] = strings[i];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThank you for helping me out. I am new\
    \ to C# and I really appreciate your help. I really appreciate your help.\n<|/\
    \ c |>\n<| c |>\nNo problem. I'm glad I could help. If you found this answer helpful,\
    \ please consider marking it as accepted by clicking the check mark next to it.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI did but since I am new it says I have to wait\
    \ 8 minutes before I can accept the answer. Thanks again for your help.\n<|/ c\
    \ |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"Hello\", \"World\", \"!\" };\nstring[] substrings\
    \ = new string[] { \"World\", \"!\" };\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substrings[i]))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThank you for helping me out. I am new to C# and I really appreciate\
    \ your help. I really appreciate your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"Hello\", \"World\", \"!\" };\nstring[] substrings\
    \ = new string[] { \"World\", \"!\" };\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substrings[i]))\n\
    \    {\n        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThank you for helping me out. I am new to C# and I really appreciate\
    \ your help. I really appreciate your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"Hello\", \"World\", \"!\" };\nstring[] substrings\
    \ = new string[] { \"World\", \"!\" };\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substrings[i]))\n\
    \    {\n        result[i] = strings[i];\n", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n           \
    \ result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex and are longer than given length\n    \
    \        \n*/\nstring[] filter_by_not_substring(string[] strings, string regex,\
    \ int length) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex)\
    \ && strings[i].length() > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ match given regex and are longer than given length\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string regex, int length) \n{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex) && strings[i].length() >\
    \ length)\n            result[i] = strings[i];\n    }", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(strings[i].contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(strings[i].contains(substring))\n        {\n       \
    \     result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    foreach(var s in strings)\n\
    \    {\n        if(s.Contains(substring))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I like your solution, however it only works if you know how many substrings there\
    \ are. Is there a way to do this without knowing the number of substrings?\n<|/\
    \ c |>\n<| c |>\n: Yes, you can use a `List<string>` instead of a `string[]` and\
    \ then use `result.AddRange(strings)` instead of `result[i++] = s`.\n<|/ c |>\n\
    <| c |>\n: I added a version that doesn't require knowing the number of substrings.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't require knowing the number\
    \ of substrings.\n<|/ c |>\n<| c |>\n: I added a version that doesn't require\
    \ knowing the number of substrings.\n<|/ c |>\n<| a tags=c#,linq |>\n<code>\n\
    var result = strings.Where(s => s.Contains(\"substring\")).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are multiple substrings\
    \ in the string. For example, if the string contains \"substring1\" and \"substring2\"\
    , only \"substring1\" will be returned.\n<|/ c |>\n<| c |>\n: Yes, it does. `Where`\
    \ will stop at the first match.\n<|/ c |>\n<| c |>\n: It does, but only if the\
    \ string contains \"substring1\". Try it with a string that contains \"substring1\"\
    \ and \"substring2\".\n<|/ c |>\n<| c |>\n: It does, but only if the string contains\
    \ \"substring1\". Try it with a string that contains \"substring1\" and \"substring2\"\
    .\n<|/ c |>\n<| c |>\n: It does, but only if the string contains \"substring1\"\
    . Try it with a string that contains \"substring1\" and \"substring2\".\n<|/ c\
    \ |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[] { \"substring1\"\
    , \"substring2\", \"substring3\" };\nvar result = strings.Where(s => s.Contains(\"\
    substring1\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if there are multiple substrings in the string. For example, if the string contains\
    \ \"substring1\" and \"substring2\", only \"substring1\" will be returned.\n<|/\
    \ c |>\n<| c |>", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
