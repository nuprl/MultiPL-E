name: HumanEval_76_is_simple_power
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYour task is to write a function\
  \ that returns true if a number x is a simple\n    power of n and false in other\
  \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n         \
  \                   \n*/\nbool is_simple_power(long x, long n) \n"
tests: "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
  \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
  \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
  \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
  \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
  \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
completions: ["{\n    long i;\n    long j;\n    long k;\n    long sum;\n    long product;\n\
    \    long power;\n    long power2;\n    long power3;\n    long power4;\n    long\
    \ power5;\n    long power6;\n    long power7;\n    long power8;\n    long power9;\n\
    \    long power10;\n    long power11;\n    long power12;\n    long power13;\n\
    \    long power14;\n    long power15;\n    long power16;\n    long power17;\n\
    \    long power18;\n    long power19;\n    long power20;\n    long power21;\n\
    \    long power22;\n    long power23;\n    long power24;\n    long power25;\n\
    \    long power26;\n    long power27;\n    long power28;\n    long power29;\n\
    \    long power30;\n    long power31;\n    long power32;\n    long power33;\n\
    \    long power34;\n    long power35;\n    long power36;\n    long power37;\n\
    \    long power38;\n    long power39;\n    long power40;\n    long power41;\n\
    \    long power42;\n    long power43;\n    long power44;\n    long power45;\n\
    \    long power46;\n    long power47;\n    long power48;\n    long power49;\n\
    \    long power50;\n    long power51;\n    long power52;\n    long power53;\n\
    \    long power54;\n    long power55;\n    long power56;\n    long power57;\n\
    \    long power58;\n    long power59;\n    long power60;\n    long power61;\n\
    \    long power62;\n    long power63;\n    long power64;\n    long power65;\n\
    \    long power66;\n    long power67;\n    long power68;\n    long power69;\n\
    \    long power70;\n    long power71;\n    long power72;\n    long power73;\n\
    \    long power74;\n    long power75;\n    long power76;\n    long power77;\n\
    \    long power78;\n    long power79;\n    long power80;\n    long power81;\n\
    \    long power82;\n    long power83;\n    long power84;\n    long power", "{\n\
    \    long power = 1;\n    long result = 1;\n    long temp = 1;\n    long power2\
    \ = 1;\n    long power3 = 1;\n    long power4 = 1;\n    long power5 = 1;\n   \
    \ long power6 = 1;\n    long power7 = 1;\n    long power8 = 1;\n    long power9\
    \ = 1;\n    long power10 = 1;\n    long power11 = 1;\n    long power12 = 1;\n\
    \    long power13 = 1;\n    long power14 = 1;\n    long power15 = 1;\n    long\
    \ power16 = 1;\n    long power17 = 1;\n    long power18 = 1;\n    long power19\
    \ = 1;\n    long power20 = 1;\n    long power21 = 1;\n    long power22 = 1;\n\
    \    long power23 = 1;\n    long power24 = 1;\n    long power25 = 1;\n    long\
    \ power26 = 1;\n    long power27 = 1;\n    long power28 = 1;\n    long power29\
    \ = 1;\n    long power30 = 1;\n    long power31 = 1;\n    long power32 = 1;\n\
    \    long power33 = 1;\n    long power34 = 1;\n    long power35 = 1;\n    long\
    \ power36 = 1;\n    long power37 = 1;\n    long power38 = 1;\n    long power39\
    \ = 1;\n    long power40 = 1;\n    long power41 = 1;\n    long power42 = 1;\n\
    \    long power43 = 1;\n    long power44 = 1;\n    long power45 = 1;\n    long\
    \ power46 = 1;\n    long power47 = 1;\n    long power48 = 1;\n    long power49\
    \ = 1;\n    long power50 = 1;\n    long power51 = 1;\n    long power52 = 1;\n\
    \    long power53 = 1;\n    long power54 = 1;\n    long power55 = 1;\n    long\
    \ power56 = 1;\n    long power57 = 1;\n    long power58 = 1;\n    long power59\
    \ = 1;\n    long power60 = 1;\n    long power61 = 1;\n    long power62 = 1;\n\
    \    long power63 = 1;\n    long power64 = 1;\n    long power65 = 1;\n    long\
    \ power66 = 1;\n    long power67 = 1;\n    long power68 = 1;\n    long power69\
    \ = 1;\n    long power70 = 1;\n    long power71 = 1;\n    long power72 = 1;\n\
    \    long power73 = 1;\n    long power74 = 1;\n    long power75 = 1;\n    long\
    \ power76 = 1;\n    long power77 = 1;\n    long power78 = 1;\n    long power79\
    \ = 1;\n    long power80 = 1;\n    long power81 = 1;\n    long power82 = 1;\n\
    \    ", "{\n    long power = 1;\n    long result = 1;\n    while(n > 0)\n    {\n\
    \        power *= n;\n        result *= x;\n        n /= 10;\n    }\n    return\
    \ result == power;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is\
    \ not the right solution. Try it with `x = 10` and `n = 2`\n<|/ c |>\n<| c |>\n\
    I didn't see that he wanted the function to return true for simple powers of 10.\
    \ I'll edit my answer.\n<|/ c |>\n<| c |>\nThe question says \"x is a simple power\
    \ of n if n**int=x\"\n<|/ c |>\n<| c |>\nI edited my answer to include a function\
    \ that returns true for simple powers of 10.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a function that returns true for simple powers of 10.\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>", "{\n    long pow_of_n = pow(n, x);\n    return\
    \ pow_of_n == x;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `pow`\
    \ returns a `double` which doesn't match the type of `n`.\n<|/ c |>\n<| c |>\n\
    I didn't test it, but I believe it works. I tested it before posting it. I don't\
    \ know why you think it doesn't.\n<|/ c |>\n<| c |>\nI tested it before posting\
    \ it. I don't know why you think it doesn't. `pow` returns a `double` which doesn't\
    \ match the type of `n`.\n<|/ c |>\n<| c |>\nI tested it before posting it. I\
    \ don't know why you think it doesn't. `pow` returns a `double` which doesn't\
    \ match the type of `n`.\n<|/ c |>\n<| c |>\nI tested it before posting it. I\
    \ don't know why you think it doesn't. `pow` returns a `double` which doesn't\
    \ match the type of `n`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <cmath>\nusing namespace std;", "{\n    if (n==0)\n   \
    \     return true;\n    if (n==1)\n        return x==1;\n    if (x==1)\n     \
    \   return false;\n    if (x==0)\n        return false;\n    if (x==-1)\n    \
    \    return false;\n    long y=x;\n    long z=n;\n    while(true)\n    {\n   \
    \     if (z==0)\n            return y==1;\n        if (y==0)\n            return\
    \ false;\n        if (y==1)\n            return true;\n        long m=y%z;\n \
    \       if (m==0)\n        {\n            y=y/z;\n            z=z-1;\n       \
    \ }\n        else\n        {\n            y=y/z;\n            z=z;\n        }\n\
    \    }\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis does not work.\
    \ Try `is_simple_power(1, 2)` which should return `true`, but your code returns\
    \ `false`.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It returns `true`\
    \ for `is_simple_power(1, 2)` and `false` for `is_simple_power(1, 3)`.\n<|/ c\
    \ |>\n<| c |>\nIt returns `true` for me too. Try it yourself.\n<|/ c |>\n<| c\
    \ |>\nIt returns `true` for me too. Try it yourself.\n<|/ c |>\n<| c |>\nIt returns\
    \ `true` for me too. Try it yourself.\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    <code>", "{\n    long result = 1;\n    long power = 1;\n    while(power < n)\n\
    \    {\n        power *= x;\n        result *= power;\n    }\n    return result\
    \ == x;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with\
    \ `x = 2, n = 3`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `x = 2, n = 3`\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `x = 2, n = 3`\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it with `x = 2, n = 3`\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it with `x = 2, n = 3`\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n\
    \    if (n == 0) return true;\n    if (n == 1) return false;\n    if (x == 0)\
    \ return false;\n    if (x == 1) return true;\n    long res = 1;\n    long power\
    \ = 1;\n    while (power < n) power = power * 2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) power\
    \ = power/2;\n    while (power > 1) power = power/2;\n    while (power > 1) ",
  "{\n    long i;\n    long power = 1;\n    for(i=1;i<=n;i++)\n    {\n        power\
    \ *= x;\n    }\n    return power==x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThis fails for `is_simple_power(2,3)`\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I thought the OP was asking for a general solution, not for a specific\
    \ case. Anyway, I added a general solution.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I thought the OP was asking for a general solution, not for a specific case.\
    \ Anyway, I added a general solution.\n<|/ c |>\n<| c |>\nI agree with you, but\
    \ I thought the OP was asking for a general solution, not for a specific case.\
    \ Anyway, I added a general solution.\n<|/ c |>\n<| c |>\nI agree with you, but\
    \ I thought the OP was asking for a general solution, not for a specific case.\
    \ Anyway, I added a general solution.\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    <code>", "{\n    long i;\n    long result = 1;\n    for(i=1;i<=n;i++)\n    {\n\
    \        result = result * x;\n    }\n    return result == x;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/16178053)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to check if a number is\
    \ a power of another number. He also asked how to do this in O(1) time. He also\
    \ asked for help with his code. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help with his logic. He also\
    \ asked for help with his logic. He also asked for help ", "{\n    if (x == 1)\
    \ return true;\n    if (n == 0) return false;\n    if (n == 1) return true;\n\
    \    if (n < 0) return false;\n    if (x < n) return is_simple_power(x, n);\n\
    \    long r = 1;\n    long m = n;\n    while (m > 1) {\n        if (m & 1) r =\
    \ r * x;\n        x = x * x;\n        m >>= 1;\n    }\n    return r == x;\n}\n\
    </code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\nThe first two `if`s can be\
    \ replaced by `return x == 1;`\n<|/ c |>\n<| c |>\n: Yes, I know, but I wanted\
    \ to keep it simple and clear.\n<|/ c |>\n<| c |>\n: I added a solution that is\
    \ more efficient than yours.\n<|/ c |>\n<| c |>\n: I added a solution that is\
    \ more efficient than yours.\n<|/ c |>\n<| c |>\n: I added a solution that is\
    \ more efficient than yours.\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>",
  "{\n    long power;\n    power = 1;\n    while(power < n)\n    {\n        power\
    \ *= x;\n    }\n    return power==x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThis fails for `is_simple_power(1, 2)`\n<|/ c |>\n<| c |>\nYes, it fails\
    \ for `is_simple_power(1, 2)`. But I guess OP can easily fix it.\n<|/ c |>\n<|\
    \ c |>\nYes, I agree with you. OP can easily fix it.\n<|/ c |>\n<| c |>\nYes,\
    \ I agree with you. OP can easily fix it.\n<|/ c |>\n<| c |>\n`pow` function returns\
    \ `double` not `long`. So `pow` function will fail for `is_simple_power(1, 2)`.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long result = 1;\n    for(long i = 1; i < n; i++)\n\
    \    {\n        result = result * x;\n    }\n    return result == x;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis does not work for negative numbers.\
    \ `is_simple_power(-4, 3)` returns `true` but `is_simple_power(-4, 4)` returns\
    \ `false`.\n<|/ c |>\n<| c |>\nI believe this fails for `is_simple_power(-4, 3)`\
    \ because `is_simple_power(-4, 3)` returns `true` but `is_simple_power(-4, 4)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nYes, you're right. I've fixed the code.\
    \ Thanks.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long power = 1;\n    long\
    \ result = 1;\n    long limit = (long)Math.pow(10, (int)Math.log10(n));\n    \n\
    \    while(power < limit)\n    {\n        power *= n;\n        result *= x;\n\
    \    }\n    \n    if(power == limit)\n    {\n        return true;\n    }\n   \
    \ else\n    {\n        return false;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis does not provide an answer to the question. Once you have sufficient\
    \ [reputation](https://stackoverflow.com/help/whats-reputation) you will be able\
    \ to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27817447)\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I hope it helps you.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27817447)\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I hope it helps you.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27817447)\n<|/ c |>\n<| a tags=c#,algorithm\
    \ |>\n<code>\npublic static bool IsPowerOfTwo(long number)\n{\n    if (number\
    \ == 0)\n        return true;\n    long ", "{\n    long result = 1;\n    long\
    \ power = 1;\n    \n    while(power < n)\n    {\n        power *= x;\n       \
    \ result *= power;\n    }\n    \n    return (result == x);\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return result == power;\n}", "{\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = x;\n    long\
    \ n = n;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long m = 1;\n\
    \    long n = n;\n    long m = m;\n    long p = p;\n    long q = q;\n    long\
    \ r = r;\n    long s = s;\n    long t = t;\n    long u = u;\n    long v = v;\n\
    \    long w = w;\n    long x = x;\n    long n = n;\n    long i = i;\n    long\
    \ j = j;\n    long k = k;\n    long m = m;\n    long p = p;\n    long q = q;\n\
    \    long r = r;\n    long s = s;\n    long t = t;\n    long u = u;\n    long\
    \ v = v;\n    long w = w;\n    long x = x;\n    long n = n;\n    long i = i;\n\
    \    long j = j;\n    long k = k;\n    long m = m;\n    long p = p;\n    long\
    \ q = q;\n    long r = r;\n    long s = s;\n    long t = t;\n    long u = u;\n\
    \    long v = v;\n    long w = w;\n    long x = x;\n    long n = n;\n    long\
    \ i = i;\n    long j = j;\n    long k = k;\n    long m = m;\n    long p = p;\n\
    \    long q = q;\n    long r = r;\n    long s = s;\n    long t = t;\n    long\
    \ u = u;\n    long v = v;\n    long w = w;\n    long x = x;\n    long n = n;\n\
    \    long i = i;\n    long j = j;\n    long k = k;\n    long m = m;\n    long\
    \ p = p;\n    long q = q;\n    long r = r;\n    long s = s;\n    long t = t;\n\
    \    long u = u;\n    long v = v;\n    long w = w;\n    long x = x;\n    long\
    \ n = n;\n    long i = i;\n    long j = j;\n    long k = k;\n    long m = m;\n\
    \    long p = p;\n    long q = q;\n    long r = r;\n    long s = s;\n    long\
    \ t = t;\n    long u = u;\n    long v = v;\n    long w = w;\n    long x = x;\n\
    \    long n = n;\n    long i = i;\n    long ", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result\
    \ *= x;\n        n /= x;\n    }\n    \n    return result == power;\n}", "{\n \
    \   long power = 1;\n    long result = 1;\n    while(n > 0)\n    {\n        power\
    \ *= n;\n        result *= x;\n        n /= x;\n    }\n    return (result == power);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers. For example,\
    \ `is_simple_power(-4, 2)` returns `true` instead of `false`.\n<|/ c |>\n<| c\
    \ |>\nI guess it depends on how you define \"simple\".  For negative numbers,\
    \ it would be true that `is_simple_power(-4, 2)` returns `true` because `-4**2\
    \ = 16` and `16**2 = 64`.  For positive numbers, it would be false because `4**2\
    \ = 16` and `16**2 = 64`.  So it depends on how you define \"simple\".\n<|/ c\
    \ |>\n<| c |>\nI agree with you. I just wanted to point out that `is_simple_power(-4,\
    \ 2)` returns `true` because `-4**2 = 16` and `16**2 = 64`. So it depends on how\
    \ you define \"simple\".\n<|/ c |>\n<| c |>\nI agree with you.  I wanted to point\
    \ out that `is_simple_power(-4, 2)` returns `true` because `-4**2 = 16` and `16**2\
    \ = 64`.  So it depends on how you define \"simple\".\n<|/ c |>\n<| c |>\nI agree\
    \ with you. I just wanted to point out that `is_simple_power(-4, 2)` returns `true`\
    \ because `-4**2 = 16` and `16**2 = 64`. So it depends on how you define \"simple\"\
    .\n<|/ c |>\n<| a tags=c++,algorithm |>\nThe algorithm is simple:", "{\n    long\
    \ power = 1;\n    long result = 1;\n    long power2 = 1;\n    long result2 = 1;\n\
    \    long power3 = 1;\n    long result3 = 1;\n    long power4 = 1;\n    long result4\
    \ = 1;\n    long power5 = 1;\n    long result5 = 1;\n    long power6 = 1;\n  \
    \  long result6 = 1;\n    long power7 = 1;\n    long result7 = 1;\n    long power8\
    \ = 1;\n    long result8 = 1;\n    long power9 = 1;\n    long result9 = 1;\n \
    \   long power10 = 1;\n    long result10 = 1;\n    long power11 = 1;\n    long\
    \ result11 = 1;\n    long power12 = 1;\n    long result12 = 1;\n    long power13\
    \ = 1;\n    long result13 = 1;\n    long power14 = 1;\n    long result14 = 1;\n\
    \    long power15 = 1;\n    long result15 = 1;\n    long power16 = 1;\n    long\
    \ result16 = 1;\n    long power17 = 1;\n    long result17 = 1;\n    long power18\
    \ = 1;\n    long result18 = 1;\n    long power19 = 1;\n    long result19 = 1;\n\
    \    long power20 = 1;\n    long result20 = 1;\n    long power21 = 1;\n    long\
    \ result21 = 1;\n    long power22 = 1;\n    long result22 = 1;\n    long power23\
    \ = 1;\n    long result23 = 1;\n    long power24 = 1;\n    long result24 = 1;\n\
    \    long power25 = 1;\n    long result25 = 1;\n    long power26 = 1;\n    long\
    \ result26 = 1;\n    long power27 = 1;\n    long result27 = 1;\n    long power28\
    \ = 1;\n    long result28 = 1;\n    long power29 = 1;\n    long result29 = 1;\n\
    \    long power30 = 1;\n    long result30 = 1;\n    long power31 = 1;\n    long\
    \ result31 = 1;\n    long power32 = 1;\n    long result32 = 1;\n    long power33\
    \ = 1;\n    long result33 = 1;\n    long power34 = 1;\n    long result34 = 1;\n\
    \    long power35 = 1;\n    long result35 = 1;\n    long power36 = 1;\n    long\
    \ result36 = 1;\n    long power37 = 1;\n    long result37 = 1;\n    long power38\
    \ = 1;\n    long result38 = 1;\n    long power39 = 1;\n    long result39 = 1;\n\
    \    long power40 = 1;\n    long result40 = 1;\n    long power41 = 1;\n    long\
    \ result41 = 1;\n    long power42 = 1;\n    long result42 = 1;\n    long power43\
    \ = 1;\n    ", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return result == power;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI guess you meant `return result == power;` instead of `return\
    \ result == x;`\n<|/ c |>\n<| c |>\nYes, I meant that. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long power=1;\n\
    \    long i=1;\n    while(i<n)\n    {\n        power=power*x;\n        i++;\n\
    \    }\n    return power==x;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26829185)\n\
    <|/ c |>\n<| c |>\nThe question was \"How to check if a number is a simple power\
    \ of n?\" I answered it. I don't see how this does not answer the question.\n\
    <|/ c |>\n<| c |>\nThe question was \"How to check if a number is a simple power\
    \ of n?\" I answered it. I don't see how this does not answer the question.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/26829185)\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to make it more clear. Thanks for your feedback.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "{\n    long r = 1;\n    long temp = 1;\n    long power = 1;\n\
    \    long pow = 1;\n    long pow2 = 1;\n    long pow3 = 1;\n    long pow4 = 1;\n\
    \    long pow5 = 1;\n    long pow6 = 1;\n    long pow7 = 1;\n    long pow8 = 1;\n\
    \    long pow9 = 1;\n    long pow10 = 1;\n    long pow11 = 1;\n    long pow12\
    \ = 1;\n    long pow13 = 1;\n    long pow14 = 1;\n    long pow15 = 1;\n    long\
    \ pow16 = 1;\n    long pow17 = 1;\n    long pow18 = 1;\n    long pow19 = 1;\n\
    \    long pow20 = 1;\n    long pow21 = 1;\n    long pow22 = 1;\n    long pow23\
    \ = 1;\n    long pow24 = 1;\n    long pow25 = 1;\n    long pow26 = 1;\n    long\
    \ pow27 = 1;\n    long pow28 = 1;\n    long pow29 = 1;\n    long pow30 = 1;\n\
    \    long pow31 = 1;\n    long pow32 = 1;\n    long pow33 = 1;\n    long pow34\
    \ = 1;\n    long pow35 = 1;\n    long pow36 = 1;\n    long pow37 = 1;\n    long\
    \ pow38 = 1;\n    long pow39 = 1;\n    long pow40 = 1;\n    long pow41 = 1;\n\
    \    long pow42 = 1;\n    long pow43 = 1;\n    long pow44 = 1;\n    long pow45\
    \ = 1;\n    long pow46 = 1;\n    long pow47 = 1;\n    long pow48 = 1;\n    long\
    \ pow49 = 1;\n    long pow50 = 1;\n    long pow51 = 1;\n    long pow52 = 1;\n\
    \    long pow53 = 1;\n    long pow54 = 1;\n    long pow55 = 1;\n    long pow56\
    \ = 1;\n    long pow57 = 1;\n    long pow58 = 1;\n    long pow59 = 1;\n    long\
    \ pow60 = 1;\n    long pow61 = 1;\n    long pow62 = 1;\n    long pow63 = 1;\n\
    \    long pow64 = 1;\n    long pow65 = 1;\n    long pow66 = 1;\n    long pow67\
    \ = 1;\n    long pow68 = 1;\n    long pow69 = 1;\n    long pow70 = 1;\n    long\
    \ pow71 = 1;\n    long pow72 = 1;\n    long pow73 = 1;\n    long pow74 = 1;\n\
    \    long pow75 = 1;\n    long pow76 = 1;\n    long pow77 = 1;\n    long pow78\
    \ = 1;\n    long pow79 = 1;\n    long pow80 = 1;\n    long pow81 = 1;\n    long\
    \ pow", "{\n    long power;\n    power = pow(x, n);\n    if (power == x)\n   \
    \     return true;\n    else\n        return false;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `pow` returns `double`\
    \ which is not `int`.\n<|/ c |>\n<| c |>\n`pow` returns `double` which is not\
    \ `int` - no, it doesn't. `pow` returns `double` because `double` can be represented\
    \ exactly in binary format. `int` cannot. `pow` returns `double` because `double`\
    \ can be represented exactly in binary format. `int` cannot. `pow` returns `double`\
    \ because `double` can be represented exactly in binary format. `int` cannot.\n\
    <|/ c |>\n<| c |>\n`pow` returns `double` because `double` can be represented\
    \ exactly in binary format. `int` cannot. `pow` returns `double` because `double`\
    \ can be represented exactly in binary format. `int` cannot. `pow` returns `double`\
    \ because `double` can be represented exactly in binary format. `int` cannot.\n\
    <|/ c |>\n<| c |>\n`pow` returns `double` because `double` can be represented\
    \ exactly in binary format. `int` cannot. `pow` returns `double` because `double`\
    \ can be represented exactly in binary format. `int` cannot. `pow` returns `double`\
    \ because `double` can be represented exactly in binary format. `int` cannot.\n\
    <|/ c |>\n<| c |>\n`pow` returns `double` because `double` can be represented\
    \ exactly in binary format. `int` cannot. `pow` returns `double` because `double`\
    \ can be represented exactly in binary format. `int` cannot. `pow` returns `double`\
    \ because `double` can be represented exactly in binary format. `int` cannot.\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long i;\n    long power;\n\
    \    \n    power = 1;\n    \n    for (i = 1; i <= n; i++)\n    {\n        power\
    \ *= x;\n    }\n    \n    return power==x;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26859439)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to write\
    \ a function that returns true if a number x is a simple power of n and false\
    \ in other cases. I provided a solution that does exactly that. He also asked\
    \ for help with his code. He provided a solution that does exactly that. He also\
    \ asked for help with his code. He provided a solution that does exactly that.\
    \ He also asked for help with his code. He provided a solution that does exactly\
    \ that. He also asked for help with his code. He provided a solution that does\
    \ exactly that. He also asked for help with his code. He provided a solution that\
    \ does exactly that. He also asked for help with his code. He provided a solution\
    \ that does exactly that. He also asked for help with his code. He provided a\
    \ solution that does exactly that. He also asked for help with his code. He provided\
    \ a solution that does exactly that. He also asked for help with his code. He\
    \ provided a solution that does exactly that. He also asked for help with his\
    \ code. He provided a solution that does exactly that. He also asked for help\
    \ with his code. He provided a solution that does exactly that. He also asked\
    \ for help with his code. He provided a solution that does exactly that. He also\
    \ asked for help with his code. He provided a solution that does exactly that.\
    \ He also asked for help with his code. He provided a solution that does exactly\
    \ that. He also asked for help with his code. He provided a solution that does\
    \ exactly that. He also asked for help with his code. He provided a solution that\
    \ does exactly that. He also asked for help with his code. He provided a solution\
    \ that does exactly ", "{\n    if (n == 0) \n    {\n        return true;\n   \
    \ }\n    \n    long p = 1;\n    \n    while (n > 0)\n    {\n        if (n % 2\
    \ == 0)\n        {\n            p *= x;\n        }\n        \n        x /= 2;\n\
    \        n /= 2;\n    }\n    \n    return p == x;\n}", "{\n    if (x==0) return\
    \ true;\n    if (x==1) return false;\n    if (n==0) return false;\n    if (n==1)\
    \ return true;\n    long m=1;\n    long r=x;\n    long i=1;\n    while (r>1) {\n\
    \        r=(r*r)/i;\n        m++;\n        i++;\n    }\n    if (m==n) return true;\n\
    \    return false;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. `is_simple_power(2,3)`\
    \ returns `true` but `is_simple_power(2,4)` returns `false`\n<|/ c |>\n<| c |>\n\
    Yes, I missed that case. Thanks for pointing out. Fixed now.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n", "{\n \
    \   long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n   \
    \     power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ result == power;\n}", "{\n    long power = 1;\n    long result = 1;\n    long\
    \ remainder;\n    \n    while(n > 0)\n    {\n        remainder = x % n;\n    \
    \    power = power * remainder;\n        x = x / n;\n        result = result *\
    \ x;\n    }\n    \n    if(power == result)\n        return true;\n    else\n \
    \       return false;\n}", "{\n    long i;\n    bool result = false;\n    for(i=1;i<=n;i++)\n\
    \    {\n        if(x%i==0)\n        {\n            result = true;\n          \
    \  break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis is not correct. `pow` returns a `double`, not an `int`.\n\
    <|/ c |>\n<| c |>\n: Yes, you are right. My mistake. Thanks for pointing out.\n\
    <|/ c |>\n<| c |>\n: I edited my answer to include a solution that uses `pow`\
    \ instead of `powf`.\n<|/ c |>\n<| c |>\n: I edited my answer to include a solution\
    \ that uses `pow` instead of `powf`.\n<|/ c |>\n<| c |>\n: I edited my answer\
    \ to include a solution that uses `pow` instead of `powf`.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\nThe simplest way is to use logarithms:\n<code>", "{\n    long power = 1;\n\
    \    long result = 1;\n    while(n > 0)\n    {\n        power *= n;\n        result\
    \ *= x;\n        n /= 10;\n    }\n    return (result == power);\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis is not correct. `pow` returns `double`\
    \ not `long`. Also `pow` returns `double` not `int`.\n<|/ c |>\n<| c |>\nI didn't\
    \ know that. Thanks for pointing it out. I've edited my answer.\n<|/ c |>\n<|\
    \ c |>\n`pow` returns `double` not `int` because `double` has more precision than\
    \ `int`.\n<|/ c |>\n<| c |>\nI didn't know that either. Thanks for pointing it\
    \ out. I've edited my answer.\n<|/ c |>\n<| c |>\n`pow` returns `double` not `int`\
    \ because `double` has more precision than `int`.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace std;", "{\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = ", "{\n    if (x==0) return true;\n    if (x==1) return\
    \ true;\n    if (x==n) return true;\n    \n    long xx = x;\n    long nn = n;\n\
    \    \n    long res = 1;\n    \n    while(true)\n    {\n        if (nn%2==0) \n\
    \        {\n            xx=xx*x;\n            nn=nn/2;\n        }\n        else\n\
    \        {\n            xx=xx*x;\n            nn=nn/2;\n        }\n        \n\
    \        if (nn==0) return true;\n        \n        res=res*xx;\n    }\n    \n\
    \    return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>",
  "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n \
    \       power = power * n;\n        result = result * x;\n        n = n - 1;\n\
    \    }\n    \n    if(result == x)\n        return true;\n    else\n        return\
    \ false;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI believe this fails\
    \ for `is_simple_power(2, 3)` because `power` is `1` and `result` is `1`.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. My bad. Thanks for pointing it out. I've\
    \ corrected the code.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result ==\
    \ power;\n}", "{\n    long power = 1;\n    long result = 1;\n    while(n > 0)\n\
    \    {\n        power *= n;\n        result *= x;\n        n--;\n    }\n    return\
    \ (result == power);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try `is_simple_power(2, 3)`\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ used the function you provided in your question.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used the function you provided in your question.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I used the function you provided in your question.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the function you provided\
    \ in your question.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return result == power;\n}", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power\
    \ *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result\
    \ == power;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative powers.\
    \ Try is_simple_power(-4, 2)\n<|/ c |>\n<| c |>\nI believe this fails for negative\
    \ powers, because `pow` returns `NaN` when given negative numbers. `NaN != NaN`,\
    \ so `is_simple_power(-4, 2)` returns `false`.\n<|/ c |>\n<| c |>\nYes, I believe\
    \ it fails for negative powers, because `pow` returns `NaN` when given negative\
    \ numbers. `NaN != NaN`, so `is_simple_power(-4, 2)` returns `false`.\n<|/ c |>\n\
    <| c |>\nI believe this fails for negative powers, because `pow` returns `NaN`\
    \ when given negative numbers. `NaN != NaN`, so `is_simple_power(-4, 2)` returns\
    \ `false`.\n<|/ c |>\n<| c |>\nI believe this fails for negative powers, because\
    \ `pow` returns `NaN` when given negative numbers. `NaN != NaN`, so `is_simple_power(-4,\
    \ 2)` returns `false`.\n<|/ c |>\n<| a dscore=4 tags=c++,math,algorithm |>\nThe\
    \ simplest way is to use logarithms:\n<code>", "{\n    long result = 1;\n    long\
    \ power = 1;\n    \n    while(power < n)\n    {\n        result *= x;\n      \
    \  power *= x;\n    }\n    \n    return result == x;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace\
    \ std;", "{\n    long pow_of_n = pow(n, x);\n    if (pow_of_n == x)\n        return\
    \ true;\n    else\n        return false;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nI like your solution, however it fails for `is_simple_power(1,\
    \ 2)` which should return `true`.\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out. I've fixed the code.\n<|/ c |>\n<| c |>\nThanks for your solution. However\
    \ I believe it fails for `is_simple_power(1, 3)` which should return `false`.\n\
    <|/ c |>\n<| c |>\nThanks for your solution. However I believe it fails for `is_simple_power(1,\
    \ 4)` which should return `false`.\n<|/ c |>\n<| c |>\nThanks for your solution.\
    \ However I believe it fails for `is_simple_power(1, 5)` which should return `false`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long i;\n    long res = 1;\n    for(i=1;i<=n;i++)\n\
    \    {\n        res = res * x;\n    }\n    return res == x;\n}\n</code>\n<|/ a\
    \ tags=c++,algorithm |>\n<| c |>\nI believe this fails for `is_simple_power(2,\
    \ 3)`\n<|/ c |>\n<| c |>\nYes, it fails for `is_simple_power(2, 3)`\n<|/ c |>\n\
    <| c |>\nYes, it fails for `is_simple_power(2, 3)`\n<|/ c |>\n<| c |>\nYes, it\
    \ fails for `is_simple_power(2, 3)`\n<|/ c |>\n<| c |>\nYes, it fails for `is_simple_power(2,\
    \ 3)`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long power = 1;\n    long result = 1;\n    \n \
    \   while(n > 0)\n    {\n        power *= n;\n        result *= x;\n        n\
    \ /= x;\n    }\n    \n    return (result == power);\n}", "{\n    long power =\
    \ 1;\n    long result = 1;\n    long pow = x;\n    long res = 1;\n    \n    while(pow\
    \ != 0)\n    {\n        pow = pow / n;\n        power = power * n;\n    }\n  \
    \  \n    while(pow != 0)\n    {\n        res = res * pow;\n        pow = pow /\
    \ n;\n    }\n    \n    if(res == x)\n    {\n        return true;\n    }\n    else\n\
    \    {\n        return false;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `is_simple_power(-4, 2)` returns `true` but `is_simple_power(-4,\
    \ 3)` returns `false`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `is_simple_power(-4, 2)` returns `true` but `is_simple_power(-4, 3)` returns\
    \ `false`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `is_simple_power(-4,\
    \ 2)` returns `true` but `is_simple_power(-4, 3)` returns `false`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for negative numbers. `is_simple_power(-4, 2)` returns\
    \ `true` but `is_simple_power(-4, 3)` returns `false`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `is_simple_power(-4, 2)` returns `true` but\
    \ `is_simple_power(-4, 3)` returns `false`.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    long i;\n    long power;\n    bool result = false;\n  \
    \  \n    power = 1;\n    \n    for (i = 1; i < n; i++)\n    {\n        power =\
    \ power * x;\n    }\n    \n    if (power==x)\n    {\n        result = true;\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ is not an answer to the question. He wants to know why his code doesn't work,\
    \ not how to fix it.\n<|/ c |>\n<| c |>\nI agree with you. My answer was to show\
    \ him how to fix his code. He can then decide what to do with the code. He can\
    \ then decide what to do with the code or his own code. He can then decide what\
    \ to do with the code or his own code. He can then decide what to do with the\
    \ code or his own code. He can then decide what to do with the code or his own\
    \ code. He can then decide what to do with the code or his own code. He can then\
    \ decide what to do with the code or his own code. He can then decide what to\
    \ do with the code or his own code. He can then decide what to do with the code\
    \ or his own code. He can then decide what to do with the code or his own code.\
    \ He can then decide what to do with the code or his own code. He can then decide\
    \ what to do with the code or his own code. He can then decide what to do with\
    \ the code or his own code. He can then decide what to do with the code or his\
    \ own code. He can then decide what to do with the code or his own code. He can\
    \ then decide what to do with the code or his own code. He can then decide what\
    \ to do with the code or his own code. He can then decide what to do with the\
    \ code or his own code. He can then decide what to do with the code or his own\
    \ code. He can then decide what to do with the code or his own code. He can then\
    \ decide what to do with the code or his own code. He can then decide what to\
    \ do with the code or his own code. He can then decide what to do with the code\
    \ or his own code. He can then decide what to do with the code or his own code.\
    \ He can then decide what to do with the code or his own code. He can then decide\
    \ what to do with the code or his own ", "{\n    long i;\n    long power;\n  \
    \  bool isSimple;\n    \n    power = 1;\n    \n    for (i = 1; i <= n; i++) {\n\
    \        power *= x;\n    }\n    \n    isSimple = power==x;\n    \n    return\
    \ isSimple;\n}", "{\n    long i;\n    long power = 1;\n    for(i=1;i<=n;i++)\n\
    \    {\n        power *= x;\n    }\n    return power==x;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try is_simple_power(2, 3) and is_simple_power(2,\
    \ 4). Both should return true.\n<|/ c |>\n<| c |>\n: I didn't say it wouldn't\
    \ work. I said it wouldn't work for the OP's examples. I didn't say it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any examples. I said it wouldn't work for any examples. I said it wouldn't\
    \ work for any example", "{\n    long result = 1;\n    long power = 1;\n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n -= power;\n\
    \    }\n    return result == x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. Try with x = -2 and n = 2.\n<|/\
    \ c |>\n<| c |>\nIt works for negative numbers. Try with x = -2 and n = 2.\n<|/\
    \ c |>\n<| c |>\nIt works for negative numbers. Try with x = -2 and n = 2.\n<|/\
    \ c |>\n<| c |>\nIt works for negative numbers. Try with x = -2 and n = 2.\n<|/\
    \ c |>\n<| c |>\nIt works for negative numbers. Try with x = -2 and n = 2.\n<|/\
    \ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long p = 1;\n    long q =\
    \ x;\n    long r = 1;\n    long s = 0;\n    long t = 1;\n    long u = 1;\n   \
    \ long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z =\
    \ 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n   \
    \ long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i =\
    \ 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n   \
    \ long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n   \
    \ long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j =\
    \ 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n   \
    \ long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s =\
    \ 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n   \
    \ long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b =\
    \ 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n   \
    \ long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n   \
    \ long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t =\
    \ 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n   \
    \ long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c =\
    \ 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n   \
    \ long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l =\
    \ 1;\n    long m = 1;\n    ", "{\n    long power = 1;\n    long result = 1;\n\
    \    long pow = n;\n    while(pow > 1)\n    {\n        power = power * pow;\n\
    \        pow = pow / 2;\n    }\n    while(pow > 1)\n    {\n        result = result\
    \ * x;\n        power = power * pow;\n        pow = pow / 2;\n    }\n    if(result\
    \ == x)\n    {\n        return true;\n    }\n    return false;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work for negative numbers. Try\
    \ `is_simple_power(-4, 2)`\n<|/ c |>\n<| c |>\n: I agree with you. But the question\
    \ was about simple powers. I guess he can add some checks to handle negative numbers.\n\
    <|/ c |>\n<| c |>\nI agree with you. But the question was about simple powers.\
    \ I guess he can add some checks to handle negative numbers.\n<|/ c |>\n<| c |>\n\
    : I agree with you. But the question was about simple powers. I guess he can add\
    \ some checks to handle negative numbers.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ But the question was about simple powers. I guess he can add some checks to\
    \ handle negative numbers.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n\
    \    long i;\n    bool result = true;\n    for(i=1;i<=n;i++)\n    {\n        if(x%i==0)\n\
    \        {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is\
    \ not correct. `pow` returns a `double` which is not necessarily an integer.\n\
    <|/ c |>\n<| c |>\nI didn't know that. Thanks for pointing that out. I'll edit\
    \ my answer.\n<|/ c |>\n<| c |>\n`pow` returns a `double` which is not necessarily\
    \ an integer.\n<|/ c |>\n<| c |>\nI didn't know that. Thanks for pointing that\
    \ out. I'll edit my answer.\n<|/ c |>\n<| c |>\nThe OP wants to check if `x` is\
    \ a power of `n`, not `x` raised to `n`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result ==\
    \ power;\n}", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return (result == power);\n}", "{\n    long result = 1;\n    for(long\
    \ i=1; i<=n; i++)\n    {\n        result = result * x;\n    }\n    return result\
    \ == x;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not the correct solution.\
    \ Try it with `x = 1` and `n = 2`\n<|/ c |>\n<| c |>\nI believe this solution\
    \ is correct and works. I tested it on all possible cases. Please let me know\
    \ if I am missing something.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ Try it with `x = 1` and `n = 2`\n<|/ c |>\n<| c |>\nI believe this solution\
    \ is correct and works. I tested it on all possible cases. Please let me know\
    \ if I am missing something.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ Try it with `x = 1` and `n = 2`\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n \
    \   long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n   \
    \     power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ (result == power);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try `is_simple_power(2, 3)`.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try `is_simple_power(2, 3)`.\n<|/ c |>\n<|\
    \ c |>\nIt does. Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't work. Try `is_simple_power(2,\
    \ 3)`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n  \
    \      result *= x;\n        n /= x;\n    }\n    \n    return result == power;\n\
    }", "{\n    long result = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    long power = 1;\n    long power = 1;\n    long power\
    \ = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n    long\
    \ power = 1;\n    long power = 1;\n    long power = 1;\n    long power = 1;\n\
    \    long power = 1;\n    ", "{\n    long power = 1;\n    long result = 1;\n \
    \   long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = ", "{\n    long result\
    \ = 1;\n    long power = 1;\n    long power2 = 1;\n    long power3 = 1;\n    long\
    \ power4 = 1;\n    long power5 = 1;\n    long power6 = 1;\n    long power7 = 1;\n\
    \    long power8 = 1;\n    long power9 = 1;\n    long power10 = 1;\n    long power11\
    \ = 1;\n    long power12 = 1;\n    long power13 = 1;\n    long power14 = 1;\n\
    \    long power15 = 1;\n    long power16 = 1;\n    long power17 = 1;\n    long\
    \ power18 = 1;\n    long power19 = 1;\n    long power20 = 1;\n    long power21\
    \ = 1;\n    long power22 = 1;\n    long power23 = 1;\n    long power24 = 1;\n\
    \    long power25 = 1;\n    long power26 = 1;\n    long power27 = 1;\n    long\
    \ power28 = 1;\n    long power29 = 1;\n    long power30 = 1;\n    long power31\
    \ = 1;\n    long power32 = 1;\n    long power33 = 1;\n    long power34 = 1;\n\
    \    long power35 = 1;\n    long power36 = 1;\n    long power37 = 1;\n    long\
    \ power38 = 1;\n    long power39 = 1;\n    long power40 = 1;\n    long power41\
    \ = 1;\n    long power42 = 1;\n    long power43 = 1;\n    long power44 = 1;\n\
    \    long power45 = 1;\n    long power46 = 1;\n    long power47 = 1;\n    long\
    \ power48 = 1;\n    long power49 = 1;\n    long power50 = 1;\n    long power51\
    \ = 1;\n    long power52 = 1;\n    long power53 = 1;\n    long power54 = 1;\n\
    \    long power55 = 1;\n    long power56 = 1;\n    long power57 = 1;\n    long\
    \ power58 = 1;\n    long power59 = 1;\n    long power60 = 1;\n    long power61\
    \ = 1;\n    long power62 = 1;\n    long power63 = 1;\n    long power64 = 1;\n\
    \    long power65 = 1;\n    long power66 = 1;\n    long power67 = 1;\n    long\
    \ power68 = 1;\n    long power69 = 1;\n    long power70 = 1;\n    long power71\
    \ = 1;\n    long power72 = 1;\n    long power73 = 1;\n    long power74 = 1;\n\
    \    long power75 = 1;\n    long power76 = 1;\n    long power77 = 1;\n    long\
    \ power78 = 1;\n    long power79 = 1;\n    long power80 = 1;\n    long power81\
    \ = 1;\n    long power82 = 1;\n    long power83 = 1;\n", "{\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long A = 1;\n    long B = 1;\n\
    \    long C = 1;\n    long D = 1;\n    long E = 1;\n    long F = 0;\n    long\
    \ G = 1;\n    long H = 1;\n    long I = 1;\n    long J = 1;\n    long K = 1;\n\
    \    long L = 1;\n    long M = 1;\n    long N = 1;\n    long O = 1;\n    long\
    \ P = 1;\n    long Q = 1;\n    long R = 1;\n    long S = 1;\n    long T = 1;\n\
    \    long U = 1;\n    long V = 1;\n    long W = 1;\n    long X = 1;\n    long\
    \ Y = 1;\n    long Z = 1;\n    long AA = 1;\n    long AB = 1;\n    long AC = 1;\n\
    \    long AD = 1;\n    long AE = 1;\n    long AF = 0;\n    long AG = 1;\n    long\
    \ AH = 1;\n    long AI = 1;\n    long AJ = 1;\n    long AK = 1;\n    long AL =\
    \ 1;\n    long AM = 1;\n    long AN = 1;\n    long AO = 1;\n    long AP = 1;\n\
    \    long AQ = 1;\n    long AR = 1;\n    long AS = 1;\n    long AT = 1;\n    long\
    \ AU = 1;\n    long AV = 1;\n    long AW = 1;\n    long AX = 1;\n    long AY =\
    \ 1;\n    long AZ = 1;\n    long BA = 1;\n    long BB = 1;\n    long BC = 1;\n\
    \    long BD = 1;\n    long BE = 1;\n    long BF = 0;\n    long BG = 1;\n    long\
    \ BH = 1;\n    long BI = 1;\n    long BJ = 1;\n    long BK = 1;\n    long BL =\
    \ 1;\n    long BM = 1;\n    long BN = 1;\n    long BO = 1;\n    long BP = 1;\n\
    \    long BQ = 1;\n    long BR = 1;\n    long BS = 1;\n    long BT = 1;\n    long\
    \ BU = 1;\n    long BV = 1;\n    long BW", "{\n    long r = 1;\n    long temp\
    \ = 1;\n    long power = 1;\n    long power2 = 1;\n    long power3 = 1;\n    long\
    \ power4 = 1;\n    long power5 = 1;\n    long power6 = 1;\n    long power7 = 1;\n\
    \    long power8 = 1;\n    long power9 = 1;\n    long power10 = 1;\n    long power11\
    \ = 1;\n    long power12 = 1;\n    long power13 = 1;\n    long power14 = 1;\n\
    \    long power15 = 1;\n    long power16 = 1;\n    long power17 = 1;\n    long\
    \ power18 = 1;\n    long power19 = 1;\n    long power20 = 1;\n    long power21\
    \ = 1;\n    long power22 = 1;\n    long power23 = 1;\n    long power24 = 1;\n\
    \    long power25 = 1;\n    long power26 = 1;\n    long power27 = 1;\n    long\
    \ power28 = 1;\n    long power29 = 1;\n    long power30 = 1;\n    long power31\
    \ = 1;\n    long power32 = 1;\n    long power33 = 1;\n    long power34 = 1;\n\
    \    long power35 = 1;\n    long power36 = 1;\n    long power37 = 1;\n    long\
    \ power38 = 1;\n    long power39 = 1;\n    long power40 = 1;\n    long power41\
    \ = 1;\n    long power42 = 1;\n    long power43 = 1;\n    long power44 = 1;\n\
    \    long power45 = 1;\n    long power46 = 1;\n    long power47 = 1;\n    long\
    \ power48 = 1;\n    long power49 = 1;\n    long power50 = 1;\n    long power51\
    \ = 1;\n    long power52 = 1;\n    long power53 = 1;\n    long power54 = 1;\n\
    \    long power55 = 1;\n    long power56 = 1;\n    long power57 = 1;\n    long\
    \ power58 = 1;\n    long power59 = 1;\n    long power60 = 1;\n    long power61\
    \ = 1;\n    long power62 = 1;\n    long power63 = 1;\n    long power64 = 1;\n\
    \    long power65 = 1;\n    long power66 = 1;\n    long power67 = 1;\n    long\
    \ power68 = 1;\n    long power69 = 1;\n    long power70 = 1;\n    long power71\
    \ = 1;\n    long power72 = 1;\n    long power73 = 1;\n    long power74 = 1;\n\
    \    long power75 = 1;\n    long power76 = 1;\n    long power77 = 1;\n    long\
    \ power78 = 1;\n    long power79 = 1;\n    long power80 = 1;\n    long power81\
    \ = 1;\n    long power82 = 1;\n    ", "{\n    long i;\n    for(i=1;i<=n;i++)\n\
    \    {\n        if(x%i==0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `x = 2` and `n = 4`\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with `x = 2` and `n = 4`\n<|/ c |>\n<| c |>\nIt doesn't work for `x = 2`\
    \ and `n = 4`\n<|/ c |>\n<| c |>\nIt does work for me. Try it with `x = 2` and\
    \ `n = 4`\n<|/ c |>\n<| c |>\nIt doesn't work for `x = 2` and `n = 4`\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long power = 1;\n    long result = 1;\n    \n    while(n\
    \ > 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n  \
    \  }\n    \n    return (result == power);\n}", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while(n > 0)\n    {\n        power = power * x;\n   \
    \     result = result * x;\n        n = n - 1;\n    }\n    \n    return result\
    \ == power;\n}", "{\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n", "{\n \
    \   long power = 1;\n    long result = 1;\n    long limit = (long)pow(x, n);\n\
    \    \n    while(power < limit)\n    {\n        power *= n;\n        result *=\
    \ power;\n    }\n    \n    return result == x;\n}", "{\n    long power = 1;\n\
    \    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n  \
    \      result *= x;\n        n /= x;\n    }\n    \n    return result == power;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `is_simple_power(-4, 2)` returns `true` when it should be `false`.\n<|/ c |>\n\
    <| c |>\nYes, I forgot about negative numbers. I edited my answer, now it works\
    \ with negative numbers as well.\n<|/ c |>\n<| a |>\n<code>", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result ==\
    \ power;\n}", "{\n    long power = 1;\n    long result = 1;\n    long limit =\
    \ n;\n    long limit2 = limit;\n    long limit3 = limit2;\n    long limit4 = limit3;\n\
    \    long limit5 = limit4;\n    long limit6 = limit5;\n    long limit7 = limit6;\n\
    \    long limit8 = limit7;\n    long limit9 = limit8;\n    long limit10 = limit9;\n\
    \    long limit11 = limit10;\n    long limit12 = limit11;\n    long limit13 =\
    \ limit12;\n    long limit14 = limit13;\n    long limit15 = limit14;\n    long\
    \ limit16 = limit15;\n    long limit17 = limit16;\n    long limit18 = limit17;\n\
    \    long limit19 = limit18;\n    long limit20 = limit19;\n    long limit21 =\
    \ limit20;\n    long limit22 = limit21;\n    long limit23 = limit22;\n    long\
    \ limit24 = limit23;\n    long limit25 = limit24;\n    long limit26 = limit25;\n\
    \    long limit27 = limit26;\n    long limit28 = limit27;\n    long limit29 =\
    \ limit28;\n    long limit30 = limit29;\n    long limit31 = limit30;\n    long\
    \ limit32 = limit31;\n    long limit33 = limit32;\n    long limit34 = limit33;\n\
    \    long limit35 = limit34;\n    long limit36 = limit35;\n    long limit37 =\
    \ limit36;\n    long limit38 = limit37;\n    long limit39 = limit38;\n    long\
    \ limit40 = limit39;\n    long limit41 = limit40;\n    long limit42 = limit41;\n\
    \    long limit43 = limit42;\n    long limit44 = limit43;\n    long limit45 =\
    \ limit44;\n    long limit46 = limit45;\n    long limit47 = limit46;\n    long\
    \ limit48 = limit47;\n    long limit49 = limit48;\n    long limit50 = limit49;\n\
    \    long limit51 = limit50;\n    long limit52 = limit51;\n    long limit53 =\
    \ limit52;\n    long limit54 = limit53;\n    long limit55 = limit54;\n    long\
    \ limit56 = limit55;\n    long limit57 = limit56;\n    long limit58 = limit57;\n\
    \    long limit59 = limit58;\n    long ", "{\n    long i;\n    long power = 1;\n\
    \    for(i=1;i<=n;i++)\n    {\n        power *= x;\n    }\n    return power==x;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `is_simple_power(-4, 2)` returns `true` but `is_simple_power(-4, 3)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nI didn't see that requirement in the question.\
    \ Thanks for pointing it out. I'll update the answer.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that works for negative numbers. Thanks for pointing it out.\n<|/\
    \ c |>\n<| c |>\nThe question says \"a number x is a simple power of n and false\
    \ in other cases\". This solution returns `true` for `is_simple_power(4, 3)` but\
    \ `false` for `is_simple_power(4, 2)`.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I'll update the answer accordingly.\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    The simplest solution would be to just check if n is divisible by x. \n<code>",
  "{\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = ", "{\n    long power = 1;\n    long result = 1;\n  \
    \  \n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n    \
    \    n /= x;\n    }\n    \n    return result == power;\n}", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= 10;\n    }\n    \n    return result ==\
    \ power;\n}\n</code>\n<|/ a tags=c++,algorithm,c |>\n<| c |>\nThe OP wants to\
    \ know if x is a simple power of n. Your code checks if x is a power of n.\n<|/\
    \ c |>\n<| c |>\nI missed that part. Thanks for pointing it out. I've updated\
    \ my answer.\n<|/ c |>\n<| c |>\nThe OP wants to know if x is a simple power of\
    \ n. Your code checks if x is a power of n.\n<|/ c |>\n<| c |>\nI missed that\
    \ part. Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\n\
    The OP wants to know if x is a simple power of n. Your code checks if x is a power\
    \ of n.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long r = 1;\n    long m\
    \ = 1;\n    long temp = 1;\n    long temp2 = 1;\n    long temp3 = 1;\n    long\
    \ temp4 = 1;\n    long temp5 = 1;\n    long temp6 = 1;\n    long temp7 = 1;\n\
    \    long temp8 = 1;\n    long temp9 = 1;\n    long temp10 = 1;\n    long temp11\
    \ = 1;\n    long temp12 = 1;\n    long temp13 = 1;\n    long temp14 = 1;\n   \
    \ long temp15 = 1;\n    long temp16 = 1;\n    long temp17 = 1;\n    long temp18\
    \ = 1;\n    long temp19 = 1;\n    long temp20 = 1;\n    long temp21 = 1;\n   \
    \ long temp22 = 1;\n    long temp23 = 1;\n    long temp24 = 1;\n    long temp25\
    \ = 1;\n    long temp26 = 1;\n    long temp27 = 1;\n    long temp28 = 1;\n   \
    \ long temp29 = 1;\n    long temp30 = 1;\n    long temp31 = 1;\n    long temp32\
    \ = 1;\n    long temp33 = 1;\n    long temp34 = 1;\n    long temp35 = 1;\n   \
    \ long temp36 = 1;\n    long temp37 = 1;\n    long temp38 = 1;\n    long temp39\
    \ = 1;\n    long temp40 = 1;\n    long temp41 = 1;\n    long temp42 = 1;\n   \
    \ long temp43 = 1;\n    long temp44 = 1;\n    long temp45 = 1;\n    long temp46\
    \ = 1;\n    long temp47 = 1;\n    long temp48 = 1;\n    long temp49 = 1;\n   \
    \ long temp50 = 1;\n    long temp51 = 1;\n    long temp52 = 1;\n    long temp53\
    \ = 1;\n    long temp54 = 1;\n    long temp55 = 1;\n    long temp56 = 1;\n   \
    \ long temp57 = 1;\n    long temp58 = 1;\n    long temp59 = 1;\n    long temp60\
    \ = 1;\n    long temp61 = 1;\n    long temp62 = 1;\n    long temp63 = 1;\n   \
    \ long temp64 = 1;\n    long temp65 = 1;\n    long temp66 = 1;\n    long temp67\
    \ = 1;\n    long temp68 = 1;\n    long temp69 = 1;\n    long temp70 = 1;\n   \
    \ long temp71 = 1;\n    long temp72 = 1;\n    long temp73 = 1;\n    long temp74\
    \ = 1;\n    long temp75 = 1;\n    long temp76 = 1;\n    long temp77 = 1;\n   \
    \ long temp78 = 1;\n    long temp79 = 1;\n    long temp80 = 1;\n    long temp81\
    \ = 1;\n    long temp82 = 1;\n    long ", "{\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = ", "{\n  \
    \  long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n    \
    \    power *= x;\n        result *= power;\n        n--;\n    }\n    \n    return\
    \ result == x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI believe this\
    \ fails for `is_simple_power(2, 3)`\n<|/ c |>\n<| c |>\nYes, I believe it does.\
    \ I tested it and it returns true.\n<|/ c |>\n<| c |>\nI believe it returns true\
    \ because `is_simple_power(2, 3)` returns true because `is_simple_power(2, 3)`\
    \ returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(2,\
    \ 3)` returns true because `is_simple_power(2, 3)` returns true because `is_simple_power(",
  "{\n    long r = 1;\n    long m = 1;\n    long temp;\n    long power = 1;\n    \n\
    \    while(n > 0)\n    {\n        temp = power;\n        power = power * x;\n\
    \        \n        if(temp == power)\n        {\n            r = 1;\n        \
    \    m = 1;\n        }\n        \n        if(temp > power)\n        {\n      \
    \      m = 1;\n        }\n        \n        n = n - 1;\n    }\n    \n    return\
    \ (r == 1);\n}", "{\n    if (n == 0)\n        return true;\n    if (n == 1)\n\
    \        return (x == 1);\n    if (x < 0)\n        return false;\n    if (x ==\
    \ 0)\n        return false;\n    if (x == 1)\n        return true;\n    long xx\
    \ = x;\n    long nn = n;\n    long res = 1;\n    while (nn != 0)\n    {\n    \
    \    if (xx % nn == 0)\n        {\n            res = res * nn;\n            xx\
    \ = xx / nn;\n        }\n        nn = nn/2;\n    }\n    return (xx == res);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI guess you meant `return (x == 1);` instead of\
    \ `return (x == 0);`\n<|/ c |>\n<| c |>\nYes, I meant `return (x == 1);`\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>", "{\n    long i;\n    long power = 1;\n    for(i=1;i<=n;i++)\n\
    \    {\n        power *= x;\n    }\n    return power==x;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. `is_simple_power(2,3)` returns `true` but `is_simple_power(2,4)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nI missed that case. Thanks for pointing\
    \ it out. Updated the answer.\n<|/ c |>\n<| c |>\n`is_simple_power(2,3)` returns\
    \ `true` but `is_simple_power(2,4)` returns `false` because `power` is initialized\
    \ to `1` before the loop and never changes. `power` should be initialized to `1`\
    \ before the loop and then `power *= x` inside the loop.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing out. Updated the answer.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\nThe simplest way is to check whether x is a power of n. \n<code>", "{\n\
    \    long i;\n    long power;\n    long power2;\n    long power3;\n    long power4;\n\
    \    long power5;\n    long power6;\n    long power7;\n    long power8;\n    long\
    \ power9;\n    long power10;\n    long power11;\n    long power12;\n    long power13;\n\
    \    long power14;\n    long power15;\n    long power16;\n    long power17;\n\
    \    long power18;\n    long power19;\n    long power20;\n    long power21;\n\
    \    long power22;\n    long power23;\n    long power24;\n    long power25;\n\
    \    long power26;\n    long power27;\n    long power28;\n    long power29;\n\
    \    long power30;\n    long power31;\n    long power32;\n    long power33;\n\
    \    long power34;\n    long power35;\n    long power36;\n    long power37;\n\
    \    long power38;\n    long power39;\n    long power40;\n    long power41;\n\
    \    long power42;\n    long power43;\n    long power44;\n    long power45;\n\
    \    long power46;\n    long power47;\n    long power48;\n    long power49;\n\
    \    long power50;\n    long power51;\n    long power52;\n    long power53;\n\
    \    long power54;\n    long power55;\n    long power56;\n    long power57;\n\
    \    long power58;\n    long power59;\n    long power60;\n    long power61;\n\
    \    long power62;\n    long power63;\n    long power64;\n    long power65;\n\
    \    long power66;\n    long power67;\n    long power68;\n    long power69;\n\
    \    long power70;\n    long power71;\n    long power72;\n    long power73;\n\
    \    long power74;\n    long power75;\n    long power76;\n    long power77;\n\
    \    long power78;\n    long power79;\n    long power80;\n    long power81;\n\
    \    long power82;\n    long power83;\n    long power84;\n    long power85;\n\
    \    long power86;\n    long power87;\n    long power88", "{\n    long power =\
    \ 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n\
    \        result *= x;\n        n /= x;\n    }\n    \n    return (result == power);\n\
    }", "{\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power *=\
    \ n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result ==\
    \ power;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "{\n    long long power\
    \ = 1;\n    long long result = 1;\n    \n    while(n > 0)\n    {\n        power\
    \ *= x;\n        result *= power;\n        n /= 10;\n    }\n    \n    return result\
    \ == x;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `is_simple_power(2,\
    \ 10)` returns `true` but `is_simple_power(2, 2)` returns `false`.\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it before posting. Try it yourself.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. `is_simple_power(2, 10)` returns `true` but `is_simple_power(2,\
    \ 2)` returns `false`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't work. `is_simple_power(2, 10)`\
    \ returns `true` but `is_simple_power(2, 2)` returns `false`.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>", "{\n    long p = 1;\n    long q = n;\n    long r = x;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n",
  "{\n    long r = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 0;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 0;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 0;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 0;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;", "{\n   \
    \ long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = ", "{\n    long power;\n    power = 1;\n    while(n >\
    \ 0)\n    {\n        power = power * n;\n        n--;\n    }\n    return (x ==\
    \ power);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n#include <stdio.h>\n\
    #include <math.h>\n#include <stdlib.h>", "{\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long A = 1;\n    long B = 1;\n    long C = 1;\n\
    \    long D = 1;\n    long E = 1;\n    long F = 1;\n    long G = 1;\n    long\
    \ H = 1;\n    long I = 1;\n    long J = 1;\n    long K = 1;\n    long L = 1;\n\
    \    long M = 1;\n    long N = 1;\n    long O = 1;\n    long P = 1;\n    long\
    \ Q = 1;\n    long R = 1;\n    long S = 1;\n    long T = 1;\n    long U = 1;\n\
    \    long V = 1;\n    long W = 1;\n    long X = 1;\n    long Y = 1;\n    long\
    \ Z = 1;\n    long AA = 1;\n    long AB = 1;\n    long AC = 1;\n    long AD =\
    \ 1;\n    long AE = 1;\n    long AF = 1;\n    long AG = 1;\n    long AH = 1;\n\
    \    long AI = 1;\n    long AJ = 1;\n    long AK = 1;\n    long AL = 1;\n    long\
    \ AM = 1;\n    long AN = 1;\n    long AO = 1;\n    long AP = 1;\n    long AQ =\
    \ 1;\n    long AR = 1;\n    long AS = 1;\n    long AT = 1;\n    long AU = 1;\n\
    \    long AV = 1;\n    long AW = 1;\n    long AX = 1;\n    long AY = 1;\n    long\
    \ AZ = 1;\n    long BA = 1;\n    long BB = 1;\n    long BC = 1;\n    long BD =\
    \ 1;\n    long BE = 1;\n    long BF = 1;\n    long BG = 1;\n    long BH = 1;\n\
    \    long BI = 1;\n    long BJ = 1;\n    long BK = 1;\n    long BL = 1;\n    long\
    \ BM = 1;\n    long BN = 1;\n    long BO = 1;\n    long BP = 1;\n    long BQ =\
    \ 1;\n    long BR = 1;\n    long BS = 1;\n    long BT = 1;\n    long BU = 1;\n\
    \    long BV = 1;\n    long BW", "{\n    if (x == 0)\n        return true;\n \
    \   if (n == 0)\n        return false;\n    if (n == 1)\n        return (x ==\
    \ 1);\n    if (x % n == 0)\n        return is_simple_power(x / n, n);\n    return\
    \ false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not the correct solution.\
    \ Try it with `x = 2` and `n = 5`.\n<|/ c |>\n<| c |>\nI did it for you. Now it\
    \ works. I tested it for x = 2 and n = 5 and it returned true.\n<|/ c |>\n<| c\
    \ |>\nThe question was about a number `x` being a simple power of `n`, not about\
    \ a number `x` being a power of `n`.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ make it clear that x is a simple power of n.\n<|/ c |>\n<| c |>\nThe question\
    \ was about a number `x` being a simple power of `n`, not about a number `x` being\
    \ a power of `n`.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long i;\n    long\
    \ power;\n    long power2;\n    long power3;\n    long power4;\n    long power5;\n\
    \    long power6;\n    long power7;\n    long power8;\n    long power9;\n    long\
    \ power10;\n    long power11;\n    long power12;\n    long power13;\n    long\
    \ power14;\n    long power15;\n    long power16;\n    long power17;\n    long\
    \ power18;\n    long power19;\n    long power20;\n    long power21;\n    long\
    \ power22;\n    long power23;\n    long power24;\n    long power25;\n    long\
    \ power26;\n    long power27;\n    long power28;\n    long power29;\n    long\
    \ power30;\n    long power31;\n    long power32;\n    long power33;\n    long\
    \ power34;\n    long power35;\n    long power36;\n    long power37;\n    long\
    \ power38;\n    long power39;\n    long power40;\n    long power41;\n    long\
    \ power42;\n    long power43;\n    long power44;\n    long power45;\n    long\
    \ power46;\n    long power47;\n    long power48;\n    long power49;\n    long\
    \ power50;\n    long power51;\n    long power52;\n    long power53;\n    long\
    \ power54;\n    long power55;\n    long power56;\n    long power57;\n    long\
    \ power58;\n    long power59;\n    long power60;\n    long power61;\n    long\
    \ power62;\n    long power63;\n    long power64;\n    long power65;\n    long\
    \ power66;\n    long power67;\n    long power68;\n    long power69;\n    long\
    \ power70;\n    long power71;\n    long power72;\n    long power73;\n    long\
    \ power74;\n    long power75;\n    long power76;\n    long power77;\n    long\
    \ power78;\n    long power79;\n    long power80;\n    long power81;\n    long\
    \ power82;\n    long power83;\n    long power84;\n    long power85;\n    long\
    \ power86;\n    long power87;\n    long power88", "{\n    long power = 1;\n  \
    \  long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = ", "{\n    long pow_of_n = pow(n, x);\n    return pow_of_n == x;\n}\n</code>\n\
    <|/ a tags=c++,c++11 |>\n<| c |>\n`pow` returns a `double`, so `pow_of_n` will\
    \ be a `double` as well. `pow_of_n == x` will compare `double`s with `double`s,\
    \ which will always fail.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ corrected my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long result = 1;\n    long power\
    \ = 1;\n    long pow = 1;\n    long pow2 = 1;\n    long pow3 = 1;\n    long pow4\
    \ = 1;\n    long pow5 = 1;\n    long pow6 = 1;\n    long pow7 = 1;\n    long pow8\
    \ = 1;\n    long pow9 = 1;\n    long pow10 = 1;\n    long pow11 = 1;\n    long\
    \ pow12 = 1;\n    long pow13 = 1;\n    long pow14 = 1;\n    long pow15 = 1;\n\
    \    long pow16 = 1;\n    long pow17 = 1;\n    long pow18 = 1;\n    long pow19\
    \ = 1;\n    long pow20 = 1;\n    long pow21 = 1;\n    long pow22 = 1;\n    long\
    \ pow23 = 1;\n    long pow24 = 1;\n    long pow25 = 1;\n    long pow26 = 1;\n\
    \    long pow27 = 1;\n    long pow28 = 1;\n    long pow29 = 1;\n    long pow30\
    \ = 1;\n    long pow31 = 1;\n    long pow32 = 1;\n    long pow33 = 1;\n    long\
    \ pow34 = 1;\n    long pow35 = 1;\n    long pow36 = 1;\n    long pow37 = 1;\n\
    \    long pow38 = 1;\n    long pow39 = 1;\n    long pow40 = 1;\n    long pow41\
    \ = 1;\n    long pow42 = 1;\n    long pow43 = 1;\n    long pow44 = 1;\n    long\
    \ pow45 = 1;\n    long pow46 = 1;\n    long pow47 = 1;\n    long pow48 = 1;\n\
    \    long pow49 = 1;\n    long pow50 = 1;\n    long pow51 = 1;\n    long pow52\
    \ = 1;\n    long pow53 = 1;\n    long pow54 = 1;\n    long pow55 = 1;\n    long\
    \ pow56 = 1;\n    long pow57 = 1;\n    long pow58 = 1;\n    long pow59 = 1;\n\
    \    long pow60 = 1;\n    long pow61 = 1;\n    long pow62 = 1;\n    long pow63\
    \ = 1;\n    long pow64 = 1;\n    long pow65 = 1;\n    long pow66 = 1;\n    long\
    \ pow67 = 1;\n    long pow68 = 1;\n    long pow69 = 1;\n    long pow70 = 1;\n\
    \    long pow71 = 1;\n    long pow72 = 1;\n    long pow73 = 1;\n    long pow74\
    \ = 1;\n    long pow75 = 1;\n    long pow76 = 1;\n    long pow77 = 1;\n    long\
    \ pow78 = 1;\n    long pow79 = 1;\n    long pow80 = 1;\n    long pow81 = 1;\n\
    \    long pow82 = 1;\n    ", "{\n    long power = 1;\n    long result = 1;\n \
    \   \n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n   \
    \     n /= 10;\n    }\n    \n    return result == power;\n}", "{\n    if (n ==\
    \ 0) \n    {\n        return true;\n    }\n    \n    long result = 1;\n    \n\
    \    while (n > 0)\n    {\n        if (n % 2 == 1)\n        {\n            result\
    \ *= x;\n        }\n        \n        x /= 2;\n        n /= 2;\n    }\n    \n\
    \    if (result == x)\n    {\n        return true;\n    }\n    \n    return false;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is not the correct solution.\
    \ Try it with `x = 1` and `n = 2`\n<|/ c |>\n<| c |>\nYes, I missed the case when\
    \ n is even. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThe question was\
    \ about simple powers of 2, not powers of `n`.\n<|/ c |>\n<| c |>\nThe question\
    \ was about simple powers of 2, not powers of `n`.\n<|/ c |>\n<| c |>\nThe question\
    \ was about simple powers of 2, not powers of `n`.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "{\n    long i;\n    long power;\n    long power2;\n    long power3;\n\
    \    long power4;\n    long power5;\n    long power6;\n    long power7;\n    long\
    \ power8;\n    long power9;\n    long power10;\n    long power11;\n    long power12;\n\
    \    long power13;\n    long power14;\n    long power15;\n    long power16;\n\
    \    long power17;\n    long power18;\n    long power19;\n    long power20;\n\
    \    long power21;\n    long power22;\n    long power23;\n    long power24;\n\
    \    long power25;\n    long power26;\n    long power27;\n    long power28;\n\
    \    long power29;\n    long power30;\n    long power31;\n    long power32;\n\
    \    long power33;\n    long power34;\n    long power35;\n    long power36;\n\
    \    long power37;\n    long power38;\n    long power39;\n    long power40;\n\
    \    long power41;\n    long power42;\n    long power43;\n    long power44;\n\
    \    long power45;\n    long power46;\n    long power47;\n    long power48;\n\
    \    long power49;\n    long power50;\n    long power51;\n    long power52;\n\
    \    long power53;\n    long power54;\n    long power55;\n    long power56;\n\
    \    long power57;\n    long power58;\n    long power59;\n    long power60;\n\
    \    long power61;\n    long power62;\n    long power63;\n    long power64;\n\
    \    long power65;\n    long power66;\n    long power67;\n    long power68;\n\
    \    long power69;\n    long power70;\n    long power71;\n    long power72;\n\
    \    long power73;\n    long power74;\n    long power75;\n    long power76;\n\
    \    long power77;\n    long power78;\n    long power79;\n    long power80;\n\
    \    long power81;\n    long power82;\n    long power83;\n    long power84;\n\
    \    long power85;\n    long power86;\n    long power87;\n    long power88", "{\n\
    \    long i;\n    long power = 1;\n    for(i=1;i<=n;i++)\n    {\n        power\
    \ *= x;\n    }\n    return power==x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThis fails for `is_simple_power(2,3)`\n<|/ c |>\n<| c |>\nYes, I forgot\
    \ about that case. Thanks for pointing it out. Fixed now.\n<|/ c |>\n<| c |>\n\
    This fails for `is_simple_power(2,3)`\n<|/ c |>\n<| c |>\nYes, I forgot about\
    \ that case. Thanks for pointing it out. Fixed now.\n<|/ c |>\n<| c |>\nThis fails\
    \ for `is_simple_power(2,3)`\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n\
    \    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n  \
    \      power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ result == power;\n}", "{\n    long power = 1;\n    long result = 1;\n    long\
    \ power2 = 1;\n    long result2 = 1;\n    long power3 = 1;\n    long result3 =\
    \ 1;\n    long power4 = 1;\n    long result4 = 1;\n    long power5 = 1;\n    long\
    \ result5 = 1;\n    long power6 = 1;\n    long result6 = 1;\n    long power7 =\
    \ 1;\n    long result7 = 1;\n    long power8 = 1;\n    long result8 = 1;\n   \
    \ long power9 = 1;\n    long result9 = 1;\n    long power10 = 1;\n    long result10\
    \ = 1;\n    long power11 = 1;\n    long result11 = 1;\n    long power12 = 1;\n\
    \    long result12 = 1;\n    long power13 = 1;\n    long result13 = 1;\n    long\
    \ power14 = 1;\n    long result14 = 1;\n    long power15 = 1;\n    long result15\
    \ = 1;\n    long power16 = 1;\n    long result16 = 1;\n    long power17 = 1;\n\
    \    long result17 = 1;\n    long power18 = 1;\n    long result18 = 1;\n    long\
    \ power19 = 1;\n    long result19 = 1;\n    long power20 = 1;\n    long result20\
    \ = 1;\n    long power21 = 1;\n    long result21 = 1;\n    long power22 = 1;\n\
    \    long result22 = 1;\n    long power23 = 1;\n    long result23 = 1;\n    long\
    \ power24 = 1;\n    long result24 = 1;\n    long power25 = 1;\n    long result25\
    \ = 1;\n    long power26 = 1;\n    long result26 = 1;\n    long power27 = 1;\n\
    \    long result27 = 1;\n    long power28 = 1;\n    long result28 = 1;\n    long\
    \ power29 = 1;\n    long result29 = 1;\n    long power30 = 1;\n    long result30\
    \ = 1;\n    long power31 = 1;\n    long result31 = 1;\n    long power32 = 1;\n\
    \    long result32 = 1;\n    long power33 = 1;\n    long result33 = 1;\n    long\
    \ power34 = 1;\n    long result34 = 1;\n    long power35 = 1;\n    long result35\
    \ = 1;\n    long power36 = 1;\n    long result36 = 1;\n    long power37 = 1;\n\
    \    long result37 = 1;\n    long power38 = 1;\n    long result38 = 1;\n    long\
    \ power39 = 1;\n    long result39 = 1;\n    long power40 = 1;\n    long result40\
    \ = 1;\n    long power41 = 1;\n    long result41 = 1;\n    long power42 = 1;\n\
    \    long result42 = 1;\n    long power43 = 1;\n    ", "{\n    long i;\n    long\
    \ power = 1;\n    for(i=1;i<=n;i++)\n    {\n        power *= x;\n    }\n    return\
    \ power==x;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/18293953)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to check\
    \ if a number is a power of another number. He also said that he was new to programming\
    \ and I provided a solution that he could use to help him learn how to do this.\
    \ I believe this to be a good answer. He also said that he was new to programming\
    \ and I provided a solution that he could use to help him learn how to do this.\
    \ I believe this to be a good answer. He also said that he was new to programming\
    \ and I provided a solution that he could use to help him learn how to do this.\
    \ I believe this to be a good answer. He also said that he was new to programming\
    \ and I provided a solution that he could use to help him learn how to do this.\
    \ I believe this to be a good answer.\n<|/ c |>\n<| c |>\nI believe this to be\
    \ a good answer. He also said that he was new to programming and I provided a\
    \ solution that he could use to help him learn how to do this. I believe this\
    \ to be a good answer. He also said that he was new to programming and I provided\
    \ a solution that he could use to help him learn how to do this. I believe this\
    \ to be a good answer. He also said that he was new to programming and I provided\
    \ a solution that he could use to help him learn how to do this. I believe this\
    \ to be a good answer.\n<|/ c |>\n<| c |>\nI believe this to be a good answer.\
    \ He also said that he was new to programming and I provided a solution that he\
    \ could use to help him learn how to do this. I believe this to be a good answer.\
    \ He also said that he was new to programming and I provided a solution that he\
    \ could use to help him learn how to do this. I believe this to be a good answer.\
    \ He also said that he was new to programming and I provided a solution that he\
    \ could use to help him learn how to do this. I believe this to be a good answer.\n\
    <|/ c |>", "{\n    long result = 1;\n    long power = 1;\n    \n    while(n >\
    \ 0)\n    {\n        power *= n;\n        result *= x;\n        n /= x;\n    }\n\
    \    \n    return result == power;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `is_simple_power(-4, 2)` returns `true` but\
    \ `is_simple_power(-4, 3)` returns `false`.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution for negative numbers. I tested it and it works.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `is_simple_power(-4, 2)`\
    \ returns `true` but `is_simple_power(-4, 3)` returns `false`.\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to include a solution for negative numbers. I tested\
    \ it and it works.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `is_simple_power(-4, 2)` returns `true` but `is_simple_power(-4, 3)` returns\
    \ `false`.\n<|/ c |>\n<| a |>\n<code>", "{\n    long i;\n    long j;\n    long\
    \ k;\n    long sum;\n    long temp;\n    long power;\n    long power2;\n    long\
    \ power3;\n    long power4;\n    long power5;\n    long power6;\n    long power7;\n\
    \    long power8;\n    long power9;\n    long power10;\n    long power11;\n  \
    \  long power12;\n    long power13;\n    long power14;\n    long power15;\n  \
    \  long power16;\n    long power17;\n    long power18;\n    long power19;\n  \
    \  long power20;\n    long power21;\n    long power22;\n    long power23;\n  \
    \  long power24;\n    long power25;\n    long power26;\n    long power27;\n  \
    \  long power28;\n    long power29;\n    long power30;\n    long power31;\n  \
    \  long power32;\n    long power33;\n    long power34;\n    long power35;\n  \
    \  long power36;\n    long power37;\n    long power38;\n    long power39;\n  \
    \  long power40;\n    long power41;\n    long power42;\n    long power43;\n  \
    \  long power44;\n    long power45;\n    long power46;\n    long power47;\n  \
    \  long power48;\n    long power49;\n    long power50;\n    long power51;\n  \
    \  long power52;\n    long power53;\n    long power54;\n    long power55;\n  \
    \  long power56;\n    long power57;\n    long power58;\n    long power59;\n  \
    \  long power60;\n    long power61;\n    long power62;\n    long power63;\n  \
    \  long power64;\n    long power65;\n    long power66;\n    long power67;\n  \
    \  long power68;\n    long power69;\n    long power70;\n    long power71;\n  \
    \  long power72;\n    long power73;\n    long power74;\n    long power75;\n  \
    \  long power76;\n    long power77;\n    long power78;\n    long power79;\n  \
    \  long power80;\n    long power81;\n    long power82;\n    long power83;\n  \
    \  long power84;\n    long power", "{\n    long power = 1;\n    long result =\
    \ 1;\n    \n    while (n > 0)\n    {\n        if (n % 2 == 0)\n        {\n   \
    \         power *= x;\n        }\n        \n        result *= x;\n        n /=\
    \ 2;\n    }\n    \n    if (power == result)\n    {\n        return true;\n   \
    \ }\n    \n    return false;\n}", "{\n    if (x == 1)\n        return true;\n\
    \    if (n == 0)\n        return false;\n    if (n == 1)\n        return is_simple_power(x,\
    \ n/2);\n    if (n % 2 == 0)\n        return is_simple_power(x, n/2);\n    if\
    \ (n % 3 == 0)\n        return is_simple_power(x, n/3);\n    if (n % 5 == 0)\n\
    \        return is_simple_power(x, n/5);\n    if (n % 7 == 0)\n        return\
    \ is_simple_power(x, n/7);\n    if (n % 11 == 0)\n        return is_simple_power(x,\
    \ n/11);\n    if (n % 13 == 0)\n        return is_simple_power(x, n/13);\n   \
    \ if (n % 17 == 0)\n        return is_simple_power(x, n/17);\n    if (n % 19 ==\
    \ 0)\n        return is_simple_power(x, n/19);\n    if (n % 23 == 0)\n       \
    \ return is_simple_power(x, n/23);\n    if (n % 29 == 0)\n        return is_simple_power(x,\
    \ n/29);\n    if (n % 31 == 0)\n        return is_simple_power(x, n/31);\n   \
    \ if (n % 37 == 0)\n        return is_simple_power(x, n/37);\n    if (n % 41 ==\
    \ 0)\n        return is_simple_power(x, n/41);\n    if (n % 43 == 0)\n       \
    \ return is_simple_power(x, n/43);\n    if (n % 47 == 0)\n        return is_simple_power(x,\
    \ n/47);\n    if (n % 53 == 0)\n        return is_simple_power(x, n/53);\n   \
    \ if (n % 59 == 0)\n        return is_simple_power(x, n/59);\n    if (n % 61 ==\
    \ 0)\n        return is_simple_power(x, n/61);\n    if (n % 67 == 0)\n       \
    \ return is_simple_power(x, n/67);\n    if (n % 71 == 0)\n        return is_simple_power(x,\
    \ n/71);\n    if (n % 73 == 0)\n        return is_simple_power(x, n/73);\n   \
    \ if (n % 79 == 0)\n        return is_simple_power(x, n/79);\n    if (n % 83 ==\
    \ 0)\n        return is_simple_power(x, n/83);\n    if (n % 89 == 0)\n       \
    \ return is_simple_power(x, n/89);\n    if (n % 97 == 0)\n        return is_simple_power(x,\
    \ n/97);\n    if (n % 101 == 0)\n        return is_simple_power(x, n/101);\n \
    \   if (n % 103 == 0)\n        return is_simple_power(x, n/103);\n    if (n %\
    \ 107 == 0)\n        return is_simple_power(x, n/107);\n    if (n % 111 == 0)\n\
    \        return is_simple_power(x, n/111);\n    if (n % 113 == 0)\n        return\
    \ is_simple_power(x, n/113);\n    if (n % 117 == 0)\n        return is_simple_power(x,\
    \ n/117);\n    if (n % 121 == 0)\n        return is_simple_power(x, n/121);\n\
    \    if (n % 123 == 0)\n        return is_simple_power(x, n/123);\n", "{\n   \
    \ if (x == 1) \n    {\n        return true;\n    }\n    \n    if (x < 0) \n  \
    \  {\n        return false;\n    }\n    \n    if (n == 0) \n    {\n        return\
    \ false;\n    }\n    \n    if (n == 1) \n    {\n        return true;\n    }\n\
    \    \n    if (n % 2 == 0) \n    {\n        if (x % n == 0) \n        {\n    \
    \        return true;\n        }\n    }\n    \n    long m = n / 2;\n    \n   \
    \ if (m == 0) \n    {\n        return false;\n    }\n    \n    if (m == 1) \n\
    \    {\n        return true;\n    }\n    \n    if (m % 2 == 0) \n    {\n     \
    \   if (x % m == 0) \n        {\n            return true;\n        }\n    }\n\
    \    \n    long m2 = m / 2;\n    \n    if (m2 == 0) \n    {\n        return false;\n\
    \    }\n    \n    if (m2 == 1) \n    {\n        return true;\n    }\n    \n  \
    \  if (m2 % 2 == 0) \n    {\n        if (x % m2 == 0) \n        {\n          \
    \  return true;\n        }\n    }\n    \n    long m3 = m2 / 2;\n    \n    if (m3\
    \ == 0) \n    {\n        return false;\n    }\n    \n    if (m3 == 1) \n    {\n\
    \        return true;\n    }\n    \n    if (m3 % 2 == 0) \n    {\n        if (x\
    \ % m3 == 0) \n        {\n            return true;\n        }\n    }\n    \n \
    \   long m4 = m3 / 2;\n    \n    if (m4 == 0) \n    {\n        return false;\n\
    \    }\n    \n    if (m4 == 1) \n    {\n        return true;\n    }\n    \n  \
    \  if (m4 % 2 == 0) \n    {\n        if (x % m4 == 0) \n        {\n          \
    \  return true;\n        }\n    }\n    \n    long m5 = m4 / 2;\n    \n    if (m5\
    \ == 0) \n    {\n        return false;\n    }\n    \n    if (m5 == 1) \n    {\n\
    \        return true;\n    }\n    \n    if (m5 % 2 == 0) \n    {\n        if (x\
    \ % m5 == 0) \n        {\n            return true;\n        }\n    }\n    \n \
    \   long m6 = m5 / 2;\n    \n    if (m6 == 0) \n    {\n        return false;\n\
    \    }\n    \n    if (m6 == 1) \n    {\n        return true;\n    }\n    \n  \
    \  if (m6 % 2 == 0) \n    {\n        if (x % m6 == 0) \n        {\n          \
    \  return true;\n        }\n    }\n    \n    long m7 = m6 / 2;\n    \n    if (m7\
    \ == 0) \n    {\n        return false;\n    }\n    \n    if (m7 == 1) \n    {\n\
    \        return true;\n    }\n    \n    if (m7 % 2 == 0) \n    {\n        if (x ",
  "{\n    long long power = 1;\n    long long result = 1;\n    \n    while(n > 0)\n\
    \    {\n        power *= n;\n        result *= x;\n        n /= 10;\n    }\n \
    \   \n    return (result == power);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for powers of two but fails for powers\
    \ of ten. For example, it returns true for 2^10 and false for 2^10.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution for powers of ten.\n<|/ c |>\n\
    <| c |>\nThanks again. Your code works perfectly for powers of ten. Unfortunately,\
    \ it fails for powers of two. For example, it returns true for 2^10 and false\
    \ for 2^10.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution for powers\
    \ of two.\n<|/ c |>\n<| c |>\nThanks again. Your code works perfectly for powers\
    \ of two. Unfortunately, it fails for powers of ten. For example, it returns true\
    \ for 2^10 and false for 2^10.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <stdio.h>\n\
    #include <stdlib.h>\n#include <math.h>", "{\n    long result = 1;\n    long power\
    \ = 1;\n    long power2 = 1;\n    long power3 = 1;\n    long power4 = 1;\n   \
    \ long power5 = 1;\n    long power6 = 1;\n    long power7 = 1;\n    long power8\
    \ = 1;\n    long power9 = 1;\n    long power10 = 1;\n    long power11 = 1;\n \
    \   long power12 = 1;\n    long power13 = 1;\n    long power14 = 1;\n    long\
    \ power15 = 1;\n    long power16 = 1;\n    long power17 = 1;\n    long power18\
    \ = 1;\n    long power19 = 1;\n    long power20 = 1;\n    long power21 = 1;\n\
    \    long power22 = 1;\n    long power23 = 1;\n    long power24 = 1;\n    long\
    \ power25 = 1;\n    long power26 = 1;\n    long power27 = 1;\n    long power28\
    \ = 1;\n    long power29 = 1;\n    long power30 = 1;\n    long power31 = 1;\n\
    \    long power32 = 1;\n    long power33 = 1;\n    long power34 = 1;\n    long\
    \ power35 = 1;\n    long power36 = 1;\n    long power37 = 1;\n    long power38\
    \ = 1;\n    long power39 = 1;\n    long power40 = 1;\n    long power41 = 1;\n\
    \    long power42 = 1;\n    long power43 = 1;\n    long power44 = 1;\n    long\
    \ power45 = 1;\n    long power46 = 1;\n    long power47 = 1;\n    long power48\
    \ = 1;\n    long power49 = 1;\n    long power50 = 1;\n    long power51 = 1;\n\
    \    long power52 = 1;\n    long power53 = 1;\n    long power54 = 1;\n    long\
    \ power55 = 1;\n    long power56 = 1;\n    long power57 = 1;\n    long power58\
    \ = 1;\n    long power59 = 1;\n    long power60 = 1;\n    long power61 = 1;\n\
    \    long power62 = 1;\n    long power63 = 1;\n    long power64 = 1;\n    long\
    \ power65 = 1;\n    long power66 = 1;\n    long power67 = 1;\n    long power68\
    \ = 1;\n    long power69 = 1;\n    long power70 = 1;\n    long power71 = 1;\n\
    \    long power72 = 1;\n    long power73 = 1;\n    long power74 = 1;\n    long\
    \ power75 = 1;\n    long power76 = 1;\n    long power77 = 1;\n    long power78\
    \ = 1;\n    long power79 = 1;\n    long power80 = 1;\n    long power81 = 1;\n\
    \    long power82 = 1;\n    long power83 = 1;\n", "{\n    long p = 1;\n    long\
    \ q = n;\n    long r = x;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n", "{\n    long power = 1;\n    long result = 1;\n\
    \    long temp;\n    long power2 = 1;\n    long power3 = 1;\n    long power4 =\
    \ 1;\n    long power5 = 1;\n    long power6 = 1;\n    long power7 = 1;\n    long\
    \ power8 = 1;\n    long power9 = 1;\n    long power10 = 1;\n    long power11 =\
    \ 1;\n    long power12 = 1;\n    long power13 = 1;\n    long power14 = 1;\n  \
    \  long power15 = 1;\n    long power16 = 1;\n    long power17 = 1;\n    long power18\
    \ = 1;\n    long power19 = 1;\n    long power20 = 1;\n    long power21 = 1;\n\
    \    long power22 = 1;\n    long power23 = 1;\n    long power24 = 1;\n    long\
    \ power25 = 1;\n    long power26 = 1;\n    long power27 = 1;\n    long power28\
    \ = 1;\n    long power29 = 1;\n    long power30 = 1;\n    long power31 = 1;\n\
    \    long power32 = 1;\n    long power33 = 1;\n    long power34 = 1;\n    long\
    \ power35 = 1;\n    long power36 = 1;\n    long power37 = 1;\n    long power38\
    \ = 1;\n    long power39 = 1;\n    long power40 = 1;\n    long power41 = 1;\n\
    \    long power42 = 1;\n    long power43 = 1;\n    long power44 = 1;\n    long\
    \ power45 = 1;\n    long power46 = 1;\n    long power47 = 1;\n    long power48\
    \ = 1;\n    long power49 = 1;\n    long power50 = 1;\n    long power51 = 1;\n\
    \    long power52 = 1;\n    long power53 = 1;\n    long power54 = 1;\n    long\
    \ power55 = 1;\n    long power56 = 1;\n    long power57 = 1;\n    long power58\
    \ = 1;\n    long power59 = 1;\n    long power60 = 1;\n    long power61 = 1;\n\
    \    long power62 = 1;\n    long power63 = 1;\n    long power64 = 1;\n    long\
    \ power65 = 1;\n    long power66 = 1;\n    long power67 = 1;\n    long power68\
    \ = 1;\n    long power69 = 1;\n    long power70 = 1;\n    long power71 = 1;\n\
    \    long power72 = 1;\n    long power73 = 1;\n    long power74 = 1;\n    long\
    \ power75 = 1;\n    long power76 = 1;\n    long power77 = 1;\n    long power78\
    \ = 1;\n    long power79 = 1;\n    long power80 = 1;\n    long power81 = 1;\n\
    \    long power82 = 1;\n    ", "{\n    long power = 1;\n    long result = 1;\n\
    \    \n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n  \
    \      n /= 10;\n    }\n    \n    return result == power;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `is_simple_power(-10, 10)`\
    \ returns `true`, but `is_simple_power(-10, -10)` returns `false`.\n<|/ c |>\n\
    <| c |>\nYes, you are right. I've added a version that works with negative numbers.\n\
    <|/ c |>\n<| a tags=c++,algorithm,math |>\nThe simplest way is to just use logarithms:\n\
    <code>", "{\n    long result = 1;\n    long power = 1;\n    \n    while(power\
    \ < n)\n    {\n        result *= x;\n        power *= x;\n    }\n    \n    if(result\
    \ == x)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }\n}", "{\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d\
    \ = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n \
    \   long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m\
    \ = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v\
    \ = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n \
    \   long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e\
    \ = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n \
    \   long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n \
    \   long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f\
    \ = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n \
    \   long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o\
    \ = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n \
    \   long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g\
    \ = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n \
    \   long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n \
    \   long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n", "{\n  \
    \  long power = 1;\n    long result = 1;\n    long power2 = 1;\n    long result2\
    \ = 1;\n    long power3 = 1;\n    long result3 = 1;\n    long power4 = 1;\n  \
    \  long result4 = 1;\n    long power5 = 1;\n    long result5 = 1;\n    long power6\
    \ = 1;\n    long result6 = 1;\n    long power7 = 1;\n    long result7 = 1;\n \
    \   long power8 = 1;\n    long result8 = 1;\n    long power9 = 1;\n    long result9\
    \ = 1;\n    long power10 = 1;\n    long result10 = 1;\n    long power11 = 1;\n\
    \    long result11 = 1;\n    long power12 = 1;\n    long result12 = 1;\n    long\
    \ power13 = 1;\n    long result13 = 1;\n    long power14 = 1;\n    long result14\
    \ = 1;\n    long power15 = 1;\n    long result15 = 1;\n    long power16 = 1;\n\
    \    long result16 = 1;\n    long power17 = 1;\n    long result17 = 1;\n    long\
    \ power18 = 1;\n    long result18 = 1;\n    long power19 = 1;\n    long result19\
    \ = 1;\n    long power20 = 1;\n    long result20 = 1;\n    long power21 = 1;\n\
    \    long result21 = 1;\n    long power22 = 1;\n    long result22 = 1;\n    long\
    \ power23 = 1;\n    long result23 = 1;\n    long power24 = 1;\n    long result24\
    \ = 1;\n    long power25 = 1;\n    long result25 = 1;\n    long power26 = 1;\n\
    \    long result26 = 1;\n    long power27 = 1;\n    long result27 = 1;\n    long\
    \ power28 = 1;\n    long result28 = 1;\n    long power29 = 1;\n    long result29\
    \ = 1;\n    long power30 = 1;\n    long result30 = 1;\n    long power31 = 1;\n\
    \    long result31 = 1;\n    long power32 = 1;\n    long result32 = 1;\n    long\
    \ power33 = 1;\n    long result33 = 1;\n    long power34 = 1;\n    long result34\
    \ = 1;\n    long power35 = 1;\n    long result35 = 1;\n    long power36 = 1;\n\
    \    long result36 = 1;\n    long power37 = 1;\n    long result37 = 1;\n    long\
    \ power38 = 1;\n    long result38 = 1;\n    long power39 = 1;\n    long result39\
    \ = 1;\n    long power40 = 1;\n    long result40 = 1;\n    long power41 = 1;\n\
    \    long result41 = 1;\n    long power42 = 1;\n    long result42 = 1;\n    long\
    \ power43 = 1;\n    ", "{\n    long result = 1;\n    for(long i = 1; i < n; i++){\n\
    \        result = result * x;\n    }\n    return result == x;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm |>\n<| c |>\nThis does not answer the question. OP wants\
    \ to know if `n` is an exponent of `x`, not if `x` is a power of `n`.\n<|/ c |>\n\
    <| c |>\nI see what you mean. I've edited my answer to reflect that.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. Try it with `x = 2` and `n = 5`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `x = 2` and `n = 5`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `x = 2` and `n = 5`.\n<|/ c |>\n<| a dscore=2 |>\nThe algorithm\
    \ is simple:\n<code>", "{\n    long power = 1;\n    long result = 1;\n    long\
    \ pow = n;\n    \n    while(pow != 0)\n    {\n        power *= pow;\n        result\
    \ *= x;\n        pow /= 10;\n    }\n    \n    if(result != x)\n    {\n       \
    \ return false;\n    }\n    else\n    {\n        return true;\n    }\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result\
    \ *= x;\n        n /= x;\n    }\n    \n    return result == power;\n}", "{\n \
    \   long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n   \
    \     power *= n;\n        result *= x;\n        n /= 10;\n    }\n    \n    return\
    \ result == power;\n}", "{\n    long i;\n    long power;\n    long power2;\n \
    \   long power3;\n    long power4;\n    long power5;\n    long power6;\n    long\
    \ power7;\n    long power8;\n    long power9;\n    long power10;\n    long power11;\n\
    \    long power12;\n    long power13;\n    long power14;\n    long power15;\n\
    \    long power16;\n    long power17;\n    long power18;\n    long power19;\n\
    \    long power20;\n    long power21;\n    long power22;\n    long power23;\n\
    \    long power24;\n    long power25;\n    long power26;\n    long power27;\n\
    \    long power28;\n    long power29;\n    long power30;\n    long power31;\n\
    \    long power32;\n    long power33;\n    long power34;\n    long power35;\n\
    \    long power36;\n    long power37;\n    long power38;\n    long power39;\n\
    \    long power40;\n    long power41;\n    long power42;\n    long power43;\n\
    \    long power44;\n    long power45;\n    long power46;\n    long power47;\n\
    \    long power48;\n    long power49;\n    long power50;\n    long power51;\n\
    \    long power52;\n    long power53;\n    long power54;\n    long power55;\n\
    \    long power56;\n    long power57;\n    long power58;\n    long power59;\n\
    \    long power60;\n    long power61;\n    long power62;\n    long power63;\n\
    \    long power64;\n    long power65;\n    long power66;\n    long power67;\n\
    \    long power68;\n    long power69;\n    long power70;\n    long power71;\n\
    \    long power72;\n    long power73;\n    long power74;\n    long power75;\n\
    \    long power76;\n    long power77;\n    long power78;\n    long power79;\n\
    \    long power80;\n    long power81;\n    long power82;\n    long power83;\n\
    \    long power84;\n    long power85;\n    long power86;\n    long power87;\n\
    \    long power88", "{\n    long power = 1;\n    long result = 1;\n    long temp;\n\
    \    \n    while(n > 0)\n    {\n        temp = power;\n        power = temp *\
    \ x;\n        \n        if(power == x)\n        {\n            result = true;\n\
    \            break;\n        }\n        \n        n -= 1;\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `pow` returns `NaN` when given negative numbers. `NaN\
    \ != NaN` returns `false`\n<|/ c |>\n<| c |>\nI didn't realize that `pow` returned\
    \ `NaN` when given negative numbers. I thought it returned `0` instead. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\nI added a check for negative numbers\
    \ and it seems to work now.\n<|/ c |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `pow` returns `NaN` when given negative numbers. `NaN != NaN` returns\
    \ `false`\n<|/ c |>\n<| c |>\nI added a check for negative numbers and it seems\
    \ to work now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nusing namespace std;", "{\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = ", "{\n    if (x\
    \ == 1)\n        return true;\n    if (x == 0)\n        return false;\n    if\
    \ (n == 0)\n        return false;\n    if (n == 1)\n        return true;\n   \
    \ if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n     \
    \   return is_simple_power(x * x, n / 2);\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>", "{\n    long i;\n    for(i=1;i<=n;i++)\n    {\n      \
    \  if(x%i==0)\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    if\
    \ (x == 1)\n        return true;\n    if (x == 0)\n        return false;\n   \
    \ if (n == 0)\n        return false;\n    if (n == 1)\n        return true;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x >> 1, n);\n    else\n \
    \       return is_simple_power(x >> 1, n-1) && is_simple_power(x >> 1, n);\n}",
  "{\n    long result = 1;\n    for(long i = 1; i < n; i++)\n    {\n        result\
    \ = result * x;\n    }\n    return result == x;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26670124)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked for a\
    \ function that returns true if a number x is a simple power of n and false in\
    \ other cases. I provided a function that does exactly that. He also asked for\
    \ help with his code. He provided a working solution. He also asked for help with\
    \ his code. He provided a working solution. He also asked for help with his code.\
    \ He provided a working solution. He also asked for help with his code. He provided\
    \ a working solution. He also asked for help with his code. He provided a working\
    \ solution. He also asked for help with his code. He provided a working solution.\
    \ He also asked for help with his code. He provided a working solution. He also\
    \ asked for help with his code. He provided a working solution. He also asked\
    \ for help with his code. He provided a working solution. He also asked for help\
    \ with his code. He provided a working solution. He also asked for help with his\
    \ code. He provided a working solution. He also asked for help with his code.\
    \ He provided a working solution. He also asked for help with his code. He provided\
    \ a working solution. He also asked for help with his code. He provided a working\
    \ solution. He also asked for help with his code. He provided a working solution.\
    \ He also asked for help with his code. He provided a working solution. He also\
    \ asked for help with his code. He provided a working solution. He also asked\
    \ for help with his code. He provided a working solution. He also asked for help\
    \ with his code. He provided a working solution. He also asked for help with his\
    \ code. He provided a working solution. He also asked for help with his code. ",
  "{\n    long result = 1;\n    long power = 1;\n    long power2 = 1;\n    long power3\
    \ = 1;\n    long power4 = 1;\n    long power5 = 1;\n    long power6 = 1;\n   \
    \ long power7 = 1;\n    long power8 = 1;\n    long power9 = 1;\n    long power10\
    \ = 1;\n    long power11 = 1;\n    long power12 = 1;\n    long power13 = 1;\n\
    \    long power14 = 1;\n    long power15 = 1;\n    long power16 = 1;\n    long\
    \ power17 = 1;\n    long power18 = 1;\n    long power19 = 1;\n    long power20\
    \ = 1;\n    long power21 = 1;\n    long power22 = 1;\n    long power23 = 1;\n\
    \    long power24 = 1;\n    long power25 = 1;\n    long power26 = 1;\n    long\
    \ power27 = 1;\n    long power28 = 1;\n    long power29 = 1;\n    long power30\
    \ = 1;\n    long power31 = 1;\n    long power32 = 1;\n    long power33 = 1;\n\
    \    long power34 = 1;\n    long power35 = 1;\n    long power36 = 1;\n    long\
    \ power37 = 1;\n    long power38 = 1;\n    long power39 = 1;\n    long power40\
    \ = 1;\n    long power41 = 1;\n    long power42 = 1;\n    long power43 = 1;\n\
    \    long power44 = 1;\n    long power45 = 1;\n    long power46 = 1;\n    long\
    \ power47 = 1;\n    long power48 = 1;\n    long power49 = 1;\n    long power50\
    \ = 1;\n    long power51 = 1;\n    long power52 = 1;\n    long power53 = 1;\n\
    \    long power54 = 1;\n    long power55 = 1;\n    long power56 = 1;\n    long\
    \ power57 = 1;\n    long power58 = 1;\n    long power59 = 1;\n    long power60\
    \ = 1;\n    long power61 = 1;\n    long power62 = 1;\n    long power63 = 1;\n\
    \    long power64 = 1;\n    long power65 = 1;\n    long power66 = 1;\n    long\
    \ power67 = 1;\n    long power68 = 1;\n    long power69 = 1;\n    long power70\
    \ = 1;\n    long power71 = 1;\n    long power72 = 1;\n    long power73 = 1;\n\
    \    long power74 = 1;\n    long power75 = 1;\n    long power76 = 1;\n    long\
    \ power77 = 1;\n    long power78 = 1;\n    long power79 = 1;\n    long power80\
    \ = 1;\n    long power81 = 1;\n    long power82 = 1;\n    long power83 = 1;\n",
  "{\n    long power = 1;\n    long result = 1;\n    \n    while (n > 1) {\n     \
    \   power *= n;\n        result *= x;\n        n /= 2;\n    }\n    \n    if (x\
    \ == result) {\n        return true;\n    }\n    \n    return false;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI appreciate your efforts, but this doesn't work.\
    \ Try it out with x = 2 and n = 3.\n<|/ c |>\n<| c |>\nI edited my answer, I forgot\
    \ to divide by 2 after I calculated the power of n.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer, I forgot to divide by 2 after I calculated the power of n.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer, I forgot to divide by 2 after I calculated\
    \ the power of n.\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to divide by\
    \ 2 after I calculated the power of n.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "{\n\
    \    long i;\n    long result = 1;\n    for(i=1;i<=n;i++)\n    {\n        result\
    \ = result * x;\n    }\n    if (result == x)\n    {\n        return true;\n  \
    \  }\n    else\n    {\n        return false;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try `is_simple_power(-10,\
    \ 3)`.\n<|/ c |>\n<| c |>\nYes, you are right. My mistake. Thanks for pointing\
    \ out. Updated my answer.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `is_simple_power(-10, 3)`.\n<|/ c |>\n<| c |>\nYes, you are right. My mistake.\
    \ Thanks for pointing out. Updated my answer.\n<|/ c |>\n<| a |>\n<code>", "{\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = ", "{\n    long result = 1;\n    long power = 1;\n  \
    \  long power2 = 1;\n    long power3 = 1;\n    long power4 = 1;\n    long power5\
    \ = 1;\n    long power6 = 1;\n    long power7 = 1;\n    long power8 = 1;\n   \
    \ long power9 = 1;\n    long power10 = 1;\n    long power11 = 1;\n    long power12\
    \ = 1;\n    long power13 = 1;\n    long power14 = 1;\n    long power15 = 1;\n\
    \    long power16 = 1;\n    long power17 = 1;\n    long power18 = 1;\n    long\
    \ power19 = 1;\n    long power20 = 1;\n    long power21 = 1;\n    long power22\
    \ = 1;\n    long power23 = 1;\n    long power24 = 1;\n    long power25 = 1;\n\
    \    long power26 = 1;\n    long power27 = 1;\n    long power28 = 1;\n    long\
    \ power29 = 1;\n    long power30 = 1;\n    long power31 = 1;\n    long power32\
    \ = 1;\n    long power33 = 1;\n    long power34 = 1;\n    long power35 = 1;\n\
    \    long power36 = 1;\n    long power37 = 1;\n    long power38 = 1;\n    long\
    \ power39 = 1;\n    long power40 = 1;\n    long power41 = 1;\n    long power42\
    \ = 1;\n    long power43 = 1;\n    long power44 = 1;\n    long power45 = 1;\n\
    \    long power46 = 1;\n    long power47 = 1;\n    long power48 = 1;\n    long\
    \ power49 = 1;\n    long power50 = 1;\n    long power51 = 1;\n    long power52\
    \ = 1;\n    long power53 = 1;\n    long power54 = 1;\n    long power55 = 1;\n\
    \    long power56 = 1;\n    long power57 = 1;\n    long power58 = 1;\n    long\
    \ power59 = 1;\n    long power60 = 1;\n    long power61 = 1;\n    long power62\
    \ = 1;\n    long power63 = 1;\n    long power64 = 1;\n    long power65 = 1;\n\
    \    long power66 = 1;\n    long power67 = 1;\n    long power68 = 1;\n    long\
    \ power69 = 1;\n    long power70 = 1;\n    long power71 = 1;\n    long power72\
    \ = 1;\n    long power73 = 1;\n    long power74 = 1;\n    long power75 = 1;\n\
    \    long power76 = 1;\n    long power77 = 1;\n    long power78 = 1;\n    long\
    \ power79 = 1;\n    long power80 = 1;\n    long power81 = 1;\n    long power82\
    \ = 1;\n    long power83 = 1;\n", "{\n    long power = 1;\n    long result = 1;\n\
    \    long power2 = 1;\n    long result2 = 1;\n    long power3 = 1;\n    long result3\
    \ = 1;\n    long power4 = 1;\n    long result4 = 1;\n    long power5 = 1;\n  \
    \  long result5 = 1;\n    long power6 = 1;\n    long result6 = 1;\n    long power7\
    \ = 1;\n    long result7 = 1;\n    long power8 = 1;\n    long result8 = 1;\n \
    \   long power9 = 1;\n    long result9 = 1;\n    long power10 = 1;\n    long result10\
    \ = 1;\n    long power11 = 1;\n    long result11 = 1;\n    long power12 = 1;\n\
    \    long result12 = 1;\n    long power13 = 1;\n    long result13 = 1;\n    long\
    \ power14 = 1;\n    long result14 = 1;\n    long power15 = 1;\n    long result15\
    \ = 1;\n    long power16 = 1;\n    long result16 = 1;\n    long power17 = 1;\n\
    \    long result17 = 1;\n    long power18 = 1;\n    long result18 = 1;\n    long\
    \ power19 = 1;\n    long result19 = 1;\n    long power20 = 1;\n    long result20\
    \ = 1;\n    long power21 = 1;\n    long result21 = 1;\n    long power22 = 1;\n\
    \    long result22 = 1;\n    long power23 = 1;\n    long result23 = 1;\n    long\
    \ power24 = 1;\n    long result24 = 1;\n    long power25 = 1;\n    long result25\
    \ = 1;\n    long power26 = 1;\n    long result26 = 1;\n    long power27 = 1;\n\
    \    long result27 = 1;\n    long power28 = 1;\n    long result28 = 1;\n    long\
    \ power29 = 1;\n    long result29 = 1;\n    long power30 = 1;\n    long result30\
    \ = 1;\n    long power31 = 1;\n    long result31 = 1;\n    long power32 = 1;\n\
    \    long result32 = 1;\n    long power33 = 1;\n    long result33 = 1;\n    long\
    \ power34 = 1;\n    long result34 = 1;\n    long power35 = 1;\n    long result35\
    \ = 1;\n    long power36 = 1;\n    long result36 = 1;\n    long power37 = 1;\n\
    \    long result37 = 1;\n    long power38 = 1;\n    long result38 = 1;\n    long\
    \ power39 = 1;\n    long result39 = 1;\n    long power40 = 1;\n    long result40\
    \ = 1;\n    long power41 = 1;\n    long result41 = 1;\n    long power42 = 1;\n\
    \    long result42 = 1;\n    long power43 = 1;\n    ", "{\n    long result = 1;\n\
    \    for(long i = 1; i < n; i++)\n    {\n        result = result * x;\n    }\n\
    \    return result == x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n`is_simple_power(2,\
    \ 3)` returns `true` but `is_simple_power(2, 4)` returns `false`\n<|/ c |>\n<|\
    \ c |>\nYes, I forgot to add that case. Thanks.\n<|/ c |>\n<| c |>\n`is_simple_power(2,\
    \ 3)` returns `true` but `is_simple_power(2, 4)` returns `false`\n<|/ c |>\n<|\
    \ c |>\nYes, I forgot to add that case. Thanks.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    if (n==0) return true;\n    if (n==1) return false;\n \
    \   if (x==1) return false;\n    if (x==0) return true;\n    long y=x;\n    long\
    \ z=n;\n    while(true) {\n        if (y%z==0) return false;\n        if (y==z)\
    \ return true;\n        y=y*z;\n        z=z*z;\n    }\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis code doesn't work. Try it with `x = 2` and `n = 3`.\n<|/ c |>\n\
    <| c |>\nIt works, try it yourself. It returns `true` for x = 2 and n = 3.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work for `x = 2` and `n = 3`. Try it yourself.\n<|/\
    \ c |>\n<| c |>\nIt works for me. Try it yourself. It returns `true` for x = 2\
    \ and n = 3.\n<|/ c |>\n<| c |>\nIt doesn't work for `x = 2` and `n = 3`. Try\
    \ it yourself.\n<|/ c |>\n<| a |>\n<code>", "{\n    long power = 1;\n    long\
    \ result = 1;\n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= 10;\n    }\n    return result == power;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any\
    \ libraries except std.\n<|/ c |>\n<| c |>\nI added a solution without std.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any libraries\
    \ except std.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n    long p = 1;\n    long\
    \ q = n;\n    long r = x;\n    long s = 0;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    ", "{\n    long i;\n    long power = 1;\n    for(i=1;i<=n;i++)\n\
    \    {\n        power *= x;\n    }\n    return power==x;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `x = 2` and `n = 5`.\n<|/ c |>\n\
    <| c |>\nI tested it with x = 2 and n = 5 and it returned true.\n<|/ c |>\n<|\
    \ c |>\nI tested it with x = 2 and n = 5 and it returned true.\n<|/ c |>\n<| c\
    \ |>\nI tested it with x = 2 and n = 5 and it returned true.\n<|/ c |>\n<| c |>\n\
    I tested it with x = 2 and n = 5 and it returned true.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>", "{\n    long i;\n    long power;\n    bool isSimple;\n    \n  \
    \  power = 1;\n    \n    for (i=1;i<=n;i++) {\n        power *= x;\n    }\n  \
    \  \n    isSimple = (power==x);\n    \n    return isSimple;\n}\n</code>\n<|/ a\
    \ tags=c++,algorithm |>\n<| c |>\n`pow` returns a `double`, not an `int`.\n<|/\
    \ c |>\n<| c |>\n`pow` returns a `double`, not an `int`\n<|/ c |>\n<| c |>\n`pow`\
    \ returns a `double`, not an `int`\n<|/ c |>\n<| c |>\n`pow` returns a `double`,\
    \ not an `int`\n<|/ c |>\n<| c |>\n`pow` returns a `double`, not an `int`\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;", "{\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;", "{\n    long result = 1;\n\
    \    for(long i = 1; i < n; i++)\n    {\n        result = result * x;\n    }\n\
    \    return result == x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis\
    \ doesn't work. `is_simple_power(2,3)` returns `true` but `is_simple_power(2,4)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nI guess you meant `is_simple_power(2,4)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nYes, I meant `is_simple_power(2,4)` returns\
    \ `false`\n<|/ c |>\n<| c |>\nI added a solution that works with negative numbers\
    \ and works for any integer power of 2.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that works with negative numbers and works for any integer power of 2.\n<|/\
    \ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long i;\n    for(i=1;i<=n;i++)\n\
    \    {\n        if(x%i==0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| c |>\n\
    This doesn't work. `is_simple_power(2,3)` returns `true`, but `is_simple_power(2,4)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. The function returns false for 2 and 3, and true for 2 and 4\n<|/ c |>\n\
    <| c |>\nI tested it on ideone and got `is_simple_power(2,3)` returning `true`,\
    \ but `is_simple_power(2,4)` returning `false`.\n<|/ c |>\n<| c |>\nI tested it\
    \ on ideone and got `is_simple_power(2,3)` returning `true`, but `is_simple_power(2,4)`\
    \ returning `false`.\n<|/ c |>\n<| c |>\nI tested it on ideone and got `is_simple_power(2,3)`\
    \ returning `true`, but `is_simple_power(2,4)` returning `false`.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>", "{\n    long i;\n    long power = 1;\n    long result\
    \ = 1;\n    for(i=1;i<=n;i++)\n    {\n        power *= x;\n        result *= power;\n\
    \    }\n    if(result==x)\n    {\n        return true;\n    }\n    else\n    {\n\
    \        return false;\n    }\n}\n</code>\n<|/ a tags=c++,algorithm,c |>\n<| c\
    \ |>\nThis doesn't work. Try it with `x = 2, n = 3`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. Try it with `x = 2, n = 3`.\n<|/ c |>\n<| c |>\n: It does work. Try\
    \ it with `x = 2, n = 3`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `x =\
    \ 2, n = 3`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `x = 2, n = 3`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    long temp = 1;\n    long counter = 1;\n    \n    while(counter <=\
    \ n)\n    {\n        temp = power;\n        power = temp * x;\n        counter++;\n\
    \    }\n    \n    if(power == x)\n    {\n        return true;\n    }\n    \n \
    \   return false;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with `x = 1` and `n = 2`.\n<|/ c |>\n<| c |>\nIt works fine for\
    \ me. Can you give me an example where it doesn't work?\n<|/ c |>\n<| c |>\nTry\
    \ `is_simple_power(2, 3)`.\n<|/ c |>\n<| c |>\nOh yeah, I see what you mean. I'll\
    \ fix it right away.\n<|/ c |>\n<| c |>\nIt works now. Thanks :)\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n    long\
    \ limit = (long)pow(x, n);\n    bool flag = false;\n    \n    while(result !=\
    \ limit)\n    {\n        power *= n;\n        result *= x;\n    }\n    \n    if(result\
    \ == limit)\n    {\n        flag = true;\n    }\n    \n    return flag;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThe question was about C++, not C. Also,\
    \ the code you posted is incorrect. `pow` returns a `double`, not an `int`.\n\
    <|/ c |>\n<| c |>\nThe question was about C++, not C. Also, the code you posted\
    \ is incorrect. `pow` returns a `double`, not an `int`.\n<|/ c |>\n<| c |>\nThe\
    \ question was about C++, not C. Also, the code you posted is incorrect. `pow`\
    \ returns a `double`, not an `int`.\n<|/ c |>\n<| c |>\nThe question was about\
    \ C++, not C. Also, the code you posted is incorrect. `pow` returns a `double`,\
    \ not an `int`.\n<|/ c |>\n<| c |>\nThe question was about C++, not C. Also, the\
    \ code you posted is incorrect. `pow` returns a `double`, not an `int`.\n<|/ c\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    if (x == 0)\n        return true;\n    if (x ==\
    \ 1)\n        return false;\n    if (n == 0)\n        return false;\n    if (n\
    \ == 1)\n        return true;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}\n</code>\n\
    <|/ a tags=c++,recursion,algorithm |>\n<| c |>\nThis is not correct. `is_simple_power(2,3)`\
    \ returns `true` but `is_simple_power(2,4)` returns `false`\n<|/ c |>\n<| c |>\n\
    Yes, you are right. I fixed the code. Thanks.\n<|/ c |>\n<| a tags=c++,recursion,algorithm\
    \ |>\n<code>", "{\n    long result = 1;\n    long power = 1;\n    long pow = n;\n\
    \    long pow2 = power;\n    long pow3 = power;\n    long pow4 = power;\n    long\
    \ pow5 = power;\n    long pow6 = power;\n    long pow7 = power;\n    long pow8\
    \ = power;\n    long pow9 = power;\n    long pow10 = power;\n    long pow11 =\
    \ power;\n    long pow12 = power;\n    long pow13 = power;\n    long pow14 = power;\n\
    \    long pow15 = power;\n    long pow16 = power;\n    long pow17 = power;\n \
    \   long pow18 = power;\n    long pow19 = power;\n    long pow20 = power;\n  \
    \  long pow21 = power;\n    long pow22 = power;\n    long pow23 = power;\n   \
    \ long pow24 = power;\n    long pow25 = power;\n    long pow26 = power;\n    long\
    \ pow27 = power;\n    long pow28 = power;\n    long pow29 = power;\n    long pow30\
    \ = power;\n    long pow31 = power;\n    long pow32 = power;\n    long pow33 =\
    \ power;\n    long pow34 = power;\n    long pow35 = power;\n    long pow36 = power;\n\
    \    long pow37 = power;\n    long pow38 = power;\n    long pow39 = power;\n \
    \   long pow40 = power;\n    long pow41 = power;\n    long pow42 = power;\n  \
    \  long pow43 = power;\n    long pow44 = power;\n    long pow45 = power;\n   \
    \ long pow46 = power;\n    long pow47 = power;\n    long pow48 = power;\n    long\
    \ pow49 = power;\n    long pow50 = power;\n    long pow51 = power;\n    long pow52\
    \ = power;\n    long pow53 = power;\n    long pow54 = power;\n    long pow55 =\
    \ power;\n    long pow56 = power;\n    long pow57 = power;\n    long pow58 = power;\n\
    \    long pow59 = power;\n    long pow60 = power;\n    long pow61 = power;\n \
    \   long pow62 = power;\n    long pow63 = power;\n    long pow64 = power;\n",
  "{\n    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n \
    \       power *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return\
    \ result == power;\n}", "{\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = ", "{\n    long result =\
    \ 1;\n    long power = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n\
    \        result *= x;\n        x /= n;\n    }\n    \n    return (result == power);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `x = 5`\
    \ and `n = 2`\n<|/ c |>\n<| c |>\nIt works, I tested it before posting. What do\
    \ you mean by \"doesn't work\"? What is the expected result and what is the actual\
    \ result?\n<|/ c |>\n<| c |>\nI mean it returns `true` for `x = 5` and `n = 2`\
    \ when it should return `false`\n<|/ c |>\n<| c |>\nI see, I misunderstood your\
    \ question. I've updated my answer to reflect your new requirements.\n<|/ c |>\n\
    <| c |>\nI still don't understand why you think this doesn't work. `is_simple_power(5,\
    \ 2)` returns `false` as expected.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n    long result = 1;\n    long\
    \ power = 1;\n    long counter = 0;\n    while(counter < n)\n    {\n        power\
    \ *= x;\n        counter++;\n    }\n    while(power != result)\n    {\n      \
    \  if(power % 2 == 0)\n        {\n            result *= power;\n        }\n  \
    \      power /= 2;\n    }\n    if(result == x)\n    {\n        return true;\n\
    \    }\n    else\n    {\n        return false;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try `is_simple_power(-4,\
    \ 2)`.\n<|/ c |>\n<| c |>\nI tested it and it works fine for negative numbers.\
    \ I even tested it with `is_simple_power(-4, 3)` and it returned `true`.\n<|/\
    \ c |>\n<| c |>\nYes, it works fine for negative numbers. But it fails for `is_simple_power(-4,\
    \ 4)`.\n<|/ c |>\n<| c |>\nYes, it fails for `is_simple_power(-4, 4)`. But it\
    \ fails for `is_simple_power(-4, 5)`. And it fails for `is_simple_power(-4, 6)`.\
    \ And it fails for `is_simple_power(-4, 7)`. And it fails for `is_simple_power(-4,\
    \ 8)`. And it fails for `is_simple_power(-4, 9)`. And it fails for `is_simple_power(-4,\
    \ 10)`. And it fails for `is_simple_power(-4, 11)`. And it fails for `is_simple_power(-4,\
    \ 12)`. And it fails for `is_simple_power(-4, 13)`. And it fails for `is_simple_power(-4,\
    \ 14)`. And it fails for `is_simple_power(-4, 15)`. And it fails for `is_simple_power(-4,\
    \ 16)`. And it fails for `is_simple_power(-4, 17)`. And it fails for `is_simple_power(-4,\
    \ 18)`. And it fails for `is_simple_power(-4, 19)`. And it fails for `is_simple_power(-4,\
    \ 20)`. And it fails for `is_simple_power(-4, 21)`. And it fails for `is_simple_power(-4,\
    \ 22)`. And it fails for `is_simple_power(-4, 23)`. And it fails for `is_simple_power(-4,\
    \ 24)`. And it fails for `is_simple_power(-4, 25)`. And it fails for `is_simple_power(-4,\
    \ 26)`. And it fails for `is_simple_power(-4, 27)`. And it fails for `is_simple_power(-4,\
    \ 28)`. And it fails for `is_simple_power(", "{\n    long power = 1;\n    long\
    \ result = 1;\n    long temp;\n    \n    while(n > 0)\n    {\n        temp = power;\n\
    \        power = temp * x;\n        result += power;\n        n--;\n    }\n  \
    \  \n    if (result == x)\n        return true;\n    else\n        return false;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI understand that but my question was\
    \ how to do it without using pow() function\n<|/ c |>\n<| c |>\nI added a solution\
    \ without using pow()\n<|/ c |>\n<| c |>\nThank you very much for your help\n\
    <|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long i;\n    long power\
    \ = 1;\n    for(i=1;i<=n;i++)\n    {\n        power *= x;\n    }\n    return power==x;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is not the correct solution.\
    \ Try it with `x = 1` and `n = 2`\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ edited my answer to fix it.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ Try it with `x = 1` and `n = 2`\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ edited my answer to fix it.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ Try it with `x = 1` and `n = 2`\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <cmath>\nusing namespace std;", "{\n    long power\
    \ = 1;\n    long result = 1;\n    \n    while (power < n)\n    {\n        power\
    \ *= x;\n        result *= power;\n    }\n    \n    if (result == x)\n       \
    \ return true;\n    else\n        return false;\n}", "{\n    long p = 1;\n   \
    \ long q = 1;\n    long r = x;\n    long s = 1;\n    long t = 1;\n    long u =\
    \ 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n   \
    \ long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d =\
    \ 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n   \
    \ long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m =\
    \ 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n   \
    \ long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v =\
    \ 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n   \
    \ long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e =\
    \ 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n   \
    \ long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n =\
    \ 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n   \
    \ long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w =\
    \ 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n   \
    \ long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f =\
    \ 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n   \
    \ long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o =\
    \ 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n   \
    \ long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x =\
    \ 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n   \
    \ long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g =\
    \ 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n   \
    \ long l = 1;\n    long m = 1;\n", "{\n    long result = 1;\n    long power =\
    \ 1;\n    long temp;\n    \n    while(n > 0)\n    {\n        temp = x;\n     \
    \   \n        while(temp > 0)\n        {\n            power *= temp;\n       \
    \     temp--;\n        }\n        \n        if(power == n)\n        {\n      \
    \      result = true;\n            break;\n        }\n        \n        result\
    \ &= (x != power);\n        \n        x *= x;\n        power *= n;\n        n--;\n\
    \    }\n    \n    return result;\n}", "{\n    if (x == 1) \n    {\n        return\
    \ true;\n    }\n    \n    if (n == 0) \n    {\n        return false;\n    }\n\
    \    \n    if (n % 2 == 0) \n    {\n        if (x % n == 0) \n        {\n    \
    \        return true;\n        }\n    }\n    \n    long y = x;\n    long m = 0;\n\
    \    \n    while (y > 1) \n    {\n        if (y % 2 == 1) \n        {\n      \
    \      if (m == 0) \n            {\n                m = 1;\n            }\n  \
    \          \n            m += 1;\n        }\n        \n        y /= 2;\n    }\n\
    \    \n    if (m == n) \n    {\n        return true;\n    }\n    \n    return\
    \ false;\n}", "{\n    if (x == 1)\n        return true;\n    if (x == 0)\n   \
    \     return false;\n    if (n == 0)\n        return false;\n    if (n == 1)\n\
    \        return true;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\n`is_simple_power(x, n / 2);` should be `is_simple_power(x\
    \ * x, n / 2);`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long pow_of_n\
    \ = pow(n, x);\n    bool result = pow_of_n == x;\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI see no reason to downvote this answer. While it may be a\
    \ little bit more complicated than it needs to be, it is still a correct answer.\
    \ +1 from me.\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect that someone\
    \ who did did so because this answer doesn't actually answer the question. OP\
    \ asked for a function that returns `true` if `x` is a power of `n`, not just\
    \ `true` or `false`.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to point\
    \ out that my answer was more of a \"how to\" than an actual answer. I'll edit\
    \ my answer to make it more clear.\n<|/ c |>\n<| c |>\nI appreciate your efforts,\
    \ but this doesn't answer the question. OP asked for a function that returns `true`\
    \ if `x` is a power of `n`, not just `true` or `false`.\n<|/ c |>\n<| c |>\nI\
    \ see no reason to downvote this answer. While it may be a little bit more complicated\
    \ than it needs to be, it is still a correct answer. +1 from me.\n<|/ c |>\n<|\
    \ a dscore=3 |>\n<code>", "{\n    long power = 1;\n    long result = 1;\n    long\
    \ temp;\n    \n    while(n > 0)\n    {\n        temp = power;\n        power =\
    \ temp * x;\n        result = result * power;\n        n--;\n    }\n    \n   \
    \ return (result == x);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code doesn't\
    \ work. Try it with `is_simple_power(2, 3)`\n<|/ c |>\n<| c |>\nYeah, I noticed\
    \ that and fixed it. I just tested it and it works now.\n<|/ c |>\n<| c |>\nI\
    \ tested it again and it works now. Thanks for pointing it out!\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while (n > 0)\n    {\n        power\
    \ *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return result\
    \ == power;\n}", "{\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = ", "{\n    long power = 1;\n  \
    \  long result = 1;\n    long temp;\n    \n    while(n > 0)\n    {\n        temp\
    \ = power;\n        power = temp * x;\n        result *= power;\n        n--;\n\
    \    }\n    \n    if (result == x)\n        return true;\n    else\n        return\
    \ false;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. Try `is_simple_power(-4, 2)`\n<|/ c |>\n<| c |>\nI didn't\
    \ see that requirement in the question. I'll update my answer.\n<|/ c |>\n<| c\
    \ |>\nI added a solution that works for negative numbers. I hope it helps.\n<|/\
    \ c |>\n<| c |>\nThe question was about simple powers, not powers of 2.\n<|/ c\
    \ |>\n<| c |>\nI added a solution that works for negative numbers. I hope it helps.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return (result == power);\n}", "{\n  \
    \  long power = 1;\n    long result = 1;\n    while(n > 0)\n    {\n        power\
    \ *= n;\n        result *= x;\n        n--;\n    }\n    return result == power;\n\
    }\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis is not correct. `pow` returns\
    \ a `double`, so `pow(x, n)` will return a `double` as well. `pow` will return\
    \ a `double` even if the second argument is `int`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ you are right. I missed that part. Thanks for pointing out.\n<|/ c |>\n<| c\
    \ |>\n: I edited my answer to include a solution that uses `pow` instead of `powf`.\n\
    <|/ c |>\n<| c |>\n: I added a solution that uses `pow` instead of `powf`.\n<|/\
    \ c |>\n<| c |>\n: I added a solution that uses `pow` instead of `powf`.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>", "{\n    long i;\n    for(i=1;i<=n;i++)\n  \
    \  {\n        if(x%i==0)\n        {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nI like\
    \ this solution, but I believe it would be better to use a `bool` instead of `int`\
    \ for the return type. Also, `pow` returns a `double`, so `i` should be `double`\
    \ as well. Also, `pow` returns a `double`, so `i` should be `double` as well.\
    \ Also, `pow` returns a `double`, so `i` should be `double` as well. Also, `pow`\
    \ returns a `double`, so `i` should be `double` as well.\n<|/ c |>\n<| c |>\n\
    I agree with you, i just wanted to show that you can use a bool and that you can\
    \ use a double as well.\n<|/ c |>\n<| c |>\nI agree with you, i just wanted to\
    \ show that you can use a bool and that you can use a double as well.\n<|/ c |>\n\
    <| c |>\nI agree with you, i just wanted to show that you can use a bool and that\
    \ you can use a double as well.\n<|/ c |>\n<| c |>\nI agree with you, i just wanted\
    \ to show that you can use a bool and that you can use a double as well.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <cmath>", "{\n\
    \    long power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n  \
    \      power *= n;\n        result *= x;\n        n /= 10;\n    }\n    \n    return\
    \ result == power;\n}", "{\n    if (x == 1) \n    {\n        return true;\n  \
    \  }\n    else \n    {\n        if (n % 2 == 0) \n        {\n            return\
    \ is_simple_power(x, n / 2);\n        }\n        else \n        {\n          \
    \  return is_simple_power(x * x, n / 2);\n        }\n    }\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power = power * n;\n        \n\
    \        if(power == x)\n        {\n            result = true;\n            break;\n\
    \        }\n        \n        n = n - 1;\n    }\n    \n    return result;\n}",
  "{\n    if (n==0) return true;\n    if (n==1) return false;\n    if (n==2) return\
    \ (x==1);\n    if (n>2 && n<32) return (x==1);\n    if (n>32 && n<64) return (x==1);\n\
    \    if (n>64 && n<128) return (x==1);\n    if (n>128 && n<256) return (x==1);\n\
    \    if (n>256 && n<512) return (x==1);\n    if (n>512 && n<1024) return (x==1);\n\
    \    if (n>1024 && n<2048) return (x==1);\n    if (n>2048 && n<4096) return (x==1);\n\
    \    if (n>4096 && n<8192) return (x==1);\n    if (n>8192 && n<16384) return (x==1);\n\
    \    if (n>16384 && n<32768) return (x==1);\n    if (n>32768 && n<65536) return\
    \ (x==1);\n    if (n>65536 && n<131072) return (x==1);\n    if (n>131072 && n<262144)\
    \ return (x==1);\n    if (n>262144 && n<524288) return (x==1);\n    if (n>524288\
    \ && n<1048576) return (x==1);\n    if (n>1048576 && n<2097152) return (x==1);\n\
    \    if (n>2097152 && n<4194304) return (x==1);\n    if (n>4194304 && n<8388608)\
    \ return (x==1);\n    if (n>8388608 && n<16777216) return (x==1);\n    if (n>16777216\
    \ && n<33554432) return (x==1);\n    if (n>33554432 && n<67108864) return (x==1);\n\
    \    if (n>67108864 && n<134217728) return (x==1);\n    if (n>134217728 && n<268435456)\
    \ return (x==1);\n    if (n>268435456 && n<536870912) return (x==1);\n    if (n>536870912\
    \ && n<1073741824) return (x==1);\n    if (n>1073741824 && n<2147483648) return\
    \ (x==1);\n    if (n>2147483648 && n<4294967296) return (x==1);\n    if (n>4294967296\
    \ && n<8589934592) return (x==1);\n    if (n>8589934592 && n<17179869184) return ",
  "{\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n", "{\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = ", "{\n    long power = 1;\n    long result = 1;\n    \n    while (n > 0)\n\
    \    {\n        if (n % 2 == 1)\n        {\n            power *= x;\n        }\n\
    \        \n        result *= x;\n        n /= 2;\n        x *= x;\n    }\n   \
    \ \n    return (result == power);\n}", "{\n    if (x == 0)\n        return true;\n\
    \    if (n == 0)\n        return false;\n    if (n == 1)\n        return true;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I believe this fails for `is_simple_power(1, 0)`\n<|/ c |>\n<| c |>\nI believe\
    \ it fails for `is_simple_power(1, 0)` because `is_simple_power(1, 0)` returns\
    \ `true` but `is_simple_power(1, 1)` returns `false`\n<|/ c |>\n<| c |>\nYes,\
    \ I believe it fails for `is_simple_power(1, 0)` because `is_simple_power(1, 0)`\
    \ returns `true` but `is_simple_power(1, 1)` returns `false`\n<|/ c |>\n<| c |>\n\
    I believe it fails for `is_simple_power(1, 0)` because `is_simple_power(1, 0)`\
    \ returns `true` but `is_simple_power(1, 1)` returns `false`\n<|/ c |>\n<| c |>\n\
    I believe it fails for `is_simple_power(1, 0)` because `is_simple_power(1, 0)`\
    \ returns `true` but `is_simple_power(1, 1)` returns `false`\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "{\n    if (x == 0) return true;\n    if (x == 1) return false;\n\
    \    if (n == 0) return false;\n    if (n == 1) return true;\n    long a = 1;\n\
    \    long b = x;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long A = 1;\n    long B = 1;\n\
    \    long C = 1;\n    long D = 1;\n    long E = 1;\n    long F = 1;\n    long\
    \ G = 1;\n    long H = 1;\n    long I = 1;\n    long J = 1;\n    long K = 1;\n\
    \    long L = 1;\n    long M = 1;\n    long N = 1;\n    long O = 1;\n    long\
    \ P = 1;\n    long Q = 1;\n    long R = 1;\n    long S = 1;\n    long T = 1;\n\
    \    long U = 1;\n    long V = 1;\n    long W = 1;\n    long X = 1;\n    long\
    \ Y = 1;\n    long Z = 1;\n    long A1 = 1;\n    long B1 = 1;\n    long C1 = 1;\n\
    \    long D1 = 1;\n    long E1 = 1;\n    long F1 = 1;\n    long G1 = 1;\n    long\
    \ H1 = 1;\n    long I1 = 1;\n    long J1 = 1;\n    long K1 = 1;\n    long L1 =\
    \ 1;\n    long M1 = 1;\n    long N1 = 1;\n    long O1 = 1;\n    long P1 = 1;\n\
    \    long Q1 = 1;\n    long R1 = 1;\n    long S1 = 1;\n    long T1 = 1;\n    long\
    \ U1 = 1;\n    long V1 = 1;\n    long W1 = 1;\n    long X1 = 1;\n    long Y1 =\
    \ 1;\n    long Z1 = 1;\n    long A2 = 1;\n    long B2 = 1;\n    long C2 = 1;\n\
    \    long D2 = 1;\n    long E2 = 1;\n    long F2 = 1;\n    long G2 = 1;\n    long\
    \ H2 = 1;\n    long I2 = 1;\n    long J2 = 1;\n    long K2 = 1;\n    long L2 =\
    \ 1;\n    long M2 = 1;\n    long N2 = 1;\n    long O2 = 1;\n    long P2 = 1;\n",
  "{\n    long result = 1;\n    long power = 1;\n    long temp = 1;\n    long power\
    \ = 1;\n    long temp = 1;\n    long power = 1;\n    long temp = 1;\n    long\
    \ power = 1;\n    long temp = 1;\n    long power = 1;\n    long temp = 1;\n  \
    \  long power = 1;\n    long temp = 1;\n    long power = 1;\n    long temp = 1;\n\
    \    long power = 1;\n    long temp = 1;\n    long power = 1;\n    long temp =\
    \ 1;\n    long power = 1;\n    long temp = 1;\n    long power = 1;\n    long temp\
    \ = 1;\n    long power = 1;\n    long temp = 1;\n    long power = 1;\n    long\
    \ temp = 1;\n    long power = 1;\n    long temp = 1;\n    long power = 1;\n  \
    \  long temp = 1;\n    long power = 1;\n    long temp = 1;\n    long power = 1;\n\
    \    long temp = 1;\n    long power = 1;\n    long temp = 1;\n    long power =\
    \ 1;\n    long temp = 1;\n    long power = 1;\n    long temp = 1;\n    long power\
    \ = 1;\n    long temp = 1;\n    long power = 1;\n    long temp = 1;\n    long\
    \ power = 1;\n    long temp = 1;\n    long power = 1;\n    long temp = 1;\n  \
    \  long power = 1;\n    long temp = 1;\n    long power = 1;\n    long temp = 1;\n\
    \    long power = 1;\n    long temp = 1;\n    long power = 1;\n    long temp =\
    \ 1;\n    long power = 1;\n    long temp = 1;\n    long power = 1;\n    long temp\
    \ = 1;\n    long power = 1;\n    long temp = 1;\n    long power = 1;\n    long\
    \ temp = 1;\n    long power = 1;\n    long temp = 1;\n    long power = 1;\n  \
    \  long temp = 1;\n    long power = 1;\n    long temp = 1;\n    long power = 1;\n\
    \    long temp = 1;\n    long power = 1;\n    long temp = 1;\n    long power =\
    \ 1;\n    long temp = 1;\n    long power = 1;\n    long temp = 1;\n    long power\
    \ = 1;\n    long temp = 1;\n    long power = 1;\n    long temp = 1;\n    long\
    \ power = 1;\n    long temp = 1;\n    long power = 1;\n    long temp = 1;\n  \
    \  long power = 1;\n    long temp = 1;\n    long power = 1;\n    long temp = 1;\n\
    \    long power = 1;\n    long temp = 1;", "{\n    long power = 1;\n    long result\
    \ = 1;\n    \n    while(n > 0)\n    {\n        power *= n;\n        result *=\
    \ x;\n        n /= x;\n    }\n    \n    return (result == power);\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work for negative exponents.\
    \ For example, `is_simple_power(2,-2)` returns `true`, but `is_simple_power(2,-3)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nI didn't think about negative exponents.\
    \ I updated my answer accordingly.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = ", "{\n    long power = 1;\n    long result = 1;\n  \
    \  \n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n    \
    \    n /= x;\n    }\n    \n    return result == power;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `x = 1, n = 2`.\n<|/ c |>\n<| c\
    \ |>\nI tested it with x = 1, n = 2 and it returns true.\n<|/ c |>\n<| c |>\n\
    Yes, it does. But it also returns true for `x = 1, n = 4`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. But it also returns true for `x = 1, n = 4`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. But it also returns true for `x = 1, n = 4`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "{\n    long pow_of_n = pow(n, x);\n    return pow_of_n == x;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `pow` returns a `double`\
    \ which is not an `int`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can\
    \ you please give me an example where it fails?\n<|/ c |>\n<| c |>\n`pow` returns\
    \ a `double` which is not an `int`.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine. Can you please give me an example where it fails?\n<|/ c |>\n<| c |>\n\
    `pow` returns a `double` which is not an `int`. `pow` returns a `double` which\
    \ is not an `int`.\n<|/ c |>\n<| a tags=c++,c++11 |>\n<code>\n#include <iostream>\n\
    #include <cmath>\nusing namespace std;", "{\n    long i;\n    long power;\n  \
    \  \n    power = 1;\n    \n    for(i=1;i<=n;i++)\n    {\n        power *= x;\n\
    \    }\n    \n    return power==x;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n\
    <| c |>\nThis doesn't work. Try it with `x = 4` and `n = 2`.\n<|/ c |>\n<| c |>\n\
    I didn't downvote, but I suspect it's because you didn't explain how it works.\
    \ You don't explain why it works, you just give the code. That's not really helpful.\n\
    <|/ c |>\n<| c |>\nI added some explanation to the answer. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nI didn't downvote either, but I think it's because you didn't\
    \ explain how it works. You don't explain why it works, you just give the code.\
    \ That's not really helpful.\n<|/ c |>\n<| c |>\nI added some explanation to the\
    \ answer. Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long power\
    \ = 1;\n    long result = 1;\n    long temp;\n    long power2;\n    long power3;\n\
    \    long power4;\n    long power5;\n    long power6;\n    long power7;\n    long\
    \ power8;\n    long power9;\n    long power10;\n    long power11;\n    long power12;\n\
    \    long power13;\n    long power14;\n    long power15;\n    long power16;\n\
    \    long power17;\n    long power18;\n    long power19;\n    long power20;\n\
    \    long power21;\n    long power22;\n    long power23;\n    long power24;\n\
    \    long power25;\n    long power26;\n    long power27;\n    long power28;\n\
    \    long power29;\n    long power30;\n    long power31;\n    long power32;\n\
    \    long power33;\n    long power34;\n    long power35;\n    long power36;\n\
    \    long power37;\n    long power38;\n    long power39;\n    long power40;\n\
    \    long power41;\n    long power42;\n    long power43;\n    long power44;\n\
    \    long power45;\n    long power46;\n    long power47;\n    long power48;\n\
    \    long power49;\n    long power50;\n    long power51;\n    long power52;\n\
    \    long power53;\n    long power54;\n    long power55;\n    long power56;\n\
    \    long power57;\n    long power58;\n    long power59;\n    long power60;\n\
    \    long power61;\n    long power62;\n    long power63;\n    long power64;\n\
    \    long power65;\n    long power66;\n    long power67;\n    long power68;\n\
    \    long power69;\n    long power70;\n    long power71;\n    long power72;\n\
    \    long power73;\n    long power74;\n    long power75;\n    long power76;\n\
    \    long power77;\n    long power78;\n    long power79;\n    long power80;\n\
    \    long power81;\n    long power82;\n    long power83;\n    long power84;\n\
    \    long power85;\n    long power86;\n    long power", "{\n    long power=1;\n\
    \    while(power<n)\n    {\n        power*=x;\n    }\n    return power==x;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `is_simple_power(2,3)`\
    \ returns `true` but `is_simple_power(2,4)` returns `false`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. Can you please tell me what is the problem you\
    \ are facing?\n<|/ c |>\n<| c |>\nIt doesn't work for `is_simple_power(2,3)` returns\
    \ `true` but `is_simple_power(2,4)` returns `false`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. Can you please tell me what is the problem you are facing?\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `is_simple_power(2,3)` returns `true` but\
    \ `is_simple_power(2,4)` returns `false`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    <code>", "{\n    if (x == 0) return true;\n    if (x == 1) return false;\n   \
    \ if (n == 0) return false;\n    if (n == 1) return true;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return is_simple_power(x,\
    \ n / 2) && is_simple_power(x, n / 2);\n    return false;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/26818272)\n<|/ c |>\n<| c |>\nI believe this\
    \ does answer the question. He asked for a function that returns true if a number\
    \ x is a simple power of n and false in other cases. He also asked for help with\
    \ his code. He also provided a link to the code he wrote and explained what he\
    \ was trying to do. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link", "{\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = ", "{\n    long result = 1;\n    long\
    \ power = 1;\n    \n    while(power < n)\n    {\n        result *= x;\n      \
    \  power *= x;\n    }\n    \n    return result == x;\n}", "{\n    long result\
    \ = 1;\n    long power = 1;\n    long pow = n;\n    long counter = 0;\n    while(pow\
    \ != 0)\n    {\n        counter++;\n        power = power * pow;\n        pow\
    \ = pow / n;\n    }\n    if(counter == n)\n    {\n        if(pow * x == x)\n \
    \       {\n            return true;\n        }\n        else\n        {\n    \
    \        return false;\n        }\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "{\n    long\
    \ result = 1;\n    long power = 1;\n    long pow = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long pow = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long pow = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ pow = 1;\n    long result = 1;\n    long power = 1;\n    long pow = 1;\n   \
    \ long result = 1;\n    long power = 1;\n    long pow = 1;\n    long result =\
    \ 1;\n    long power = 1;\n    long pow = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long pow = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ pow = 1;\n    long result = 1;\n    long power = 1;\n    long pow = 1;\n   \
    \ long result = 1;\n    long power = 1;\n    long pow = 1;\n    long result =\
    \ 1;\n    long power = 1;\n    long pow = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long pow = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ pow = 1;\n    long result = 1;\n    long power = 1;\n    long pow = 1;\n   \
    \ long result = 1;\n    long power = 1;\n    long pow = 1;\n    long result =\
    \ 1;\n    long power = 1;\n    long pow = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long pow = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ pow = 1;\n    long result = 1;\n    long power = 1;\n    long pow = 1;\n   \
    \ long result = 1;\n    long power = 1;\n    long pow = 1;\n    long result =\
    \ 1;\n    long power = 1;\n    long pow = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long pow = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ pow = 1;\n    long result = 1;\n    long power = 1;\n    long pow = 1;\n   \
    \ long result = 1;\n    long power = 1;\n    long pow = 1;\n    long result =\
    \ 1;\n    long power = 1;\n    long pow = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long pow = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ pow = 1;\n    long result = 1;\n    long power = 1;\n    long pow = 1;\n   \
    \ long result = 1;\n    long power = 1;\n    long pow = 1;\n    long result =\
    \ 1;\n    long power = 1;\n    long pow", "{\n    long long int power = 1;\n \
    \   long long int result = x;\n    \n    while(result > 1)\n    {\n        power\
    \ *= n;\n        result /= n;\n    }\n    \n    if(power==x)\n        return true;\n\
    \    else\n        return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. `is_simple_power(2,3)` returns `true` but `is_simple_power(2,4)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you\
    \ please provide an example where it fails?\n<|/ c |>\n<| c |>\n`is_simple_power(2,3)`\
    \ returns `true` but `is_simple_power(2,4)` returns `false`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. Can you please provide an example where it fails?\n\
    <|/ c |>\n<| c |>\n`is_simple_power(2,3)` returns `true` but `is_simple_power(2,4)`\
    \ returns `false`.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long\
    \ power = 1;\n    long result = 1;\n    \n    while(n > 0)\n    {\n        power\
    \ *= n;\n        result *= x;\n        n /= x;\n    }\n    \n    return (result\
    \ == power);\n}", "{\n    long result = 1;\n    long power = 1;\n    long temp\
    \ = 1;\n    \n    while(n > 0)\n    {\n        temp = temp * x;\n        power++;\n\
    \        n--;\n    }\n    \n    while(power > 0)\n    {\n        result = result\
    \ * temp;\n        power--;\n    }\n    \n    if(result == x)\n    {\n       \
    \ return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis is not the correct solution. Try it with `is_simple_power(2,\
    \ 3)`.\n<|/ c |>\n<| c |>\nI didn't get you. Can you please explain in detail?\n\
    <|/ c |>\n<| c |>\nThe correct solution is `is_simple_power(2, 3)` returns `true`\
    \ because `2**`3` is `8`.\n<|/ c |>\n<| c |>\nI got your point. Thanks for pointing\
    \ out. Updated the answer.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ Try it with `is_simple_power(2, 3)`.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n\
    \    long result = 1;\n    long power = 1;\n    long remainder;\n    \n    while(power\
    \ < n)\n    {\n        remainder = x % power;\n        result *= power;\n    \
    \    x /= power;\n        power *= n;\n    }\n    \n    return result == x;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = ", "{\n    if (x == 1)\n        return true;\n    if (x == 0)\n\
    \        return false;\n    if (n == 0)\n        return false;\n    if (n == 1)\n\
    \        return true;\n    if (n % 2 == 0)\n        return is_simple_power(x /\
    \ 2, n);\n    else\n        return is_simple_power(x * x / 2, n - 1);\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis fails for `is_simple_power(2,3)`\n\
    <|/ c |>\n<| c |>\nYes, it fails for `is_simple_power(2,3)` because `is_simple_power(2,3)`\
    \ returns `false` but `is_simple_power(2,4)` returns `true`\n<|/ c |>\n<| c |>\n\
    It fails for `is_simple_power(2,3)` because `is_simple_power(2,3)` returns `false`\
    \ but `is_simple_power(2,4)` returns `true`\n<|/ c |>\n<| c |>\nI fixed the bug,\
    \ thank you for pointing it out\n<|/ c |>\n<| a dscore=0 |>\n<code>", "{\n   \
    \ long result = 1;\n    for(long i = 1; i < n; i++)\n    {\n        result *=\
    \ x;\n    }\n    return result == x;\n}\n</code>\n<|/ a tags=c++,algorithm,math\
    \ |>\n<| c |>\nThe question states that \"x is a simple power of n if n**int=x\"\
    .  Your function returns true for x=1 and n=2.\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that. Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\n\
    The question states that \"x is a simple power of n if n**int=x\".  Your function\
    \ returns true for x=1 and n=2.\n<|/ c |>\n<| c |>\nYes, I missed that. Thanks\
    \ for pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\nThe question\
    \ states that \"x is a simple power of n if n**int=x\".  Your function returns\
    \ true for x=1 and n=2.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "{\n    long result\
    \ = 1;\n    long power = 1;\n    long power2 = 1;\n    long power3 = 1;\n    long\
    \ power4 = 1;\n    long power5 = 1;\n    long power6 = 1;\n    long power7 = 1;\n\
    \    long power8 = 1;\n    long power9 = 1;\n    long power10 = 1;\n    long power11\
    \ = 1;\n    long power12 = 1;\n    long power13 = 1;\n    long power14 = 1;\n\
    \    long power15 = 1;\n    long power16 = 1;\n    long power17 = 1;\n    long\
    \ power18 = 1;\n    long power19 = 1;\n    long power20 = 1;\n    long power21\
    \ = 1;\n    long power22 = 1;\n    long power23 = 1;\n    long power24 = 1;\n\
    \    long power25 = 1;\n    long power26 = 1;\n    long power27 = 1;\n    long\
    \ power28 = 1;\n    long power29 = 1;\n    long power30 = 1;\n    long power31\
    \ = 1;\n    long power32 = 1;\n    long power33 = 1;\n    long power34 = 1;\n\
    \    long power35 = 1;\n    long power36 = 1;\n    long power37 = 1;\n    long\
    \ power38 = 1;\n    long power39 = 1;\n    long power40 = 1;\n    long power41\
    \ = 1;\n    long power42 = 1;\n    long power43 = 1;\n    long power44 = 1;\n\
    \    long power45 = 1;\n    long power46 = 1;\n    long power47 = 1;\n    long\
    \ power48 = 1;\n    long power49 = 1;\n    long power50 = 1;\n    long power51\
    \ = 1;\n    long power52 = 1;\n    long power53 = 1;\n    long power54 = 1;\n\
    \    long power55 = 1;\n    long power56 = 1;\n    long power57 = 1;\n    long\
    \ power58 = 1;\n    long power59 = 1;\n    long power60 = 1;\n    long power61\
    \ = 1;\n    long power62 = 1;\n    long power63 = 1;\n    long power64 = 1;\n\
    \    long power65 = 1;\n    long power66 = 1;\n    long power67 = 1;\n    long\
    \ power68 = 1;\n    long power69 = 1;\n    long power70 = 1;\n    long power71\
    \ = 1;\n    long power72 = 1;\n    long power73 = 1;\n    long power74 = 1;\n\
    \    long power75 = 1;\n    long power76 = 1;\n    long power77 = 1;\n    long\
    \ power78 = 1;\n    long power79 = 1;\n    long power80 = 1;\n    long power81\
    \ = 1;\n    long power82 = 1;\n    long power83 = 1;\n", "{\n    long pow_of_n\
    \ = pow(n, x);\n    return pow_of_n == x;\n}", "{\n    long power = 1;\n    long\
    \ result = 1;\n    \n    while(n > 0)\n    {\n        power = power * n;\n   \
    \     result = result * x;\n        n = n - 1;\n    }\n    \n    return result\
    \ == power;\n}", "{\n    long power = 1;\n    long result = 1;\n    long power2\
    \ = 1;\n    long result2 = 1;\n    long power3 = 1;\n    long result3 = 1;\n \
    \   long power4 = 1;\n    long result4 = 1;\n    long power5 = 1;\n    long result5\
    \ = 1;\n    long power6 = 1;\n    long result6 = 1;\n    long power7 = 1;\n  \
    \  long result7 = 1;\n    long power8 = 1;\n    long result8 = 1;\n    long power9\
    \ = 1;\n    long result9 = 1;\n    long power10 = 1;\n    long result10 = 1;\n\
    \    long power11 = 1;\n    long result11 = 1;\n    long power12 = 1;\n    long\
    \ result12 = 1;\n    long power13 = 1;\n    long result13 = 1;\n    long power14\
    \ = 1;\n    long result14 = 1;\n    long power15 = 1;\n    long result15 = 1;\n\
    \    long power16 = 1;\n    long result16 = 1;\n    long power17 = 1;\n    long\
    \ result17 = 1;\n    long power18 = 1;\n    long result18 = 1;\n    long power19\
    \ = 1;\n    long result19 = 1;\n    long power20 = 1;\n    long result20 = 1;\n\
    \    long power21 = 1;\n    long result21 = 1;\n    long power22 = 1;\n    long\
    \ result22 = 1;\n    long power23 = 1;\n    long result23 = 1;\n    long power24\
    \ = 1;\n    long result24 = 1;\n    long power25 = 1;\n    long result25 = 1;\n\
    \    long power26 = 1;\n    long result26 = 1;\n    long power27 = 1;\n    long\
    \ result27 = 1;\n    long power28 = 1;\n    long result28 = 1;\n    long power29\
    \ = 1;\n    long result29 = 1;\n    long power30 = 1;\n    long result30 = 1;\n\
    \    long power31 = 1;\n    long result31 = 1;\n    long power32 = 1;\n    long\
    \ result32 = 1;\n    long power33 = 1;\n    long result33 = 1;\n    long power34\
    \ = 1;\n    long result34 = 1;\n    long power35 = 1;\n    long result35 = 1;\n\
    \    long power36 = 1;\n    long result36 = 1;\n    long power37 = 1;\n    long\
    \ result37 = 1;\n    long power38 = 1;\n    long result38 = 1;\n    long power39\
    \ = 1;\n    long result39 = 1;\n    long power40 = 1;\n    long result40 = 1;\n\
    \    long power41 = 1;\n    long result41 = 1;\n    long power42 = 1;\n    long\
    \ result42 = 1;\n    long power43 = 1;\n    ", "{\n    if (n == 0) \n    {\n \
    \       return true;\n    }\n    if (n == 1) \n    {\n        return (x == 1);\n\
    \    }\n    if (n == 2) \n    {\n        return (x == 1);\n    }\n    if (n %\
    \ 2 == 0) \n    {\n        if (x % n == 0) \n        {\n            return true;\n\
    \        }\n    }\n    else \n    {\n        if (x % n == 0) \n        {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\n</code>\n<|/ a\
    \ |>\n<| a tags=c++,algorithm |>\n<code>", "{\n    long power = 1;\n    long result\
    \ = 1;\n    while(n > 0)\n    {\n        power *= n;\n        result *= x;\n \
    \       n /= x;\n    }\n    return result == power;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n#include <cmath>\n\
    using namespace std;", "{\n    long power = 1;\n    long result = 1;\n    \n \
    \   while(n > 0)\n    {\n        power *= n;\n        result *= x;\n        n\
    \ /= 10;\n    }\n    \n    return result == power;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try is_simple_power(10, 10) and you'll see that\
    \ it returns true.\n<|/ c |>\n<| c |>\nIt works perfectly for me. Try is_simple_power(10,\
    \ 10) and you'll see that it returns false.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for me either. Try is_simple_power(10, 10) and you'll see that it returns true.\n\
    <|/ c |>\n<| c |>\nIt works for me too. Try is_simple_power(10, 10) and you'll\
    \ see that it returns false.\n<|/ c |>\n<| c |>\nIt works for me too. Try is_simple_power(10,\
    \ 10) and you'll see that it returns false.\n<|/ c |>\n<| a |>\n<code>", "{\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n    long\
    \ result = 1;\n    long power = 1;\n    long result = 1;\n    long power = 1;\n\
    \    long result = 1;\n    long power = 1;\n    long result = 1;\n    long power\
    \ = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n    long\
    \ power = 1;\n    long result = 1;\n    long power = 1;\n    long result = 1;\n\
    \    long power = 1;\n    long result = 1;\n    long power = 1;\n    long result\
    \ = 1;\n    long power = "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
