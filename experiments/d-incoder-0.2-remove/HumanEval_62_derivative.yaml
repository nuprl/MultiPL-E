name: HumanEval_62_derivative
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients of\
  \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
  \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
  \ xs) \n"
tests: "unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
  \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
  \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
  \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
  }\nvoid main(){}"
completions: ["{\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\n   \
    \ {\n        res += xs[i] * derivative(xs, i);\n    }\n    return new long[]{res};\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double res = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * derivative(xs,\
    \ i);\n    }\n    return new double[]{res};\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i);\n    }\n    return new float[]{res};\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    int n = xs.length;\n    long[] ys = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        ys[i] = xs[i] * derivative(xs,\
    \ 0, n - 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int start,\
    \ int end) \n{\n    int n = end - start;\n    long[] ys = new long[n];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        ys[i] = xs[i] * derivative(xs, start,\
    \ i - 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int start)\
    \ \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        ys[i] = xs[i] * derivative(xs, start, n - 1);\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs) \n{\n    int\
    \ n = xs.length;\n    long[] ys = new long[n];\n    for(int i = 0; i < n; i++)\n\
    \    {\n        ys[i] = xs[i] * derivative(xs, 0, n - 1);\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int start, int end) \n{\n    int\
    \ n = end - start;\n    long[] ys = new long[n];\n    for(int i = start; i < end;\
    \ i++)\n    {\n        ys[i] = xs[i] * derivative(xs, start, i - 1);\n    }\n\
    \    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int start)\
    \ \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        ys[i] = xs[i] * derivative(xs, start, n - 1);\n\
    \    }\n    return ys;", "{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.length\
    \ + 1];\n    result[0] = result;\n    for(int i = 1; i < result.length; i++)\n\
    \    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    double[] result = new double[result.length + 1];\n    result[0] = result;\n\
    \    for(int i = 1; i < result.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] result = new float[result.length\
    \ + 1];\n    result[0] = result;\n    for(int i = 1; i < result.length; i++)\n\
    \    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        d *= xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n\
    \    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d *= xs[i];\n    }\n    double[] result = new double[xs.length + 1];\n\
    \    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] result = new float[xs.length + 1];\n \
    \   result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long d = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        d += xs[i] * xs[i];\n\
    \    }\n    return long[] {d, 1};\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        d +=\
    \ xs[i] * xs[i];\n    }\n    return double[] {d, 1};\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d += xs[i] * xs[i];\n    }\n    return float[] {d, 1};\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/",
  "{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = 0;\n    for(int i = 0; i < xs.length; i++)\n     \
    \   result[i] = result[i] + xs[i] * derivative(xs, i - 1);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long[] result\
    \ = new long[(xs.length - degree)];\n    for(int i = 0; i < result.length; i++)\n\
    \        result[i] = 0;\n    for(int i = 0; i < xs.length; i++)\n        result[i]\
    \ = result[i] + xs[i] * derivative(xs, i - degree);\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int degree, int order) \n{\n   \
    \ long[] result = new long[(xs.length - degree)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = 0;\n    for(int i = 0; i < xs.length; i++)\n     \
    \   result[i] = result[i] + xs[i] * derivative(xs, i - degree, order);\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ int degree2) \n{\n    long[] result = new long[(xs.length - degree)];\n    for(int\
    \ i = 0; i < result.length; i++)\n        result[i] = 0;\n    for(int i = 0; i\
    \ < xs.length; i++)\n        result[i] = result[i] + xs[i] * derivative(xs, i\
    \ - degree, order, degree2);\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int degree2, int degree3) \n{\n    long[] result\
    \ = new long[(xs.length - degree)];\n    for(int i = 0; i < result.length; i++)\n\
    \        result[i] = 0;\n    for(int i = 0; i < xs.length; i++)\n        result[i]\
    \ = result[i] + xs[i] * derivative(xs, i - degree, order, degree2, degree3);\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial",
  "{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n      \
    \  result *= xs[i];\n    }\n    long[] derivative = new long[result];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        derivative[i] = xs[i] - result;\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   result *= xs[i];\n    }\n    double[] derivative = new double[result];\n \
    \   for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = xs[i] -\
    \ result;\n    }\n    return derivative;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] derivative = new float[result];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = xs[i]\
    \ - result;\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    int n = xs.length;\n\
    \    long[] ds = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n       \
    \ ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int n) \n{\n    long[] ds = new long[n];\n    for(int i = 0; i < n; i++)\n\
    \    {\n        ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int n, int m) \n{\n    long[] ds = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        ds[i] = xs[i+1] - xs[i];\n   \
    \ }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int\
    \ m, int n) \n{\n    long[] ds = new long[n];\n    for(int i = 0; i < n; i++)\n\
    \    {\n        ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int n, int m, int n, int m) \n{\n    long[] ds =\
    \ new long[n];\n    for(int i = 0; i < n; i++)\n    {\n        ds[i] = xs[i+1]\
    \ - xs[i];\n    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int\
    \ m, int n, int m, int n) \n{\n    long[] ds = new long[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n", "{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    result /= xs.length;\n   \
    \ long[] derivative = new long[xs.length];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        derivative[i] = result;\n    }\n    return derivative;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    result /= xs.length;\n    double[] derivative = new double[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = result;\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result\
    \ *= xs[i];\n    }\n    result /= xs.length;\n    float[] derivative = new float[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = result;\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long d = 1;\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n    long[] result =\
    \ new long[xs.length + 1];\n    result[0] = d;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double d = 1;\n \
    \   for(int i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n  \
    \  double[] result = new double[xs.length + 1];\n    result[0] = d;\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n\
    \    }\n    float[] result = new float[xs.length + 1];\n    result[0] = d;\n \
    \   for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    int n = xs.length;\n\
    \    long[] ds = new long[n];\n    for(int i = 0; i < n; i++)\n        ds[i] =\
    \ xs[i + 1] - xs[i];\n    return ds;\n}", "{\n    long[] result = new long[(xs.length\
    \ - 1)];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1];\n    }\n    return result;\n}", "{\n    long[] result = new long[(xs.length\
    \ - 1)];\n    for(int i = 0; i < xs.length; i++)\n        result[i] = xs[i + 1];\n\
    \    return result;\n}", "{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n        result[i] = xs[i];\n    for(int i = n\
    \ - 1; i >= 0; i--)\n        result[i] = result[i] * xs[i + 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; i++)\n      \
    \  result[i] = xs[i];\n    for(int i = n - 1; i >= 0; i--)\n        result[i]\
    \ = result[i] * xs[i + 1];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i];\n    for(int i = n - 1; i >=\
    \ 0; i--)\n        result[i] = result[i] * xs[i + 1];\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    result *= xs.length;\n   \
    \ long[] result = new long[result.intValue()];\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i] * result;\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    result *= xs.length;\n    double[] result = new double[result.intValue()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i]\
    \ * result;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    result *= xs.length;\n    float[] result\
    \ = new float[result.intValue()];\n    for(int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i] * result;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    long n = xs.length;\n    long[] ys = new long[n];\n\
    \    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n    long x3\
    \ = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6 = xs[6];\n\
    \    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n    long x10\
    \ = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long x13 = xs[13];\n\
    \    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16 = xs[16];\n    long\
    \ x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n    long x20\
    \ = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long x23 = xs[23];\n\
    \    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26 = xs[26];\n    long\
    \ x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n    long x30\
    \ = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long x33 = xs[33];\n\
    \    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36 = xs[36];\n    long\
    \ x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n    long x40\
    \ = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long x43 = xs[43];\n\
    \    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46 = xs[46];\n    long\
    \ x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n    long x50\
    \ = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long x53 = xs[53];\n\
    \    long x54 = xs[54];\n    long x55", "{\n    long x0 = xs[0];\n    long x1\
    \ = xs[1];\n    long x2 = xs[2];\n    long x3 = xs[3];\n    long x4 = xs[4];\n\
    \    long x5 = xs[5];\n    long x6 = xs[6];\n    long x7 = xs[7];\n    long x8\
    \ = xs[8];\n    long x9 = xs[9];\n    long x10 = xs[10];\n    long x11 = xs[11];\n\
    \    long x12 = xs[12];\n    long x13 = xs[13];\n    long x14 = xs[14];\n    long\
    \ x15 = xs[15];\n    long x16 = xs[16];\n    long x17 = xs[17];\n    long x18\
    \ = xs[18];\n    long x19 = xs[19];\n    long x20 = xs[20];\n    long x21 = xs[21];\n\
    \    long x22 = xs[22];\n    long x23 = xs[23];\n    long x24 = xs[24];\n    long\
    \ x25 = xs[25];\n    long x26 = xs[26];\n    long x27 = xs[27];\n    long x28\
    \ = xs[28];\n    long x29 = xs[29];\n    long x30 = xs[30];\n    long x31 = xs[31];\n\
    \    long x32 = xs[32];\n    long x33 = xs[33];\n    long x34 = xs[34];\n    long\
    \ x35 = xs[35];\n    long x36 = xs[36];\n    long x37 = xs[37];\n    long x38\
    \ = xs[38];\n    long x39 = xs[39];\n    long x40 = xs[40];\n    long x41 = xs[41];\n\
    \    long x42 = xs[42];\n    long x43 = xs[43];\n    long x44 = xs[44];\n    long\
    \ x45 = xs[45];\n    long x46 = xs[46];\n    long x47 = xs[47];\n    long x48\
    \ = xs[48];\n    long x49 = xs[49];\n    long x50 = xs[50];\n    long x51 = xs[51];\n\
    \    long x52 = xs[52];\n    long x53 = xs[53];\n    long x54 = xs[54];\n    long\
    \ x55 = xs[55];\n    long x56 = xs[56];\n", "{\n    long[] result = new long[(xs.length\
    \ - 1)];\n    for(int i = 1; i < xs.length; i++) \n    {\n        result[i - 1]\
    \ = (xs[i] - xs[i - 1]) / xs[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double[] result = new double[(xs.length\
    \ - 1)];\n    for(int i = 1; i < xs.length; i++) \n    {\n        result[i - 1]\
    \ = (xs[i] - xs[i - 1]) / xs[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float[] result = new float[(xs.length\
    \ - 1)];\n    for(int i = 1; i < xs.length; i++) \n    {\n        result[i - 1]\
    \ = (xs[i] - xs[i - 1]) / xs[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/",
  "{\n    long[] result = new long[xs.length];\n    for(int i = 0; i < xs.length;\
    \ i++)\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result =\
    \ new double[xs.length];\n    for(int i = 0; i < xs.length; i++)\n        result[i]\
    \ = xs[i+1] - xs[i] * xs[i+1];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[xs.length];\n    for(int i = 0; i <\
    \ xs.length; i++)\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/", "{\n    long d = 1;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        d *= xs[i];\n    }\n    long[] result = new long[xs.length\
    \ + 1];\n    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n \
    \       result[i] = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\ndouble[] derivative(double[] xs) \n{\n    double d = 1;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n    double[]\
    \ result = new double[xs.length + 1];\n    result[0] = d;\n    for(int i = 1;\
    \ i < xs.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n\
    \    }\n    float[] result = new float[xs.length + 1];\n    result[0] = d;\n \
    \   for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long[] d =\
    \ new long[(xs.length - 1)];\n    long x = 0;\n    long y = 0;\n    long xsq =\
    \ 0;\n    long xsq2 = 0;\n    long xsq3 = 0;\n    long xsq4 = 0;\n    long xsq5\
    \ = 0;\n    long xsq6 = 0;\n    long xsq7 = 0;\n    long xsq8 = 0;\n    long xsq9\
    \ = 0;\n    long xsq10 = 0;\n    long xsq11 = 0;\n    long xsq12 = 0;\n    long\
    \ xsq13 = 0;\n    long xsq14 = 0;\n    long xsq15 = 0;\n    long xsq16 = 0;\n\
    \    long xsq17 = 0;\n    long xsq18 = 0;\n    long xsq19 = 0;\n    long xsq20\
    \ = 0;\n    long xsq21 = 0;\n    long xsq22 = 0;\n    long xsq23 = 0;\n    long\
    \ xsq24 = 0;\n    long xsq25 = 0;\n    long xsq26 = 0;\n    long xsq27 = 0;\n\
    \    long xsq28 = 0;\n    long xsq29 = 0;\n    long xsq30 = 0;\n    long xsq31\
    \ = 0;\n    long xsq32 = 0;\n    long xsq33 = 0;\n    long xsq34 = 0;\n    long\
    \ xsq35 = 0;\n    long xsq36 = 0;\n    long xsq37 = 0;\n    long xsq38 = 0;\n\
    \    long xsq39 = 0;\n    long xsq40 = 0;\n    long xsq41 = 0;\n    long xsq42\
    \ = 0;\n    long xsq43 = 0;\n    long xsq44 = 0;\n    long xsq45 = 0;\n    long\
    \ xsq46 = 0;\n    long xsq47 = 0;\n    long xsq48 = 0;\n    long xsq49 = 0;\n\
    \    long xsq50 = 0;\n    long xsq51 = 0;\n    long xsq52 = 0;\n    long xsq53\
    \ = 0;\n    long xsq54 = 0;\n    long xsq55 = 0;\n    long xsq56 = 0;\n    long\
    \ xsq57 = 0;\n    long xsq58 = 0;\n    long xsq59 = 0;\n    long xsq60 = 0;\n\
    \    long xsq61 = 0;\n    long xsq62 = 0;\n    long xsq63 = 0;\n    long xsq64\
    \ = 0;\n    long xsq65 = 0;\n    long xsq66 = 0;\n    long xsq67 = 0;\n    long\
    \ xsq68 = 0;\n    long xsq69 = 0;\n    long xsq70 = 0;\n    long x", "{\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long d = 0;\n    long xd = 0;\n\
    \    long yd = 0;\n    long zd = 0;\n    long xdd = 0;\n    long ydd = 0;\n  \
    \  long zdd = 0;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;", "{\n    long result = 0;\n    for(int i\
    \ = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    result\
    \ /= xs.length;\n    long[] derivative = new long[xs.length];\n    for(int i =\
    \ 0; i < xs.length; i++)\n    {\n        derivative[i] = result;\n    }\n    return\
    \ derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n   \
    \ double result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result\
    \ *= xs[i];\n    }\n    result /= xs.length;\n    double[] derivative = new double[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = result;\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result\
    \ *= xs[i];\n    }\n    result /= xs.length;\n    float[] derivative = new float[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = result;\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long[] result = new long[(xs.length)+1];\n\
    \    result[0] = 1;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result =\
    \ new double[(xs.length)+1];\n    result[0] = 1;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n    result[xs.length]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length)+1];\n    result[0] = 1;\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    int n = xs.length;\n\
    \    long[] ds = new long[n];\n    for(int i = 0; i < n; i++)\n        ds[i] =\
    \ xs[i];\n    for(int i = n - 1; i >= 0; i--)\n    {\n        ds[i] = (long) Math.pow(xs[i],\
    \ (double) i);\n    }\n    return ds;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] ds = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n        ds[i] = xs[i];\n    for(int i = n - 1; i >= 0; i--)\n\
    \    {\n        ds[i] = (double) Math.pow(xs[i], (double) i);\n    }\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] ds = new float[n];\n    for(int i = 0; i < n; i++)\n        ds[i]\
    \ = xs[i];\n    for(int i = n - 1; i >= 0; i--)\n    {\n        ds[i] = (float)\
    \ Math.pow(xs[i], (float) i);\n    }\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    int n = xs.length;\n\
    \    long[] d = new long[n];\n    long x = 0;\n    long xsq = 0;\n    long xsq2\
    \ = 0;\n    long xsq3 = 0;\n    long xsq4 = 0;\n    long xsq5 = 0;\n    long xsq6\
    \ = 0;\n    long xsq7 = 0;\n    long xsq8 = 0;\n    long xsq9 = 0;\n    long xsq10\
    \ = 0;\n    long xsq11 = 0;\n    long xsq12 = 0;\n    long xsq13 = 0;\n    long\
    \ xsq14 = 0;\n    long xsq15 = 0;\n    long xsq16 = 0;\n    long xsq17 = 0;\n\
    \    long xsq18 = 0;\n    long xsq19 = 0;\n    long xsq20 = 0;\n    long xsq21\
    \ = 0;\n    long xsq22 = 0;\n    long xsq23 = 0;\n    long xsq24 = 0;\n    long\
    \ xsq25 = 0;\n    long xsq26 = 0;\n    long xsq27 = 0;\n    long xsq28 = 0;\n\
    \    long xsq29 = 0;\n    long xsq30 = 0;\n    long xsq31 = 0;\n    long xsq32\
    \ = 0;\n    long xsq33 = 0;\n    long xsq34 = 0;\n    long xsq35 = 0;\n    long\
    \ xsq36 = 0;\n    long xsq37 = 0;\n    long xsq38 = 0;\n    long xsq39 = 0;\n\
    \    long xsq40 = 0;\n    long xsq41 = 0;\n    long xsq42 = 0;\n    long xsq43\
    \ = 0;\n    long xsq44 = 0;\n    long xsq45 = 0;\n    long xsq46 = 0;\n    long\
    \ xsq47 = 0;\n    long xsq48 = 0;\n    long xsq49 = 0;\n    long xsq50 = 0;\n\
    \    long xsq51 = 0;\n    long xsq52 = 0;\n    long xsq53 = 0;\n    long xsq54\
    \ = 0;\n    long xsq55 = 0;\n    long xsq56 = 0;\n    long xsq57 = 0;\n    long\
    \ xsq58 = 0;\n    long xsq59 = 0;\n    long xsq60 = 0;\n    long xsq61 = 0;\n\
    \    long xsq62 = 0;\n    long xsq63 = 0;\n    long xsq64 = 0;\n    long xsq65\
    \ = 0;\n    long xsq66 = 0;\n    long xsq67 = 0;\n    long xsq68 = 0;\n    long\
    \ xsq69 = 0;\n    long xsq70 = 0;\n    long xsq71 = 0;", "{\n    long result =\
    \ 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n\
    \    }\n    long[] result = new long[result.bitLength() + 1];\n    for(int i =\
    \ 0; i < result.bitLength(); i++)\n    {\n        result[i] = result.bitAt(i);\n\
    \    }\n    result[result.bitLength()] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree) \n{\n    long result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[]\
    \ result = new long[result.bitLength() + 1];\n    for(int i = 0; i < result.bitLength();\
    \ i++)\n    {\n        result[i] = result.bitAt(i);\n    }\n    result[result.bitLength()]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.bitLength(); i++)\n    {\n        result[i]\
    \ = result.bitAt(i);\n    }\n    result[result.bitLength()] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int degree2)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.bitLength(); i++)\n    {\n        result[i]\
    \ = result.bitAt(i);\n    }\n    result[result.bitLength()] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int degree2,\
    \ int order2) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result *= xs[i];\n    }", "{\n    long[] result = new long[(xs.length\
    \ - 1)];\n    for(int i = 0; i < result.length; i++) result[i] = 0;\n    for(int\
    \ i = 0; i < xs.length - 1; i++) result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++) result[i] = 0;\n    for(int i = 0; i < xs.length - 1; i++) result[i] =\
    \ xs[i + 1] - xs[i] * xs[i + 1];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++) result[i] = 0;\n    for(int i = 0; i < xs.length - 1;\
    \ i++) result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    int n = xs.length;\n    long[] ds = new long[n];\n \
    \   for(int i = 0; i < n; i++)\n        ds[i] = xs[i+1] - xs[i];\n    return ds;\n\
    }", "{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n   \
    \ long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6 =\
    \ xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n \
    \   long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n", "{\n    int n = xs.length;\n    long[] d = new long[n];\n    long\
    \ x = 0;\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum +=\
    \ xs[i] * x;\n        d[i] = sum;\n        x += xs[i];\n    }\n    return d;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] d = new double[n];\n    double x = 0;\n    double sum = 0;\n   \
    \ for (int i = 0; i < n; i++) {\n        sum += xs[i] * x;\n        d[i] = sum;\n\
    \        x += xs[i];\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] d = new float[n];\n    float x\
    \ = 0;\n    float sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum +=\
    \ xs[i] * x;\n        d[i] = sum;\n        x += xs[i];\n    }\n    return d;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        res += xs[i] * derivative(xs, i + 1);\n    }\n    return res;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i) \n{\n    long res = 0;\n\
    \    for(int j = i; j < xs.length; j++)\n    {\n        res += xs[j] * derivative(xs,\
    \ j + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j) \n{\n    long res = 0;\n    for(int k = i; k < j; k++)\n    {\n        res\
    \ += xs[k] * derivative(xs, i + 1, k + 1);\n    }\n    return res;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative(long[] xs, int i, int j, int k) \n{\n    long res\
    \ = 0;\n    for(int l = i; l < j; l++)\n    {\n        res += xs[l] * derivative(xs,\
    \ i + 1, k + 1, l + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i, int j, int k, int l) \n{\n    long res = 0;\n    for(int m = i; m\
    \ < j; m++)\n    {\n        res += xs[m] * derivative(xs, i + 1, k + 1, l + 1,\
    \ m + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k, int l, int m) \n{\n    long res = 0;\n    for(int n = i; n < j; n++)\n\
    \    {\n        res += xs[n] * derivative(xs, i + 1, k + 1, l + 1, m + 1, n +\
    \ 1);\n    }\n    return res;\n}\n/*\n", "{\n    int n = xs.length;\n    long[]\
    \ result = new long[n];\n    for(int i = 0; i < n; ++i)\n        result[i] = xs[i]\
    \ * derivative(xs, i - 1);\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; ++i)\n        result[i] = xs[i] * derivative(xs, i - 1);\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    for(int i = 0;\
    \ i < n; ++i)\n        result[i] = xs[i] * derivative(xs, i - 1);\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/", "{\n    int n = xs.length;\n    long[] d = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     y = xs[i];\n        d[i] = 1;\n        for(int j = i+1; j < n; j++)\n  \
    \      {\n            d[i] += xs[j] * y;\n        }\n        x += y;\n    }\n\
    \    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] d = new double[n];\n    double x = 0;\n\
    \    double y = 0;\n    for(int i = 0; i < n; i++)\n    {\n        y = xs[i];\n\
    \        d[i] = 1;\n        for(int j = i+1; j < n; j++)\n        {\n        \
    \    d[i] += xs[j] * y;\n        }\n        x += y;\n    }\n    return d;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] d = new float[n];\n    float x = 0;\n    float y = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        y = xs[i];\n        d[i] = 1;\n        for(int\
    \ j = i+1; j < n; j++)\n        {\n            d[i] += xs[j] * y;\n        }\n\
    \        x += y;\n    }\n    return d;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long[] result\
    \ = new long[(xs.length - 1)];\n    for(int i = 0; i < xs.length - 1; i++)\n \
    \   {\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result =\
    \ new double[(xs.length - 1)];\n    for(int i = 0; i < xs.length - 1; i++)\n \
    \   {\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length - 1)];\n    for(int i = 0; i < xs.length - 1; i++)\n    {\n\
    \        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        d *= xs[i];\n    }\n    long[] ds = new long[xs.length + 1];\n\
    \    ds[0] = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        ds[i +\
    \ 1] = ds[i];\n        ds[i] *= d;\n    }\n    return ds;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double d = 1;\n    for(int i = 0; i\
    \ < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n    double[] ds = new\
    \ double[xs.length + 1];\n    ds[0] = 1;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        ds[i + 1] = ds[i];\n        ds[i] *= d;\n    }\n    return ds;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float d = 1;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n    float[] ds\
    \ = new float[xs.length + 1];\n    ds[0] = 1;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        ds[i + 1] = ds[i];\n        ds[i] *= d;\n    }\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/", "{\n    long[] result = new long[(xs.length - 1)];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        x = xs[i];\n        y = x * x;\n        result[i] = y;\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int order)\
    \ \n{\n    long[] result = new long[(xs.length - order)];\n    long x = 0;\n \
    \   long y = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        x = xs[i];\n\
    \        y = x * x;\n        result[i] = y;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int order, int degree) \n{\n   \
    \ long[] result = new long[(xs.length - order)];\n    long x = 0;\n    long y\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        x = xs[i];\n  \
    \      y = x * x;\n        result[i] = y;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int order, int degree, int power)\
    \ \n{\n    long[] result = new long[(xs.length - order)];\n    long x = 0;\n \
    \   long y = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        x = xs[i];\n\
    \        y = x * x;\n        result[i] = y;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int order, int degree, int power,\
    \ int power2) \n{\n    long[] result = new long[(xs.length - order)];\n    long\
    \ x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n   \
    \     x = xs[i];\n        y = x * x;\n        result[i] = y;\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] ", "{\n    int n = xs.length;\n\
    \    long[] d = new long[n];\n    long x = 0;\n    for(int i = 0; i < n; ++i)\n\
    \    {\n        d[i] = 1;\n        for(int j = i; j < n; ++j)\n        {\n   \
    \         d[i] *= xs[j];\n        }\n        x += xs[i] * d[i];\n    }\n    return\
    \ d;\n}\n</code>\n<|/ a tags=c#,polynomial-math,math,algorithm |>\n<| c |>\nThis\
    \ doesn't work for polynomials with repeated coefficients. For example, `derivative([1,1,1])`\
    \ returns `[1,1,1]` instead of `[1,1,-1]`.\n<|/ c |>\n<| c |>\nI fixed the bug\
    \ and added a test case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug and added a test case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n\
    I fixed the bug and added a test case. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nI fixed the bug and added a test case. Thanks for pointing it out.\n\
    <|/ c |>\n<| a dscore=4 |>\nThe simplest way to do this in C# is to use LINQ:\n\
    <code>\npublic static IEnumerable<double> Derivative(IEnumerable<double> xs)\n\
    {\n    return xs.Select((x, i) => x * (i + 1));\n}\n</code>\n<|/ a tags=c#,polynomial-math,math,algorithm\
    \ |>\n<| c |>\nThis doesn't work for polynomials with repeated coefficients. For\
    \ example, `Derivative([1,1,1])` returns `[1,1,1]` instead of `[1,1,-1]`.\n<|/\
    \ c |>\n<| c |>\nI fixed the bug and added a test case. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| a dscore=4 |>\nI wrote a C# program to solve this problem\
    \ using recursion.\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;", "{\n    long result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[]\
    \ result = new long[result.bitLength() + 1];\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = result;\n    }\n    result[result.length -\
    \ 1] = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   result *= xs[i];\n    }\n    double[] result = new double[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = result;\n    }\n    result[result.length - 1] = 1;\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    float[] result = new float[result.bitLength() + 1];\n    for(int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = result;\n    }\n    result[result.length\
    \ - 1] = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long x0 = xs[0];\n    long x1\
    \ = xs[1];\n    long x2 = xs[2];\n    long x3 = xs[3];\n    long x4 = xs[4];\n\
    \    long x5 = xs[5];\n    long x6 = xs[6];\n    long x7 = xs[7];\n    long x8\
    \ = xs[8];\n    long x9 = xs[9];\n    long x10 = xs[10];\n    long x11 = xs[11];\n\
    \    long x12 = xs[12];\n    long x13 = xs[13];\n    long x14 = xs[14];\n    long\
    \ x15 = xs[15];\n    long x16 = xs[16];\n    long x17 = xs[17];\n    long x18\
    \ = xs[18];\n    long x19 = xs[19];\n    long x20 = xs[20];\n    long x21 = xs[21];\n\
    \    long x22 = xs[22];\n    long x23 = xs[23];\n    long x24 = xs[24];\n    long\
    \ x25 = xs[25];\n    long x26 = xs[26];\n    long x27 = xs[27];\n    long x28\
    \ = xs[28];\n    long x29 = xs[29];\n    long x30 = xs[30];\n    long x31 = xs[31];\n\
    \    long x32 = xs[32];\n    long x33 = xs[33];\n    long x34 = xs[34];\n    long\
    \ x35 = xs[35];\n    long x36 = xs[36];\n    long x37 = xs[37];\n    long x38\
    \ = xs[38];\n    long x39 = xs[39];\n    long x40 = xs[40];\n    long x41 = xs[41];\n\
    \    long x42 = xs[42];\n    long x43 = xs[43];\n    long x44 = xs[44];\n    long\
    \ x45 = xs[45];\n    long x46 = xs[46];\n    long x47 = xs[47];\n    long x48\
    \ = xs[48];\n    long x49 = xs[49];\n    long x50 = xs[50];\n    long x51 = xs[51];\n\
    \    long x52 = xs[52];\n    long x53 = xs[53];\n    long x54 = xs[54];\n    long\
    \ x55 = xs[55];\n    long x56 = xs[56];\n", "{\n    long x = 0;\n    long y =\
    \ 0;\n    long z = 0;\n    long xd = 0;\n    long yd = 0;\n    long zd = 0;\n\
    \    long xdd = 0;\n    long ydd = 0;\n    long zdd = 0;\n    long xdd = 1;\n\
    \    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n\
    \    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n\
    \    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n\
    \    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n\
    \    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n\
    \    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n\
    \    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n\
    \    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n\
    \    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n\
    \    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n\
    \    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zd", "{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i] - xs[n - i -\
    \ 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    for(int i =\
    \ 0; i < n; i++)\n    {\n        result[i] = xs[i] - xs[n - i - 1];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        result[i] = xs[i] - xs[n - i - 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/", "{\n    int n = xs.length;\n    long[] d = new long[n];\n\
    \    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += xs[i];\n\
    \        d[i] = sum;\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int n) \n{\n    long[] d = new long[n];\n    long sum = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        sum += xs[i];\n        d[i] = sum;\n    }\n  \
    \  return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int m)\
    \ \n{\n    long[] d = new long[n];\n    long sum = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += xs[i];\n        d[i] = sum;\n    }\n    return d;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int n, int m, int n) \n{\n   \
    \ long[] d = new long[n];\n    long sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += xs[i];\n        d[i] = sum;\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int n, int m, int n, int m) \n{\n\
    \    long[] d = new long[n];\n    long sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += xs[i];\n        d[i] = sum;\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int n, int m, int n, int m, int\
    \ n) \n{\n    long[] d = new long[n];\n    long sum = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        sum += xs[i];\n        d[i] = sum;\n    }\n    return\
    \ d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + ", "{\n\
    \    int n = xs.length;\n    long[] d = new long[n];\n    long x = 0;\n    long\
    \ y = 0;\n    for(int i = 0; i < n; i++)\n    {\n        y = xs[i];\n        d[i]\
    \ = 1;\n        for(int j = 1; j < n; j++)\n        {\n            x += xs[j];\n\
    \            d[i] *= x;\n        }\n    }\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int n) \n{\n    long[] d = new long[n];\n    long\
    \ x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++)\n    {\n        y =\
    \ xs[i];\n        d[i] = 1;\n        for(int j = 1; j < n; j++)\n        {\n \
    \           x += xs[j];\n            d[i] *= x;\n        }\n    }\n    return\
    \ d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int n, int m) \n{\n  \
    \  long[] d = new long[n];\n    long x = 0;\n    long y = 0;\n    for(int i =\
    \ 0; i < n; i++)\n    {\n        y = xs[i];\n        d[i] = 1;\n        for(int\
    \ j = 1; j < n; j++)\n        {\n            x += xs[j];\n            d[i] *=\
    \ x;\n        }\n    }\n    return d;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int n, int m, int n) \n{\n    long[] d = new long[n];\n    long x = 0;\n\
    \    long y = 0;\n    for(int i = 0; i < n; i++)\n    {\n        y = xs[i];\n\
    \        d[i] = 1;\n        for(int j = 1; j < n; j++)\n        {\n          \
    \  x += xs[j];\n            d[i] *= x;\n        }\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int n, int m, int n, int m) \n{\n\
    \    long[] d = new long[n];\n    long x = 0;\n    long y = 0;\n    for(int i\
    \ = 0; i < n; i++)\n", "{\n    long[] result = new long[(xs.length - 1)];\n  \
    \  long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n\
    \    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n\
    \    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n    long l =\
    \ xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o = xs[14];\n\
    \    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n    long s\
    \ = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n\
    \    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n    long z\
    \ = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n\
    \    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n    long g\
    \ = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n\
    \    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n    long n\
    \ = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n\
    \    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n    long u\
    \ = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n\
    \    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n    long b\
    \ = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n\
    \    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n    long i\
    \ = xs[60];\n    long j = xs[61];\n    long k = xs[", "{\n    long result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    long[] result = new long[xs.length + 1];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i] = result;\n    }\n    result[xs.length] = 1;\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   result *= xs[i];\n    }\n    double[] result = new double[xs.length + 1];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = result;\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] result = new float[xs.length\
    \ + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = result;\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n\
    \    }\n    long[] result = new long[result.bitLength() + 1];\n    for(int i =\
    \ 0; i < result.bitLength(); i++)\n    {\n        result[i] = result.bitAt(i);\n\
    \    }\n    result[result.bitLength()] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree) \n{\n    long result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[]\
    \ result = new long[result.bitLength() + 1];\n    for(int i = 0; i < result.bitLength();\
    \ i++)\n    {\n        result[i] = result.bitAt(i);\n    }\n    result[result.bitLength()]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.bitLength(); i++)\n    {\n        result[i]\
    \ = result.bitAt(i);\n    }\n    result[result.bitLength()] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int degree2)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.bitLength(); i++)\n    {\n        result[i]\
    \ = result.bitAt(i);\n    }\n    result[result.bitLength()] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int degree2,\
    \ int order2) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result *= xs[i];\n    }", "{\n    long x0 = xs[0];\n    long x1\
    \ = xs[1];\n    long x2 = xs[2];\n    long x3 = xs[3];\n    long x4 = xs[4];\n\
    \    long x5 = xs[5];\n    long x6 = xs[6];\n    long x7 = xs[7];\n    long x8\
    \ = xs[8];\n    long x9 = xs[9];\n    long x10 = xs[10];\n    long x11 = xs[11];\n\
    \    long x12 = xs[12];\n    long x13 = xs[13];\n    long x14 = xs[14];\n    long\
    \ x15 = xs[15];\n    long x16 = xs[16];\n    long x17 = xs[17];\n    long x18\
    \ = xs[18];\n    long x19 = xs[19];\n    long x20 = xs[20];\n    long x21 = xs[21];\n\
    \    long x22 = xs[22];\n    long x23 = xs[23];\n    long x24 = xs[24];\n    long\
    \ x25 = xs[25];\n    long x26 = xs[26];\n    long x27 = xs[27];\n    long x28\
    \ = xs[28];\n    long x29 = xs[29];\n    long x30 = xs[30];\n    long x31 = xs[31];\n\
    \    long x32 = xs[32];\n    long x33 = xs[33];\n    long x34 = xs[34];\n    long\
    \ x35 = xs[35];\n    long x36 = xs[36];\n    long x37 = xs[37];\n    long x38\
    \ = xs[38];\n    long x39 = xs[39];\n    long x40 = xs[40];\n    long x41 = xs[41];\n\
    \    long x42 = xs[42];\n    long x43 = xs[43];\n    long x44 = xs[44];\n    long\
    \ x45 = xs[45];\n    long x46 = xs[46];\n    long x47 = xs[47];\n    long x48\
    \ = xs[48];\n    long x49 = xs[49];\n    long x50 = xs[50];\n    long x51 = xs[51];\n\
    \    long x52 = xs[52];\n    long x53 = xs[53];\n    long x54 = xs[54];\n    long\
    \ x55 = xs[55];\n    long x56 = xs[56];\n", "{\n    long result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[]\
    \ result = new long[result.bitLength() + 1];\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = result;\n    }\n    result[result.length -\
    \ 1] = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = result;\n    }\n    result[result.length - 1] = 1;\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order) \n{\n \
    \   long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result\
    \ *= xs[i];\n    }\n    long[] result = new long[result.bitLength() + 1];\n  \
    \  for(int i = 0; i < result.length; i++)\n    {\n        result[i] = result;\n\
    \    }\n    result[result.length - 1] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, int scale) \n{\n    long result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n\
    \    }\n    long[] result = new long[result.bitLength() + 1];\n    for(int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = result;\n    }\n    result[result.length\
    \ - 1] = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order, int scale, int precision) \n{\n    long result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[]\
    \ result = new long[result.bitLength() + 1];\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = result;\n    }\n", "{\n    long[] result =\
    \ new long[(xs.length)+1];\n    result[0] = 1;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long[] result\
    \ = new long[(xs.length)+1];\n    result[0] = 1;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order) \n{\n \
    \   long[] result = new long[(xs.length)+1];\n    result[0] = 1;\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order, int degree2) \n{\n    long[] result = new long[(xs.length)+1];\n\
    \    result[0] = 1;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int degree2, int order2) \n{\n    long[] result =\
    \ new long[(xs.length)+1];\n    result[0] = 1;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int degree2,\
    \ int order2, int degree3) \n{\n    long[] result = new long[(xs.length)+1];\n\
    \    result[0] = 1;\n    for(int i = 1; i < ", "{\n    long[] result = new long[(xs.length\
    \ - 1)];\n    for(int i = 0; i < result.length; i++) result[i] = 0;\n    for(int\
    \ i = 1; i < xs.length; i++) result[i] = result[i-1] + xs[i] * xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++) result[i] = 0;\n    for(int i = 1; i < xs.length; i++) result[i] = result[i-1]\
    \ + xs[i] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++) result[i] = 0;\n    for(int i = 1; i < xs.length; i++)\
    \ result[i] = result[i-1] + xs[i] * xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/",
  "{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n    long x3\
    \ = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6 = xs[6];\n\
    \    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n    long x10\
    \ = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long x13 = xs[13];\n\
    \    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16 = xs[16];\n    long\
    \ x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n    long x20\
    \ = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long x23 = xs[23];\n\
    \    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26 = xs[26];\n    long\
    \ x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n    long x30\
    \ = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long x33 = xs[33];\n\
    \    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36 = xs[36];\n    long\
    \ x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n    long x40\
    \ = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long x43 = xs[43];\n\
    \    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46 = xs[46];\n    long\
    \ x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n    long x50\
    \ = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long x53 = xs[53];\n\
    \    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56 = xs[56];\n", "{\n\
    \    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        res\
    \ += xs[i] * derivative(xs, i);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i) \n{\n    long res = 0;\n    for(int j = 0;\
    \ j < i; j++)\n    {\n        res += xs[j] * derivative(xs, j);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int i, int j) \n{\n  \
    \  long res = 0;\n    for(int k = 0; k < j; k++)\n    {\n        res += xs[k]\
    \ * derivative(xs, i, k);\n    }\n    return res;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i, int j, int k) \n{\n    long res = 0;\n    for(int l = 0; l < k; l++)\n\
    \    {\n        res += xs[l] * derivative(xs, i, j, l);\n    }\n    return res;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int l) \n\
    {\n    long res = 0;\n    for(int m = 0; m < l; m++)\n    {\n        res += xs[m]\
    \ * derivative(xs, i, j, k, l);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k, int l, int m) \n{\n    long\
    \ res = 0;\n    for(int n = 0; n < m; n++)\n    {\n        res += xs[n] * derivative(xs,\
    \ i, j, k, l, m);\n    }\n    return res;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ", "{\n    long x = xs[0];\n\
    \    long x2 = xs[1];\n    long x3 = xs[2];\n    long x4 = xs[3];\n    long x5\
    \ = xs[4];\n    long x6 = xs[5];\n    long x7 = xs[6];\n    long x8 = xs[7];\n\
    \    long x9 = xs[8];\n    long x10 = xs[9];\n    long x11 = xs[10];\n    long\
    \ x12 = xs[11];\n    long x13 = xs[12];\n    long x14 = xs[13];\n    long x15\
    \ = xs[14];\n    long x16 = xs[15];\n    long x17 = xs[16];\n    long x18 = xs[17];\n\
    \    long x19 = xs[18];\n    long x20 = xs[19];\n    long x21 = xs[20];\n    long\
    \ x22 = xs[21];\n    long x23 = xs[22];\n    long x24 = xs[23];\n    long x25\
    \ = xs[24];\n    long x26 = xs[25];\n    long x27 = xs[26];\n    long x28 = xs[27];\n\
    \    long x29 = xs[28];\n    long x30 = xs[29];\n    long x31 = xs[30];\n    long\
    \ x32 = xs[31];\n    long x33 = xs[32];\n    long x34 = xs[33];\n    long x35\
    \ = xs[34];\n    long x36 = xs[35];\n    long x37 = xs[36];\n    long x38 = xs[37];\n\
    \    long x39 = xs[38];\n    long x40 = xs[39];\n    long x41 = xs[40];\n    long\
    \ x42 = xs[41];\n    long x43 = xs[42];\n    long x44 = xs[43];\n    long x45\
    \ = xs[44];\n    long x46 = xs[45];\n    long x47 = xs[46];\n    long x48 = xs[47];\n\
    \    long x49 = xs[48];\n    long x50 = xs[49];\n    long x51 = xs[50];\n    long\
    \ x52 = xs[51];\n    long x53 = xs[52];\n    long x54 = xs[53];\n    long x55\
    \ = xs[54];\n    long x56 = xs[55];\n    long x57 = xs[56];\n", "{\n    long result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result += (long)(xs[i]\
    \ * xs[i]);\n    }\n    long[] result = new long[result.__len__()];\n    for(int\
    \ i = 0; i < result.__len__(); i++)\n    {\n        result[i] = (long)Math.pow(xs[i],\
    \ 2);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   result += (double)(xs[i] * xs[i]);\n    }\n    double[] result = new double[result.__len__()];\n\
    \    for(int i = 0; i < result.__len__(); i++)\n    {\n        result[i] = Math.pow(xs[i],\
    \ 2);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += (float)(xs[i] * xs[i]);\n    }\n    float[] result = new float[result.__len__()];\n\
    \    for(int i = 0; i < result.__len__(); i++)\n    {\n        result[i] = Math.pow(xs[i],\
    \ 2);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += (long)Math.pow(xs[i], 2);\n\
    \    }\n    long[] result = new long[result.length + 1];\n    result[0] = result;\n\
    \    for(int i = 1; i < result.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        result += (double)Math.pow(xs[i], 2);\n    }\n    double[] result\
    \ = new double[result.length + 1];\n    result[0] = result;\n    for(int i = 1;\
    \ i < result.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += (float)Math.pow(xs[i], 2);\n    }\n    float[] result = new float[result.length\
    \ + 1];\n    result[0] = result;\n    for(int i = 1; i < result.length; i++)\n\
    \    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2\
    \ = xs[2];\n    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n\
    \    long x6 = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9\
    \ = xs[9];\n    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n\
    \    long x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long\
    \ x16 = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19\
    \ = xs[19];\n    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n\
    \    long x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long\
    \ x26 = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29\
    \ = xs[29];\n    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n\
    \    long x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long\
    \ x36 = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39\
    \ = xs[39];\n    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n\
    \    long x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long\
    \ x46 = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49\
    \ = xs[49];\n    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n\
    \    long x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long\
    \ x56 = xs[56];\n", "{\n    long x = 0;\n    long y = 0;\n    long z = 0;\n  \
    \  long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n \
    \   long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l\
    \ = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n \
    \   long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u\
    \ = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n \
    \   long z = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g\
    \ = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n \
    \   long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p\
    \ = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n \
    \   long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y\
    \ = 0;\n    long z = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long d = 0;\n    long e = 0;\n    long f\
    \ = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n \
    \   long k = 0;\n    long l = 0;\n    long m", "{\n    int n = xs.length;\n  \
    \  long[] ys = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n        ys[i]\
    \ = xs[i] * derivative(xs, n - i - 1);\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int n) \n{\n    long[] ys = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        ys[i] = xs[i] * derivative(xs, n - i - 1);\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int\
    \ i) \n{\n    long[] ys = new long[n];\n    for(int j = 0; j < n; j++)\n    {\n\
    \        ys[j] = xs[i] * derivative(xs, n - i - 1, j);\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int n, int i, int j) \n{\n   \
    \ long[] ys = new long[n];\n    for(int k = 0; k < n; k++)\n    {\n        ys[k]\
    \ = xs[i] * derivative(xs, n - i - 1, j, k);\n    }\n    return ys;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative(long[] xs, int n, int i, int j, int k) \n{\n  \
    \  long[] ys = new long[n];\n    for(int l = 0; l < n; l++)\n    {\n        ys[l]\
    \ = xs[i] * derivative(xs, n - i - 1, j, k, l);\n    }\n    return ys;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int n, int i, int j, int k, int\
    \ l) \n{\n    long[] ys = new long[n];\n    for(int m = 0; m < n; m++)\n    {\n\
    \        ys[m] = ", "{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n        result[i] = xs[i] * derivative(xs, n\
    \ - 1);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    for(int i =\
    \ 0; i < n; i++)\n        result[i] = xs[i] * derivative(xs, n - 1);\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    for(int i = 0; i < n; i++)\n        result[i]\
    \ = xs[i] * derivative(xs, n - 1);\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    int n = xs.length;\n\
    \    long[] d = new long[n];\n    for(int i = 0; i < n; ++i)\n        d[i] = xs[i+1]\
    \ - xs[i] * xs[i] / xs[i];\n    return d;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] d = new double[n];\n    for(int\
    \ i = 0; i < n; ++i)\n        d[i] = xs[i+1] - xs[i] * xs[i] / xs[i];\n    return\
    \ d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] d = new float[n];\n    for(int i = 0; i < n; ++i)\n        d[i] =\
    \ xs[i+1] - xs[i] * xs[i] / xs[i];\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long x0 = xs[0];\n\
    \    long x1 = xs[1];\n    long x2 = xs[2];\n    long x3 = xs[3];\n    long x4\
    \ = xs[4];\n    long x5 = xs[5];\n    long x6 = xs[6];\n    long x7 = xs[7];\n\
    \    long x8 = xs[8];\n    long x9 = xs[9];\n    long x10 = xs[10];\n    long\
    \ x11 = xs[11];\n    long x12 = xs[12];\n    long x13 = xs[13];\n    long x14\
    \ = xs[14];\n    long x15 = xs[15];\n    long x16 = xs[16];\n    long x17 = xs[17];\n\
    \    long x18 = xs[18];\n    long x19 = xs[19];\n    long x20 = xs[20];\n    long\
    \ x21 = xs[21];\n    long x22 = xs[22];\n    long x23 = xs[23];\n    long x24\
    \ = xs[24];\n    long x25 = xs[25];\n    long x26 = xs[26];\n    long x27 = xs[27];\n\
    \    long x28 = xs[28];\n    long x29 = xs[29];\n    long x30 = xs[30];\n    long\
    \ x31 = xs[31];\n    long x32 = xs[32];\n    long x33 = xs[33];\n    long x34\
    \ = xs[34];\n    long x35 = xs[35];\n    long x36 = xs[36];\n    long x37 = xs[37];\n\
    \    long x38 = xs[38];\n    long x39 = xs[39];\n    long x40 = xs[40];\n    long\
    \ x41 = xs[41];\n    long x42 = xs[42];\n    long x43 = xs[43];\n    long x44\
    \ = xs[44];\n    long x45 = xs[45];\n    long x46 = xs[46];\n    long x47 = xs[47];\n\
    \    long x48 = xs[48];\n    long x49 = xs[49];\n    long x50 = xs[50];\n    long\
    \ x51 = xs[51];\n    long x52 = xs[52];\n    long x53 = xs[53];\n    long x54\
    \ = xs[54];\n    long x55 = xs[55];\n    long x56 = xs[56];\n", "{\n    long[]\
    \ derivative = new long[(xs.length + 1)];\n    derivative[0] = xs[0];\n    derivative[1]\
    \ = xs[1];\n    for (int i = 2; i < derivative.length; i++)\n    {\n        derivative[i]\
    \ = (derivative[i - 1] * xs[i]) - (derivative[i - 2] * xs[i - 1]);\n    }\n  \
    \  return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] derivative = new double[(xs.length + 1)];\n    derivative[0] = xs[0];\n\
    \    derivative[1] = xs[1];\n    for (int i = 2; i < derivative.length; i++)\n\
    \    {\n        derivative[i] = (derivative[i - 1] * xs[i]) - (derivative[i -\
    \ 2] * xs[i - 1]);\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] derivative = new float[(xs.length + 1)];\n    derivative[0]\
    \ = xs[0];\n    derivative[1] = xs[1];\n    for (int i = 2; i < derivative.length;\
    \ i++)\n    {\n        derivative[i] = (derivative[i - 1] * xs[i]) - (derivative[i\
    \ - 2] * xs[i - 1]);\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n\
    \    }\n    long[] result = new long[result.bitLength()];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = result / xs[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = result\
    \ / xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[] result\
    \ = new long[result.bitLength()];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = result / xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int degree, int order, int scale)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = result\
    \ / xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int scale, int degree2) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n  \
    \  }\n    long[] result = new long[result.bitLength()];\n    for (int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = result / xs[i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ", "{\n    long n = xs.length;\n    long[] ds =\
    \ new long[n];\n    for(int i = 0; i < n; ++i)\n        ds[i] = xs[i] * derivative(xs,\
    \ 0, i-1);\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j) \n{\n    long n = xs.length;\n    long[] ds = new long[n];\n    for(int k\
    \ = i; k <= j; ++k)\n        ds[k] = xs[k] * derivative(xs, i, k-1);\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int i, int j, int k) \n\
    {\n    long n = xs.length;\n    long[] ds = new long[n];\n    for(int l = i; l\
    \ <= j; ++l)\n        ds[l] = xs[l] * derivative(xs, i, l-1, k);\n    return ds;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int l) \n\
    {\n    long n = xs.length;\n    long[] ds = new long[n];\n    for(int m = i; m\
    \ <= j; ++m)\n        ds[m] = xs[m] * derivative(xs, i, m-1, k, l);\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int\
    \ l, int m) \n{\n    long n = xs.length;\n    long[] ds = new long[n];\n    for(int\
    \ n = i; n <= j; ++n)\n        ds[n] = xs[n] * derivative(xs, i, n-1, k, l, m);\n\
    \    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k, int l, int m, int n", "{\n    int n = xs.length;\n    long[] ys =\
    \ new long[n];\n    for(int i = 0; i < n; i++)\n    {\n        ys[i] = xs[i];\n\
    \    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n        ys[i] = ys[i + 1]\
    \ * xs[i];\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] ys = new double[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        ys[i] = xs[i];\n    }\n    for(int i = n - 1; i\
    \ >= 0; i--)\n    {\n        ys[i] = ys[i + 1] * xs[i];\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] ys = new float[n];\n    for(int i = 0; i < n; i++)\n    {\n     \
    \   ys[i] = xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n      \
    \  ys[i] = ys[i + 1] * xs[i];\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    int n = xs.length;\n\
    \    long[] ds = new long[n];\n    for(int i = 0; i < n; i++)\n        ds[i] =\
    \ xs[i] * derivative(xs, n - i - 1);\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int n) \n{\n    long[] ds = new long[n];\n    for(int i = 0; i < n; i++)\n\
    \        ds[i] = xs[i] * derivative(xs, n - i - 1);\n    return ds;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative(long[] xs, int n, int i) \n{\n    long[] ds = new\
    \ long[n];\n    for(int j = 0; j < n; j++)\n        ds[j] = xs[j] * derivative(xs,\
    \ n - i - 1, j);\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int\
    \ i, int j) \n{\n    long[] ds = new long[n];\n    for(int k = 0; k < n; k++)\n\
    \        ds[k] = xs[k] * derivative(xs, n - i - 1, j, k);\n    return ds;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int n, int i, int j, int k) \n\
    {\n    long[] ds = new long[n];\n    for(int l = 0; l < n; l++)\n        ds[l]\
    \ = xs[l] * derivative(xs, n - i - 1, j, k, l);\n    return ds;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int n, int i, int j, int k, int l) \n{\n    long[]\
    \ ds = new long[n];\n    for(int m = 0; m < n; m++)\n        ds[m] = xs[m] * derivative(xs,\
    \ n - i - 1, j, k, l, m);\n    return ds;\n}\n/*", "{\n    long[] result = new\
    \ long[xs.length];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i] * derivative(xs, i - 1);\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n    }\n    result /= xs.length;\n    long[] derivative = new long[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = result;\n\
    \    }\n    return derivative;\n}", "{\n    int n = xs.length;\n    long[] d =\
    \ new long[n];\n    for(int i = 0; i < n; i++)\n        d[i] = xs[i+1] - xs[i];\n\
    \    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] d = new double[n];\n    for(int i = 0; i\
    \ < n; i++)\n        d[i] = xs[i+1] - xs[i];\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] d = new\
    \ float[n];\n    for(int i = 0; i < n; i++)\n        d[i] = xs[i+1] - xs[i];\n\
    \    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long x = xs[0];\n    long x0 =\
    \ xs[1];\n    long x1 = xs[2];\n    long x2 = xs[3];\n    long x3 = xs[4];\n \
    \   long x4 = xs[5];\n    long x5 = xs[6];\n    long x6 = xs[7];\n    long x7\
    \ = xs[8];\n    long x8 = xs[9];\n    long x9 = xs[10];\n    long x10 = xs[11];\n\
    \    long x11 = xs[12];\n    long x12 = xs[13];\n    long x13 = xs[14];\n    long\
    \ x14 = xs[15];\n    long x15 = xs[16];\n    long x16 = xs[17];\n    long x17\
    \ = xs[18];\n    long x18 = xs[19];\n    long x19 = xs[20];\n    long x20 = xs[21];\n\
    \    long x21 = xs[22];\n    long x22 = xs[23];\n    long x23 = xs[24];\n    long\
    \ x24 = xs[25];\n    long x25 = xs[26];\n    long x26 = xs[27];\n    long x27\
    \ = xs[28];\n    long x28 = xs[29];\n    long x29 = xs[30];\n    long x30 = xs[31];\n\
    \    long x31 = xs[32];\n    long x32 = xs[33];\n    long x33 = xs[34];\n    long\
    \ x34 = xs[35];\n    long x35 = xs[36];\n    long x36 = xs[37];\n    long x37\
    \ = xs[38];\n    long x38 = xs[39];\n    long x39 = xs[40];\n    long x40 = xs[41];\n\
    \    long x41 = xs[42];\n    long x42 = xs[43];\n    long x43 = xs[44];\n    long\
    \ x44 = xs[45];\n    long x45 = xs[46];\n    long x46 = xs[47];\n    long x47\
    \ = xs[48];\n    long x48 = xs[49];\n    long x49 = xs[50];\n    long x50 = xs[51];\n\
    \    long x51 = xs[52];\n    long x52 = xs[53];\n    long x53 = xs[54];\n    long\
    \ x54 = xs[55];\n    long x55 = xs[56];\n    long ", "{\n    long[] result = new\
    \ long[(xs.length + 1)];\n    long x = 0;\n    long y = 0;\n    long sum = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        sum += xs[i];\n    }\n\
    \    result[0] = sum;\n    for (int i = 1; i < result.length; i++)\n    {\n  \
    \      x = sum;\n        y = result[i-1];\n        result[i] = y;\n        for\
    \ (int j = 1; j < xs.length; j++)\n        {\n            sum += xs[j] * y;\n\
    \        }\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree) \n{\n    long[] result = new long[(xs.length + 1)];\n    long\
    \ x = 0;\n    long y = 0;\n    long sum = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        sum += xs[i];\n    }\n    result[0] = sum;\n    for (int\
    \ i = 1; i < result.length; i++)\n    {\n        x = sum;\n        y = result[i-1];\n\
    \        result[i] = y;\n        for (int j = 1; j < xs.length; j++)\n       \
    \ {\n            sum += xs[j] * y;\n        }\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order) \n{\n \
    \   long[] result = new long[(xs.length + 1)];\n    long x = 0;\n    long y =\
    \ 0;\n    long sum = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    sum += xs[i];\n    }\n    result[0] = sum;\n    for (int i = 1; i < result.length;\
    \ i++)\n    {\n        x = sum;\n        y = result[i-1];\n        result[i] =\
    \ y;\n        for (int j = 1; j < xs.length; j++)\n        {\n            sum\
    \ += xs[j] * y;\n        }\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int degree2) \n{\n    long[] result = new long[(xs.length\
    \ + 1)];\n    long x = 0;\n    long y = 0;\n    long sum = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        sum += xs[i];\n    }\n    result[0]\
    \ = sum;\n    for (int i = 1; i < result.length; i++)\n    {\n        x = sum;",
  "{\n    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        res\
    \ += xs[i] * derivative(xs, i, xs.length - 1);\n    }\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int i, int j) \n{\n    long res\
    \ = 0;\n    if(i == j)\n    {\n        return xs[i];\n    }\n    else\n    {\n\
    \        res += xs[i] * derivative(xs, i, j);\n    }\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int i, int j, int k) \n{\n    long\
    \ res = 0;\n    if(i == j && k == 0)\n    {\n        return xs[i];\n    }\n  \
    \  else\n    {\n        res += xs[i] * derivative(xs, i, j, k);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int\
    \ l) \n{\n    long res = 0;\n    if(i == j && k == l && l == 0)\n    {\n     \
    \   return xs[i];\n    }\n    else\n    {\n        res += xs[i] * derivative(xs,\
    \ i, j, k, l);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i, int j, int k, int l, int m) \n{\n    long res = 0;\n    if(i == j\
    \ && k == l && l == m && m == 0)\n    {\n        return xs[i];\n    }\n    else\n\
    \    {\n        res += xs[i] * derivative(xs, i, j, k, l, m);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int\
    \ l, int m, int n) \n{\n    long ", "{\n    long x = 0;\n    long[] result = new\
    \ long[(xs.length - 1)];\n    for(int i = 0; i < xs.length; i++)\n    {\n    \
    \    result[i] = xs[i + 1];\n    }\n    result[result.length - 1] = 1;\n    for(int\
    \ i = result.length - 2; i >= 0; i--)\n    {\n        result[i] *= x;\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double x = 0;\n    double[] result = new double[(xs.length - 1)];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n \
    \   result[result.length - 1] = 1;\n    for(int i = result.length - 2; i >= 0;\
    \ i--)\n    {\n        result[i] *= x;\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nfloat[] derivative(float[] xs) \n{\n    float x = 0;\n    float[]\
    \ result = new float[(xs.length - 1)];\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i] = xs[i + 1];\n    }\n    result[result.length - 1] =\
    \ 1;\n    for(int i = result.length - 2; i >= 0; i--)\n    {\n        result[i]\
    \ *= x;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long[] result = new long[(xs.length\
    \ - 1) * 2];\n    long x = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i * 2] = x;\n        result[i * 2 + 1] = xs[i] - x;\n        x\
    \ *= xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1) * 2];\n    double\
    \ x = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i * 2]\
    \ = x;\n        result[i * 2 + 1] = xs[i] - x;\n        x *= xs[i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length - 1) * 2];\n    float x = 1;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i * 2] = x;\n        result[i\
    \ * 2 + 1] = xs[i] - x;\n        x *= xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n        result[i] = xs[i] - xs[i - 1];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; i++)\n      \
    \  result[i] = xs[i] - xs[i - 1];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i] - xs[i - 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        res += xs[i] * derivative(xs, i);\n    }\n    return new long[]{res};\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i) \n{\n    long res = 0;\n\
    \    for(int j = 0; j < i; j++)\n    {\n        res += xs[i] * derivative(xs,\
    \ j);\n    }\n    return new long[]{res};\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i, int j) \n{\n    long res = 0;\n    for(int k = 0; k < j; k++)\n \
    \   {\n        res += xs[i] * derivative(xs, i, j);\n    }\n    return new long[]{res};\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k) \n{\n   \
    \ long res = 0;\n    for(int l = 0; l < k; l++)\n    {\n        res += xs[i] *\
    \ derivative(xs, i, j, l);\n    }\n    return new long[]{res};\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k, int l) \n{\n    long res = 0;\n\
    \    for(int m = 0; m < l; m++)\n    {\n        res += xs[i] * derivative(xs,\
    \ i, j, k, l);\n    }\n    return new long[]{res};\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i, int j, int k, int l, int m) \n{\n    long res = 0;\n    for(int n\
    \ = 0; n < m; n++)\n    {\n        res += xs[i] * derivative(xs, i, j, k, l, m);\n\
    \    }\n    return new long[]{res};\n}\n/*\n", "{\n    int n = xs.length;\n  \
    \  long[] result = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n     \
    \   result[i] = xs[i+1] - xs[i] * xs[i+1];\n    }\n    return result;\n}", "{\n\
    \    int n = xs.length;\n    long[] result = new long[n];\n    for(int i = 0;\
    \ i < n; i++)\n        result[i] = xs[i];\n    result[n-1] = 1;\n    for(int i\
    \ = n-2; i >= 0; i--)\n        result[i] = result[i+1] * xs[i];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; i++)\n      \
    \  result[i] = xs[i];\n    result[n-1] = 1;\n    for(int i = n-2; i >= 0; i--)\n\
    \        result[i] = result[i+1] * xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] result\
    \ = new float[n];\n    for(int i = 0; i < n; i++)\n        result[i] = xs[i];\n\
    \    result[n-1] = 1;\n    for(int i = n-2; i >= 0; i--)\n        result[i] =\
    \ result[i+1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n\
    \    }\n    long[] derivative = new long[xs.length + 1];\n    derivative[0] =\
    \ result;\n    for(int i = 1; i < xs.length; i++)\n    {\n        derivative[i]\
    \ = derivative[i - 1] * xs[i];\n    }\n    return derivative;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double result = 0;\n    for(int i =\
    \ 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    double[]\
    \ derivative = new double[xs.length + 1];\n    derivative[0] = result;\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        derivative[i] = derivative[i - 1]\
    \ * xs[i];\n    }\n    return derivative;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] derivative = new float[xs.length\
    \ + 1];\n    derivative[0] = result;\n    for(int i = 1; i < xs.length; i++)\n\
    \    {\n        derivative[i] = derivative[i - 1] * xs[i];\n    }\n    return\
    \ derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n            \n*/", "{\n    int n = xs.length;\n    long[] result\
    \ = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i];\n\
    \    }\n    result[n-1] = 1;\n    for(int i = n-2; i >= 0; i--)\n    {\n     \
    \   result[i] = result[i+1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    int n = xs.length;\n    double[] result\
    \ = new double[n];\n    for(int i = 0; i < n; i++)\n    {\n        result[i] =\
    \ xs[i];\n    }\n    result[n-1] = 1;\n    for(int i = n-2; i >= 0; i--)\n   \
    \ {\n        result[i] = result[i+1] * xs[i];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    for(int i = 0; i < n; i++)\n    {\n \
    \       result[i] = xs[i];\n    }\n    result[n-1] = 1;\n    for(int i = n-2;\
    \ i >= 0; i--)\n    {\n        result[i] = result[i+1] * xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/", "{\n    long n = xs.length;\n    long[] result = new\
    \ long[n];\n    long d = 1;\n    for(int i = 0; i < n; i++)\n    {\n        result[i]\
    \ = d;\n        d *= xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double n = xs.length;\n    double[] result = new double[n];\n \
    \   double d = 1;\n    for(int i = 0; i < n; i++)\n    {\n        result[i] =\
    \ d;\n        d *= xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float n = xs.length;\n    float[] result = new float[n];\n    float\
    \ d = 1;\n    for(int i = 0; i < n; i++)\n    {\n        result[i] = d;\n    \
    \    d *= xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long[] result\
    \ = new long[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++)\n \
    \   {\n        result[i] = xs[i + 1] - xs[i];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result =\
    \ new double[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++)\n \
    \   {\n        result[i] = xs[i + 1] - xs[i];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++)\n    {\n\
    \        result[i] = xs[i + 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/", "{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        d += xs[i] * xs[i];\n    }\n    return long[] { d };\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long d = 0;\n \
    \   for(int i = 0; i < xs.length; i++)\n    {\n        d += xs[i] * xs[i];\n \
    \   }\n    return long[] { d };\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        d += xs[i] * xs[i];\n    }\n    return long[] { d };\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative(long[] xs, int degree, int order, bool isDerivative)\
    \ \n{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n      \
    \  d += xs[i] * xs[i];\n    }\n    return long[] { d };\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, bool isDerivative, int order2)\
    \ \n{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n      \
    \  d += xs[i] * xs[i];\n    }\n    return long[] { d };\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, bool isDerivative, int order2,\
    \ int order3) \n{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n \
    \   {\n        d += xs[i] * xs[i];\n    }\n    return long[] { d };\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     ", "{\n    long[] result = new long[(xs.length - 1)];\n    for\
    \ (int i = 0; i < result.length; i++)\n        result[i] = 0;\n    for (int i\
    \ = 1; i < xs.length; i++)\n        result[i] = result[i-1] + xs[i] * xs[i-1];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for (int i = 0; i < result.length;\
    \ i++)\n        result[i] = 0;\n    for (int i = 1; i < xs.length; i++)\n    \
    \    result[i] = result[i-1] + xs[i] * xs[i-1];\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new float[(xs.length\
    \ - 1)];\n    for (int i = 0; i < result.length; i++)\n        result[i] = 0;\n\
    \    for (int i = 1; i < xs.length; i++)\n        result[i] = result[i-1] + xs[i]\
    \ * xs[i-1];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    int n = xs.length;\n    long[]\
    \ result = new long[n];\n    result[0] = xs[0];\n    for (int i = 1; i < n; i++)\
    \ {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    result[0] = xs[0];\n    for (int i\
    \ = 1; i < n; i++) {\n        result[i] = result[i-1] * xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    result[0] = xs[0];\n    for (int i =\
    \ 1; i < n; i++) {\n        result[i] = result[i-1] * xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/", "{\n    long[] result = new long[(xs.length - 1) *\
    \ 2];\n    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i * 2]\
    \ = xs[i + 1];\n        result[i * 2 + 1] = xs[i];\n    }\n    return result;\n\
    }", "{\n    int n = xs.length;\n    long[] ds = new long[n];\n    for(int i =\
    \ 0; i < n; i++)\n        ds[i] = xs[i+1] - xs[i];\n    return ds;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n  \
    \  double[] ds = new double[n];\n    for(int i = 0; i < n; i++)\n        ds[i]\
    \ = xs[i+1] - xs[i];\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] ds = new float[n];\n    for(int i = 0; i <\
    \ n; i++)\n        ds[i] = xs[i+1] - xs[i];\n    return ds;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/",
  "{\n    long[] result = new long[xs.length];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i] = xs[i];\n    }\n    result[xs.length-1] = 1;\n\
    \    for(int i = xs.length-2; i >= 0; i--)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}", "{\n    long x0 = xs[0];\n    long\
    \ x1 = xs[1];\n    long x2 = xs[2];\n    long x3 = xs[3];\n    long x4 = xs[4];\n\
    \    long x5 = xs[5];\n    long x6 = xs[6];\n    long x7 = xs[7];\n    long x8\
    \ = xs[8];\n    long x9 = xs[9];\n    long x10 = xs[10];\n    long x11 = xs[11];\n\
    \    long x12 = xs[12];\n    long x13 = xs[13];\n    long x14 = xs[14];\n    long\
    \ x15 = xs[15];\n    long x16 = xs[16];\n    long x17 = xs[17];\n    long x18\
    \ = xs[18];\n    long x19 = xs[19];\n    long x20 = xs[20];\n    long x21 = xs[21];\n\
    \    long x22 = xs[22];\n    long x23 = xs[23];\n    long x24 = xs[24];\n    long\
    \ x25 = xs[25];\n    long x26 = xs[26];\n    long x27 = xs[27];\n    long x28\
    \ = xs[28];\n    long x29 = xs[29];\n    long x30 = xs[30];\n    long x31 = xs[31];\n\
    \    long x32 = xs[32];\n    long x33 = xs[33];\n    long x34 = xs[34];\n    long\
    \ x35 = xs[35];\n    long x36 = xs[36];\n    long x37 = xs[37];\n    long x38\
    \ = xs[38];\n    long x39 = xs[39];\n    long x40 = xs[40];\n    long x41 = xs[41];\n\
    \    long x42 = xs[42];\n    long x43 = xs[43];\n    long x44 = xs[44];\n    long\
    \ x45 = xs[45];\n    long x46 = xs[46];\n    long x47 = xs[47];\n    long x48\
    \ = xs[48];\n    long x49 = xs[49];\n    long x50 = xs[50];\n    long x51 = xs[51];\n\
    \    long x52 = xs[52];\n    long x53 = xs[53];\n    long x54 = xs[54];\n    long\
    \ x55 = xs[55];\n    long x56 = xs[56];\n", "{\n    long result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[]\
    \ result = new long[result.bitLength()];\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = result / xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n\
    \    }\n    long[] result = new long[result.bitLength()];\n    for(int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = result / xs[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = result\
    \ / xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int scale) \n{\n    long result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[]\
    \ result = new long[result.bitLength()];\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = result / xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int scale,\
    \ int degree2) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = result\
    \ / xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + ", "{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i +\
    \ 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for(int i =\
    \ 0; i < xs.length - 1; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length - 1)];\n    for(int i = 0; i < xs.length\
    \ - 1; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/", "{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = (long)Math.pow(xs[i],\
    \ result.length) - 1;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = (long)Math.pow(xs[i],\
    \ degree) - 1;\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int power) \n{\n    long result = 0;\n    for(int i = 0; i <\
    \ xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[] result =\
    \ new long[result.bitLength()];\n    for(int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = (long)Math.pow(xs[i], degree) - power;\n    }\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int power, int power2) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = (long)Math.pow(xs[i],\
    \ degree) - power;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int power, int power2, int power3) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    long[] result = new long[result.bitLength()];\n    for(int i = 0; i <\
    \ result.length; i++)\n    {\n        result", "{\n    long result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    result\
    \ *= -1;\n    long[] result = new long[result.bitLength() + 1];\n    for(int i\
    \ = 0; i < result.bitLength(); i++)\n    {\n        result[i] = (result.bitLength()\
    \ - i) * result.bitAt(i);\n    }\n    result[result.bitLength()] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n    }\n    result *= -1;\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.bitLength(); i++)\n    {\n        result[i]\
    \ = (result.bitLength() - i) * result.bitAt(i);\n    }\n    result[result.bitLength()]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result *= xs[i];\n    }\n    result *= -1;\n    long[] result\
    \ = new long[result.bitLength() + 1];\n    for(int i = 0; i < result.bitLength();\
    \ i++)\n    {\n        result[i] = (result.bitLength() - i) * result.bitAt(i);\n\
    \    }\n    result[result.bitLength()] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, int degree2) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n    }\n    result *= -1;\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.bitLength(); i++)\n    {\n        result[i]\
    \ = (result.bitLength() - i) * result.bitAt(i);\n    }\n    result[result.bitLength()]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial",
  "{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        d *=\
    \ xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n    result[0] =\
    \ d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}", "{\n    long[] result = new long[(xs.length\
    \ + 1)];\n    result[0] = xs[0];\n    for (int i = 1; i < result.length; i++)\n\
    \        result[i] = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double[] result = new double[(xs.length\
    \ + 1)];\n    result[0] = xs[0];\n    for (int i = 1; i < result.length; i++)\n\
    \        result[i] = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float[] result = new float[(xs.length\
    \ + 1)];\n    result[0] = xs[0];\n    for (int i = 1; i < result.length; i++)\n\
    \        result[i] = result[i-1] * xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/",
  "{\n    long[] result = new long[(xs.length - 1)];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long[] result\
    \ = new long[(xs.length - degree)];\n    for (int i = 0; i < result.length; i++)\
    \ \n    {\n        result[i] = xs[i + degree];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order) \n{\n \
    \   long[] result = new long[(xs.length - degree - order)];\n    for (int i =\
    \ 0; i < result.length; i++) \n    {\n        result[i] = xs[i + degree + order];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order, int power) \n{\n    long[] result = new long[(xs.length - degree\
    \ - order - power)];\n    for (int i = 0; i < result.length; i++) \n    {\n  \
    \      result[i] = xs[i + degree + order + power];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int power,\
    \ int power2) \n{\n    long[] result = new long[(xs.length - degree - order -\
    \ power - power2)];\n    for (int i = 0; i < result.length; i++) \n    {\n   \
    \     result[i] = xs[i + degree + order + power + power2];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ int power, int power2, int power3) \n{\n    long[] result = new long[(xs.length\
    \ - degree - order - power - power2 - power3)];\n    for (int i = 0; i < result.length;\
    \ i++", "{\n    long[] result = new long[(xs.length - 1)];\n    long x = 1;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i];\n\
    \        x = x * xs[i];\n    }\n    result[result.length - 1] = 1;\n    return\
    \ result;\n}", "{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n", "{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result += (long)Math.pow(xs[i], 2);\n    }\n    long[] derivative\
    \ = new long[result];\n    for(int i = 0; i < xs.length; i++)\n    {\n       \
    \ derivative[i] = (long)Math.pow(xs[i], 2);\n    }\n    return derivative;\n}",
  "{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int i = 0;\
    \ i < n; ++i)\n        result[i] = xs[i];\n    for(int i = n - 1; i >= 0; --i)\n\
    \    {\n        result[i] = result[i + 1];\n        result[i + 1] = 0;\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int order)\
    \ \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int i\
    \ = 0; i < n; ++i)\n        result[i] = xs[i];\n    for(int i = n - 1; i >= 0;\
    \ --i)\n    {\n        result[i] = result[i + 1];\n        result[i + 1] = 0;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int order,\
    \ int degree) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n        result[i] = xs[i];\n    for(int i = n\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = result[i + 1];\n        result[i\
    \ + 1] = 0;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int order, int degree, int scale) \n{\n    int n = xs.length;\n    long[]\
    \ result = new long[n];\n    for(int i = 0; i < n; ++i)\n        result[i] = xs[i];\n\
    \    for(int i = n - 1; i >= 0; --i)\n    {\n        result[i] = result[i + 1];\n\
    \        result[i + 1] = 0;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int order, int degree, int scale, int power) \n{\n    int n = xs.length;\n\
    \    long[] result = new long[n];\n    for(int i = 0; i < n; ++i)\n        result[i]\
    \ = xs[i];\n    for(int i = n - 1; i >= 0; --i)\n    {\n        result[i] = result[i\
    \ + 1];\n        result[i + 1] = 0;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + x", "{\n    long n =\
    \ xs.length;\n    long[] ds = new long[n];\n    for(int i = 0; i < n; i++)\n \
    \       ds[i] = xs[i] * derivative(xs, n - 1);\n    return ds;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double n = xs.length;\n    double[]\
    \ ds = new double[n];\n    for(int i = 0; i < n; i++)\n        ds[i] = xs[i] *\
    \ derivative(xs, n - 1);\n    return ds;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float n = xs.length;\n    float[] ds = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n        ds[i] = xs[i] * derivative(xs, n - 1);\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/", "{\n    long n = xs.length;\n    long[] d = new long[n];\n\
    \    long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n\
    \    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n\
    \    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n    long l =\
    \ xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o = xs[14];\n\
    \    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n    long s\
    \ = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n\
    \    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n    long z\
    \ = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n\
    \    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n    long g\
    \ = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n\
    \    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n    long n\
    \ = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n\
    \    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n    long u\
    \ = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n\
    \    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n    long b\
    \ = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n\
    \    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n    long i\
    \ = xs[60];\n    long j = xs[61];\n    long ", "{\n    long[] result = new long[(xs.length\
    \ - 1)];\n    for(int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for(int i =\
    \ 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long[] result = new long[(xs.length - 1)];\n    for(int\
    \ i = 0; i <= (xs.length - 1); ++i) {\n        result[i] = xs[i + 1] - xs[i] *\
    \ xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1)];\n    for(int i =\
    \ 0; i <= (xs.length - 1); ++i) {\n        result[i] = xs[i + 1] - xs[i] * xs[i\
    \ + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length - 1)];\n    for(int i = 0; i <= (xs.length\
    \ - 1); ++i) {\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long d = 1;\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n    long[] result =\
    \ new long[xs.length + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      result[i] = d;\n        d *= xs[i];\n    }\n    result[xs.length] = 1;\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        d *=\
    \ xs[i];\n    }\n    double[] result = new double[xs.length + 1];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n        d *= xs[i];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] result = new float[xs.length + 1];\n \
    \   for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n      \
    \  d *= xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    long[] result = new long[(xs.length - 1)];\n    for(int\
    \ i = 0; i < xs.length - 1; i++)\n        result[i] = xs[i + 1] - xs[i] * xs[i\
    \ + 1];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i < xs.length\
    \ - 1; i++)\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length - 1)];\n    for(int i = 0; i < xs.length - 1; i++)\n      \
    \  result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/", "{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result += (long)xs[i] * derivative(xs, i - 1);\n    }\n    return\
    \ result;\n}", "{\n    long x = xs[0];\n    long y = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n    ", "{\n    long[] result = new long[(xs.length - 1) * (xs.length\
    \ - 1) * 2];\n    long sum = 0;\n    for (int i = 0; i < xs.length - 1; i++) {\n\
    \        for (int j = i + 1; j < xs.length; j++) {\n            sum += xs[i] *\
    \ xs[j];\n            result[i * (xs.length - 1) + j] = sum;\n        }\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1) * (xs.length - 1) * 2];\n  \
    \  double sum = 0;\n    for (int i = 0; i < xs.length - 1; i++) {\n        for\
    \ (int j = i + 1; j < xs.length; j++) {\n            sum += xs[i] * xs[j];\n \
    \           result[i * (xs.length - 1) + j] = sum;\n        }\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result\
    \ = new float[(xs.length - 1) * (xs.length - 1) * 2];\n    float sum = 0;\n  \
    \  for (int i = 0; i < xs.length - 1; i++) {\n        for (int j = i + 1; j <\
    \ xs.length; j++) {\n            sum += xs[i] * xs[j];\n            result[i *\
    \ (xs.length - 1) + j] = sum;\n        }\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/", "{\n    long[] result = new long[(xs.length - 1)];\n    for(int\
    \ i = 0; i < result.length; i++)\n        result[i] = 0;\n    for(int i = 0; i\
    \ < xs.length; i++)\n        result[i] = result[i] + xs[i] * derivative(xs, i\
    \ + 1);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = 0;\n    for(int i = 0; i < xs.length; i++)\n     \
    \   result[i] = result[i] + xs[i] * derivative(xs, i + 1);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++)\n      \
    \  result[i] = 0;\n    for(int i = 0; i < xs.length; i++)\n        result[i] =\
    \ result[i] + xs[i] * derivative(xs, i + 1);\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/",
  "{\n    long x = 0;\n    long[] result = new long[(xs.length - 1)];\n    for (int\
    \ i = 1; i < xs.length; i++)\n    {\n        result[i - 1] = (long) (xs[i] - xs[i\
    \ - 1]);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double x = 0;\n    double[] result = new double[(xs.length - 1)];\n    for\
    \ (int i = 1; i < xs.length; i++)\n    {\n        result[i - 1] = (double) (xs[i]\
    \ - xs[i - 1]);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float x = 0;\n    float[] result = new float[(xs.length - 1)];\n\
    \    for (int i = 1; i < xs.length; i++)\n    {\n        result[i - 1] = (float)\
    \ (xs[i] - xs[i - 1]);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    int n = xs.length;\n\
    \    long[] result = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = xs[i] * derivative(xs, i, n - 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int n) \n{\n    if(i ==\
    \ n)\n    {\n        return xs;\n    }\n    else\n    {\n        long[] result\
    \ = new long[n];\n        for(int j = 0; j < n; j++)\n        {\n            result[j]\
    \ = xs[i] * derivative(xs, i + 1, n);\n        }\n        return result;\n   \
    \ }\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int i) \n{\n    return\
    \ derivative(xs, i, xs.length);\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs) \n{\n    return\
    \ derivative(xs, 0, xs.length);\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ n) \n{\n    if(i == n)\n    {\n        return xs;\n    }\n    else\n    {\n\
    \        long[] result = new long[n];\n        for(int j = 0; j < n; j++)\n  \
    \      {\n            result[j] = xs[i] * derivative(xs, i + 1, n);\n        }\n\
    \        return result;\n    }\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i) \n\
    {\n    return derivative(xs, i, xs.length);\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    return derivative(xs, 0, xs.length);\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    x", "{\n    long x = 0;\n    long y = 0;\n    long z =\
    \ 0;\n    long xd = 0;\n    long yd = 0;\n    long zd = 0;\n    long xdd = 0;\n\
    \    long ydd = 0;\n    long zdd = 0;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n\
    \    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n\
    \    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n\
    \    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n\
    \    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n\
    \    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n\
    \    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n\
    \    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n\
    \    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n\
    \    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n\
    \    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n\
    \    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zd", "{\n \
    \   long[] result = new long[(xs.length - 1)];\n    long a = xs[0];\n    long\
    \ b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n    long e = xs[4];\n\
    \    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n    long i = xs[8];\n\
    \    long j = xs[9];\n    long k = xs[10];\n    long l = xs[11];\n    long m =\
    \ xs[12];\n    long n = xs[13];\n    long o = xs[14];\n    long p = xs[15];\n\
    \    long q = xs[16];\n    long r = xs[17];\n    long s = xs[18];\n    long t\
    \ = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n    long w = xs[22];\n\
    \    long x = xs[23];\n    long y = xs[24];\n    long z = xs[25];\n    long a\
    \ = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n    long d = xs[29];\n\
    \    long e = xs[30];\n    long f = xs[31];\n    long g = xs[32];\n    long h\
    \ = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n    long k = xs[36];\n\
    \    long l = xs[37];\n    long m = xs[38];\n    long n = xs[39];\n    long o\
    \ = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n    long r = xs[43];\n\
    \    long s = xs[44];\n    long t = xs[45];\n    long u = xs[46];\n    long v\
    \ = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n    long y = xs[50];\n\
    \    long z = xs[51];\n    long a = xs[52];\n    long b = xs[53];\n    long c\
    \ = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n    long f = xs[57];\n\
    \    long g = xs[58];\n    long h = xs[59];\n    long i = xs[60];\n    long j\
    \ = xs[61];\n    long k = xs[", "{\n    long x = xs[0];\n    long[] result = new\
    \ long[(xs.length - 1)];\n    for(int i = 1; i < xs.length; i++)\n    {\n    \
    \    result[i - 1] = (long) (xs[i] - x * xs[i - 1]);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double x = xs[0];\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i - 1] = (double) (xs[i] - x * xs[i - 1]);\n   \
    \ }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float x = xs[0];\n    float[] result = new float[(xs.length - 1)];\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        result[i - 1] = (float) (xs[i] -\
    \ x * xs[i - 1]);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long x0 = xs[0];\n\
    \    long x1 = xs[1];\n    long x2 = xs[2];\n    long x3 = xs[3];\n    long x4\
    \ = xs[4];\n    long x5 = xs[5];\n    long x6 = xs[6];\n    long x7 = xs[7];\n\
    \    long x8 = xs[8];\n    long x9 = xs[9];\n    long x10 = xs[10];\n    long\
    \ x11 = xs[11];\n    long x12 = xs[12];\n    long x13 = xs[13];\n    long x14\
    \ = xs[14];\n    long x15 = xs[15];\n    long x16 = xs[16];\n    long x17 = xs[17];\n\
    \    long x18 = xs[18];\n    long x19 = xs[19];\n    long x20 = xs[20];\n    long\
    \ x21 = xs[21];\n    long x22 = xs[22];\n    long x23 = xs[23];\n    long x24\
    \ = xs[24];\n    long x25 = xs[25];\n    long x26 = xs[26];\n    long x27 = xs[27];\n\
    \    long x28 = xs[28];\n    long x29 = xs[29];\n    long x30 = xs[30];\n    long\
    \ x31 = xs[31];\n    long x32 = xs[32];\n    long x33 = xs[33];\n    long x34\
    \ = xs[34];\n    long x35 = xs[35];\n    long x36 = xs[36];\n    long x37 = xs[37];\n\
    \    long x38 = xs[38];\n    long x39 = xs[39];\n    long x40 = xs[40];\n    long\
    \ x41 = xs[41];\n    long x42 = xs[42];\n    long x43 = xs[43];\n    long x44\
    \ = xs[44];\n    long x45 = xs[45];\n    long x46 = xs[46];\n    long x47 = xs[47];\n\
    \    long x48 = xs[48];\n    long x49 = xs[49];\n    long x50 = xs[50];\n    long\
    \ x51 = xs[51];\n    long x52 = xs[52];\n    long x53 = xs[53];\n    long x54\
    \ = xs[54];\n    long x55 = xs[55];\n    long x56 = xs[56];\n", "{\n    long x0\
    \ = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n    long x3 = xs[3];\n\
    \    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6 = xs[6];\n    long x7\
    \ = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n    long x10 = xs[10];\n\
    \    long x11 = xs[11];\n    long x12 = xs[12];\n    long x13 = xs[13];\n    long\
    \ x14 = xs[14];\n    long x15 = xs[15];\n    long x16 = xs[16];\n    long x17\
    \ = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n    long x20 = xs[20];\n\
    \    long x21 = xs[21];\n    long x22 = xs[22];\n    long x23 = xs[23];\n    long\
    \ x24 = xs[24];\n    long x25 = xs[25];\n    long x26 = xs[26];\n    long x27\
    \ = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n    long x30 = xs[30];\n\
    \    long x31 = xs[31];\n    long x32 = xs[32];\n    long x33 = xs[33];\n    long\
    \ x34 = xs[34];\n    long x35 = xs[35];\n    long x36 = xs[36];\n    long x37\
    \ = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n    long x40 = xs[40];\n\
    \    long x41 = xs[41];\n    long x42 = xs[42];\n    long x43 = xs[43];\n    long\
    \ x44 = xs[44];\n    long x45 = xs[45];\n    long x46 = xs[46];\n    long x47\
    \ = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n    long x50 = xs[50];\n\
    \    long x51 = xs[51];\n    long x52 = xs[52];\n    long x53 = xs[53];\n    long\
    \ x54 = xs[54];\n    long x55 = xs[55];\n    long x56 = xs[56];\n", "{\n    int\
    \ n = xs.length;\n    long[] ds = new long[n];\n    long d = 1;\n    for(int i\
    \ = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d *= xs[i];\n    }\n  \
    \  return ds;\n}", "{\n    long n = xs.length;\n    long[] d = new long[n];\n\
    \    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        d[i] = xs[i];\n\
    \        sum += xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--) {\n       \
    \ d[i] = xs[i] - sum;\n        sum += d[i];\n    }\n    return d;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\ndouble[] derivative(double[] xs) \n{\n    double n = xs.length;\n\
    \    double[] d = new double[n];\n    double sum = 0;\n    for(int i = 0; i <\
    \ n; i++) {\n        d[i] = xs[i];\n        sum += xs[i];\n    }\n    for(int\
    \ i = n - 1; i >= 0; i--) {\n        d[i] = xs[i] - sum;\n        sum += d[i];\n\
    \    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float n = xs.length;\n    float[] d = new float[n];\n    float sum = 0;\n \
    \   for(int i = 0; i < n; i++) {\n        d[i] = xs[i];\n        sum += xs[i];\n\
    \    }\n    for(int i = n - 1; i >= 0; i--) {\n        d[i] = xs[i] - sum;\n \
    \       sum += d[i];\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long[] result\
    \ = new long[(xs.length)+1];\n    result[0] = 1;\n    for(int i = 1; i < xs.length;\
    \ i++)\n        result[i] = result[i-1] * xs[i];\n    return result;\n}", "{\n\
    \    long[] result = new long[(xs.length - 1) * 2];\n    for(int i = 0; i < xs.length\
    \ - 1; i++)\n    {\n        result[i * 2] = xs[i + 1];\n        result[i * 2 +\
    \ 1] = xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length - 1) * 2];\n    for(int\
    \ i = 0; i < xs.length - 1; i++)\n    {\n        result[i * 2] = xs[i + 1];\n\
    \        result[i * 2 + 1] = xs[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float[] result = new float[(xs.length\
    \ - 1) * 2];\n    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i\
    \ * 2] = xs[i + 1];\n        result[i * 2 + 1] = xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result += (long)(xs[i] * xs[i]);\n    }\n    long[] result\
    \ = new long[result.bitLength() + 1];\n    for(int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = (long)Math.pow(xs[i], 2);\n    }\n    result[result.length\
    \ - 1] = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   result += (double)(xs[i] * xs[i]);\n    }\n    double[] result = new double[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = Math.pow(xs[i], 2);\n    }\n    result[result.length - 1] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    float result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result += (float)(xs[i]\
    \ * xs[i]);\n    }\n    float[] result = new float[result.bitLength() + 1];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = (float)Math.pow(xs[i],\
    \ 2);\n    }\n    result[result.length - 1] = 1;\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    int n = xs.length;\n    long[] d = new long[n];\n  \
    \  for(int i = 0; i < n; i++)\n        d[i] = xs[i];\n    for(int i = 1; i < n;\
    \ i++)\n        d[i] = d[i] - d[i-1] * xs[i];\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    int n = xs.length;\n    double[] d =\
    \ new double[n];\n    for(int i = 0; i < n; i++)\n        d[i] = xs[i];\n    for(int\
    \ i = 1; i < n; i++)\n        d[i] = d[i] - d[i-1] * xs[i];\n    return d;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] d = new float[n];\n    for(int i = 0; i < n; i++)\n        d[i] =\
    \ xs[i];\n    for(int i = 1; i < n; i++)\n        d[i] = d[i] - d[i-1] * xs[i];\n\
    \    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long res = 0;\n    for(int i =\
    \ 0; i < xs.length; i++)\n    {\n        res += xs[i] * derivative(xs, i + 1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        res\
    \ += xs[i] * derivative(xs, i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float res = 0;\n    for(int i = 0; i <\
    \ xs.length; i++)\n    {\n        res += xs[i] * derivative(xs, i + 1);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    int n = xs.length;\n    long[]\
    \ ys = new long[n];\n    for(int i = 0; i < n; i++) {\n        ys[i] = xs[i];\n\
    \    }\n    for(int i = n - 1; i >= 0; i--) {\n        ys[i] = ys[i + 1] * xs[i\
    \ + 1];\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] ys = new double[n];\n    for(int i = 0;\
    \ i < n; i++) {\n        ys[i] = xs[i];\n    }\n    for(int i = n - 1; i >= 0;\
    \ i--) {\n        ys[i] = ys[i + 1] * xs[i + 1];\n    }\n    return ys;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] ys = new float[n];\n    for(int i = 0; i < n; i++) {\n        ys[i]\
    \ = xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--) {\n        ys[i] = ys[i\
    \ + 1] * xs[i + 1];\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long[] result\
    \ = new long[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++)\n \
    \   {\n        result[i] = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree) \n{\n    long[] result = new long[degree];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long[] result = new long[order];\n    for(int i = 0; i <\
    \ result.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ double tol) \n{\n    long[] result = new long[order];\n    for(int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ double tol, int precision) \n{\n    long[] result = new long[order];\n    for(int\
    \ i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order, double tol, int precision, int order) \n{\n    long[] result = new\
    \ long[order];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\n", "{\n    int n = xs.length;\n\
    \    long[] result = new long[n];\n    for(int i = 0; i < n; i++)\n        result[i]\
    \ = xs[i] * derivative(xs, i-1);\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n \
    \   for(int j = 0; j < n; j++)\n        result[j] = xs[i] * derivative(xs, i-1);\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ k = 0; k < n; k++)\n        result[k] = xs[i] * derivative(xs, i-1, k);\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n  \
    \  for(int l = 0; l < n; l++)\n        result[l] = xs[i] * derivative(xs, i-1,\
    \ k, l);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k, int l) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int m = 0; m < n; m++)\n        result[m] = xs[i] * derivative(xs, i-1,\
    \ k, l, m);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k, int l, int m) \n{\n    int n = xs.length;\n    long[] result = new\
    \ long[n];\n    for(int n = 0; n < n; n++)\n        result[n] = xs[i] * derivative(xs,\
    \ i-1, k, l, m, ", "{\n    long x = xs[0];\n    long[] result = new long[xs.length\
    \ + 1];\n    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n    {\n\
    \        result[i] = result[i-1] * x;\n        x = xs[i];\n    }\n    result[xs.length]\
    \ = 1;\n    return result;\n}", "{\n    long[] result = new long[(xs.length)+1];\n\
    \    for(int i = 0; i <= (xs.length); ++i)\n    {\n        result[i] = xs[i+1];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length)+1];\n    for(int i = 0;\
    \ i <= (xs.length); ++i)\n    {\n        result[i] = xs[i+1];\n    }\n    result[xs.length]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length)+1];\n    for(int i = 0; i <= (xs.length);\
    \ ++i)\n    {\n        result[i] = xs[i+1];\n    }\n    result[xs.length] = 1;\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long[] result = new long[(xs.length\
    \ - 1)];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree) \n{\n    long[] result = new long[(xs.length - degree)];\n \
    \   for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ degree];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order) \n{\n    long[] result = new long[(xs.length - order\
    \ - degree)];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + order + degree];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int degree2) \n{\n    long[] result = new long[(xs.length\
    \ - order - degree - degree2)];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i + order + degree + degree2];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ int degree2, int order2) \n{\n    long[] result = new long[(xs.length - order\
    \ - degree - degree2 - order2)];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i + order + degree + degree2 + order2];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order, int degree2, int order2, int degree3) \n{\n    long[] result = new\
    \ long[(xs.length - order - degree - degree2 - order2 - degree3)];\n    for (int\
    \ i = 0; i < result.length; i++)\n    {\n        result", "{\n    long n = xs.length;\n\
    \    long[] ds = new long[n];\n    long d = 1;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        ds[i] = d;\n        d *= xs[i];\n    }\n    return ds;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    double n = xs.length;\n\
    \    double[] ds = new double[n];\n    double d = 1;\n    for(int i = 0; i < n;\
    \ i++)\n    {\n        ds[i] = d;\n        d *= xs[i];\n    }\n    return ds;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float n = xs.length;\n\
    \    float[] ds = new float[n];\n    float d = 1;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        ds[i] = d;\n        d *= xs[i];\n    }\n    return ds;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    long[] result = new long[(xs.length - 1)];\n    for(int\
    \ i = 0; i < result.length; i++)\n        result[i] = 0;\n    for(int i = 1; i\
    \ < xs.length; i++)\n        result[i] = result[i-1] + xs[i] * xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = 0;\n    for(int i = 1; i < xs.length; i++)\n     \
    \   result[i] = result[i-1] + xs[i] * xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float[] result = new float[(xs.length\
    \ - 1)];\n    for(int i = 0; i < result.length; i++)\n        result[i] = 0;\n\
    \    for(int i = 1; i < xs.length; i++)\n        result[i] = result[i-1] + xs[i]\
    \ * xs[i];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    int n = xs.length;\n    long[]\
    \ result = new long[n];\n    result[0] = xs[0];\n    result[1] = xs[1];\n    for\
    \ (int i = 2; i < n; i++) {\n        result[i] = result[i-2] + xs[i] * result[i-1];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    result[0] =\
    \ xs[0];\n    result[1] = xs[1];\n    for (int i = 2; i < n; i++) {\n        result[i]\
    \ = result[i-2] + xs[i] * result[i-1];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[]\
    \ result = new float[n];\n    result[0] = xs[0];\n    result[1] = xs[1];\n   \
    \ for (int i = 2; i < n; i++) {\n        result[i] = result[i-2] + xs[i] * result[i-1];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long[] derivative = new long[(xs.length\
    \ - 1)];\n    derivative[0] = xs[1];\n    for (int i = 2; i < derivative.length;\
    \ i++)\n    {\n        derivative[i] = (xs[i] - derivative[i - 1]) / xs[i - 1];\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n            \n*/\nlong integral(long[] xs) \n{\n    long\
    \ integral = 0;\n    for (int i = 1; i < xs.length; i++)\n    {\n        integral\
    \ += xs[i] * Math.pow(xs[0], i);\n    }\n    return integral;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n            \n*/\n\
    double integral(double[] xs) \n{\n    double integral = 0;\n    for (int i = 1;\
    \ i < xs.length; i++)\n    {\n        integral += xs[i] * Math.pow(xs[0], i);\n\
    \    }\n    return integral;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n            \n*/\ndouble integral(long xs) \n{\n    double\
    \ integral = 0;\n    for (int i = 1; i < xs.length; i++)\n    {\n        integral\
    \ += xs[i] * Math.pow(xs[0], i);\n    }\n    return integral;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n            \n*/\n\
    double integral(double xs) \n{\n    double integral = 0;\n    for (int i = 1;\
    \ i < xs.length; i++)\n    {\n        integral += xs[i] * Math.pow(xs[0], i);\n\
    \    }\n    return integral;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n            \n*/\ndouble integral(float xs) \n{\n    double\
    \ integral = 0;\n    for (int i = 1; i < xs.length; i++)\n    {\n        integral\
    \ += xs[i] * Math.pow(xs[0], i);\n    }\n    return integral;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n            \n*/\n\
    double integral(double ", "{\n    long a = xs[0];\n    long b = xs[1];\n    long\
    \ c = xs[2];\n    long d = xs[3];\n    long e = xs[4];\n    long f = xs[5];\n\
    \    long g = xs[6];\n    long h = xs[7];\n    long i = xs[8];\n    long j = xs[9];\n\
    \    long k = xs[10];\n    long l = xs[11];\n    long m = xs[12];\n    long n\
    \ = xs[13];\n    long o = xs[14];\n    long p = xs[15];\n    long q = xs[16];\n\
    \    long r = xs[17];\n    long s = xs[18];\n    long t = xs[19];\n    long u\
    \ = xs[20];\n    long v = xs[21];\n    long w = xs[22];\n    long x = xs[23];\n\
    \    long y = xs[24];\n    long z = xs[25];\n    long a = xs[26];\n    long b\
    \ = xs[27];\n    long c = xs[28];\n    long d = xs[29];\n    long e = xs[30];\n\
    \    long f = xs[31];\n    long g = xs[32];\n    long h = xs[33];\n    long i\
    \ = xs[34];\n    long j = xs[35];\n    long k = xs[36];\n    long l = xs[37];\n\
    \    long m = xs[38];\n    long n = xs[39];\n    long o = xs[40];\n    long p\
    \ = xs[41];\n    long q = xs[42];\n    long r = xs[43];\n    long s = xs[44];\n\
    \    long t = xs[45];\n    long u = xs[46];\n    long v = xs[47];\n    long w\
    \ = xs[48];\n    long x = xs[49];\n    long y = xs[50];\n    long z = xs[51];\n\
    \    long a = xs[52];\n    long b = xs[53];\n    long c = xs[54];\n    long d\
    \ = xs[55];\n    long e = xs[56];\n    long f = xs[57];\n    long g = xs[58];\n\
    \    long h = xs[59];\n    long i = xs[60];\n    long j = xs[61];\n    long k\
    \ = xs[62];\n    long l = xs[63];\n    ", "{\n    int n = xs.length;\n    long[]\
    \ result = new long[n];\n    for(int i = 0; i < n; ++i)\n        result[i] = xs[i+1]\
    \ - xs[i] * xs[i+1];\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; ++i)\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    for(int i = 0; i < n; ++i)\n        result[i]\
    \ = xs[i+1] - xs[i] * xs[i+1];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long x0 = xs[0];\n\
    \    long x1 = xs[1];\n    long x2 = xs[2];\n    long x3 = xs[3];\n    long x4\
    \ = xs[4];\n    long x5 = xs[5];\n    long x6 = xs[6];\n    long x7 = xs[7];\n\
    \    long x8 = xs[8];\n    long x9 = xs[9];\n    long x10 = xs[10];\n    long\
    \ x11 = xs[11];\n    long x12 = xs[12];\n    long x13 = xs[13];\n    long x14\
    \ = xs[14];\n    long x15 = xs[15];\n    long x16 = xs[16];\n    long x17 = xs[17];\n\
    \    long x18 = xs[18];\n    long x19 = xs[19];\n    long x20 = xs[20];\n    long\
    \ x21 = xs[21];\n    long x22 = xs[22];\n    long x23 = xs[23];\n    long x24\
    \ = xs[24];\n    long x25 = xs[25];\n    long x26 = xs[26];\n    long x27 = xs[27];\n\
    \    long x28 = xs[28];\n    long x29 = xs[29];\n    long x30 = xs[30];\n    long\
    \ x31 = xs[31];\n    long x32 = xs[32];\n    long x33 = xs[33];\n    long x34\
    \ = xs[34];\n    long x35 = xs[35];\n    long x36 = xs[36];\n    long x37 = xs[37];\n\
    \    long x38 = xs[38];\n    long x39 = xs[39];\n    long x40 = xs[40];\n    long\
    \ x41 = xs[41];\n    long x42 = xs[42];\n    long x43 = xs[43];\n    long x44\
    \ = xs[44];\n    long x45 = xs[45];\n    long x46 = xs[46];\n    long x47 = xs[47];\n\
    \    long x48 = xs[48];\n    long x49 = xs[49];\n    long x50 = xs[50];\n    long\
    \ x51 = xs[51];\n    long x52 = xs[52];\n    long x53 = xs[53];\n    long x54\
    \ = xs[54];\n    long x55 = xs[55];\n    long x56 = xs[56];\n", "{\n    int n\
    \ = xs.length;\n    long[] result = new long[n];\n    for(int i = 0; i < n; i++)\n\
    \    {\n        result[i] = xs[i];\n    }\n    result[n-1] = 1;\n    for(int i\
    \ = n-2; i >= 0; i--)\n    {\n        result[i] = result[i+1] * xs[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    for(int i =\
    \ 0; i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1] =\
    \ 1;\n    for(int i = n-2; i >= 0; i--)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1]\
    \ = 1;\n    for(int i = n-2; i >= 0; i--)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    int n = xs.length;\n\
    \    long[] result = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = xs[i] * derivative(xs, i - 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; i++)\n    {\n\
    \        result[i] = xs[i] * derivative(xs, i - 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    for(int i = 0; i < n; i++)\n    {\n \
    \       result[i] = xs[i] * derivative(xs, i - 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        d *= xs[i];\n    }\n    long[] res = new long[xs.length + 1];\n\
    \    res[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        res[i]\
    \ = xs[i] - res[i - 1];\n    }\n    return res;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d *= xs[i];\n    }\n    double[] res = new double[xs.length + 1];\n \
    \   res[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        res[i]\
    \ = xs[i] - res[i - 1];\n    }\n    return res;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] res = new float[xs.length + 1];\n    res[0]\
    \ = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        res[i] = xs[i]\
    \ - res[i - 1];\n    }\n    return res;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long[] result\
    \ = new long[xs.length];\n    for(int i = 0; i < xs.length; i++)\n    {\n    \
    \    result[i] = xs[i];\n    }\n    result[0] = 1;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result =\
    \ new double[xs.length];\n    for(int i = 0; i < xs.length; i++)\n    {\n    \
    \    result[i] = xs[i];\n    }\n    result[0] = 1;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[xs.length];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i];\n    }\n    result[0] = 1;\n    for(int i = 1; i < xs.length; i++)\n\
    \    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        d *= xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n\
    \    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d *= xs[i];\n    }\n    double[] result = new double[xs.length + 1];\n\
    \    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] result = new float[xs.length + 1];\n \
    \   result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long d = 1;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n \
    \   long[] result = new long[xs.length + 1];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i] = d;\n        d *= xs[i];\n    }\n    result[xs.length]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        d *=\
    \ xs[i];\n    }\n    double[] result = new double[xs.length + 1];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n        d *= xs[i];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] result = new float[xs.length + 1];\n \
    \   for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n      \
    \  d *= xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    long[] derivatives = new long[xs.length\
    \ + 1];\n    derivatives[0] = 1;\n    for(int i = 1; i < xs.length; i++)\n   \
    \ {\n        derivatives[i] = result / xs[i];\n    }\n    return derivatives;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    double[] derivatives = new double[xs.length + 1];\n    derivatives[0]\
    \ = 1;\n    for(int i = 1; i < xs.length; i++)\n    {\n        derivatives[i]\
    \ = result / xs[i];\n    }\n    return derivatives;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] derivatives = new float[xs.length\
    \ + 1];\n    derivatives[0] = 1;\n    for(int i = 1; i < xs.length; i++)\n   \
    \ {\n        derivatives[i] = result / xs[i];\n    }\n    return derivatives;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long[] derivative = new long[xs.length];\n    derivative[0]\
    \ = xs[0];\n    derivative[1] = xs[1];\n    for(int i = 2; i < xs.length; i++)\n\
    \    {\n        derivative[i] = xs[i] - derivative[i - 2] * xs[i - 1];\n    }\n\
    \    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] derivative = new double[xs.length];\n    derivative[0] = xs[0];\n\
    \    derivative[1] = xs[1];\n    for(int i = 2; i < xs.length; i++)\n    {\n \
    \       derivative[i] = xs[i] - derivative[i - 2] * xs[i - 1];\n    }\n    return\
    \ derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ derivative = new float[xs.length];\n    derivative[0] = xs[0];\n    derivative[1]\
    \ = xs[1];\n    for(int i = 2; i < xs.length; i++)\n    {\n        derivative[i]\
    \ = xs[i] - derivative[i - 2] * xs[i - 1];\n    }\n    return derivative;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2\
    \ = xs[2];\n    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n\
    \    long x6 = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9\
    \ = xs[9];\n    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n\
    \    long x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long\
    \ x16 = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19\
    \ = xs[19];\n    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n\
    \    long x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long\
    \ x26 = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29\
    \ = xs[29];\n    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n\
    \    long x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long\
    \ x36 = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39\
    \ = xs[39];\n    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n\
    \    long x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long\
    \ x46 = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49\
    \ = xs[49];\n    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n\
    \    long x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long\
    \ x56 = xs[56];\n", "{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        d += xs[i] * xs[i];\n    }\n    long[] result = new long[xs.length\
    \ + 1];\n    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n \
    \       result[i] = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\ndouble[] derivative(double[] xs) \n{\n    double d = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        d += xs[i] * xs[i];\n    }\n    double[]\
    \ result = new double[xs.length + 1];\n    result[0] = d;\n    for(int i = 1;\
    \ i < xs.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        d += xs[i]\
    \ * xs[i];\n    }\n    float[] result = new float[xs.length + 1];\n    result[0]\
    \ = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long n = xs.length;\n\
    \    long[] d = new long[n];\n    long k = 0;\n    long sum = 0;\n    long pow\
    \ = 1;\n    for(int i = 0; i < n; i++) {\n        d[i] = 0;\n        sum += pow;\n\
    \        pow *= xs[i];\n    }\n    for(int i = 0; i < n; i++) {\n        d[i]\
    \ = xs[i] - sum;\n    }\n    return d;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative2(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] d = new long[n];\n    long k =\
    \ 0;\n    long sum = 0;\n    long pow = 1;\n    for(int i = 0; i < n; i++) {\n\
    \        d[i] = 0;\n        sum += pow;\n        pow *= xs[i];\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        d[i] = xs[i] - sum;\n    }\n    return d;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative3(long[] xs) \n{\n    long n = xs.length;\n\
    \    long[] d = new long[n];\n    long k = 0;\n    long sum = 0;\n    long pow\
    \ = 1;\n    for(int i = 0; i < n; i++) {\n        d[i] = 0;\n        sum += pow;\n\
    \        pow *= xs[i];\n    }\n    for(int i = 0; i < n; i++) {\n        d[i]\
    \ = xs[i] - sum;\n    }\n    return d;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative4(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] d = new long[n];\n    long k =\
    \ 0;\n    long sum = 0;\n    long pow = 1;\n    for(int i = 0; i < n; i++) {\n\
    \        d[i] = 0;\n        sum += pow;\n        pow *= xs[i];\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        d[i] = xs[i] - sum;\n    }\n    return d;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative5(long[] xs) \n{\n    long n = xs.length;\n\
    \    long[] d = new long[n];", "{\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 0; i < result.length; i++)\n        result[i] = xs[i + 1];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree)\
    \ \n{\n    long[] result = new long[(xs.length - degree)];\n    for(int i = 0;\
    \ i < result.length; i++)\n        result[i] = xs[i + degree];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order) \n{\n \
    \   long[] result = new long[(xs.length - order - degree)];\n    for(int i = 0;\
    \ i < result.length; i++)\n        result[i] = xs[i + order + degree];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ int degree2) \n{\n    long[] result = new long[(xs.length - order - degree)];\n\
    \    for(int i = 0; i < result.length; i++)\n        result[i] = xs[i + order\
    \ + degree + degree2];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int degree2, int order2) \n{\n    long[] result =\
    \ new long[(xs.length - order - degree - degree2)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = xs[i + order + degree + degree2 + order2];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ int degree2, int order2, int order3) \n{\n    long[] result = new long[(xs.length\
    \ - order - degree - degree2 - order2)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = xs[i + order + degree + degree2 + order2 + order3];\n\
    \    return result;\n}\n/*\n", "{\n    long n = xs.length;\n    long[] ds = new\
    \ long[n];\n    long d = 1;\n    for(int i = 0; i < n; i++)\n    {\n        ds[i]\
    \ = d;\n        d *= xs[i];\n    }\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double n = xs.length;\n    double[] ds = new double[n];\n    double\
    \ d = 1;\n    for(int i = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d\
    \ *= xs[i];\n    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float n = xs.length;\n    float[] ds = new float[n];\n    float d = 1;\n  \
    \  for(int i = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d *= xs[i];\n\
    \    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long[] result = new long[(xs.length\
    \ - 1)];\n    for(int i = 0; i < result.length; i++)\n        result[i] = 0;\n\
    \    for(int i = 1; i < xs.length; i++)\n        result[i] = result[i-1] + xs[i]\
    \ * xs[i];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = 0;\n    for(int i = 1; i < xs.length; i++)\n     \
    \   result[i] = result[i-1] + xs[i] * xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float[] result = new float[(xs.length\
    \ - 1)];\n    for(int i = 0; i < result.length; i++)\n        result[i] = 0;\n\
    \    for(int i = 1; i < xs.length; i++)\n        result[i] = result[i-1] + xs[i]\
    \ * xs[i];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long[] result = new long[(xs.length\
    \ - 1) * (xs.length - 1) * 2];\n    long x = 0;\n    long y = 0;\n    long z =\
    \ 0;\n    long sum = 0;\n    long xpow = 0;\n    long ypow = 0;\n    long zpow\
    \ = 0;\n    long xpow2 = 0;\n    long ypow2 = 0;\n    long zpow2 = 0;\n    long\
    \ xpow3 = 0;\n    long ypow3 = 0;\n    long zpow3 = 0;\n    long xpow4 = 0;\n\
    \    long ypow4 = 0;\n    long zpow4 = 0;\n    long xpow5 = 0;\n    long ypow5\
    \ = 0;\n    long zpow5 = 0;\n    long xpow6 = 0;\n    long ypow6 = 0;\n    long\
    \ zpow6 = 0;\n    long xpow7 = 0;\n    long ypow7 = 0;\n    long zpow7 = 0;\n\
    \    long xpow8 = 0;\n    long ypow8 = 0;\n    long zpow8 = 0;\n    long xpow9\
    \ = 0;\n    long ypow9 = 0;\n    long zpow9 = 0;\n    long xpow10 = 0;\n    long\
    \ ypow10 = 0;\n    long zpow10 = 0;\n    long xpow11 = 0;\n    long ypow11 = 0;\n\
    \    long zpow11 = 0;\n    long xpow12 = 0;\n    long ypow12 = 0;\n    long zpow12\
    \ = 0;\n    long xpow13 = 0;\n    long ypow13 = 0;\n    long zpow13 = 0;\n   \
    \ long xpow14 = 0;\n    long ypow14 = 0;\n    long zpow14 = 0;\n    long xpow15\
    \ = 0;\n    long ypow15 = 0;\n    long zpow15 = 0;\n    long xpow16 = 0;\n   \
    \ long ypow16 = 0;\n    long zpow16 = 0;\n    long xpow17 = 0;\n    long ypow17\
    \ = 0;\n    long zpow17 = 0;\n    long xpow18 = 0;\n    long ypow18 = 0;\n   \
    \ long zpow18 = 0;\n    long xpow19 = 0;\n    long ypow19 = 0;\n    long zpow19\
    \ = 0;\n    long xpow20 = 0;\n    long ypow20 = 0;\n    long zpow20 = 0;\n   \
    \ long xpow21 = 0;\n    long ypow21 = 0;\n    long zpow21 = 0;\n    long xpow22\
    \ = 0;\n    long ypow22 = 0;\n    long zpow22 = 0;\n    long xpow23 = 0;\n   \
    \ long ypow23 = 0;\n    long zpow23 = 0;\n    long xpow", "{\n    int n = xs.length;\n\
    \    long[] ds = new long[n];\n    for(int i = 0; i < n; ++i)\n        ds[i] =\
    \ xs[i] * xs[i];\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative2(long[] xs) \n{\n   \
    \ int n = xs.length;\n    long[] ds = new long[n];\n    for(int i = 0; i < n;\
    \ ++i)\n        ds[i] = xs[i] * xs[i];\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative3(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n    for(int i\
    \ = 0; i < n; ++i)\n        ds[i] = xs[i] * xs[i];\n    return ds;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative4(long[] xs) \n{\n    int n = xs.length;\n    long[]\
    \ ds = new long[n];\n    for(int i = 0; i < n; ++i)\n        ds[i] = xs[i] * xs[i];\n\
    \    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative5(long[] xs) \n{\n   \
    \ int n = xs.length;\n    long[] ds = new long[n];\n    for(int i = 0; i < n;\
    \ ++i)\n        ds[i] = xs[i] * xs[i];\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative6(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n    for(int i\
    \ = 0; i < n; ++i)\n        ds[i] = xs[i] * xs[i];\n    return ds;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative7(long[] xs) \n{\n", "{\n    long x0 = xs[0];\n\
    \    long x1 = xs[1];\n    long x2 = xs[2];\n    long x3 = xs[3];\n    long x4\
    \ = xs[4];\n    long x5 = xs[5];\n    long x6 = xs[6];\n    long x7 = xs[7];\n\
    \    long x8 = xs[8];\n    long x9 = xs[9];\n    long x10 = xs[10];\n    long\
    \ x11 = xs[11];\n    long x12 = xs[12];\n    long x13 = xs[13];\n    long x14\
    \ = xs[14];\n    long x15 = xs[15];\n    long x16 = xs[16];\n    long x17 = xs[17];\n\
    \    long x18 = xs[18];\n    long x19 = xs[19];\n    long x20 = xs[20];\n    long\
    \ x21 = xs[21];\n    long x22 = xs[22];\n    long x23 = xs[23];\n    long x24\
    \ = xs[24];\n    long x25 = xs[25];\n    long x26 = xs[26];\n    long x27 = xs[27];\n\
    \    long x28 = xs[28];\n    long x29 = xs[29];\n    long x30 = xs[30];\n    long\
    \ x31 = xs[31];\n    long x32 = xs[32];\n    long x33 = xs[33];\n    long x34\
    \ = xs[34];\n    long x35 = xs[35];\n    long x36 = xs[36];\n    long x37 = xs[37];\n\
    \    long x38 = xs[38];\n    long x39 = xs[39];\n    long x40 = xs[40];\n    long\
    \ x41 = xs[41];\n    long x42 = xs[42];\n    long x43 = xs[43];\n    long x44\
    \ = xs[44];\n    long x45 = xs[45];\n    long x46 = xs[46];\n    long x47 = xs[47];\n\
    \    long x48 = xs[48];\n    long x49 = xs[49];\n    long x50 = xs[50];\n    long\
    \ x51 = xs[51];\n    long x52 = xs[52];\n    long x53 = xs[53];\n    long x54\
    \ = xs[54];\n    long x55 = xs[55];\n    long x56 = xs[56];\n", "{\n    long[]\
    \ result = new long[(xs.length + 1)];\n    result[0] = xs[0];\n    for(int i =\
    \ 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length + 1)];\n    result[0] = xs[0];\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length + 1)];\n    result[0] = xs[0];\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    int n = xs.length;\n\
    \    long[] result = new long[n];\n    for(int i = 0; i < n; ++i)\n    {\n   \
    \     result[i] = xs[i];\n    }\n    result[n-1] = 1;\n    for(int i = n - 2;\
    \ i >= 0; --i)\n    {\n        result[i] = result[i+1] * xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; ++i)\n    {\n\
    \        result[i] = xs[i];\n    }\n    result[n-1] = 1;\n    for(int i = n -\
    \ 2; i >= 0; --i)\n    {\n        result[i] = result[i+1] * xs[i];\n    }\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    for(int i = 0;\
    \ i < n; ++i)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1] = 1;\n\
    \    for(int i = n - 2; i >= 0; --i)\n    {\n        result[i] = result[i+1] *\
    \ xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long[] result = new long[(xs.length\
    \ - 1)];\n    for(int i = 0; i <= (xs.length - 1); i++)\n    {\n        result[i]\
    \ = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double[] result = new double[(xs.length\
    \ - 1)];\n    for(int i = 0; i <= (xs.length - 1); i++)\n    {\n        result[i]\
    \ = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float[] result = new float[(xs.length\
    \ - 1)];\n    for(int i = 0; i <= (xs.length - 1); i++)\n    {\n        result[i]\
    \ = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/",
  "{\n    int n = xs.length;\n    long[] d = new long[n];\n    for(int i = 0; i <\
    \ n; i++)\n        d[i] = xs[i+1] - xs[i];\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    int n = xs.length;\n    double[] d =\
    \ new double[n];\n    for(int i = 0; i < n; i++)\n        d[i] = xs[i+1] - xs[i];\n\
    \    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] d = new float[n];\n    for(int i = 0; i < n;\
    \ i++)\n        d[i] = xs[i+1] - xs[i];\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long result = 0;\n    long i = 0;\n   \
    \ long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n =\
    \ 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n   \
    \ long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w =\
    \ 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long result = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n   \
    \ long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p =\
    \ 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n   \
    \ long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y =\
    \ 0;\n    long z = 0;\n    long result = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long result = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    ", "{\n    long result = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += (long)(xs[i] * xs[i]);\n\
    \    }\n    result *= -1;\n    \n    long[] result = new long[result.__len()];\n\
    \    for(int i = 0; i < result.__len(); i++)\n    {\n        result[i] = result;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   result += (double)(xs[i] * xs[i]);\n    }\n    result *= -1;\n    \n    double[]\
    \ result = new double[result.__len()];\n    for(int i = 0; i < result.__len();\
    \ i++)\n    {\n        result[i] = result;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nfloat[] derivative(float[] xs) \n{\n    float result = 0;\n \
    \   for(int i = 0; i < xs.length; i++)\n    {\n        result += (double)(xs[i]\
    \ * xs[i]);\n    }\n    result *= -1;\n    \n    float[] result = new float[result.__len()];\n\
    \    for(int i = 0; i < result.__len(); i++)\n    {\n        result[i] = result;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    int n = xs.length;\n    long[]\
    \ result = new long[n];\n    result[0] = 1;\n    for (int i = 1; i < n; i++) {\n\
    \        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    result[0] = 1;\n    for (int i = 1;\
    \ i < n; i++) {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    result[0] = 1;\n    for (int i = 1; i\
    \ < n; i++) {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    long[] result = new long[(xs.length - 1) * 2];\n \
    \   long x = 0;\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n  \
    \  {\n        x = xs[i];\n        y = x * x;\n        result[i * 2] = y;\n   \
    \     result[i * 2 + 1] = x;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree) \n{\n    long[] result = new long[(xs.length\
    \ - 1) * degree];\n    long x = 0;\n    long y = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        x = xs[i];\n        y = x * x;\n        for (int j = 0;\
    \ j < degree; j++)\n        {\n            result[i * degree + j] = y;\n     \
    \   }\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long[] result = new long[(xs.length - 1) * order];\n   \
    \ long x = 0;\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        x = xs[i];\n        y = x * x;\n        for (int j = 0; j < order; j++)\n\
    \        {\n            result[i * order + j] = y;\n        }\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ int degree2) \n{\n    long[] result = new long[(xs.length - 1) * order * degree2];\n\
    \    long x = 0;\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n \
    \   {\n        x = xs[i];\n        y = x * x;\n        for (int j = 0; j < order;\
    \ j++)\n        {\n            for (int k = 0; k < degree2; k++)\n           \
    \ {\n                result[i * order * degree2 + j * degree2 + k] = y;\n    \
    \        }\n        }\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int degree2, int order2) \n{\n    long[] result =\
    \ new long[(xs.length - 1) * order * degree2 * order2];\n", "{\n    long a = xs[0];\n\
    \    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n    long e = xs[4];\n\
    \    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n    long i = xs[8];\n\
    \    long j = xs[9];\n    long k = xs[10];\n    long l = xs[11];\n    long m =\
    \ xs[12];\n    long n = xs[13];\n    long o = xs[14];\n    long p = xs[15];\n\
    \    long q = xs[16];\n    long r = xs[17];\n    long s = xs[18];\n    long t\
    \ = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n    long w = xs[22];\n\
    \    long x = xs[23];\n    long y = xs[24];\n    long z = xs[25];\n    long a\
    \ = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n    long d = xs[29];\n\
    \    long e = xs[30];\n    long f = xs[31];\n    long g = xs[32];\n    long h\
    \ = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n    long k = xs[36];\n\
    \    long l = xs[37];\n    long m = xs[38];\n    long n = xs[39];\n    long o\
    \ = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n    long r = xs[43];\n\
    \    long s = xs[44];\n    long t = xs[45];\n    long u = xs[46];\n    long v\
    \ = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n    long y = xs[50];\n\
    \    long z = xs[51];\n    long a = xs[52];\n    long b = xs[53];\n    long c\
    \ = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n    long f = xs[57];\n\
    \    long g = xs[58];\n    long h = xs[59];\n    long i = xs[60];\n    long j\
    \ = xs[61];\n    long k = xs[62];\n    long l = xs[63];\n    ", "{\n    long[]\
    \ result = new long[(xs.length + 1)];\n    long x = 0;\n    long y = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        y = xs[i];\n        result[i] = y;\n\
    \    }\n    result[xs.length] = 1;\n    for(int i = xs.length - 1; i >= 0; i--)\n\
    \    {\n        x = result[i];\n        result[i] = result[i + 1];\n        result[i\
    \ + 1] = x * y;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length + 1)];\n    double x =\
    \ 0;\n    double y = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   y = xs[i];\n        result[i] = y;\n    }\n    result[xs.length] = 1;\n  \
    \  for(int i = xs.length - 1; i >= 0; i--)\n    {\n        x = result[i];\n  \
    \      result[i] = result[i + 1];\n        result[i + 1] = x * y;\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length + 1)];\n    float x = 0;\n    float y\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        y = xs[i];\n  \
    \      result[i] = y;\n    }\n    result[xs.length] = 1;\n    for(int i = xs.length\
    \ - 1; i >= 0; i--)\n    {\n        x = result[i];\n        result[i] = result[i\
    \ + 1];\n        result[i + 1] = x * y;\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/", "{\n    long[] result = new long[(xs.length + 1)];\n    result[0]\
    \ = 1;\n    for (int i = 1; i < xs.length; i++)\n        result[i] = result[i-1]\
    \ * xs[i];\n    return result;\n}", "{\n    long x = xs[0];\n    long[] ds = new\
    \ long[(xs.length - 1)];\n    for(int i = 1; i < xs.length; i++)\n    {\n    \
    \    ds[i] = (long) (xs[i] - x) / x;\n        x = xs[i];\n    }\n    return ds;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double x = xs[0];\n\
    \    double[] ds = new double[(xs.length - 1)];\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        ds[i] = (double) (xs[i] - x) / x;\n        x = xs[i];\n\
    \    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float x = xs[0];\n    float[] ds = new float[(xs.length - 1)];\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        ds[i] = (float) (xs[i] - x) / x;\n\
    \        x = xs[i];\n    }\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long d = 1;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n \
    \   long[] ret = new long[xs.length + 1];\n    ret[0] = d;\n    for(int i = 1;\
    \ i < xs.length; i++)\n    {\n        ret[i] = xs[i] - ret[i - 1];\n    }\n  \
    \  return ret;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree)\
    \ \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n      \
    \  d *= xs[i];\n    }\n    long[] ret = new long[degree + 1];\n    ret[0] = d;\n\
    \    for(int i = 1; i < degree; i++)\n    {\n        ret[i] = xs[i] - ret[i -\
    \ 1];\n    }\n    return ret;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        d *= xs[i];\n    }\n    long[] ret = new long[order + 1];\n    ret[0]\
    \ = d;\n    for(int i = 1; i < order; i++)\n    {\n        ret[i] = xs[i] - ret[i\
    \ - 1];\n    }\n    return ret;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order, bool isDerivative) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        d *= xs[i];\n    }\n    long[] ret = new long[order + 1];\n\
    \    ret[0] = d;\n    for(int i = 1; i < order; i++)\n    {\n        ret[i] =\
    \ xs[i] - ret[i - 1];\n    }\n    return ret;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, bool isDerivative, int order2) \n{\n    long d =\
    \ 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n   \
    \ }\n    long[] ret = new long[order2 + 1];\n    ret[0] = ", "{\n    long res\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] *\
    \ derivative(xs, i+1);\n    }\n    return res;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i+1);\n    }\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nfloat[] derivative(float[] xs) \n{\n    float res = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * derivative(xs, i+1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long x = xs[0];\n    long x2 =\
    \ xs[1];\n    long x3 = xs[2];\n    long x4 = xs[3];\n    long x5 = xs[4];\n \
    \   long x6 = xs[5];\n    long x7 = xs[6];\n    long x8 = xs[7];\n    long x9\
    \ = xs[8];\n    long x10 = xs[9];\n    long x11 = xs[10];\n    long x12 = xs[11];\n\
    \    long x13 = xs[12];\n    long x14 = xs[13];\n    long x15 = xs[14];\n    long\
    \ x16 = xs[15];\n    long x17 = xs[16];\n    long x18 = xs[17];\n    long x19\
    \ = xs[18];\n    long x20 = xs[19];\n    long x21 = xs[20];\n    long x22 = xs[21];\n\
    \    long x23 = xs[22];\n    long x24 = xs[23];\n    long x25 = xs[24];\n    long\
    \ x26 = xs[25];\n    long x27 = xs[26];\n    long x28 = xs[27];\n    long x29\
    \ = xs[28];\n    long x30 = xs[29];\n    long x31 = xs[30];\n    long x32 = xs[31];\n\
    \    long x33 = xs[32];\n    long x34 = xs[33];\n    long x35 = xs[34];\n    long\
    \ x36 = xs[35];\n    long x37 = xs[36];\n    long x38 = xs[37];\n    long x39\
    \ = xs[38];\n    long x40 = xs[39];\n    long x41 = xs[40];\n    long x42 = xs[41];\n\
    \    long x43 = xs[42];\n    long x44 = xs[43];\n    long x45 = xs[44];\n    long\
    \ x46 = xs[45];\n    long x47 = xs[46];\n    long x48 = xs[47];\n    long x49\
    \ = xs[48];\n    long x50 = xs[49];\n    long x51 = xs[50];\n    long x52 = xs[51];\n\
    \    long x53 = xs[52];\n    long x54 = xs[53];\n    long x55 = xs[54];\n    long\
    \ x56 = xs[55];\n    long x57 = xs[56];\n", "{\n    long sum = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n        sum += xs[i] * derivative(xs, i);\n    return\
    \ sum;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    double sum\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n        sum += xs[i] * derivative(xs,\
    \ i);\n    return sum;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float sum = 0;\n    for(int i = 0; i < xs.length; i++)\n        sum += xs[i]\
    \ * derivative(xs, i);\n    return sum;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long x0 = xs[0];\n\
    \    long x1 = xs[1];\n    long x2 = xs[2];\n    long x3 = xs[3];\n    long x4\
    \ = xs[4];\n    long x5 = xs[5];\n    long x6 = xs[6];\n    long x7 = xs[7];\n\
    \    long x8 = xs[8];\n    long x9 = xs[9];\n    long x10 = xs[10];\n    long\
    \ x11 = xs[11];\n    long x12 = xs[12];\n    long x13 = xs[13];\n    long x14\
    \ = xs[14];\n    long x15 = xs[15];\n    long x16 = xs[16];\n    long x17 = xs[17];\n\
    \    long x18 = xs[18];\n    long x19 = xs[19];\n    long x20 = xs[20];\n    long\
    \ x21 = xs[21];\n    long x22 = xs[22];\n    long x23 = xs[23];\n    long x24\
    \ = xs[24];\n    long x25 = xs[25];\n    long x26 = xs[26];\n    long x27 = xs[27];\n\
    \    long x28 = xs[28];\n    long x29 = xs[29];\n    long x30 = xs[30];\n    long\
    \ x31 = xs[31];\n    long x32 = xs[32];\n    long x33 = xs[33];\n    long x34\
    \ = xs[34];\n    long x35 = xs[35];\n    long x36 = xs[36];\n    long x37 = xs[37];\n\
    \    long x38 = xs[38];\n    long x39 = xs[39];\n    long x40 = xs[40];\n    long\
    \ x41 = xs[41];\n    long x42 = xs[42];\n    long x43 = xs[43];\n    long x44\
    \ = xs[44];\n    long x45 = xs[45];\n    long x46 = xs[46];\n    long x47 = xs[47];\n\
    \    long x48 = xs[48];\n    long x49 = xs[49];\n    long x50 = xs[50];\n    long\
    \ x51 = xs[51];\n    long x52 = xs[52];\n    long x53 = xs[53];\n    long x54\
    \ = xs[54];\n    long x55 = xs[55];\n    long x56 = xs[56];\n", "{\n    long result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n\
    \    }\n    long[] derivative = new long[xs.length + 1];\n    derivative[0] =\
    \ result;\n    for(int i = 1; i < xs.length; i++)\n    {\n        derivative[i]\
    \ = xs[i] * derivative[i - 1];\n    }\n    return derivative;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double result = 0;\n    for(int i =\
    \ 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    double[]\
    \ derivative = new double[xs.length + 1];\n    derivative[0] = result;\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        derivative[i] = xs[i] * derivative[i\
    \ - 1];\n    }\n    return derivative;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] derivative = new float[xs.length\
    \ + 1];\n    derivative[0] = result;\n    for(int i = 1; i < xs.length; i++)\n\
    \    {\n        derivative[i] = xs[i] * derivative[i - 1];\n    }\n    return\
    \ derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n            \n*/", "{\n    long[] d = new long[(xs.length +\
    \ 1)];\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n \
    \   long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s\
    \ = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n \
    \   long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k\
    \ = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v", "{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i]\
    \ * xs[n - i - 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i] * xs[n - i\
    \ - 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i] * xs[n - i - 1];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long[] derivative = new long[xs.length];\n\
    \    derivative[0] = xs[0];\n    for(int i = 1; i < xs.length; i++)\n    {\n \
    \       derivative[i] = xs[i] * derivative[i - 1];\n    }\n    return derivative;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] derivative\
    \ = new double[xs.length];\n    derivative[0] = xs[0];\n    for(int i = 1; i <\
    \ xs.length; i++)\n    {\n        derivative[i] = xs[i] * derivative[i - 1];\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] derivative = new float[xs.length];\n    derivative[0] = xs[0];\n  \
    \  for(int i = 1; i < xs.length; i++)\n    {\n        derivative[i] = xs[i] *\
    \ derivative[i - 1];\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    long result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n\
    \    }\n    long[] derivative = new long[xs.length + 1];\n    derivative[0] =\
    \ result;\n    for(int i = 1; i < xs.length; i++)\n    {\n        derivative[i]\
    \ = xs[i] * derivative[i - 1];\n    }\n    return derivative;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double result = 0;\n    for(int i =\
    \ 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    double[]\
    \ derivative = new double[xs.length + 1];\n    derivative[0] = result;\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        derivative[i] = xs[i] * derivative[i\
    \ - 1];\n    }\n    return derivative;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] derivative = new float[xs.length\
    \ + 1];\n    derivative[0] = result;\n    for(int i = 1; i < xs.length; i++)\n\
    \    {\n        derivative[i] = xs[i] * derivative[i - 1];\n    }\n    return\
    \ derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n            \n*/", "{\n    long x = xs[0];\n    long y = xs[1];\n\
    \    long x2 = xs[2];\n    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5\
    \ = xs[5];\n    long x6 = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n\
    \    long x9 = xs[9];\n    long x10 = xs[10];\n    long x11 = xs[11];\n    long\
    \ x12 = xs[12];\n    long x13 = xs[13];\n    long x14 = xs[14];\n    long x15\
    \ = xs[15];\n    long x16 = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n\
    \    long x19 = xs[19];\n    long x20 = xs[20];\n    long x21 = xs[21];\n    long\
    \ x22 = xs[22];\n    long x23 = xs[23];\n    long x24 = xs[24];\n    long x25\
    \ = xs[25];\n    long x26 = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n\
    \    long x29 = xs[29];\n    long x30 = xs[30];\n    long x31 = xs[31];\n    long\
    \ x32 = xs[32];\n    long x33 = xs[33];\n    long x34 = xs[34];\n    long x35\
    \ = xs[35];\n    long x36 = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n\
    \    long x39 = xs[39];\n    long x40 = xs[40];\n    long x41 = xs[41];\n    long\
    \ x42 = xs[42];\n    long x43 = xs[43];\n    long x44 = xs[44];\n    long x45\
    \ = xs[45];\n    long x46 = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n\
    \    long x49 = xs[49];\n    long x50 = xs[50];\n    long x51 = xs[51];\n    long\
    \ x52 = xs[52];\n    long x53 = xs[53];\n    long x54 = xs[54];\n    long x55\
    \ = xs[55];\n    long x56 = xs[56];\n    ", "{\n    long[] d = new long[(xs.length\
    \ - 1)];\n    long x = 0;\n    long y = 0;\n    for(int i = 0; i <= (xs.length\
    \ - 1); i++)\n    {\n        y = xs[i + 1];\n        d[i] = (y - x) * xs[i];\n\
    \        x = y;\n    }\n    return d;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] d = new double[(xs.length - 1)];\n    double x = 0;\n\
    \    double y = 0;\n    for(int i = 0; i <= (xs.length - 1); i++)\n    {\n   \
    \     y = xs[i + 1];\n        d[i] = (y - x) * xs[i];\n        x = y;\n    }\n\
    \    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] d = new float[(xs.length - 1)];\n    float x = 0;\n    float y = 0;\n\
    \    for(int i = 0; i <= (xs.length - 1); i++)\n    {\n        y = xs[i + 1];\n\
    \        d[i] = (y - x) * xs[i];\n        x = y;\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = result;\n    }\n    result[result.length - 1] = 1;\n    return result;\n}",
  "{\n    long[] result = new long[(xs.length - 1)];\n    long x = 0;\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        result[i - 1] = (long) (xs[i] - x\
    \ * xs[i - 1]);\n        x = xs[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,math,polynomial-math,algorithm |>\n<| a tags=c#,math,polynomial-math,algorithm\
    \ |>\nI wrote a C# program that solves your problem in O(n) time complexity. \n\
    <code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    int n = xs.length;\n\
    \    long[] ys = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n       \
    \ ys[i] = xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n        ys[i]\
    \ = ys[i + 1] * xs[i + 1];\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] ys = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        ys[i] = xs[i];\n    }\n    for(int i = n\
    \ - 1; i >= 0; i--)\n    {\n        ys[i] = ys[i + 1] * xs[i + 1];\n    }\n  \
    \  return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    int\
    \ n = xs.length;\n    float[] ys = new float[n];\n    for(int i = 0; i < n; i++)\n\
    \    {\n        ys[i] = xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--)\n \
    \   {\n        ys[i] = ys[i + 1] * xs[i + 1];\n    }\n    return ys;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    long[] result = new long[xs.length];\n    for(int i\
    \ = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[xs.length];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result\
    \ = new float[xs.length];\n    for(int i = 0; i < xs.length; i++)\n    {\n   \
    \     result[i] = xs[i+1] - xs[i] * xs[i+1];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    int n = xs.length;\n    long[] d = new long[n];\n  \
    \  long x = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        d[i] = xs[i];\n\
    \        x = x * xs[i];\n    }\n    for(int i = n - 1; i >= 0; --i)\n    {\n \
    \       d[i] = d[i + 1];\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] d = new double[n];\n    double\
    \ x = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        d[i] = xs[i];\n     \
    \   x = x * xs[i];\n    }\n    for(int i = n - 1; i >= 0; --i)\n    {\n      \
    \  d[i] = d[i + 1];\n    }\n    return d;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] d = new float[n];\n    float x\
    \ = 0;\n    for(int i = 0; i < n; ++i)\n    {\n        d[i] = xs[i];\n       \
    \ x = x * xs[i];\n    }\n    for(int i = n - 1; i >= 0; --i)\n    {\n        d[i]\
    \ = d[i + 1];\n    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long res = 0;\n    for(int i =\
    \ 0; i < xs.length; i++)\n    {\n        res += xs[i] * derivative(xs, i);\n \
    \   }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i) \n\
    {\n    long res = 0;\n    for(int j = i; j < xs.length; j++)\n    {\n        res\
    \ += xs[i] * derivative(xs, j);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j) \n{\n    long res = 0;\n    for(int\
    \ k = i; k < j; k++)\n    {\n        res += xs[i] * derivative(xs, i, k);\n  \
    \  }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k) \n{\n    long res = 0;\n    for(int l = i; l < j; l++)\n    {\n  \
    \      res += xs[i] * derivative(xs, i, l, k);\n    }\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int l) \n{\n\
    \    long res = 0;\n    for(int m = i; m < j; m++)\n    {\n        res += xs[i]\
    \ * derivative(xs, i, m, l, k);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k, int l, int m) \n{\n    long\
    \ res = 0;\n    for(int n = i; n < j; n++)\n    {\n        res += xs[i] * derivative(xs,\
    \ i, n, l, k, m);\n    }\n    return res;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + x", "{\n    long result = 0;\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result += (long)xs[i] * derivative(xs, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i) \n\
    {\n    long result = 0;\n    for(int j = 0; j < i; j++)\n    {\n        result\
    \ += (long)xs[i] * derivative(xs, j);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j) \n{\n    long result = 0;\n    for(int\
    \ k = 0; k < j; k++)\n    {\n        result += (long)xs[i] * derivative(xs, i,\
    \ j);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k) \n{\n    long result = 0;\n    for(int l = 0; l < k; l++)\n    {\n\
    \        result += (long)xs[i] * derivative(xs, i, j, l);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int l) \n\
    {\n    long result = 0;\n    for(int m = 0; m < l; m++)\n    {\n        result\
    \ += (long)xs[i] * derivative(xs, i, j, k, l);\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int l, int\
    \ m) \n{\n    long result = 0;\n    for(int n = 0; n < m; n++)\n    {\n      \
    \  result += (long)xs[i] * derivative(xs, i, j, k, l, m);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]",
  "{\n    long n = xs.length;\n    long[] ds = new long[n];\n    long d = 1;\n   \
    \ for(int i = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d *= xs[i];\n\
    \    }\n    return ds;\n}", "{\n    int n = xs.length;\n    long[] result = new\
    \ long[n];\n    for(int i = 0; i < n; i++)\n        result[i] = xs[i];\n    for(int\
    \ i = n - 1; i >= 0; i--)\n        result[i] = result[i] * xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; i++)\n      \
    \  result[i] = xs[i];\n    for(int i = n - 1; i >= 0; i--)\n        result[i]\
    \ = result[i] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i];\n    for(int i = n - 1; i >=\
    \ 0; i--)\n        result[i] = result[i] * xs[i];\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    long x = 0;\n    long y = 0;\n    long d = 0;\n    long\
    \ dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd\
    \ = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd\
    \ = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd =\
    \ 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd =\
    \ 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd =\
    \ 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n\
    \    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n\
    \    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n \
    \   long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n \
    \   long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n \
    \   long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n \
    \   long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n \
    \   long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n \
    \   long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n \
    \   long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n \
    \   long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long dd", "{\n    long result = 0;\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result += (long)(xs[i] * xs[i]);\n    }\n\
    \    result /= xs.length;\n    long[] derivative = new long[xs.length];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        derivative[i] = (long)(xs[i] * result);\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   result += (double)(xs[i] * xs[i]);\n    }\n    result /= xs.length;\n    double[]\
    \ derivative = new double[xs.length];\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        derivative[i] = (double)(xs[i] * result);\n    }\n    return derivative;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result += (double)(xs[i]\
    \ * xs[i]);\n    }\n    result /= xs.length;\n    float[] derivative = new float[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = (float)(xs[i]\
    \ * result);\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/", "{\n    int n = xs.length;\n\
    \    long[] result = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = xs[i+1] - xs[i] * xs[i+1];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; i++)\n    {\n\
    \        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    for(int i = 0; i < n; i++)\n    {\n \
    \       result[i] = xs[i+1] - xs[i] * xs[i+1];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/", "{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        result[i] = xs[i] * derivative(xs,\
    \ n - i - 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i] * derivative(xs, n - i\
    \ - 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        result[i] = xs[i] * derivative(xs, n - i - 1);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    long a = xs[0];\n    long b =\
    \ xs[1];\n    long c = xs[2];\n    long d = xs[3];\n    long e = xs[4];\n    long\
    \ f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n    long i = xs[8];\n\
    \    long j = xs[9];\n    long k = xs[10];\n    long l = xs[11];\n    long m =\
    \ xs[12];\n    long n = xs[13];\n    long o = xs[14];\n    long p = xs[15];\n\
    \    long q = xs[16];\n    long r = xs[17];\n    long s = xs[18];\n    long t\
    \ = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n    long w = xs[22];\n\
    \    long x = xs[23];\n    long y = xs[24];\n    long z = xs[25];\n    long a\
    \ = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n    long d = xs[29];\n\
    \    long e = xs[30];\n    long f = xs[31];\n    long g = xs[32];\n    long h\
    \ = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n    long k = xs[36];\n\
    \    long l = xs[37];\n    long m = xs[38];\n    long n = xs[39];\n    long o\
    \ = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n    long r = xs[43];\n\
    \    long s = xs[44];\n    long t = xs[45];\n    long u = xs[46];\n    long v\
    \ = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n    long y = xs[50];\n\
    \    long z = xs[51];\n    long a = xs[52];\n    long b = xs[53];\n    long c\
    \ = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n    long f = xs[57];\n\
    \    long g = xs[58];\n    long h = xs[59];\n    long i = xs[60];\n    long j\
    \ = xs[61];\n    long k = xs[62];\n    long l = xs[63];\n    ", "{\n    long res\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] *\
    \ derivative(xs, i-1);\n    }\n    return res;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i) \n{\n    long res = 0;\n    for(int j = 0; j < i; j++)\n    {\n \
    \       res += xs[j] * derivative(xs, j);\n    }\n    return res;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative(long[] xs, int i, int j) \n{\n    long res = 0;\n\
    \    for(int k = 0; k < j; k++)\n    {\n        res += xs[k] * derivative(xs,\
    \ i, j);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k) \n{\n    long res = 0;\n    for(int l = 0; l < k; l++)\n    {\n  \
    \      res += xs[l] * derivative(xs, i, j, l);\n    }\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int l) \n{\n\
    \    long res = 0;\n    for(int m = 0; m < l; m++)\n    {\n        res += xs[m]\
    \ * derivative(xs, i, j, k, l);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k, int l, int m) \n{\n    long\
    \ res = 0;\n    for(int n = 0; n < m; n++)\n    {\n        res += xs[n] * derivative(xs,\
    \ i, j, k, l, m);\n    }\n    return res;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ", "{\n    int n = xs.length;\n\
    \    long[] result = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     result[i] = xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n\
    \        result[i] = result[i + 1] * xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; i++)\n    {\n\
    \        result[i] = xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n\
    \        result[i] = result[i + 1] * xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    for(int i = 0; i < n; i++)\n    {\n \
    \       result[i] = xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n\
    \        result[i] = result[i + 1] * xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2\
    \ = xs[2];\n    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n\
    \    long x6 = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9\
    \ = xs[9];\n    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n\
    \    long x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long\
    \ x16 = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19\
    \ = xs[19];\n    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n\
    \    long x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long\
    \ x26 = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29\
    \ = xs[29];\n    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n\
    \    long x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long\
    \ x36 = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39\
    \ = xs[39];\n    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n\
    \    long x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long\
    \ x46 = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49\
    \ = xs[49];\n    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n\
    \    long x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long\
    \ x56 = xs[56];\n", "{\n    long[] result = new long[(xs.length - 1)];\n    long\
    \ x = 0;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = xs[i]\
    \ - x * (xs[i-1] + xs[i+1]);\n        x = xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result =\
    \ new double[(xs.length - 1)];\n    double x = 0;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = xs[i] - x * (xs[i-1] + xs[i+1]);\n        x\
    \ = xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    float x = 0;\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = xs[i] - x\
    \ * (xs[i-1] + xs[i+1]);\n        x = xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/", "{\n    long[] result = new long[(xs.length - 1)];\n    for(int\
    \ i = 0; i < result.length; i++) result[i] = 0;\n    for(int i = 1; i < xs.length;\
    \ i++) result[i] = result[i-1] + xs[i] * xs[i];\n    return result;\n}", "{\n\
    \    int n = xs.length;\n    long[] d = new long[n];\n    long x = 0;\n    long\
    \ sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n        sum += xs[i] * x;\n\
    \        d[i] = xs[i] * sum;\n        x += xs[i];\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] d = new double[n];\n    double x = 0;\n    double sum = 0;\n   \
    \ for(int i = 0; i < n; i++)\n    {\n        sum += xs[i] * x;\n        d[i] =\
    \ xs[i] * sum;\n        x += xs[i];\n    }\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] d = new\
    \ float[n];\n    float x = 0;\n    float sum = 0;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        sum += xs[i] * x;\n        d[i] = xs[i] * sum;\n        x += xs[i];\n\
    \    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/", "{\n    int n = xs.length;\n    long[]\
    \ ys = new long[n];\n    long x = 0;\n    for(int i = 0; i < n; i++) {\n     \
    \   x = xs[i];\n        ys[i] = 1;\n        for(int j = i; j < n; j++) {\n   \
    \         ys[i] += xs[j] * ys[j-1];\n        }\n    }\n    return ys;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] ys = new double[n];\n    double x = 0;\n    for(int i = 0; i < n;\
    \ i++) {\n        x = xs[i];\n        ys[i] = 1;\n        for(int j = i; j < n;\
    \ j++) {\n            ys[i] += xs[j] * ys[j-1];\n        }\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] ys = new float[n];\n    float x = 0;\n    for(int i = 0; i < n; i++)\
    \ {\n        x = xs[i];\n        ys[i] = 1;\n        for(int j = i; j < n; j++)\
    \ {\n            ys[i] += xs[j] * ys[j-1];\n        }\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
