language: d
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    float mid1 = numbers[0];\n  \
    \  float mid2 = numbers[0];\n    float mid3 = numbers[0];\n    float mid4 = numbers[0];\n\
    \    float mid5 = numbers[0];\n    float mid6 = numbers[0];\n    float mid7 =\
    \ numbers[0];\n    float mid8 = numbers[0];\n    float mid9 = numbers[0];\n  \
    \  float mid10 = numbers[0];\n    float mid11 = numbers[0];\n    float mid12 =\
    \ numbers[0];\n    float mid13 = numbers[0];\n    float mid14 = numbers[0];\n\
    \    float mid15 = numbers[0];\n    float mid16 = numbers[0];\n    float mid17\
    \ = numbers[0];\n    float mid18 = numbers[0];\n    float mid19 = numbers[0];\n\
    \    float mid20 = numbers[0];\n    float mid21 = numbers[0];\n    float mid22\
    \ = numbers[0];\n    float mid23 = numbers[0];\n    float mid24 = numbers[0];\n\
    \    float mid25 = numbers[0];\n    float mid26 = numbers[0];\n    float mid27\
    \ = numbers[0];\n    float mid28 = numbers[0];\n    float mid29 = numbers[0];\n\
    \    float mid30 = numbers[0];\n    float mid31 = numbers[0];\n    float mid32\
    \ = numbers[0];\n    float mid33 = numbers[0];\n    float mid34 = numbers[0];\n\
    \    float mid35 = numbers[0];\n    float mid36 = numbers[0];\n    float mid37\
    \ = numbers[0];\n    float mid38 = numbers[0];\n    float mid39 = numbers[0];\n\
    \    float mid40 = numbers[0];\n    float mid41 = numbers[0];\n    float mid42\
    \ = numbers[0];\n    float mid43 = numbers[0];\n    float mid44 = numbers[0];\n\
    \    float mid45 = numbers[0];\n    float mid46 = numbers[0];\n    float mid47\
    \ = numbers[0];\n    float mid48 = numbers[0];\n    float mid49 = numbers[0];\n\
    \    float mid50 = numbers[0];\n    float mid51 = numbers[0];\n    float mid52\
    \ = numbers[0];\n    float mid53 = numbers[0];\n    float mid54 = numbers[0];\n\
    \    float mid55 = numbers[0];\n    float mid56 = numbers[0];\n    float mid57\
    \ = numbers[0];\n    float mid58 = numbers[0];\n    float mid59 = numbers[0];\n\
    \    float mid60 = numbers[0];\n    float mid61 = numbers[0];\n    float mid62\
    \ = number\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm17ufi_w.d(76): Error: semicolon expected, not `unittest`

    /tmp/tmpm17ufi_w.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm17ufi_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        if(numbers[i] > max2)\n        {\n         \
    \   max2 = numbers[i];\n        }\n        if(numbers[i] < min2)\n        {\n\
    \            min2 = numbers[i];\n        }\n    }\n    return Tuple!(float,float)((min1,min2),(max1,max2));\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements_2(float[]\
    \ numbers) \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n \
    \   float max1 = numbers[0];\n    float max2 = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n        {\n\
    \            min1 = numbers[i];\n        }\n        else if(numbers[i] > max1)\n\
    \        {\n            max1 = numbers[i];\n        }\n        if(numbers[i] >\
    \ max2)\n        {\n            max2 = numbers[i];\n        }\n        if(numbers[i]\
    \ < min2)\n        {\n            min2 = numbers[i];\n        }\n    }\n    return\
    \ Tuple!(float,float)((min1,min2),(max1,max2));\n}\n/*\n From a supplied list\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements_3(float[] numbers)\
    \ \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1\
    \ = numbers[0];\n    float max2 = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        if(numbers[i] > max2)\n        {\n         \
    \   max2 = numbers[i];\n        }\n        if(numbers[i] < min2)\n        {\n\
    \            min2 = numbers[i];\n        }\n    }\n    return Tuple!(float,float)((min1,min2),(max1,max2));\n\
    }\n/*\n From a supplied list of numbers (of length at least \nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hl7yi37.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hl7yi37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float threshold) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smallest_index = -1;\n\
    \    float largest_index = -1;\n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < smallest)\n        {\n            smallest = numbers[i];\n\
    \            smallest_index = i;\n        }\n        if(numbers[i] > largest)\n\
    \        {\n            largest = numbers[i];\n            largest_index = i;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float threshold, float epsilon) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest)\n        {\n            smallest = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float threshold, float\
    \ epsilon, float delta) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    float smallest_index = \nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2gquprzv.d(91): Error: expression expected, not `unittest`

    /tmp/tmp2gquprzv.d(92): Error: semicolon expected, not `{`

    /tmp/tmp2gquprzv.d(101): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2gquprzv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    float mindiff = Float.MAX_VALUE;\n\
    \    float maxdiff = Float.MIN_VALUE;\n    float diff;\n    float temp;\n    float\
    \ temp2;\n    float temp3;\n    float temp4;\n    float temp5;\n    float temp6;\n\
    \    float temp7;\n    float temp8;\n    float temp9;\n    float temp10;\n   \
    \ float temp11;\n    float temp12;\n    float temp13;\n    float temp14;\n   \
    \ float temp15;\n    float temp16;\n    float temp17;\n    float temp18;\n   \
    \ float temp19;\n    float temp20;\n    float temp21;\n    float temp22;\n   \
    \ float temp23;\n    float temp24;\n    float temp25;\n    float temp26;\n   \
    \ float temp27;\n    float temp28;\n    float temp29;\n    float temp30;\n   \
    \ float temp31;\n    float temp32;\n    float temp33;\n    float temp34;\n   \
    \ float temp35;\n    float temp36;\n    float temp37;\n    float temp38;\n   \
    \ float temp39;\n    float temp40;\n    float temp41;\n    float temp42;\n   \
    \ float temp43;\n    float temp44;\n    float temp45;\n    float temp46;\n   \
    \ float temp47;\n    float temp48;\n    float temp49;\n    float temp50;\n   \
    \ float temp51;\n    float temp52;\n    float temp53;\n    float temp54;\n   \
    \ float temp55;\n    float temp56;\n    float temp57;\n    float temp58;\n   \
    \ float temp59;\n    float temp60;\n    float temp61;\n    float temp62;\n   \
    \ float temp63;\n    float temp64;\n    float temp65;\n    float temp66;\n   \
    \ float temp67;\n    float temp68;\n    float temp69;\n    float temp70;\n   \
    \ float temp71;\n    float temp72;\n    float temp73;\n    float temp74;\n   \
    \ float temp75;\n    float temp76;\n    float temp77;\n    float temp78;\n   \
    \ float temp79;\n    float temp\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo549xqg1.d(97): Error: semicolon expected, not `unittest`

    /tmp/tmpo549xqg1.d(97): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo549xqg1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        else if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpswpt157b.d(29): Error: template instance `tmpswpt157b.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_number;\n    float\
    \ largest_number;\n    \n    smallest = numbers[0];\n    largest = numbers[0];\n\
    \    smallest_number = numbers[0];\n    largest_number = numbers[0];\n    \n \
    \   foreach(number in numbers)\n    {\n        if(number < smallest)\n       \
    \ {\n            smallest = number;\n            smallest_number = number;\n \
    \       }\n        else if(number > largest)\n        {\n            largest =\
    \ number;\n            largest_number = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest_number, largest_number);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers, float\
    \ epsilon) \n{\n    float smallest;\n    float largest;\n    float smallest_number;\n\
    \    float largest_number;\n    \n    smallest = numbers[0];\n    largest = numbers[0];\n\
    \    smallest_number = numbers[0];\n    largest_number = numbers[0];\n    \n \
    \   foreach(number in numbers)\n    {\n        if(number < smallest)\n       \
    \ {\n            smallest = number;\n            smallest_number = number;\n \
    \       }\n        else if(number > largest)\n        {\n            largest =\
    \ number;\n            largest_number = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest_number, largest_number);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers, float\
    \ epsilon, float epsilon2) \n{\n    float smallest;\n    float largest;\n    float\
    \ smallest_number;\n    float largest_number;\n    \n    smallest = numbers[0];\n\
    \    largest = numbers[0];\n    smallest_number = numbers[0];\n    largest_number\
    \ = numbers[0];\n    \n    foreach(number in numbers)\n    {\n        if(number\
    \ < smallest)\n        {\n            smallest = number;\n            smallest_number\
    \ = number;\n        }\n        else if(number > largest)\n        {\n       \
    \     largest = number;\n            largest_number = number;\n        }\n   \
    \ }\n    \n    return Tuple!(smallest_number, largest_number);\n}\n/*\n From a\
    \ supplied list of number\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjae09wev.d(20): Error: no identifier for declarator `number`

    /tmp/tmpjae09wev.d(20): Error: found `in` when expecting `;`

    /tmp/tmpjae09wev.d(53): Error: no identifier for declarator `number`

    /tmp/tmpjae09wev.d(53): Error: found `in` when expecting `;`

    /tmp/tmpjae09wev.d(86): Error: no identifier for declarator `number`

    /tmp/tmpjae09wev.d(86): Error: found `in` when expecting `;`

    /tmp/tmpjae09wev.d(102): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjae09wev.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largestDifference = largest-smallest;\n\
    \    float difference;\n    float temp;\n    float temp2;\n    float temp3;\n\
    \    float temp4;\n    float temp5;\n    float temp6;\n    float temp7;\n    float\
    \ temp8;\n    float temp9;\n    float temp10;\n    float temp11;\n    float temp12;\n\
    \    float temp13;\n    float temp14;\n    float temp15;\n    float temp16;\n\
    \    float temp17;\n    float temp18;\n    float temp19;\n    float temp20;\n\
    \    float temp21;\n    float temp22;\n    float temp23;\n    float temp24;\n\
    \    float temp25;\n    float temp26;\n    float temp27;\n    float temp28;\n\
    \    float temp29;\n    float temp30;\n    float temp31;\n    float temp32;\n\
    \    float temp33;\n    float temp34;\n    float temp35;\n    float temp36;\n\
    \    float temp37;\n    float temp38;\n    float temp39;\n    float temp40;\n\
    \    float temp41;\n    float temp42;\n    float temp43;\n    float temp44;\n\
    \    float temp45;\n    float temp46;\n    float temp47;\n    float temp48;\n\
    \    float temp49;\n    float temp50;\n    float temp51;\n    float temp52;\n\
    \    float temp53;\n    float temp54;\n    float temp55;\n    float temp56;\n\
    \    float temp57;\n    float temp58;\n    float temp59;\n    float temp60;\n\
    \    float temp61;\n    float temp62;\n    float temp63;\n    float temp64;\n\
    \    float temp65;\n    float temp66;\n    float temp67;\n    float temp68;\n\
    \    float temp69;\n    float temp70;\n    float temp71;\n    float temp72;\n\
    \    float temp73;\n    float temp74;\n    float temp75;\n    float temp76;\n\
    \    float temp77;\n    float temp78;\n    float temp79;\n    float temp80;\n\
    \    float temp8\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvg4t0hb.d(96): Error: semicolon expected, not `unittest`

    /tmp/tmpqvg4t0hb.d(96): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvg4t0hb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    Tuple!(float, float) result\
    \ = Tuple!(float, float) tuple(smallest, largest);\n    result.index = smallest_index;\n\
    \    return result;\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements(float[] numbers, float epsilon) \n{\n    float\
    \ smallest = numbers[0];\n    float largest = numbers[0];\n    float smallest_index\
    \ = -1;\n    float largest_index = -1;\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n            smallest\
    \ = numbers[i];\n            smallest_index = i;\n        }\n        else if(numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n            largest_index\
    \ = i;\n        }\n    }\n    Tuple!(float, float) result = Tuple!(float, float)\
    \ tuple(smallest, largest);\n    result.index = smallest_index;\n    return result;\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float epsilon2) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest)\n        {\n            smallest = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        else if(numbers[i] > largest)\n        {\n        \
    \    largest = numbers[i];\n            largest_index = i;\n        }\n    }\n\
    \    Tuple!(float, float) result = Tuple!(float, float) tuple(smallest, largest);\n\
    \    result.index = smallest_index;\n    return result;\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeqcknp5f.d(27): Error: semicolon expected, not `tuple`

    /tmp/tmpeqcknp5f.d(55): Error: semicolon expected, not `tuple`

    /tmp/tmpeqcknp5f.d(83): Error: semicolon expected, not `tuple`

    /tmp/tmpeqcknp5f.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeqcknp5f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 0; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smallest_index = -1;\n\
    \    float largest_index = -1;\n    for(int i = 0; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < smallest + epsilon)\n        {\n            smallest\
    \ = numbers[i];\n            smallest_index = i;\n        }\n        if(numbers[i]\
    \ > largest - epsilon)\n        {\n            largest = numbers[i];\n       \
    \     largest_index = i;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest + delta)\n        {\n            smallest = numbers[i];\n       \
    \     smallest_index = i;\n        }\n        if(numbers[i] > largest - delta)\n\
    \        {\n            largest = numbers[i];\n            largest_index = i;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta, float epsilon2) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smalle\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpny5kjj8e.d(91): Error: semicolon expected, not `unittest`

    /tmp/tmpny5kjj8e.d(91): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny5kjj8e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_found;\n    float\
    \ largest_found;\n    float smallest_found_2;\n    float largest_found_2;\n  \
    \  float smallest_found_3;\n    float largest_found_3;\n    float smallest_found_4;\n\
    \    float largest_found_4;\n    float smallest_found_5;\n    float largest_found_5;\n\
    \    float smallest_found_6;\n    float largest_found_6;\n    float smallest_found_7;\n\
    \    float largest_found_7;\n    float smallest_found_8;\n    float largest_found_8;\n\
    \    float smallest_found_9;\n    float largest_found_9;\n    float smallest_found_10;\n\
    \    float largest_found_10;\n    float smallest_found_11;\n    float largest_found_11;\n\
    \    float smallest_found_12;\n    float largest_found_12;\n    float smallest_found_13;\n\
    \    float largest_found_13;\n    float smallest_found_14;\n    float largest_found_14;\n\
    \    float smallest_found_15;\n    float largest_found_15;\n    float smallest_found_16;\n\
    \    float largest_found_16;\n    float smallest_found_17;\n    float largest_found_17;\n\
    \    float smallest_found_18;\n    float largest_found_18;\n    float smallest_found_19;\n\
    \    float largest_found_19;\n    float smallest_found_20;\n    float largest_found_20;\n\
    \    float smallest_found_21;\n    float largest_found_21;\n    float smallest_found_22;\n\
    \    float largest_found_22;\n    float smallest_found_23;\n    float largest_found_23;\n\
    \    float smallest_found_24;\n    float largest_found_24;\n    float smallest_found_25;\n\
    \    float largest_found_25;\n    float smallest_found_26;\n    float largest_found_26;\n\
    \    float smallest_found_27;\n    float largest_found_27;\n    float smallest_found_28;\n\
    \    float largest_found_28;\n    float smallest_found_29;\n    float largest_found_29;\n\
    \    float smallest_found_30;\n    float largest_found_30;\n    float smallest_found_31;\n\
    \    float largest_found_31;\n    float smallest_found_32;\n    float largest_found_32;\n\
    \    float smallest_found_33;\n    float largest_found_33;\n    float smallest_found_34\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsk1av7_l.d(79): Error: semicolon expected, not `unittest`

    /tmp/tmpsk1av7_l.d(79): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsk1av7_l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\tfor (int i\
    \ = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest)\n\t\t{\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp0pgleq97.d(25): Error: template instance `tmp0pgleq97.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    Tuple!(float, float) result = Tuple!(float,\
    \ float) tuple(smallest, largest);\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbxgj8vgf.d(13): Error: no identifier for declarator `number`

    /tmp/tmpbxgj8vgf.d(13): Error: found `in` when expecting `;`

    /tmp/tmpbxgj8vgf.d(22): Error: semicolon expected, not `tuple`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbxgj8vgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers)\n    {\n        if(number < smallest)\n         \
    \   smallest = number;\n        if(number > largest)\n            largest = number;\n\
    \    }\n    \n    return Tuple!(smallest, largest);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvuro3o_t.d(13): Error: no identifier for declarator `number`

    /tmp/tmpvuro3o_t.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvuro3o_t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest;\n    float largest_diff = smallest;\n    float smallest_diff2\
    \ = largest;\n    float largest_diff2 = smallest;\n    float smallest_diff3 =\
    \ largest;\n    float largest_diff3 = smallest;\n    float smallest_diff4 = largest;\n\
    \    float largest_diff4 = smallest;\n    float smallest_diff5 = largest;\n  \
    \  float largest_diff5 = smallest;\n    float smallest_diff6 = largest;\n    float\
    \ largest_diff6 = smallest;\n    float smallest_diff7 = largest;\n    float largest_diff7\
    \ = smallest;\n    float smallest_diff8 = largest;\n    float largest_diff8 =\
    \ smallest;\n    float smallest_diff9 = largest;\n    float largest_diff9 = smallest;\n\
    \    float smallest_diff10 = largest;\n    float largest_diff10 = smallest;\n\
    \    float smallest_diff11 = largest;\n    float largest_diff11 = smallest;\n\
    \    float smallest_diff12 = largest;\n    float largest_diff12 = smallest;\n\
    \    float smallest_diff13 = largest;\n    float largest_diff13 = smallest;\n\
    \    float smallest_diff14 = largest;\n    float largest_diff14 = smallest;\n\
    \    float smallest_diff15 = largest;\n    float largest_diff15 = smallest;\n\
    \    float smallest_diff16 = largest;\n    float largest_diff16 = smallest;\n\
    \    float smallest_diff17 = largest;\n    float largest_diff17 = smallest;\n\
    \    float smallest_diff18 = largest;\n    float largest_diff18 = smallest;\n\
    \    float smallest_diff19 = largest;\n    float largest_diff19 = smallest;\n\
    \    float smallest_diff20 = largest;\n    float largest_diff20 = smallest;\n\
    \    float smallest_diff21 = largest;\n    float largest_diff21 = smallest;\n\
    \    float smallest_diff22 = largest;\n    float largest_diff22 = smallest;\n\
    \    float smallest_diff23 = largest;\n    float largest_diff23 = smallest;\n\
    \    float smallest_diff24 = largest;\n    float largest_\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprar12imf.d(60): Error: semicolon expected, not `unittest`

    /tmp/tmprar12imf.d(60): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprar12imf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largest_difference = largest-smallest;\n\
    \    float smallest_second_difference = largest-smallest;\n    float largest_second_difference\
    \ = largest-smallest;\n    float smallest_third_difference = largest-smallest;\n\
    \    float largest_third_difference = largest-smallest;\n    float smallest_fourth_difference\
    \ = largest-smallest;\n    float largest_fourth_difference = largest-smallest;\n\
    \    float smallest_fifth_difference = largest-smallest;\n    float largest_fifth_difference\
    \ = largest-smallest;\n    float smallest_sixth_difference = largest-smallest;\n\
    \    float largest_sixth_difference = largest-smallest;\n    float smallest_seventh_difference\
    \ = largest-smallest;\n    float largest_seventh_difference = largest-smallest;\n\
    \    float smallest_eighth_difference = largest-smallest;\n    float largest_eighth_difference\
    \ = largest-smallest;\n    float smallest_ninth_difference = largest-smallest;\n\
    \    float largest_ninth_difference = largest-smallest;\n    float smallest_tenth_difference\
    \ = largest-smallest;\n    float largest_tenth_difference = largest-smallest;\n\
    \    float smallest_eleventh_difference = largest-smallest;\n    float largest_eleventh_difference\
    \ = largest-smallest;\n    float smallest_twelfth_difference = largest-smallest;\n\
    \    float largest_twelfth_difference = largest-smallest;\n    float smallest_thirteenth_difference\
    \ = largest-smallest;\n    float largest_thirteenth_difference = largest-smallest;\n\
    \    float smallest_fourteenth_difference = largest-smallest;\n    float largest_fourteenth_difference\
    \ = largest-smallest;\n    float smallest_fifteenth_difference = largest-smallest;\n\
    \    float largest_fifteenth_difference = largest-smallest;\n    float smallest_sixteenth_difference\
    \ = largest-smallest;\n    float largest_sixteenth_difference = largest-smallest;\n\
    \    float smalle\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39xegr76.d(45): Error: semicolon expected, not `unittest`

    /tmp/tmp39xegr76.d(45): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39xegr76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float max1 = numbers[0];\n    float min2 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    foreach(number in numbers)\
    \ {\n        if(number < min1) {\n            min1 = number;\n        }\n    \
    \    if(number > max1) {\n            max1 = number;\n        }\n        if(number\
    \ < min2) {\n            min2 = number;\n        }\n        if(number > max2)\
    \ {\n            max2 = number;\n        }\n    }\n    \n    return Tuple!(float,float)((min1,max1),(min2,max2));\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzr0ntlux.d(15): Error: no identifier for declarator `number`

    /tmp/tmpzr0ntlux.d(15): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzr0ntlux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(float n in numbers) {\n        if(n < smallest) {\n            smallest\
    \ = n;\n        }\n        if(n > largest) {\n            largest = n;\n     \
    \   }\n    }\n    \n    return Tuple!(smallest, largest);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzts1gm7v.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzts1gm7v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest;\n    float largest_difference = smallest;\n \
    \   float smallest_difference2 = largest;\n    float largest_difference2 = smallest;\n\
    \    float smallest_difference3 = largest;\n    float largest_difference3 = smallest;\n\
    \    float smallest_difference4 = largest;\n    float largest_difference4 = smallest;\n\
    \    float smallest_difference5 = largest;\n    float largest_difference5 = smallest;\n\
    \    float smallest_difference6 = largest;\n    float largest_difference6 = smallest;\n\
    \    float smallest_difference7 = largest;\n    float largest_difference7 = smallest;\n\
    \    float smallest_difference8 = largest;\n    float largest_difference8 = smallest;\n\
    \    float smallest_difference9 = largest;\n    float largest_difference9 = smallest;\n\
    \    float smallest_difference10 = largest;\n    float largest_difference10 =\
    \ smallest;\n    float smallest_difference11 = largest;\n    float largest_difference11\
    \ = smallest;\n    float smallest_difference12 = largest;\n    float largest_difference12\
    \ = smallest;\n    float smallest_difference13 = largest;\n    float largest_difference13\
    \ = smallest;\n    float smallest_difference14 = largest;\n    float largest_difference14\
    \ = smallest;\n    float smallest_difference15 = largest;\n    float largest_difference15\
    \ = smallest;\n    float smallest_difference16 = largest;\n    float largest_difference16\
    \ = smallest;\n    float smallest_difference17 = largest;\n    float largest_difference17\
    \ = smallest;\n    float smallest_difference18 = largest;\n    float largest_difference18\
    \ = smallest;\n    float smallest_difference19 = largest;\n    float largest_difference19\
    \ = smallest;\n    float smallest_difference20 = largest;\n    float largest_difference20\
    \ = smallest;\n    float smallest_difference21 = largest;\n    float largest_difference21\
    \ = smallest;\n    float smallest_difference22 = largest;\n    float largest_difference22\
    \ = smallest;\n    float smallest_difference23 = largest;\n    float largest_difference23\
    \ = smallest;\n    float smallest_difference24 = largest;\n    float \nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpbur3jc.d(60): Error: no identifier for declarator `float`

    /tmp/tmprpbur3jc.d(60): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpbur3jc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for (int i =\
    \ 1; i < numbers.length; ++i)\n    {\n        if (numbers[i] < smallest)\n   \
    \     {\n            smallest = numbers[i];\n            smallest_index = i;\n\
    \        }\n        else if (numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpyrczp84a.d(29): Error: template instance `tmpyrczp84a.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float min1, min2;\n\tfloat max1, max2;\n\t\n\tmin1 = max1 = numbers[0];\n\tmin2\
    \ = max2 = numbers[0];\n\t\n\tfor(int i = 1; i < numbers.length; ++i)\n\t{\n\t\
    \tif(numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\telse if(numbers[i]\
    \ > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\n\t\tif(numbers[i] < min2)\n\
    \t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > max2)\n\t\t{\n\
    \t\t\tmax2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1, max1), Tuple!(min2,\
    \ max2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n   \
    \ assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, max1)` cannot use local `min1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, max1)` cannot use local `max1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpi83fy5z4.d(37): Error: template instance `tmpi83fy5z4.find_closest_elements.Tuple!(min1,
    max1)` error instantiating

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest = numbers[0];\n\tfloat largest = numbers[0];\n\tfloat smallest_index\
    \ = -1;\n\tfloat largest_index = -1;\n\t\n\tfor (int i = 1; i < numbers.length;\
    \ i++)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\
    \t\t\tsmallest_index = i;\n\t\t}\n\t\telse if (numbers[i] > largest)\n\t\t{\n\t\
    \t\tlargest = numbers[i];\n\t\t\tlargest_index = i;\n\t\t}\n\t}\n\t\n\treturn\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpcu6mz39v.d(29): Error: template instance `tmpcu6mz39v.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_number;\n    float\
    \ largest_number;\n    float smallest_difference;\n    float largest_difference;\n\
    \    float smallest_square;\n    float largest_square;\n    float smallest_square_difference;\n\
    \    float largest_square_difference;\n    float smallest_square_root;\n    float\
    \ largest_square_root;\n    float smallest_square_root_difference;\n    float\
    \ largest_square_root_difference;\n    float smallest_square_root_of_two;\n  \
    \  float largest_square_root_of_two;\n    float smallest_square_root_of_two_difference;\n\
    \    float largest_square_root_of_two_difference;\n    float smallest_square_root_of_four;\n\
    \    float largest_square_root_of_four;\n    float smallest_square_root_of_four_difference;\n\
    \    float largest_square_root_of_four_difference;\n    float smallest_square_root_of_eight;\n\
    \    float largest_square_root_of_eight;\n    float smallest_square_root_of_eight_difference;\n\
    \    float largest_square_root_of_eight_difference;\n    float smallest_square_root_of_sixteen;\n\
    \    float largest_square_root_of_sixteen;\n    float smallest_square_root_of_sixteen_difference;\n\
    \    float largest_square_root_of_sixteen_difference;\n    float smallest_square_root_of_thirty;\n\
    \    float largest_square_root_of_thirty;\n    float smallest_square_root_of_thirty_difference;\n\
    \    float largest_square_root_of_thirty_difference;\n    float smallest_square_root_of_twenty;\n\
    \    float largest_square_root_of_twenty;\n    float smallest_square_root_of_twenty_difference;\n\
    \    float largest_square_root_of_twenty_difference;\n    float smallest_square_root_of_twohundred;\n\
    \    float largest_square_root_of_twohundred;\n    float smallest_square_root_of_twohundred_difference;\n\
    \    float largest_square_root_of_twohundred_difference;\n    float smallest_square_root_of_sixty;\n\
    \    float largest_square_root_of_sixty;\n    float smallest_square_root_of_sixty_difference;\n\
    \    float largest_square_root_of_sixty_difference;\n\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32_4eyxz.d(57): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32_4eyxz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    float smallest_difference = largest_number - smallest_number;\n    float\
    \ largest_difference = largest_number - smallest_number;\n    for(int i = 1; i\
    \ < numbers.length; ++i)\n    {\n        float current_number = numbers[i];\n\
    \        float current_difference = current_number - smallest_number;\n      \
    \  if(current_difference < smallest_difference)\n        {\n            smallest_difference\
    \ = current_difference;\n            smallest_number = current_number;\n     \
    \   }\n        else if(current_difference > largest_difference)\n        {\n \
    \           largest_difference = current_difference;\n            largest_number\
    \ = current_number;\n        }\n    }\n    return Tuple!(smallest_number, largest_number);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon) \n{\n    float smallest_number = numbers[0];\n    float\
    \ largest_number = numbers[0];\n    float smallest_difference = largest_number\
    \ - smallest_number;\n    float largest_difference = largest_number - smallest_number;\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        float current_number\
    \ = numbers[i];\n        float current_difference = current_number - smallest_number;\n\
    \        if(current_difference < smallest_difference)\n        {\n           \
    \ smallest_difference = current_difference;\n            smallest_number = current_number;\n\
    \        }\n        else if(current_difference > largest_difference)\n       \
    \ {\n            largest_difference = current_difference;\n            largest_number\
    \ = current_number;\n        }\n    }\n    return Tuple!(smallest_number, largest_number);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float min_difference) \n{\n    float smallest_number\
    \ = numbers[0];\n    float largest_number = numbers[0];\n    float smallest_difference\
    \ = largest_number - smallest_number;\n    float largest_difference = largest_number\
    \ - smallest_number;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n   \
    \     float current_number = numbers[i];\n        float current_difference = current_number\
    \ - smallest_number;\n        if(current_difference < smallest_difference)\n \
    \       {\n            smallest_difference\nunittest\n{\n    alias candidate =\
    \ find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3acfuld8.d(77): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp3acfuld8.d(87): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp3acfuld8.d(87): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp3acfuld8.d(87): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3acfuld8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest_index,\
    \ largest_index);\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements_2(float[] numbers) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest)\n        {\n            smallest = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        else if(numbers[i] > largest)\n        {\n        \
    \    largest = numbers[i];\n            largest_index = i;\n        }\n    }\n\
    \    return Tuple!(smallest_index, largest_index);\n}\n/*\n From a supplied list\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements_3(float[] numbers)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ float smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        else if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    return\
    \ Tuple!(smallest_index, largest_index);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements_4(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = \nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhlol8cc.d(92): Error: expression expected, not `unittest`

    /tmp/tmpuhlol8cc.d(93): Error: semicolon expected, not `{`

    /tmp/tmpuhlol8cc.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhlol8cc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        else if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpswpt157b.d(29): Error: template instance `tmpswpt157b.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_found;\n    float\
    \ largest_found;\n    float smallest_found_index;\n    float largest_found_index;\n\
    \    float temp;\n    float temp2;\n    float temp3;\n    float temp4;\n    float\
    \ temp5;\n    float temp6;\n    float temp7;\n    float temp8;\n    float temp9;\n\
    \    float temp10;\n    float temp11;\n    float temp12;\n    float temp13;\n\
    \    float temp14;\n    float temp15;\n    float temp16;\n    float temp17;\n\
    \    float temp18;\n    float temp19;\n    float temp20;\n    float temp21;\n\
    \    float temp22;\n    float temp23;\n    float temp24;\n    float temp25;\n\
    \    float temp26;\n    float temp27;\n    float temp28;\n    float temp29;\n\
    \    float temp30;\n    float temp31;\n    float temp32;\n    float temp33;\n\
    \    float temp34;\n    float temp35;\n    float temp36;\n    float temp37;\n\
    \    float temp38;\n    float temp39;\n    float temp40;\n    float temp41;\n\
    \    float temp42;\n    float temp43;\n    float temp44;\n    float temp45;\n\
    \    float temp46;\n    float temp47;\n    float temp48;\n    float temp49;\n\
    \    float temp50;\n    float temp51;\n    float temp52;\n    float temp53;\n\
    \    float temp54;\n    float temp55;\n    float temp56;\n    float temp57;\n\
    \    float temp58;\n    float temp59;\n    float temp60;\n    float temp61;\n\
    \    float temp62;\n    float temp63;\n    float temp64;\n    float temp65;\n\
    \    float temp66;\n    float temp67;\n    float temp68;\n    float temp69;\n\
    \    float temp70;\n    float temp71;\n    float temp72;\n    float temp73;\n\
    \    float temp74;\n    float temp75;\n    float temp76;\n    float temp77;\n\
    \    float temp78;\n    float temp79;\n    float temp80;\n    float temp81;\n\
    \    float temp8\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzzt1ngfu.d(98): Error: semicolon expected, not `unittest`

    /tmp/tmpzzt1ngfu.d(98): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzt1ngfu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest-smallest;\n    float largest_diff = smallest-largest;\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        float diff = numbers[i]-smallest;\n\
    \        if(diff < smallest_diff)\n        {\n            smallest_diff = diff;\n\
    \            smallest = numbers[i];\n        }\n        else if(diff > largest_diff)\n\
    \        {\n            largest_diff = diff;\n            largest = numbers[i];\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    float smallest_diff = largest-smallest;\n    float largest_diff\
    \ = smallest-largest;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n  \
    \      float diff = numbers[i]-smallest;\n        if(diff < smallest_diff)\n \
    \       {\n            smallest_diff = diff;\n            smallest = numbers[i];\n\
    \        }\n        else if(diff > largest_diff)\n        {\n            largest_diff\
    \ = diff;\n            largest = numbers[i];\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float epsilon2) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest-smallest;\n    float largest_diff = smallest-largest;\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        float diff = numbers[i]-smallest;\n\
    \        if(diff < smallest_diff)\n        {\n            smallest_diff = diff;\n\
    \            smallest = numbers[i];\n        }\n        else if(diff > largest_diff)\n\
    \        {\n            largest_diff = diff;\n            largest = numbers[i];\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length \nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjhp_rzlg.d(84): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhp_rzlg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfuwf6q9.d(13): Error: no identifier for declarator `number`

    /tmp/tmpsfuwf6q9.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfuwf6q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_two;\n    float largest_two;\n\
    \    float smallest_three;\n    float largest_three;\n    float smallest_four;\n\
    \    float largest_four;\n    float smallest_five;\n    float largest_five;\n\
    \    float smallest_six;\n    float largest_six;\n    float smallest_seven;\n\
    \    float largest_seven;\n    float smallest_eight;\n    float largest_eight;\n\
    \    float smallest_nine;\n    float largest_nine;\n    float smallest_ten;\n\
    \    float largest_ten;\n    float smallest_eleven;\n    float largest_eleven;\n\
    \    float smallest_twelve;\n    float largest_twelve;\n    float smallest_thirteen;\n\
    \    float largest_thirteen;\n    float smallest_fourteen;\n    float largest_fourteen;\n\
    \    float smallest_fifteen;\n    float largest_fifteen;\n    float smallest_sixteen;\n\
    \    float largest_sixteen;\n    float smallest_seventeen;\n    float largest_seventeen;\n\
    \    float smallest_eighteen;\n    float largest_eighteen;\n    float smallest_nineteen;\n\
    \    float largest_nineteen;\n    float smallest_twenty;\n    float largest_twenty;\n\
    \    float smallest_twenty_one;\n    float largest_twenty_one;\n    float smallest_twenty_two;\n\
    \    float largest_twenty_two;\n    float smallest_twenty_three;\n    float largest_twenty_three;\n\
    \    float smallest_twenty_four;\n    float largest_twenty_four;\n    float smallest_twenty_five;\n\
    \    float largest_twenty_five;\n    float smallest_twenty_six;\n    float largest_twenty_six;\n\
    \    float smallest_twenty_seven;\n    float largest_twenty_seven;\n    float\
    \ smallest_twenty_eight;\n    float largest_twenty_eight;\n    float smallest_twenty_nine;\n\
    \    float largest_twenty_nine;\n    float smallest_thirty;\n\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjxoftdyj.d(70): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjxoftdyj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpw3795785.d(27): Error: template instance `tmpw3795785.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float max1 = numbers[0];\n    float min2 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    foreach(float number in\
    \ numbers) {\n        if(number < min1) {\n            min1 = number;\n      \
    \  }\n        if(number > max1) {\n            max1 = number;\n        }\n   \
    \     if(number < min2) {\n            min2 = number;\n        }\n        if(number\
    \ > max2) {\n            max2 = number;\n        }\n    }\n    \n    return Tuple!(float,float)\
    \ (min1, max1, min2, max2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzdco2p1i.d(15): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzdco2p1i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements_fast(float[] numbers) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest)\n        {\n            smallest = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        else if(numbers[i] > largest)\n        {\n        \
    \    largest = numbers[i];\n            largest_index = i;\n        }\n    }\n\
    \    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements_fast(float[] numbers, int\
    \ start) \n{\n    float smallest = numbers[start];\n    float largest = numbers[start];\n\
    \    float smallest_index = -1;\n    float largest_index = -1;\n    for(int i\
    \ = start; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n            smallest_index = i;\n\
    \        }\n        else if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements_fast(float[] numbers, int start, int\
    \ end) \n{\n    float smallest = numbers[start];\n    float largest = numbers[start];\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgow3yhbs.d(90): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgow3yhbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest-smallest;\n    float largest_diff = largest-smallest;\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        float diff = numbers[i]-smallest;\n\
    \        if(diff < smallest_diff)\n        {\n            smallest_diff = diff;\n\
    \            smallest = numbers[i];\n        }\n        else if(diff > largest_diff)\n\
    \        {\n            largest_diff = diff;\n            largest = numbers[i];\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\nunittest\n{\n   \
    \ alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpjzgtzas8.d(28): Error: template instance `tmpjzgtzas8.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest;\n    float largest_diff = smallest;\n    float smallest_diff2\
    \ = largest;\n    float largest_diff2 = smallest;\n    float smallest_diff3 =\
    \ largest;\n    float largest_diff3 = smallest;\n    float smallest_diff4 = largest;\n\
    \    float largest_diff4 = smallest;\n    float smallest_diff5 = largest;\n  \
    \  float largest_diff5 = smallest;\n    float smallest_diff6 = largest;\n    float\
    \ largest_diff6 = smallest;\n    float smallest_diff7 = largest;\n    float largest_diff7\
    \ = smallest;\n    float smallest_diff8 = largest;\n    float largest_diff8 =\
    \ smallest;\n    float smallest_diff9 = largest;\n    float largest_diff9 = smallest;\n\
    \    float smallest_diff10 = largest;\n    float largest_diff10 = smallest;\n\
    \    float smallest_diff11 = largest;\n    float largest_diff11 = smallest;\n\
    \    float smallest_diff12 = largest;\n    float largest_diff12 = smallest;\n\
    \    float smallest_diff13 = largest;\n    float largest_diff13 = smallest;\n\
    \    float smallest_diff14 = largest;\n    float largest_diff14 = smallest;\n\
    \    float smallest_diff15 = largest;\n    float largest_diff15 = smallest;\n\
    \    float smallest_diff16 = largest;\n    float largest_diff16 = smallest;\n\
    \    float smallest_diff17 = largest;\n    float largest_diff17 = smallest;\n\
    \    float smallest_diff18 = largest;\n    float largest_diff18 = smallest;\n\
    \    float smallest_diff19 = largest;\n    float largest_diff19 = smallest;\n\
    \    float smallest_diff20 = largest;\n    float largest_diff20 = smallest;\n\
    \    float smallest_diff21 = largest;\n    float largest_diff21 = smallest;\n\
    \    float smallest_diff22 = largest;\n    float largest_diff22 = smallest;\n\
    \    float smallest_diff23 = largest;\n    float largest_diff23 = smallest;\n\
    \    float smallest_diff24 = largest;\n    float largest_\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprar12imf.d(60): Error: semicolon expected, not `unittest`

    /tmp/tmprar12imf.d(60): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprar12imf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(float\
    \ number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From\
    \ a supplied list of numbers (of length at least two) select and return two that\
    \ are the closest to each\n    other and return them in order (smaller number,\
    \ larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    foreach(float number in numbers) {\n        if(number < smallest\
    \ - epsilon) {\n            smallest = number;\n        }\n        if(number >\
    \ largest + epsilon) {\n            largest = number;\n        }\n    }\n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float epsilon, float\
    \ epsilon2) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    foreach(float number in numbers) {\n        if(number < smallest - epsilon)\
    \ {\n            smallest = number;\n        }\n        if(number > largest +\
    \ epsilon) {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float epsilon2, float\
    \ epsilon3) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    foreach(float number in numbers) {\n        if(number < smallest - epsilon)\
    \ {\n            smallest = number;\n        }\n        if(number > largest +\
    \ epsilon) {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float \nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyw3i3r0y.d(12): Error: found `in` when expecting `;`

    /tmp/tmpyw3i3r0y.d(31): Error: found `in` when expecting `;`

    /tmp/tmpyw3i3r0y.d(50): Error: found `in` when expecting `;`

    /tmp/tmpyw3i3r0y.d(69): Error: found `in` when expecting `;`

    /tmp/tmpyw3i3r0y.d(85): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyw3i3r0y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_found;\n    float\
    \ largest_found;\n    float smallest_found_temp;\n    float largest_found_temp;\n\
    \    float temp;\n    float temp_temp;\n    float temp_temp_temp;\n    float temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp;\n    float temp_temp_temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp_temp_temp;\n    float temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float\
    \ temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float\
    \ temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float\
    \ temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float\
    \ temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float\
    \ temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float\
    \ temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float\
    \ temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    float temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4qetguw.d(50): Error: semicolon expected, not `unittest`

    /tmp/tmpw4qetguw.d(50): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4qetguw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largest_difference = largest-smallest;\n\
    \    float smallest_second_difference = largest-smallest;\n    float largest_second_difference\
    \ = largest-smallest;\n    float smallest_third_difference = largest-smallest;\n\
    \    float largest_third_difference = largest-smallest;\n    float smallest_fourth_difference\
    \ = largest-smallest;\n    float largest_fourth_difference = largest-smallest;\n\
    \    float smallest_fifth_difference = largest-smallest;\n    float largest_fifth_difference\
    \ = largest-smallest;\n    float smallest_sixth_difference = largest-smallest;\n\
    \    float largest_sixth_difference = largest-smallest;\n    float smallest_seventh_difference\
    \ = largest-smallest;\n    float largest_seventh_difference = largest-smallest;\n\
    \    float smallest_eighth_difference = largest-smallest;\n    float largest_eighth_difference\
    \ = largest-smallest;\n    float smallest_ninth_difference = largest-smallest;\n\
    \    float largest_ninth_difference = largest-smallest;\n    float smallest_tenth_difference\
    \ = largest-smallest;\n    float largest_tenth_difference = largest-smallest;\n\
    \    float smallest_eleventh_difference = largest-smallest;\n    float largest_eleventh_difference\
    \ = largest-smallest;\n    float smallest_twelfth_difference = largest-smallest;\n\
    \    float largest_twelfth_difference = largest-smallest;\n    float smallest_thirteenth_difference\
    \ = largest-smallest;\n    float largest_thirteenth_difference = largest-smallest;\n\
    \    float smallest_fourteenth_difference = largest-smallest;\n    float largest_fourteenth_difference\
    \ = largest-smallest;\n    float smallest_fifteenth_difference = largest-smallest;\n\
    \    float largest_fifteenth_difference = largest-smallest;\n    float smallest_sixteenth_difference\
    \ = largest-smallest;\n    float largest_sixteenth_difference = largest-smallest;\n\
    \    float smalle\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39xegr76.d(45): Error: semicolon expected, not `unittest`

    /tmp/tmp39xegr76.d(45): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39xegr76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    foreach(i : numbers) {\n\
    \        if (i < min1) {\n            min1 = i;\n        } else if (i > max1)\
    \ {\n            max1 = i;\n        }\n        if (i < min2) {\n            min2\
    \ = i;\n        } else if (i > max2) {\n            max2 = i;\n        }\n   \
    \ }\n    \n    return Tuple!(min1, min2);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers, float\
    \ threshold) \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n\
    \    float max1 = numbers[0];\n    float max2 = numbers[0];\n    \n    foreach(i\
    \ : numbers) {\n        if (i < min1) {\n            min1 = i;\n        } else\
    \ if (i > max1) {\n            max1 = i;\n        }\n        if (i < min2) {\n\
    \            min2 = i;\n        } else if (i > max2) {\n            max2 = i;\n\
    \        }\n    }\n    \n    return Tuple!(min1, min2);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float threshold, float epsilon) \n{\n    float min1 = numbers[0];\n\
    \    float min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 =\
    \ numbers[0];\n    \n    foreach(i : numbers) {\n        if (i < min1) {\n   \
    \         min1 = i;\n        } else if (i > max1) {\n            max1 = i;\n \
    \       }\n        if (i < min2) {\n            min2 = i;\n        } else if (i\
    \ > max2) {\n            max2 = i;\n        }\n    }\n    \n    return Tuple!(min1,\
    \ min2);\n}\n/*\n From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float threshold, float epsilon, float delta) \n{\n    float min1 =\
    \ numbers[0];\n    float min2 = numbers[0];\n    float max1 = numbers[0];\n  \
    \  float max2 = numbers[0];\n    \n    foreach(i : numbers) {\n        if (i <\
    \ min1) {\n            \nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphf885_mj.d(15): Error: no identifier for declarator `i`

    /tmp/tmphf885_mj.d(15): Error: found `:` when expecting `;`

    /tmp/tmphf885_mj.d(42): Error: no identifier for declarator `i`

    /tmp/tmphf885_mj.d(42): Error: found `:` when expecting `;`

    /tmp/tmphf885_mj.d(69): Error: no identifier for declarator `i`

    /tmp/tmphf885_mj.d(69): Error: found `:` when expecting `;`

    /tmp/tmphf885_mj.d(96): Error: no identifier for declarator `i`

    /tmp/tmphf885_mj.d(96): Error: found `:` when expecting `;`

    /tmp/tmphf885_mj.d(99): Error: found `unittest` instead of statement

    /tmp/tmphf885_mj.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmphf885_mj.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf885_mj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        else if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpswpt157b.d(29): Error: template instance `tmpswpt157b.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float min1, min2;\n\tfloat max1, max2;\n\tfloat mindiff = FLT_MAX;\n\tfloat maxdiff\
    \ = FLT_MIN;\n\tfloat diff;\n\tfloat diff2;\n\tfloat diff3;\n\tfloat diff4;\n\t\
    float diff5;\n\tfloat diff6;\n\tfloat diff7;\n\tfloat diff8;\n\tfloat diff9;\n\
    \tfloat diff10;\n\tfloat diff11;\n\tfloat diff12;\n\tfloat diff13;\n\tfloat diff14;\n\
    \tfloat diff15;\n\tfloat diff16;\n\tfloat diff17;\n\tfloat diff18;\n\tfloat diff19;\n\
    \tfloat diff20;\n\tfloat diff21;\n\tfloat diff22;\n\tfloat diff23;\n\tfloat diff24;\n\
    \tfloat diff25;\n\tfloat diff26;\n\tfloat diff27;\n\tfloat diff28;\n\tfloat diff29;\n\
    \tfloat diff30;\n\tfloat diff31;\n\tfloat diff32;\n\tfloat diff33;\n\tfloat diff34;\n\
    \tfloat diff35;\n\tfloat diff36;\n\tfloat diff37;\n\tfloat diff38;\n\tfloat diff39;\n\
    \tfloat diff40;\n\tfloat diff41;\n\tfloat diff42;\n\tfloat diff43;\n\tfloat diff44;\n\
    \tfloat diff45;\n\tfloat diff46;\n\tfloat diff47;\n\tfloat diff48;\n\tfloat diff49;\n\
    \tfloat diff50;\n\tfloat diff51;\n\tfloat diff52;\n\tfloat diff53;\n\tfloat diff54;\n\
    \tfloat diff55;\n\tfloat diff56;\n\tfloat diff57;\n\tfloat diff58;\n\tfloat diff59;\n\
    \tfloat diff60;\n\tfloat diff61;\n\tfloat diff62;\n\tfloat diff63;\n\tfloat diff64;\n\
    \tfloat diff65;\n\tfloat diff66;\n\tfloat diff67;\n\tfloat diff68;\n\tfloat diff69;\n\
    \tfloat diff70;\n\tfloat diff71;\n\tfloat diff72;\n\tfloat diff73;\n\tfloat diff74;\n\
    \tfloat diff75;\n\tfloat diff76;\n\tfloat diff77;\n\tfloat diff78;\n\tfloat diff79;\n\
    \tfloat diff80;\n\tfloat diff81;\n\tfloat diff82;\n\tfloat diff83;\n\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm776za77.d(98): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm776za77.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(float\
    \ number in numbers) {\n        if (number < smallest) {\n            smallest\
    \ = number;\n        }\n        if (number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    return Tuple!(smallest, largest);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0hn2tna.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0hn2tna.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp05jsu6xw.d(27): Error: template instance `tmp05jsu6xw.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05jsu6xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(float number in numbers) {\n        if(number < smallest) {\n      \
    \      smallest = number;\n        }\n        if(number > largest) {\n       \
    \     largest = number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpboplgbbs.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpboplgbbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        else if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpswpt157b.d(29): Error: template instance `tmpswpt157b.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largestDifference = largest-smallest;\n\
    \    float smallest_square = smallest*smallest;\n    float largestSquare = largest*largest;\n\
    \    float smallest_square_difference = smallest_square-smallest_difference;\n\
    \    float largestSquare_difference = largestSquare-smallest_difference;\n   \
    \ float smallest_square_difference2 = smallest_square_difference*smallest_square_difference;\n\
    \    float largestSquare_difference2 = largestSquare_difference*largestSquare_difference;\n\
    \    float smallest_square_difference3 = smallest_square_difference2*smallest_square_difference;\n\
    \    float largestSquare_difference3 = largestSquare_difference2*largestSquare_difference;\n\
    \    float smallest_square_difference4 = smallest_square_difference3*smallest_square_difference;\n\
    \    float largestSquare_difference4 = largestSquare_difference3*largestSquare_difference;\n\
    \    float smallest_square_difference5 = smallest_square_difference4*smallest_square_difference;\n\
    \    float largestSquare_difference5 = largestSquare_difference4*largestSquare_difference;\n\
    \    float smallest_square_difference6 = smallest_square_difference5*smallest_square_difference;\n\
    \    float largestSquare_difference6 = largestSquare_difference5*largestSquare_difference;\n\
    \    float smallest_square_difference7 = smallest_square_difference6*smallest_square_difference;\n\
    \    float largestSquare_difference7 = largestSquare_difference6*largestSquare_difference;\n\
    \    float smallest_square_difference8 = smallest_square_difference7*smallest_square_difference;\n\
    \    float largestSquare_difference8 = largestSquare_difference7*largestSquare_difference;\n\
    \    float smallest_square_difference9 = smallest_square_difference8*smallest_square_difference;\n\
    \    float largestSquare_difference9 = largestSquare_difference8*largestSquare_difference;\n\
    \    float smallest_square_difference10 = smallest_square_difference9*smallest_square_difference;\n\
    \    float largestSquare_difference10 = largestSquare_difference9*largestSquare_difference;\n\
    \    float smallest_square_difference11 = smallest_square_difference10*smallest_square_difference;\n\
    \    float lar\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68g5e24_.d(38): Error: semicolon expected, not `unittest`

    /tmp/tmp68g5e24_.d(38): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68g5e24_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > max2)\n        {\n\
    \            max2 = numbers[i];\n        }\n        else if(numbers[i] < min2)\n\
    \        {\n            min2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, max1);\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements_2(float[] numbers) \n{\n    float min1 = numbers[0];\n\
    \    float min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 =\
    \ numbers[0];\n    \n    for(int i = 1; i < numbers.length; ++i)\n    {\n    \
    \    if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n      \
    \  }\n        else if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n\
    \        }\n        \n        if(numbers[i] > max2)\n        {\n            max2\
    \ = numbers[i];\n        }\n        else if(numbers[i] < min2)\n        {\n  \
    \          min2 = numbers[i];\n        }\n    }\n    \n    return Tuple!(min1,\
    \ max1);\n}\n/*\n From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements_3(float[]\
    \ numbers) \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n \
    \   float max1 = numbers[0];\n    float max2 = numbers[0];\n    \n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n    \
    \    {\n            min1 = numbers[i];\n        }\n        else if(numbers[i]\
    \ > max1)\n        {\n            max1 = numbers[i];\n        }\n        \n  \
    \      if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n    \
    \    }\n        else if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n    }\n    \n    return Tuple!(min1, max1);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that \nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9j6gcw9.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9j6gcw9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float min1 = numbers[0];\n\tfloat max1 = numbers[0];\n\tfloat min2 = numbers[0];\n\
    \tfloat max2 = numbers[0];\n\tfloat min3 = numbers[0];\n\tfloat max3 = numbers[0];\n\
    \tfloat min4 = numbers[0];\n\tfloat max4 = numbers[0];\n\tfloat min5 = numbers[0];\n\
    \tfloat max5 = numbers[0];\n\tfloat min6 = numbers[0];\n\tfloat max6 = numbers[0];\n\
    \tfloat min7 = numbers[0];\n\tfloat max7 = numbers[0];\n\tfloat min8 = numbers[0];\n\
    \tfloat max8 = numbers[0];\n\tfloat min9 = numbers[0];\n\tfloat max9 = numbers[0];\n\
    \tfloat min10 = numbers[0];\n\tfloat max10 = numbers[0];\n\tfloat min11 = numbers[0];\n\
    \tfloat max11 = numbers[0];\n\tfloat min12 = numbers[0];\n\tfloat max12 = numbers[0];\n\
    \tfloat min13 = numbers[0];\n\tfloat max13 = numbers[0];\n\tfloat min14 = numbers[0];\n\
    \tfloat max14 = numbers[0];\n\tfloat min15 = numbers[0];\n\tfloat max15 = numbers[0];\n\
    \tfloat min16 = numbers[0];\n\tfloat max16 = numbers[0];\n\tfloat min17 = numbers[0];\n\
    \tfloat max17 = numbers[0];\n\tfloat min18 = numbers[0];\n\tfloat max18 = numbers[0];\n\
    \tfloat min19 = numbers[0];\n\tfloat max19 = numbers[0];\n\tfloat min20 = numbers[0];\n\
    \tfloat max20 = numbers[0];\n\tfloat min21 = numbers[0];\n\tfloat max21 = numbers[0];\n\
    \tfloat min22 = numbers[0];\n\tfloat max22 = numbers[0];\n\tfloat min23 = numbers[0];\n\
    \tfloat max23 = numbers[0];\n\tfloat min24 = numbers[0];\n\tfloat max24 = numbers[0];\n\
    \tfloat min25 = numbers[0];\n\tfloat max25 = numbers[0];\n\tfloat min26 = numbers[0];\n\
    \tfloat max26 = numbers[0];\n\tfloat min27 = numbers[0];\n\tfloat max27 = numbers[0];\n\
    \tfloat min28 = numbers[0];\n\tfloat max28 = numbers[0];\n\tfloat min29 = numbers[0];\n\
    \tfloat max29 = numbers[0];\n\tfloat min30 = numbers[0];\n\tfloat max30 = numbers[0];\n\
    \tfloat min31 = numbers[0];\n\tfloat max31 = numbers[0];\n\tfloat min32 = numbers[0];\n\
    \tfloat max32 = numbers[0];\n\tfloat min33 = numbers[0];\n\tfloat max33 = numbers[0];\n\
    \tfloat min34 = number\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvypsva0v.d(77): Error: semicolon expected, not `unittest`

    /tmp/tmpvypsva0v.d(77): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvypsva0v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    Tuple!(float, float) result = Tuple!(float,\
    \ float)(smallest, largest);\n    \n    return result;\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float threshold) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number < smallest)\
    \ {\n            smallest = number;\n        }\n        if(number > largest) {\n\
    \            largest = number;\n        }\n    }\n    \n    Tuple!(float, float)\
    \ result = Tuple!(float, float)(smallest, largest);\n    \n    if(smallest - threshold\
    \ < largest + threshold) {\n        return result;\n    }\n    else {\n      \
    \  return find_closest_elements(numbers, threshold);\n    }\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float threshold, float epsilon) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    \n    foreach(number in numbers) {\n   \
    \     if(number < smallest) {\n            smallest = number;\n        }\n   \
    \     if(number > largest) {\n            largest = number;\n        }\n    }\n\
    \    \n    Tuple!(float, float) result = Tuple!(float, float)(smallest, largest);\n\
    \    \n    if(smallest - threshold < largest + threshold) {\n        return result;\n\
    \    }\n    else {\n        return find_closest_elements(numbers, threshold, epsilon);\n\
    \    }\n}\n/*\n From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float threshold, float epsilon, float delta) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    \n    foreach(number in\
    \ numbers) {\n\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwcqnpv90.d(13): Error: no identifier for declarator `number`

    /tmp/tmpwcqnpv90.d(13): Error: found `in` when expecting `;`

    /tmp/tmpwcqnpv90.d(36): Error: no identifier for declarator `number`

    /tmp/tmpwcqnpv90.d(36): Error: found `in` when expecting `;`

    /tmp/tmpwcqnpv90.d(64): Error: no identifier for declarator `number`

    /tmp/tmpwcqnpv90.d(64): Error: found `in` when expecting `;`

    /tmp/tmpwcqnpv90.d(92): Error: no identifier for declarator `number`

    /tmp/tmpwcqnpv90.d(92): Error: found `in` when expecting `;`

    /tmp/tmpwcqnpv90.d(94): Error: found `unittest` instead of statement

    /tmp/tmpwcqnpv90.d(104): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcqnpv90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_found;\n    float\
    \ largest_found;\n    float smallest_found_2;\n    float largest_found_2;\n  \
    \  float smallest_found_3;\n    float largest_found_3;\n    float smallest_found_4;\n\
    \    float largest_found_4;\n    float smallest_found_5;\n    float largest_found_5;\n\
    \    float smallest_found_6;\n    float largest_found_6;\n    float smallest_found_7;\n\
    \    float largest_found_7;\n    float smallest_found_8;\n    float largest_found_8;\n\
    \    float smallest_found_9;\n    float largest_found_9;\n    float smallest_found_10;\n\
    \    float largest_found_10;\n    float smallest_found_11;\n    float largest_found_11;\n\
    \    float smallest_found_12;\n    float largest_found_12;\n    float smallest_found_13;\n\
    \    float largest_found_13;\n    float smallest_found_14;\n    float largest_found_14;\n\
    \    float smallest_found_15;\n    float largest_found_15;\n    float smallest_found_16;\n\
    \    float largest_found_16;\n    float smallest_found_17;\n    float largest_found_17;\n\
    \    float smallest_found_18;\n    float largest_found_18;\n    float smallest_found_19;\n\
    \    float largest_found_19;\n    float smallest_found_20;\n    float largest_found_20;\n\
    \    float smallest_found_21;\n    float largest_found_21;\n    float smallest_found_22;\n\
    \    float largest_found_22;\n    float smallest_found_23;\n    float largest_found_23;\n\
    \    float smallest_found_24;\n    float largest_found_24;\n    float smallest_found_25;\n\
    \    float largest_found_25;\n    float smallest_found_26;\n    float largest_found_26;\n\
    \    float smallest_found_27;\n    float largest_found_27;\n    float smallest_found_28;\n\
    \    float largest_found_28;\n    float smallest_found_29;\n    float largest_found_29;\n\
    \    float smallest_found_30;\n    float largest_found_30;\n    float smallest_found_31;\n\
    \    float largest_found_31;\n    float smallest_found_32;\n    float largest_found_32;\n\
    \    float smallest_found_33;\n    float largest_found_33;\n    float smallest_found_34\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsk1av7_l.d(79): Error: semicolon expected, not `unittest`

    /tmp/tmpsk1av7_l.d(79): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsk1av7_l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(number\
    \ in numbers) {\n        if(number < smallest) {\n            smallest = number;\n\
    \        }\n        if(number > largest) {\n            largest = number;\n  \
    \      }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    foreach(number in numbers) {\n        if(number < smallest\
    \ - epsilon) {\n            smallest = number;\n        }\n        if(number >\
    \ largest + epsilon) {\n            largest = number;\n        }\n    }\n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float epsilon, float\
    \ delta) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    foreach(number in numbers) {\n        if(number < smallest - delta && number\
    \ > smallest + delta) {\n            smallest = number;\n        }\n        if(number\
    \ > largest + delta && number < largest - delta) {\n            largest = number;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta, float gamma) \n{\n    float smallest =\
    \ numbers[0];\n    float largest = numbers[0];\n    foreach(number in numbers)\
    \ {\n        if(number < smallest - gamma && number > smallest + gamma) {\n  \
    \          smallest = number;\n        }\n        if(number > largest + gamma\
    \ && number < largest - gamma) {\n            largest = number;\n        }\n \
    \   }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9zmuy89_.d(12): Error: no identifier for declarator `number`

    /tmp/tmp9zmuy89_.d(12): Error: found `in` when expecting `;`

    /tmp/tmp9zmuy89_.d(31): Error: no identifier for declarator `number`

    /tmp/tmp9zmuy89_.d(31): Error: found `in` when expecting `;`

    /tmp/tmp9zmuy89_.d(50): Error: no identifier for declarator `number`

    /tmp/tmp9zmuy89_.d(50): Error: found `in` when expecting `;`

    /tmp/tmp9zmuy89_.d(69): Error: no identifier for declarator `number`

    /tmp/tmp9zmuy89_.d(69): Error: found `in` when expecting `;`

    /tmp/tmp9zmuy89_.d(79): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zmuy89_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers)\n    {\n        if(number < smallest)\n        {\n\
    \            smallest = number;\n        }\n        if(number > largest)\n   \
    \     {\n            largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6behonr7.d(13): Error: no identifier for declarator `number`

    /tmp/tmp6behonr7.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6behonr7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n\
    \        }\n        if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n\
    \        }\n        if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n    }\n    return Tuple!(min1, max1);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, max1)` cannot use local `min1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, max1)` cannot use local `max1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpkoljqf9f.d(33): Error: template instance `tmpkoljqf9f.find_closest_elements.Tuple!(min1,
    max1)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkoljqf9f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largest_difference = largest-smallest;\n\
    \    float difference;\n    float new_smallest;\n    float new_largest;\n    float\
    \ new_smallest_difference;\n    float new_largest_difference;\n    float new_difference;\n\
    \    float new_new_smallest;\n    float new_new_largest;\n    float new_new_smallest_difference;\n\
    \    float new_new_largest_difference;\n    float new_new_difference;\n    float\
    \ new_new_new_smallest;\n    float new_new_new_largest;\n    float new_new_new_smallest_difference;\n\
    \    float new_new_new_largest_difference;\n    float new_new_new_difference;\n\
    \    float new_new_new_new_smallest;\n    float new_new_new_new_largest;\n   \
    \ float new_new_new_new_smallest_difference;\n    float new_new_new_new_largest_difference;\n\
    \    float new_new_new_new_difference;\n    float new_new_new_new_new_smallest;\n\
    \    float new_new_new_new_new_largest;\n    float new_new_new_new_new_smallest_difference;\n\
    \    float new_new_new_new_new_largest_difference;\n    float new_new_new_new_new_difference;\n\
    \    float new_new_new_new_new_new_smallest;\n    float new_new_new_new_new_new_largest;\n\
    \    float new_new_new_new_new_new_smallest_difference;\n    float new_new_new_new_new_new_largest_difference;\n\
    \    float new_new_new_new_new_new_difference;\n    float new_new_new_new_new_new_new_smallest;\n\
    \    float new_new_new_new_new_new_new_largest;\n    float new_new_new_new_new_new_new_smallest_difference;\n\
    \    float new_new_new_new_new_new_new_largest_difference;\n    float new_new_new_new_new_new_new_difference;\n\
    \    float new_new_new_new_new_new_new_new_smallest;\n    float new_new_new_new_new_new_new_new_largest;\n\
    \    float new_new_new_new_new_new_new_new_smallest_difference;\n    float new_new_new_new_new_new_new_new_largest_difference;\n\
    \    float new_new_new_new_new_new_new_new_difference;\n    float new_new_new_new_new_new_new_new_new_smallest;\n\
    \    float new_new_new_new_new_new_new_new_new_largest;\n    float new_new_new_new_\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqb4qxf6c.d(58): Error: semicolon expected, not `unittest`

    /tmp/tmpqb4qxf6c.d(58): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqb4qxf6c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for (int i =\
    \ 0; i < numbers.length; ++i)\n    {\n        if (numbers[i] < smallest)\n   \
    \     {\n            smallest = numbers[i];\n            smallest_index = i;\n\
    \        }\n        else if (numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpwod0d5cs.d(29): Error: template instance `tmpwod0d5cs.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    foreach(float\
    \ number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n            smallest_index = -1;\n        }\n        if(number >\
    \ largest) {\n            largest = number;\n            largest_index = -1;\n\
    \        }\n        if(smallest_index == -1) {\n            smallest_index = number;\n\
    \        }\n        if(largest_index == -1) {\n            largest_index = number;\n\
    \        }\n    }\n    \n    Tuple!(float, float) result;\n    result.first =\
    \ smallest;\n    result.second = largest;\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp34yn4_3u.d(15): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34yn4_3u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > min2)\n        {\n\
    \            min2 = numbers[i];\n        }\n        else if(numbers[i] < max2)\n\
    \        {\n            max2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, min2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min2` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp1iot2to_.d(36): Error: template instance `tmp1iot2to_.find_closest_elements.Tuple!(min1,
    min2)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1iot2to_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpw3795785.d(27): Error: template instance `tmpw3795785.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers)\n    {\n        if(number < smallest)\n        {\n\
    \            smallest = number;\n        }\n        if(number > largest)\n   \
    \     {\n            largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6behonr7.d(13): Error: no identifier for declarator `number`

    /tmp/tmp6behonr7.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6behonr7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smallest_index = -1;\n\
    \    float largest_index = -1;\n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < smallest + epsilon)\n        {\n            smallest\
    \ = numbers[i];\n            smallest_index = i;\n        }\n        if(numbers[i]\
    \ > largest - epsilon)\n        {\n            largest = numbers[i];\n       \
    \     largest_index = i;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest + delta)\n        {\n            smallest = numbers[i];\n       \
    \     smallest_index = i;\n        }\n        if(numbers[i] > largest - delta)\n\
    \        {\n            largest = numbers[i];\n            largest_index = i;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta, float gamma) \n{\n    float smallest =\
    \ numbers[0];\n    float largest = \nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8jfsn0vf.d(90): Error: expression expected, not `unittest`

    /tmp/tmp8jfsn0vf.d(91): Error: semicolon expected, not `{`

    /tmp/tmp8jfsn0vf.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jfsn0vf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\tfor (int i\
    \ = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest)\n\t\t{\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp0pgleq97.d(25): Error: template instance `tmp0pgleq97.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 0;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        \n        if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpkqufk5pm.d(30): Error: template instance `tmpkqufk5pm.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_element;\n    float\
    \ largest_element;\n    float smallest_element_index;\n    float largest_element_index;\n\
    \    float temp;\n    float temp2;\n    float temp3;\n    float temp4;\n    float\
    \ temp5;\n    float temp6;\n    float temp7;\n    float temp8;\n    float temp9;\n\
    \    float temp10;\n    float temp11;\n    float temp12;\n    float temp13;\n\
    \    float temp14;\n    float temp15;\n    float temp16;\n    float temp17;\n\
    \    float temp18;\n    float temp19;\n    float temp20;\n    float temp21;\n\
    \    float temp22;\n    float temp23;\n    float temp24;\n    float temp25;\n\
    \    float temp26;\n    float temp27;\n    float temp28;\n    float temp29;\n\
    \    float temp30;\n    float temp31;\n    float temp32;\n    float temp33;\n\
    \    float temp34;\n    float temp35;\n    float temp36;\n    float temp37;\n\
    \    float temp38;\n    float temp39;\n    float temp40;\n    float temp41;\n\
    \    float temp42;\n    float temp43;\n    float temp44;\n    float temp45;\n\
    \    float temp46;\n    float temp47;\n    float temp48;\n    float temp49;\n\
    \    float temp50;\n    float temp51;\n    float temp52;\n    float temp53;\n\
    \    float temp54;\n    float temp55;\n    float temp56;\n    float temp57;\n\
    \    float temp58;\n    float temp59;\n    float temp60;\n    float temp61;\n\
    \    float temp62;\n    float temp63;\n    float temp64;\n    float temp65;\n\
    \    float temp66;\n    float temp67;\n    float temp68;\n    float temp69;\n\
    \    float temp70;\n    float temp71;\n    float temp72;\n    float temp73;\n\
    \    float temp74;\n    float temp75;\n    float temp76;\n    float temp77;\n\
    \    float temp78;\n    float temp79;\n    float temp80;\n    float temp81;\n\
    \    float temp8\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_vjr9ye8.d(98): Error: semicolon expected, not `unittest`

    /tmp/tmp_vjr9ye8.d(98): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_vjr9ye8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n        }\n        else if(numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n        }\n    }\n\
    \    \n    return Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp6kzsbo53.d(25): Error: template instance `tmp6kzsbo53.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_two;\n    float largest_two;\n\
    \    float smallest_three;\n    float largest_three;\n    float smallest_four;\n\
    \    float largest_four;\n    float smallest_five;\n    float largest_five;\n\
    \    float smallest_six;\n    float largest_six;\n    float smallest_seven;\n\
    \    float largest_seven;\n    float smallest_eight;\n    float largest_eight;\n\
    \    float smallest_nine;\n    float largest_nine;\n    float smallest_ten;\n\
    \    float largest_ten;\n    float smallest_eleven;\n    float largest_eleven;\n\
    \    float smallest_twelve;\n    float largest_twelve;\n    float smallest_thirteen;\n\
    \    float largest_thirteen;\n    float smallest_fourteen;\n    float largest_fourteen;\n\
    \    float smallest_fifteen;\n    float largest_fifteen;\n    float smallest_sixteen;\n\
    \    float largest_sixteen;\n    float smallest_seventeen;\n    float largest_seventeen;\n\
    \    float smallest_eighteen;\n    float largest_eighteen;\n    float smallest_nineteen;\n\
    \    float largest_nineteen;\n    float smallest_twenty;\n    float largest_twenty;\n\
    \    float smallest_twenty_one;\n    float largest_twenty_one;\n    float smallest_twenty_two;\n\
    \    float largest_twenty_two;\n    float smallest_twenty_three;\n    float largest_twenty_three;\n\
    \    float smallest_twenty_four;\n    float largest_twenty_four;\n    float smallest_twenty_five;\n\
    \    float largest_twenty_five;\n    float smallest_twenty_six;\n    float largest_twenty_six;\n\
    \    float smallest_twenty_seven;\n    float largest_twenty_seven;\n    float\
    \ smallest_twenty_eight;\n    float largest_twenty_eight;\n    float smallest_twenty_nine;\n\
    \    float largest_twenty_nine;\n    float smallest_thirty;\n\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjxoftdyj.d(70): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjxoftdyj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] < min2)\n        {\n\
    \            min2 = numbers[i];\n        }\n        else if(numbers[i] > max2)\n\
    \        {\n            max2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, max1), Tuple!(min2, max2);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers, float\
    \ epsilon) \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n \
    \   float max1 = numbers[0];\n    float max2 = numbers[0];\n    \n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n    \
    \    {\n            min1 = numbers[i];\n        }\n        else if(numbers[i]\
    \ > max1)\n        {\n            max1 = numbers[i];\n        }\n        \n  \
    \      if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n    \
    \    }\n        else if(numbers[i] > max2)\n        {\n            max2 = numbers[i];\n\
    \        }\n    }\n    \n    return Tuple!(min1, max1), Tuple!(min2, max2);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta) \n{\n    float min1 = numbers[0];\n   \
    \ float min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    \n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < min1)\n        {\n            min1 = numbers[i];\n        }\n        else\
    \ if(numbers[i] > max1)\n        {\n            max1 = numbers[i];\n        }\n\
    \        \n        if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max2)\n        {\n            max2 =\
    \ numbers[i];\n        }\n    }\n    \n    return Tuple!(min1, max1), Tuple!\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq5b74wsx.d(107): Error: template argument expected following `!`

    /tmp/tmpq5b74wsx.d(107): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpq5b74wsx.d(117): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq5b74wsx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(float number in numbers) {\n        if (number < smallest) {\n     \
    \       smallest = number;\n        }\n        if (number > largest) {\n     \
    \       largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxifx8xz4.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxifx8xz4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_element;\n    float\
    \ largest_element;\n    float smallest_distance;\n    float largest_distance;\n\
    \    float smallest_distance_index;\n    float largest_distance_index;\n    float\
    \ smallest_distance_index2;\n    float largest_distance_index2;\n    float smallest_distance_index3;\n\
    \    float largest_distance_index3;\n    float smallest_distance_index4;\n   \
    \ float largest_distance_index4;\n    float smallest_distance_index5;\n    float\
    \ largest_distance_index5;\n    float smallest_distance_index6;\n    float largest_distance_index6;\n\
    \    float smallest_distance_index7;\n    float largest_distance_index7;\n   \
    \ float smallest_distance_index8;\n    float largest_distance_index8;\n    float\
    \ smallest_distance_index9;\n    float largest_distance_index9;\n    float smallest_distance_index10;\n\
    \    float largest_distance_index10;\n    float smallest_distance_index11;\n \
    \   float largest_distance_index11;\n    float smallest_distance_index12;\n  \
    \  float largest_distance_index12;\n    float smallest_distance_index13;\n   \
    \ float largest_distance_index13;\n    float smallest_distance_index14;\n    float\
    \ largest_distance_index14;\n    float smallest_distance_index15;\n    float largest_distance_index15;\n\
    \    float smallest_distance_index16;\n    float largest_distance_index16;\n \
    \   float smallest_distance_index17;\n    float largest_distance_index17;\n  \
    \  float smallest_distance_index18;\n    float largest_distance_index18;\n   \
    \ float smallest_distance_index19;\n    float largest_distance_index19;\n    float\
    \ smallest_distance_index20;\n    float largest_distance_index20;\n    float smallest_distance_index21;\n\
    \    float largest_distance_index21;\n    float smallest_distance_index22;\n \
    \   float largest_distance_index22;\n    float smallest_distance_index23;\n  \
    \  float largest_distance_index23;\n    float smallest_distance_index24;\n   \
    \ float largest_distance_index24;\n    float smallest_distance_index25;\n    float\
    \ largest_distance_index25;\n    float smallest_distance_index26;\n    float largest_distance_index26;\n\
    \    float smallest_distance_index27;\n    float largest_distance_index27;\n \
    \   float smallest_distance_index28;\n    float largest_distance_index28;\n\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo0r5wwi9.d(73): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0r5wwi9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ for (int i = 1; i < numbers.length; ++i)\n    {\n        if (numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n        }\n        if (numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n        }\n    }\n\
    \    \n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float tolerance) \n{\n    float smallest = numbers[0];\n    float largest =\
    \ numbers[0];\n    \n    for (int i = 1; i < numbers.length; ++i)\n    {\n   \
    \     if (numbers[i] < smallest + tolerance)\n        {\n            smallest\
    \ = numbers[i];\n        }\n        if (numbers[i] > largest - tolerance)\n  \
    \      {\n            largest = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float tolerance, float\
    \ epsilon) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    \n    for (int i = 1; i < numbers.length; ++i)\n    {\n        if (numbers[i]\
    \ < smallest + tolerance - epsilon)\n        {\n            smallest = numbers[i];\n\
    \        }\n        if (numbers[i] > largest - tolerance + epsilon)\n        {\n\
    \            largest = numbers[i];\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float tolerance, float epsilon, float\
    \ delta) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    \n    for (int i = 1; i < numbers.length; ++i)\n    {\n        if (numbers[i]\
    \ < smallest + tolerance - epsilon + delta)\n        {\n            smallest =\
    \ numbers[i];\n        }\n        if (numbers[i] > largest - tolerance + epsilon\
    \ - delta)\n        {\n            largest = numbers[i];\n\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_zi88i2e.d(95): Error: found `unittest` instead of statement

    /tmp/tmp_zi88i2e.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_zi88i2e.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_zi88i2e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 0;\
    \ i < numbers.length; i++)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        else if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp1b3gq_ze.d(29): Error: template instance `tmp1b3gq_ze.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_2;\n    float largest_2;\n\
    \    float smallest_3;\n    float largest_3;\n    float smallest_4;\n    float\
    \ largest_4;\n    float smallest_5;\n    float largest_5;\n    float smallest_6;\n\
    \    float largest_6;\n    float smallest_7;\n    float largest_7;\n    float\
    \ smallest_8;\n    float largest_8;\n    float smallest_9;\n    float largest_9;\n\
    \    float smallest_10;\n    float largest_10;\n    float smallest_11;\n    float\
    \ largest_11;\n    float smallest_12;\n    float largest_12;\n    float smallest_13;\n\
    \    float largest_13;\n    float smallest_14;\n    float largest_14;\n    float\
    \ smallest_15;\n    float largest_15;\n    float smallest_16;\n    float largest_16;\n\
    \    float smallest_17;\n    float largest_17;\n    float smallest_18;\n    float\
    \ largest_18;\n    float smallest_19;\n    float largest_19;\n    float smallest_20;\n\
    \    float largest_20;\n    float smallest_21;\n    float largest_21;\n    float\
    \ smallest_22;\n    float largest_22;\n    float smallest_23;\n    float largest_23;\n\
    \    float smallest_24;\n    float largest_24;\n    float smallest_25;\n    float\
    \ largest_25;\n    float smallest_26;\n    float largest_26;\n    float smallest_27;\n\
    \    float largest_27;\n    float smallest_28;\n    float largest_28;\n    float\
    \ smallest_29;\n    float largest_29;\n    float smallest_30;\n    float largest_30;\n\
    \    float smallest_31;\n    float largest_31;\n    float smallest_32;\n    float\
    \ largest_32;\n    float smallest_33;\n    float largest_33;\n    float smallest_34;\n\
    \    float largest_34;\n    float smallest_35;\n    float largest_35;\n    float\
    \ smallest_36;\n    float largest_36;\n    float smallest_37;\n    float largest_37;\n\
    \    float smallest_38;\n    float largest_38;\n    float smallest_39;\n    float\
    \ largest_39;\n    float \nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkkmqo6j.d(89): Error: no identifier for declarator `float`

    /tmp/tmpqkkmqo6j.d(89): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkkmqo6j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfuwf6q9.d(13): Error: no identifier for declarator `number`

    /tmp/tmpsfuwf6q9.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfuwf6q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfuwf6q9.d(13): Error: no identifier for declarator `number`

    /tmp/tmpsfuwf6q9.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfuwf6q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_2;\n    float largest_2;\n\
    \    float smallest_3;\n    float largest_3;\n    float smallest_4;\n    float\
    \ largest_4;\n    float smallest_5;\n    float largest_5;\n    float smallest_6;\n\
    \    float largest_6;\n    float smallest_7;\n    float largest_7;\n    float\
    \ smallest_8;\n    float largest_8;\n    float smallest_9;\n    float largest_9;\n\
    \    float smallest_10;\n    float largest_10;\n    float smallest_11;\n    float\
    \ largest_11;\n    float smallest_12;\n    float largest_12;\n    float smallest_13;\n\
    \    float largest_13;\n    float smallest_14;\n    float largest_14;\n    float\
    \ smallest_15;\n    float largest_15;\n    float smallest_16;\n    float largest_16;\n\
    \    float smallest_17;\n    float largest_17;\n    float smallest_18;\n    float\
    \ largest_18;\n    float smallest_19;\n    float largest_19;\n    float smallest_20;\n\
    \    float largest_20;\n    float smallest_21;\n    float largest_21;\n    float\
    \ smallest_22;\n    float largest_22;\n    float smallest_23;\n    float largest_23;\n\
    \    float smallest_24;\n    float largest_24;\n    float smallest_25;\n    float\
    \ largest_25;\n    float smallest_26;\n    float largest_26;\n    float smallest_27;\n\
    \    float largest_27;\n    float smallest_28;\n    float largest_28;\n    float\
    \ smallest_29;\n    float largest_29;\n    float smallest_30;\n    float largest_30;\n\
    \    float smallest_31;\n    float largest_31;\n    float smallest_32;\n    float\
    \ largest_32;\n    float smallest_33;\n    float largest_33;\n    float smallest_34;\n\
    \    float largest_34;\n    float smallest_35;\n    float largest_35;\n    float\
    \ smallest_36;\n    float largest_36;\n    float smallest_37;\n    float largest_37;\n\
    \    float smallest_38;\n    float largest_38;\n    float smallest_39;\n    float\
    \ largest_39;\n    float \nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkkmqo6j.d(89): Error: no identifier for declarator `float`

    /tmp/tmpqkkmqo6j.d(89): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkkmqo6j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(float\
    \ number in numbers) {\n        if (number < smallest) {\n            smallest\
    \ = number;\n        }\n        if (number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From\
    \ a supplied list of numbers (of length at least two) select and return two that\
    \ are the closest to each\n    other and return them in order (smaller number,\
    \ larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    foreach(float number in numbers) {\n        if (number <\
    \ smallest - epsilon) {\n            smallest = number;\n        }\n        if\
    \ (number > largest + epsilon) {\n            largest = number;\n        }\n \
    \   }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float epsilon, float delta) \n{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    foreach(float number in numbers) {\n        if (number\
    \ < smallest - delta || number > largest + delta) {\n            smallest = number;\n\
    \        }\n        if (number > largest + delta || number < smallest - delta)\
    \ {\n            largest = number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float delta, float gamma)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ foreach(float number in numbers) {\n        if (number < smallest - gamma ||\
    \ number > largest + gamma) {\n            smallest = number;\n        }\n   \
    \     if (number > largest + gamma || number < smallest - gamma) {\n         \
    \   largest = number;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkzvdo2wh.d(12): Error: found `in` when expecting `;`

    /tmp/tmpkzvdo2wh.d(31): Error: found `in` when expecting `;`

    /tmp/tmpkzvdo2wh.d(50): Error: found `in` when expecting `;`

    /tmp/tmpkzvdo2wh.d(69): Error: found `in` when expecting `;`

    /tmp/tmpkzvdo2wh.d(79): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzvdo2wh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_found;\n    float\
    \ largest_found;\n    float smallest_found_temp;\n    float largest_found_temp;\n\
    \    float temp;\n    float temp_temp;\n    float temp_temp2;\n    float temp_temp3;\n\
    \    float temp_temp4;\n    float temp_temp5;\n    float temp_temp6;\n    float\
    \ temp_temp7;\n    float temp_temp8;\n    float temp_temp9;\n    float temp_temp10;\n\
    \    float temp_temp11;\n    float temp_temp12;\n    float temp_temp13;\n    float\
    \ temp_temp14;\n    float temp_temp15;\n    float temp_temp16;\n    float temp_temp17;\n\
    \    float temp_temp18;\n    float temp_temp19;\n    float temp_temp20;\n    float\
    \ temp_temp21;\n    float temp_temp22;\n    float temp_temp23;\n    float temp_temp24;\n\
    \    float temp_temp25;\n    float temp_temp26;\n    float temp_temp27;\n    float\
    \ temp_temp28;\n    float temp_temp29;\n    float temp_temp30;\n    float temp_temp31;\n\
    \    float temp_temp32;\n    float temp_temp33;\n    float temp_temp34;\n    float\
    \ temp_temp35;\n    float temp_temp36;\n    float temp_temp37;\n    float temp_temp38;\n\
    \    float temp_temp39;\n    float temp_temp40;\n    float temp_temp41;\n    float\
    \ temp_temp42;\n    float temp_temp43;\n    float temp_temp44;\n    float temp_temp45;\n\
    \    float temp_temp46;\n    float temp_temp47;\n    float temp_temp48;\n    float\
    \ temp_temp49;\n    float temp_temp50;\n    float temp_temp51;\n    float temp_temp52;\n\
    \    float temp_temp53;\n    float temp_temp54;\n    float temp_temp55;\n    float\
    \ temp_temp56;\n    float temp_temp57;\n    float temp_temp58;\n    float temp_temp59;\n\
    \    float temp_temp60;\n    float temp_temp61;\n    float temp_temp62;\n    float\
    \ temp_temp63;\n    float temp_temp64;\n    float temp_temp65;\n    float temp_temp66;\n\
    \    float temp_temp67;\n    float temp_temp68;\n    float temp_temp69;\n\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj8lgsazh.d(87): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj8lgsazh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest_index,\
    \ largest_index);\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements(float[] numbers, float epsilon) \n{\n    float\
    \ smallest = numbers[0];\n    float largest = numbers[0];\n    float smallest_index\
    \ = -1;\n    float largest_index = -1;\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < smallest + epsilon)\n        {\n      \
    \      smallest = numbers[i];\n            smallest_index = i;\n        }\n  \
    \      if(numbers[i] > largest - epsilon)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest_index,\
    \ largest_index);\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements(float[] numbers, float epsilon, float epsilon2)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ float smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest + epsilon)\n\
    \        {\n            smallest = numbers[i];\n            smallest_index = i;\n\
    \        }\n        if(numbers[i] > largest - epsilon)\n        {\n          \
    \  largest = numbers[i];\n            largest_index = i;\n        }\n        if(numbers[i]\
    \ > largest - epsilon2)\n        {\n            largest = numbers[i];\n      \
    \      largest_index = i;\n        }\n    }\n    return Tuple!(smallest_index,\
    \ largest_index);\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_element\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppxy5vn7i.d(92): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxy5vn7i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 0; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smallest_index = -1;\n\
    \    float largest_index = -1;\n    for(int i = 0; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < smallest)\n        {\n            smallest = numbers[i];\n\
    \            smallest_index = i;\n        }\n        if(numbers[i] > largest)\n\
    \        {\n            largest = numbers[i];\n            largest_index = i;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float min_distance) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest)\n        {\n            smallest = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float epsilon, float\
    \ min_distance, float max_distance) \n{\n    float smallest = numbers[0];\n  \
    \  float largest = numbers[0];\n    float smallest_index = -1;\n\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ye4xkma.d(92): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ye4xkma.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        if(numbers[i] > max2)\n        {\n         \
    \   max2 = numbers[i];\n        }\n        if(numbers[i] < min2)\n        {\n\
    \            min2 = numbers[i];\n        }\n    }\n    return Tuple!(min1, max1);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float tolerance) \n{\n    float min1 = numbers[0];\n    float min2\
    \ = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    for(int i = 0; i < numbers.length; ++i)\n    {\n        if(numbers[i] < min1)\n\
    \        {\n            min1 = numbers[i];\n        }\n        else if(numbers[i]\
    \ > max1)\n        {\n            max1 = numbers[i];\n        }\n        if(numbers[i]\
    \ > max2)\n        {\n            max2 = numbers[i];\n        }\n        if(numbers[i]\
    \ < min2)\n        {\n            min2 = numbers[i];\n        }\n    }\n    return\
    \ Tuple!(min1, max1);\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements(float[] numbers, float tolerance, float epsilon)\
    \ \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1\
    \ = numbers[0];\n    float max2 = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        if(numbers[i] > max2)\n        {\n         \
    \   max2 = numbers[i];\n        }\n        if(numbers[i] < min2)\n        {\n\
    \            min2 = numbers[i];\n        }\n    }\n    return Tuple!(min1, max1);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n\nunittest\n{\n    alias candidate =\
    \ find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_r05gpj5.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_r05gpj5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    float temp;\n    for(int i =\
    \ 1; i < numbers.length; ++i)\n    {\n        temp = numbers[i];\n        if(temp\
    \ < min1)\n        {\n            min1 = temp;\n        }\n        else if(temp\
    \ > max1)\n        {\n            max1 = temp;\n        }\n        else if(temp\
    \ < min2)\n        {\n            min2 = temp;\n        }\n        else if(temp\
    \ > max2)\n        {\n            max2 = temp;\n        }\n    }\n    return Tuple!(min1,\
    \ max1);\n}\n/*\n From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float tolerance) \n{\n    float min1 = numbers[0];\n    float min2\
    \ = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    float temp;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n       \
    \ temp = numbers[i];\n        if(temp < min1)\n        {\n            min1 = temp;\n\
    \        }\n        else if(temp > max1)\n        {\n            max1 = temp;\n\
    \        }\n        else if(temp < min2)\n        {\n            min2 = temp;\n\
    \        }\n        else if(temp > max2)\n        {\n            max2 = temp;\n\
    \        }\n    }\n    return Tuple!(min1, max1);\n}\n/*\n From a supplied list\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float tolerance, float epsilon) \n{\n    float min1 = numbers[0];\n    float\
    \ min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    float temp;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n       \
    \ temp = numbers[i];\n        if(temp < min1)\n        {\n            min1 = temp;\n\
    \        }\n        else if(temp > max1)\n        {\n            max1 = temp;\n\
    \        }\n        else if(temp < min2)\n        {\n            min2 = temp;\n\
    \        }\n        else if(temp > max2)\n        {\n            max2 = temp;\n\
    \        }\n    }\n    return Tuple!(min1, max1);\n}\n/*\n From a supplied list\
    \ of number\nunittest\n{\n    alias candidate = find_closest_elements;\n\n   \
    \ assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx7_n4lau.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7_n4lau.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(float n in numbers) {\n        if (n < smallest) {\n            smallest\
    \ = n;\n        }\n        if (n > largest) {\n            largest = n;\n    \
    \    }\n    }\n    \n    return Tuple!(smallest, largest);\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc0wdgzv.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc0wdgzv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    float temp1 = numbers[0];\n \
    \   float temp2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        temp1 = numbers[i];\n        temp2 = numbers[i - 1];\n       \
    \ \n        if(temp1 < min1)\n        {\n            min1 = temp1;\n        }\n\
    \        if(temp2 < min2)\n        {\n            min2 = temp2;\n        }\n \
    \       if(temp1 > max1)\n        {\n            max1 = temp1;\n        }\n  \
    \      if(temp2 > max2)\n        {\n            max2 = temp2;\n        }\n   \
    \ }\n    \n    return Tuple!(min1, min2);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min2` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpyhxucgkb.d(40): Error: template instance `tmpyhxucgkb.find_closest_elements.Tuple!(min1,
    min2)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhxucgkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for (int i =\
    \ 1; i < numbers.length; ++i)\n    {\n        if (numbers[i] < smallest)\n   \
    \     {\n            smallest = numbers[i];\n            smallest_index = i;\n\
    \        }\n        if (numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp3jw8r01j.d(29): Error: template instance `tmp3jw8r01j.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\tfor (int i\
    \ = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest)\n\t\t{\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp0pgleq97.d(25): Error: template instance `tmp0pgleq97.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest-smallest;\n    float largest_diff = smallest-numbers[0];\n\
    \    float smallest_diff2 = largest-smallest;\n    float largest_diff2 = smallest-numbers[0];\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        float diff = numbers[i]-smallest;\n\
    \        float diff2 = numbers[i]-smallest;\n        if(diff < smallest_diff)\n\
    \        {\n            smallest_diff = diff;\n            smallest_diff2 = diff2;\n\
    \        }\n        if(diff2 < largest_diff2)\n        {\n            largest_diff\
    \ = diff2;\n            largest_diff2 = diff2;\n        }\n    }\n    return Tuple!(smallest_diff,\
    \ largest_diff);\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements(float[] numbers, float epsilon) \n{\n    float\
    \ smallest = numbers[0];\n    float largest = numbers[0];\n    float smallest_diff\
    \ = largest-smallest;\n    float largest_diff = smallest-numbers[0];\n    float\
    \ smallest_diff2 = largest-smallest;\n    float largest_diff2 = smallest-numbers[0];\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        float diff = numbers[i]-smallest;\n\
    \        float diff2 = numbers[i]-smallest;\n        if(diff < smallest_diff)\n\
    \        {\n            smallest_diff = diff;\n            smallest_diff2 = diff2;\n\
    \        }\n        if(diff2 < largest_diff2)\n        {\n            largest_diff\
    \ = diff2;\n            largest_diff2 = diff2;\n        }\n    }\n    return Tuple!(smallest_diff,\
    \ largest_diff);\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements(float[] numbers, float epsilon, float epsilon2)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ float smallest_diff = largest-smallest;\n    float largest_diff = smallest-numbers[0];\n\
    \    float smallest_diff2 = largest-smallest;\n    float largest_diff2 = \nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwm6ao47c.d(76): Error: expression expected, not `unittest`

    /tmp/tmpwm6ao47c.d(77): Error: semicolon expected, not `{`

    /tmp/tmpwm6ao47c.d(86): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwm6ao47c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    float result = smallest;\n\
    \    float result_index = smallest_index;\n    for(int i = largest_index; i >=\
    \ 0; --i)\n    {\n        if(numbers[i] > result)\n        {\n            result\
    \ = numbers[i];\n            result_index = i;\n        }\n    }\n    return Tuple!(result,\
    \ result_index);\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements(float[] numbers, int start_index) \n{\n    float\
    \ smallest = numbers[start_index];\n    float largest = numbers[start_index];\n\
    \    float smallest_index = -1;\n    float largest_index = -1;\n    for(int i\
    \ = start_index + 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] <\
    \ smallest)\n        {\n            smallest = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    float result\
    \ = smallest;\n    float result_index = smallest_index;\n    for(int i = largest_index;\
    \ i >= start_index; --i)\n    {\n        if(numbers[i] > result)\n        {\n\
    \            result = numbers[i];\n            result_index = i;\n        }\n\
    \    }\n    return Tuple!(result, result_index);\n}\n/*\n From a supplied list\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ int start_index, int end_index) \n{\n    float smallest = numbers[start_index];\n\
    \    float largest = numbers[start_index];\n    float smallest_index = -1;\n \
    \   float largest_index = -1;\n    for(int i = start_index + 1; i < end_index;\
    \ ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n            smallest\
    \ = numbers[i];\n            smallest_index = i;\n        }\n        if(numbers[i]\
    \ > lar\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ynp2xwj.d(94): Error: found `unittest` when expecting `)`

    /tmp/tmp_ynp2xwj.d(104): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_ynp2xwj.d(104): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ynp2xwj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largest_difference = largest-smallest;\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        float current_number\
    \ = numbers[i];\n        float current_difference = current_number-smallest;\n\
    \        if(current_difference < smallest_difference)\n        {\n           \
    \ smallest_difference = current_difference;\n            smallest = current_number;\n\
    \        }\n        else if(current_difference > largest_difference)\n       \
    \ {\n            largest_difference = current_difference;\n            largest\
    \ = current_number;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp04ukxqys.d(29): Error: template instance `tmp04ukxqys.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > max2)\n        {\n\
    \            max2 = numbers[i];\n        }\n        else if(numbers[i] < min2)\n\
    \        {\n            min2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, max1), Tuple!(min2, max2);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, max1)` cannot use local `min1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, max1)` cannot use local `max1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpctktbbb5.d(36): Error: template instance `tmpctktbbb5.find_closest_elements.Tuple!(min1,
    max1)` error instantiating

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smallest_index = -1;\n\
    \    float largest_index = -1;\n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < smallest + epsilon)\n        {\n            smallest\
    \ = numbers[i];\n            smallest_index = i;\n        }\n        if(numbers[i]\
    \ > largest - epsilon)\n        {\n            largest = numbers[i];\n       \
    \     largest_index = i;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float min_distance) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest + epsilon)\n        {\n            smallest = numbers[i];\n     \
    \       smallest_index = i;\n        }\n        if(numbers[i] > largest - epsilon)\n\
    \        {\n            largest = numbers[i];\n            largest_index = i;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float min_distance, float max_distance) \n{\n    float\
    \ smallest = numbers[0];\n    float lar\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpishioxdj.d(90): Error: semicolon expected, not `unittest`

    /tmp/tmpishioxdj.d(90): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpishioxdj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp05jsu6xw.d(27): Error: template instance `tmp05jsu6xw.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05jsu6xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpw3795785.d(27): Error: template instance `tmpw3795785.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    float temp;\n    for(int i =\
    \ 0; i < numbers.length; ++i)\n    {\n        temp = numbers[i];\n        if(temp\
    \ < min1)\n        {\n            min1 = temp;\n        }\n        else if(temp\
    \ > max1)\n        {\n            max1 = temp;\n        }\n        else if(temp\
    \ < min2)\n        {\n            min2 = temp;\n        }\n        else if(temp\
    \ > max2)\n        {\n            max2 = temp;\n        }\n    }\n    return Tuple!(min1,\
    \ min2);\n}\n/*\n From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements_2(float[]\
    \ numbers) \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n \
    \   float max1 = numbers[0];\n    float max2 = numbers[0];\n    float temp;\n\
    \    for(int i = 0; i < numbers.length; ++i)\n    {\n        temp = numbers[i];\n\
    \        if(temp < min1)\n        {\n            min1 = temp;\n        }\n   \
    \     else if(temp > max1)\n        {\n            max1 = temp;\n        }\n \
    \       else if(temp < min2)\n        {\n            min2 = temp;\n        }\n\
    \        else if(temp > max2)\n        {\n            max2 = temp;\n        }\n\
    \    }\n    return Tuple!(min1, min2);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements_3(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    float temp;\n    for(int i =\
    \ 0; i < numbers.length; ++i)\n    {\n        temp = numbers[i];\n        if(temp\
    \ < min1)\n        {\n            min1 = temp;\n        }\n        else if(temp\
    \ > max1)\n        {\n            max1 = temp;\n        }\n        else if(temp\
    \ < min2)\n        {\n            min2 = temp;\n        }\n        else if(temp\
    \ > max2)\n        {\n            max2 = temp;\n        }\n    }\n    return Tuple!(min1,\
    \ min2);\n}\n/*\n From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to \nunittest\n{\n    alias candidate =\
    \ find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkce_apu6.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkce_apu6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n        }\n        else if(numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n        }\n    }\n\
    \    \n    return Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp6kzsbo53.d(25): Error: template instance `tmp6kzsbo53.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largestDifference = largest-smallest;\n\
    \    float largestSmallestDifference = largest-smallest;\n    float largestLargestDifference\
    \ = largest-smallest;\n    float smallestLargestDifference = smallest-largest;\n\
    \    float largestSmallestDifference = largest-smallest;\n    float smallestLargestDifference\
    \ = smallest-largest;\n    float smallestSmallestDifference = smallest-smallest;\n\
    \    float largestLargestDifference = largest-largest;\n    float smallestLargestDifference\
    \ = smallest-largest;\n    float largestSmallestDifference = largest-smallest;\n\
    \    float smallestSmallestDifference = smallest-smallest;\n    float largestLargestDifference\
    \ = largest-largest;\n    float smallestLargestDifference = smallest-largest;\n\
    \    float smallestSmallestDifference = smallest-smallest;\n    float largestLargestDifference\
    \ = largest-largest;\n    float smallestLargestDifference = smallest-largest;\n\
    \    float smallestSmallestDifference = smallest-smallest;\n    float largestSmallestDifference\
    \ = largest-smallest;\n    float smallestSmallestDifference = smallest-smallest;\n\
    \    float largestLargestDifference = largest-largest;\n    float smallestLargestDifference\
    \ = smallest-largest;\n    float smallestSmallestDifference = smallest-smallest;\n\
    \    float largestSmallestDifference = largest-smallest;\n    float smallestSmallestDifference\
    \ = smallest-smallest;\n    float largestLargestDifference = largest-largest;\n\
    \    float smallestLargestDifference = smallest-largest;\n    float smallestSmallestDifference\
    \ = smallest-smallest;\n    float largestSmallestDifference = largest-smallest;\n\
    \    float smallestSmallestDifference = smallest-smallest;\n    float largestLargestDifference\
    \ = largest-largest;\n    float smallestL\nunittest\n{\n    alias candidate =\
    \ find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp77138c01.d(44): Error: semicolon expected, not `unittest`

    /tmp/tmp77138c01.d(44): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77138c01.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest_number = numbers[0];\n\tfloat largest_number = numbers[0];\n\t\n\
    \tfor (int i = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest_number)\n\
    \t\t{\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest_number)\n\
    \t\t{\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest_number,\
    \ largest_number);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest_number, largest_number)` cannot
    use local `smallest_number` as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest_number, largest_number)` cannot
    use local `largest_number` as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpam6x36zl.d(25): Error: template instance `tmpam6x36zl.find_closest_elements.Tuple!(smallest_number,
    largest_number)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpam6x36zl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        \n        if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpkcd785hm.d(30): Error: template instance `tmpkcd785hm.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 0;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        \n        if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpkqufk5pm.d(30): Error: template instance `tmpkqufk5pm.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largest_difference = largest-smallest;\n\
    \    float smallest_second_difference = largest-smallest;\n    float largest_second_difference\
    \ = largest-smallest;\n    float smallest_third_difference = largest-smallest;\n\
    \    float largest_third_difference = largest-smallest;\n    float smallest_fourth_difference\
    \ = largest-smallest;\n    float largest_fourth_difference = largest-smallest;\n\
    \    float smallest_fifth_difference = largest-smallest;\n    float largest_fifth_difference\
    \ = largest-smallest;\n    float smallest_sixth_difference = largest-smallest;\n\
    \    float largest_sixth_difference = largest-smallest;\n    float smallest_seventh_difference\
    \ = largest-smallest;\n    float largest_seventh_difference = largest-smallest;\n\
    \    float smallest_eighth_difference = largest-smallest;\n    float largest_eighth_difference\
    \ = largest-smallest;\n    float smallest_ninth_difference = largest-smallest;\n\
    \    float largest_ninth_difference = largest-smallest;\n    float smallest_tenth_difference\
    \ = largest-smallest;\n    float largest_tenth_difference = largest-smallest;\n\
    \    float smallest_eleventh_difference = largest-smallest;\n    float largest_eleventh_difference\
    \ = largest-smallest;\n    float smallest_twelfth_difference = largest-smallest;\n\
    \    float largest_twelfth_difference = largest-smallest;\n    float smallest_thirteenth_difference\
    \ = largest-smallest;\n    float largest_thirteenth_difference = largest-smallest;\n\
    \    float smallest_fourteenth_difference = largest-smallest;\n    float largest_fourteenth_difference\
    \ = largest-smallest;\n    float smallest_fifteenth_difference = largest-smallest;\n\
    \    float largest_fifteenth_difference = largest-smallest;\n    float smallest_sixteenth_difference\
    \ = largest-smallest;\n    float largest_sixteenth_difference = largest-smallest;\n\
    \    float smalle\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39xegr76.d(45): Error: semicolon expected, not `unittest`

    /tmp/tmp39xegr76.d(45): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39xegr76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpw3795785.d(27): Error: template instance `tmpw3795785.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfuwf6q9.d(13): Error: no identifier for declarator `number`

    /tmp/tmpsfuwf6q9.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfuwf6q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp05jsu6xw.d(27): Error: template instance `tmp05jsu6xw.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05jsu6xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_element;\n    float\
    \ largest_element;\n    float smallest_difference;\n    float largest_difference;\n\
    \    float smallest_square;\n    float largest_square;\n    float smallest_square_difference;\n\
    \    float largest_square_difference;\n    float smallest_square_largest_difference;\n\
    \    float largest_square_largest_difference;\n    float smallest_square_largest_square;\n\
    \    float largest_square_largest_square;\n    float smallest_square_largest_square_difference;\n\
    \    float largest_square_largest_square_difference;\n    float smallest_square_largest_square_largest_difference;\n\
    \    float largest_square_largest_square_largest_difference;\n    float smallest_square_largest_square_largest_square;\n\
    \    float largest_square_largest_square_largest_square;\n    float smallest_square_largest_square_largest_square_difference;\n\
    \    float largest_square_largest_square_largest_square_difference;\n    float\
    \ smallest_square_largest_square_largest_square_largest_difference;\n    float\
    \ largest_square_largest_square_largest_square_largest_difference;\n    float\
    \ smallest_square_largest_square_largest_square_largest_square;\n    float largest_square_largest_square_largest_square_largest_square;\n\
    \    float smallest_square_largest_square_largest_square_largest_square_difference;\n\
    \    float largest_square_largest_square_largest_square_largest_square_difference;\n\
    \    float smallest_square_largest_square_largest_square_largest_square_largest_difference;\n\
    \    float largest_square_largest_square_largest_square_largest_square_largest_difference;\n\
    \    float smallest_square_largest_square_largest_square_largest_square_largest_square;\n\
    \    float largest_square_largest_square_largest_square_largest_square_largest_square;\n\
    \    float smallest_square_largest_square_largest_square_largest_square_largest_square_difference;\n\
    \    float largest_square_largest_square_largest_square_largest_square_largest_square_difference;\n\
    \    float smallest_square_largest_square_largest_square_\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9swd_5ri.d(45): Error: semicolon expected, not `unittest`

    /tmp/tmp9swd_5ri.d(45): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9swd_5ri.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    float smallest_difference = std::numeric_limits<float>::infinity();\n   \
    \ float largest_difference = std::numeric_limits<float>::infinity();\n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        float current_number = numbers[i];\n\
    \        float current_difference = std::abs(current_number - smallest_number);\n\
    \        if(current_difference < smallest_difference)\n        {\n           \
    \ smallest_difference = current_difference;\n            smallest_number = current_number;\n\
    \        }\n        float current_difference = std::abs(current_number - largest_number);\n\
    \        if(current_difference > largest_difference)\n        {\n            largest_difference\
    \ = current_difference;\n            largest_number = current_number;\n      \
    \  }\n    }\n    return Tuple!(smallest_number, largest_number);\n}\n/*\n From\
    \ a supplied list of numbers (of length at least two) select and return two that\
    \ are the closest to each\n    other and return them in order (smaller number,\
    \ larger number).\n            \n*/\nTuple!(float, float) find_closest_elements_2(float[]\
    \ numbers) \n{\n    float smallest_number = numbers[0];\n    float largest_number\
    \ = numbers[0];\n    float smallest_difference = std::numeric_limits<float>::infinity();\n\
    \    float largest_difference = std::numeric_limits<float>::infinity();\n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        float current_number = numbers[i];\n\
    \        float current_difference = std::abs(current_number - smallest_number);\n\
    \        if(current_difference < smallest_difference)\n        {\n           \
    \ smallest_difference = current_difference;\n            smallest_number = current_number;\n\
    \        }\n        float current_difference = std::abs(current_number - largest_number);\n\
    \        if(current_difference > largest_difference)\n        {\n            largest_difference\
    \ = current_difference;\n            largest_number = current_number;\n      \
    \  }\n    }\n    return Tuple!(smallest_number, largest_number);\n}\n/*\n From\
    \ a supplied list of numbers (of length at least two) select and return two that\
    \ are the closest to each\n    other and return them in order (smaller number,\
    \ larger number).\n            \n*/\nTuple!(float, float) find_closest_elements_3(float[]\
    \ numbers) \n{\n    float smallest_number = numbers[0];\n    float largest_number\
    \ = numbers[0];\n    float smallest_difference = std::numeric_limits<float>::infinity();\n\
    \    float largest_difference = std::numeric_limits<float>::infinity();\n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        float \nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr2wx_6hl.d(12): Error: semicolon expected, not `:`

    /tmp/tmpr2wx_6hl.d(12): Error: found `:` instead of statement

    /tmp/tmpr2wx_6hl.d(13): Error: semicolon expected, not `:`

    /tmp/tmpr2wx_6hl.d(13): Error: found `:` instead of statement

    /tmp/tmpr2wx_6hl.d(17): Error: semicolon expected, not `:`

    /tmp/tmpr2wx_6hl.d(17): Error: found `:` instead of statement

    /tmp/tmpr2wx_6hl.d(23): Error: semicolon expected, not `:`

    /tmp/tmpr2wx_6hl.d(23): Error: found `:` instead of statement

    /tmp/tmpr2wx_6hl.d(41): Error: semicolon expected, not `:`

    /tmp/tmpr2wx_6hl.d(41): Error: found `:` instead of statement

    /tmp/tmpr2wx_6hl.d(42): Error: semicolon expected, not `:`

    /tmp/tmpr2wx_6hl.d(42): Error: found `:` instead of statement

    /tmp/tmpr2wx_6hl.d(46): Error: semicolon expected, not `:`

    /tmp/tmpr2wx_6hl.d(46): Error: found `:` instead of statement

    /tmp/tmpr2wx_6hl.d(52): Error: semicolon expected, not `:`

    /tmp/tmpr2wx_6hl.d(52): Error: found `:` instead of statement

    /tmp/tmpr2wx_6hl.d(70): Error: semicolon expected, not `'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest = numbers[0];\n\tfloat largest = numbers[0];\n\tfloat smallest_index\
    \ = -1;\n\tfloat largest_index = -1;\n\t\n\tfor(int i = 1; i < numbers.length;\
    \ ++i)\n\t{\n\t\tif(numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\
    \t\t\tsmallest_index = i;\n\t\t}\n\t\telse if(numbers[i] > largest)\n\t\t{\n\t\
    \t\tlargest = numbers[i];\n\t\t\tlargest_index = i;\n\t\t}\n\t}\n\t\n\treturn\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpm8whx5f0.d(29): Error: template instance `tmpm8whx5f0.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfuwf6q9.d(13): Error: no identifier for declarator `number`

    /tmp/tmpsfuwf6q9.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfuwf6q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 0; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > max2)\n        {\n\
    \            max2 = numbers[i];\n        }\n        else if(numbers[i] < min2)\n\
    \        {\n            min2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, max1);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, max1)` cannot use local `min1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, max1)` cannot use local `max1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpktskam3k.d(36): Error: template instance `tmpktskam3k.find_closest_elements.Tuple!(min1,
    max1)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpktskam3k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp05jsu6xw.d(27): Error: template instance `tmp05jsu6xw.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05jsu6xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > min2)\n        {\n\
    \            min2 = numbers[i];\n        }\n        else if(numbers[i] < max2)\n\
    \        {\n            max2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, min2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min2` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp1iot2to_.d(36): Error: template instance `tmp1iot2to_.find_closest_elements.Tuple!(min1,
    min2)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1iot2to_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    float smallest_difference = largest_number - smallest_number;\n    float\
    \ largest_difference = largest_number - smallest_number;\n    \n    for(int i\
    \ = 1; i < numbers.length; ++i)\n    {\n        float current_number = numbers[i];\n\
    \        float current_difference = current_number - smallest_number;\n      \
    \  \n        if(current_difference < smallest_difference)\n        {\n       \
    \     smallest_difference = current_difference;\n            smallest_number =\
    \ current_number;\n        }\n        \n        if(current_difference > largest_difference)\n\
    \        {\n            largest_difference = current_difference;\n           \
    \ largest_number = current_number;\n        }\n    }\n    \n    return Tuple!(smallest_number,\
    \ largest_number);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest_number, largest_number)` cannot
    use local `smallest_number` as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest_number, largest_number)` cannot
    use local `largest_number` as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpbxlc7q__.d(33): Error: template instance `tmpbxlc7q__.find_closest_elements.Tuple!(smallest_number,
    largest_number)` error instant'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp05jsu6xw.d(27): Error: template instance `tmp05jsu6xw.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05jsu6xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers)\n    {\n        if(number < smallest)\n        {\n\
    \            smallest = number;\n        }\n        if(number > largest)\n   \
    \     {\n            largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6behonr7.d(13): Error: no identifier for declarator `number`

    /tmp/tmp6behonr7.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6behonr7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest-smallest;\n    float largest_diff = smallest-largest;\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        float diff = numbers[i]-smallest;\n\
    \        if(diff < smallest_diff)\n        {\n            smallest_diff = diff;\n\
    \            smallest = numbers[i];\n        }\n        else if(diff > largest_diff)\n\
    \        {\n            largest_diff = diff;\n            largest = numbers[i];\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\nunittest\n{\n   \
    \ alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpb_m_z0nk.d(28): Error: template instance `tmpb_m_z0nk.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_m_z0nk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest-smallest;\n    float largest_diff = smallest-largest;\n\
    \    \n    for(int i = 1; i < numbers.length; ++i)\n    {\n        float diff\
    \ = numbers[i]-smallest;\n        float diff_diff = diff-smallest_diff;\n    \
    \    \n        if(diff_diff < 0)\n        {\n            smallest_diff = diff;\n\
    \            smallest = numbers[i];\n        }\n        else if(diff_diff > 0)\n\
    \        {\n            largest_diff = diff;\n            largest = numbers[i];\n\
    \        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpd5dq9dd0.d(32): Error: template instance `tmpd5dq9dd0.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5dq9dd0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smallest_index = -1;\n\
    \    float largest_index = -1;\n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < smallest + epsilon)\n        {\n            smallest\
    \ = numbers[i];\n            smallest_index = i;\n        }\n        else if(numbers[i]\
    \ > largest - epsilon)\n        {\n            largest = numbers[i];\n       \
    \     largest_index = i;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest + delta)\n        {\n            smallest = numbers[i];\n       \
    \     smallest_index = i;\n        }\n        else if(numbers[i] > largest - delta)\n\
    \        {\n            largest = numbers[i];\n            largest_index = i;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta, float epsilon2) \n{\n    float smallest\
    \ = numbers[0];\n    float \nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_wf65h0o.d(90): Error: no identifier for declarator `float`

    /tmp/tmp_wf65h0o.d(90): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_wf65h0o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largest_difference = largest-smallest;\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        float current_number\
    \ = numbers[i];\n        float current_difference = current_number-smallest;\n\
    \        if(current_difference < smallest_difference)\n        {\n           \
    \ smallest_difference = current_difference;\n            smallest = current_number;\n\
    \        }\n        else if(current_difference > largest_difference)\n       \
    \ {\n            largest_difference = current_difference;\n            largest\
    \ = current_number;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float tolerance) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    float smallest_difference = largest-smallest;\n    float\
    \ largest_difference = largest-smallest;\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        float current_number = numbers[i];\n        float current_difference\
    \ = current_number-smallest;\n        if(current_difference < smallest_difference)\n\
    \        {\n            smallest_difference = current_difference;\n          \
    \  smallest = current_number;\n        }\n        else if(current_difference >\
    \ largest_difference)\n        {\n            largest_difference = current_difference;\n\
    \            largest = current_number;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float tolerance, float epsilon) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largest_difference = largest-smallest;\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        float current_number\
    \ = numbers[i];\n        float current_difference = current_number-smallest;\n\
    \        if(current_difference < smallest_difference)\n        {\n           \
    \ smallest_difference = current_difference;\n            smallest = current_number;\n\
    \        }\n        else if(current_\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyaz5xgh_.d(80): Error: found `unittest` when expecting `)`

    /tmp/tmpyaz5xgh_.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpyaz5xgh_.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyaz5xgh_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers)\n    {\n        if(number < smallest)\n        {\n\
    \            smallest = number;\n        }\n        if(number > largest)\n   \
    \     {\n            largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    \n    foreach(number in\
    \ numbers)\n    {\n        if(number < smallest + epsilon)\n        {\n      \
    \      smallest = number;\n        }\n        if(number > largest - epsilon)\n\
    \        {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float epsilon, float\
    \ delta) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    \n    foreach(number in numbers)\n    {\n        if(number < smallest + delta)\n\
    \        {\n            smallest = number;\n        }\n        if(number > largest\
    \ - delta)\n        {\n            largest = number;\n        }\n    }\n    \n\
    \    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers, float\
    \ epsilon, float delta, float gamma) \n{\n    float smallest = numbers[0];\n \
    \   float largest = numbers[0];\n    \n    foreach(number in numbers)\n    {\n\
    \        if(number < smallest + gamma)\n        {\n            smallest = number;\n\
    \        }\n        if(number > largest - gamma)\n        {\n            largest\
    \ = number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    /*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the \nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqiattsl6.d(13): Error: no identifier for declarator `number`

    /tmp/tmpqiattsl6.d(13): Error: found `in` when expecting `;`

    /tmp/tmpqiattsl6.d(37): Error: no identifier for declarator `number`

    /tmp/tmpqiattsl6.d(37): Error: found `in` when expecting `;`

    /tmp/tmpqiattsl6.d(61): Error: no identifier for declarator `number`

    /tmp/tmpqiattsl6.d(61): Error: found `in` when expecting `;`

    /tmp/tmpqiattsl6.d(85): Error: no identifier for declarator `number`

    /tmp/tmpqiattsl6.d(85): Error: found `in` when expecting `;`

    /tmp/tmpqiattsl6.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqiattsl6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        \n        if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpkcd785hm.d(30): Error: template instance `tmpkcd785hm.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers)\n    {\n        if(number < smallest)\n        {\n\
    \            smallest = number;\n        }\n        else if(number > largest)\n\
    \        {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkighskrn.d(13): Error: no identifier for declarator `number`

    /tmp/tmpkighskrn.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkighskrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > max2)\n        {\n\
    \            max2 = numbers[i];\n        }\n        else if(numbers[i] < min2)\n\
    \        {\n            min2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, min2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min2` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpgfd1dolq.d(36): Error: template instance `tmpgfd1dolq.find_closest_elements.Tuple!(min1,
    min2)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfd1dolq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers)\n    {\n        if(number < smallest)\n        {\n\
    \            smallest = number;\n        }\n        else if(number > largest)\n\
    \        {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkighskrn.d(13): Error: no identifier for declarator `number`

    /tmp/tmpkighskrn.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkighskrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\tfor (int i\
    \ = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest)\n\t\t{\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp0pgleq97.d(25): Error: template instance `tmp0pgleq97.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp05jsu6xw.d(27): Error: template instance `tmp05jsu6xw.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05jsu6xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    Tuple!(float, float) tuple = Tuple!(smallest,\
    \ largest);\n    return tuple;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprgwgp3p8.d(13): Error: no identifier for declarator `number`

    /tmp/tmprgwgp3p8.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprgwgp3p8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float max1 = numbers[0];\n    float min2 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] < min2)\n        {\n\
    \            min2 = numbers[i];\n        }\n        else if(numbers[i] > max2)\n\
    \        {\n            max2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(float,float)((min1, max1), (min2, max2));\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1y857f_s.d(36): Error: Using the result of a comma expression is
    not allowed

    /tmp/tmp1y857f_s.d(36): Error: Using the result of a comma expression is not allowed

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1y857f_s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfuwf6q9.d(13): Error: no identifier for declarator `number`

    /tmp/tmpsfuwf6q9.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfuwf6q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp05jsu6xw.d(27): Error: template instance `tmp05jsu6xw.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05jsu6xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest-smallest;\n    float largest_diff = smallest-largest;\n\
    \    for(int i = 1; i < numbers.length; ++i)\n    {\n        float diff = numbers[i]-smallest;\n\
    \        if(diff < smallest_diff)\n        {\n            smallest_diff = diff;\n\
    \            smallest = numbers[i];\n        }\n        else if(diff > largest_diff)\n\
    \        {\n            largest_diff = diff;\n            largest = numbers[i];\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\nunittest\n{\n   \
    \ alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpb_m_z0nk.d(28): Error: template instance `tmpb_m_z0nk.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_m_z0nk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfuwf6q9.d(13): Error: no identifier for declarator `number`

    /tmp/tmpsfuwf6q9.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfuwf6q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest-smallest;\n    float largest_diff = smallest-largest;\n\
    \    float smallest_diff2 = largest-smallest;\n    float largest_diff2 = smallest-largest;\n\
    \    float smallest_diff3 = largest-smallest;\n    float largest_diff3 = smallest-largest;\n\
    \    float smallest_diff4 = largest-smallest;\n    float largest_diff4 = smallest-largest;\n\
    \    float smallest_diff5 = largest-smallest;\n    float largest_diff5 = smallest-largest;\n\
    \    float smallest_diff6 = largest-smallest;\n    float largest_diff6 = smallest-largest;\n\
    \    float smallest_diff7 = largest-smallest;\n    float largest_diff7 = smallest-largest;\n\
    \    float smallest_diff8 = largest-smallest;\n    float largest_diff8 = smallest-largest;\n\
    \    float smallest_diff9 = largest-smallest;\n    float largest_diff9 = smallest-largest;\n\
    \    float smallest_diff10 = largest-smallest;\n    float largest_diff10 = smallest-largest;\n\
    \    float smallest_diff11 = largest-smallest;\n    float largest_diff11 = smallest-largest;\n\
    \    float smallest_diff12 = largest-smallest;\n    float largest_diff12 = smallest-largest;\n\
    \    float smallest_diff13 = largest-smallest;\n    float largest_diff13 = smallest-largest;\n\
    \    float smallest_diff14 = largest-smallest;\n    float largest_diff14 = smallest-largest;\n\
    \    float smallest_diff15 = largest-smallest;\n    float largest_diff15 = smallest-largest;\n\
    \    float smallest_diff16 = largest-smallest;\n    float largest_diff16 = smallest-largest;\n\
    \    float smallest_diff17 = largest-smallest;\n    float largest_diff17 = smallest-largest;\n\
    \    float smallest_diff18 = largest-smallest;\n    float largest_diff18 = smallest-largest;\n\
    \    float smallest_diff19 = largest-smallest;\n    float large\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe05hsiuo.d(50): Error: semicolon expected, not `unittest`

    /tmp/tmpe05hsiuo.d(50): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe05hsiuo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ for (int i = 1; i < numbers.length; ++i)\n    {\n        if (numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n        }\n        if (numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n        }\n    }\n\
    \    \n    return Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp63oamfqq.d(25): Error: template instance `tmp63oamfqq.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    float diff1 = max1 - min1;\n\
    \    float diff2 = max2 - min2;\n    float diff;\n    float temp;\n    float temp2;\n\
    \    float temp3;\n    float temp4;\n    float temp5;\n    float temp6;\n    float\
    \ temp7;\n    float temp8;\n    float temp9;\n    float temp10;\n    float temp11;\n\
    \    float temp12;\n    float temp13;\n    float temp14;\n    float temp15;\n\
    \    float temp16;\n    float temp17;\n    float temp18;\n    float temp19;\n\
    \    float temp20;\n    float temp21;\n    float temp22;\n    float temp23;\n\
    \    float temp24;\n    float temp25;\n    float temp26;\n    float temp27;\n\
    \    float temp28;\n    float temp29;\n    float temp30;\n    float temp31;\n\
    \    float temp32;\n    float temp33;\n    float temp34;\n    float temp35;\n\
    \    float temp36;\n    float temp37;\n    float temp38;\n    float temp39;\n\
    \    float temp40;\n    float temp41;\n    float temp42;\n    float temp43;\n\
    \    float temp44;\n    float temp45;\n    float temp46;\n    float temp47;\n\
    \    float temp48;\n    float temp49;\n    float temp50;\n    float temp51;\n\
    \    float temp52;\n    float temp53;\n    float temp54;\n    float temp55;\n\
    \    float temp56;\n    float temp57;\n    float temp58;\n    float temp59;\n\
    \    float temp60;\n    float temp61;\n    float temp62;\n    float temp63;\n\
    \    float temp64;\n    float temp65;\n    float temp66;\n    float temp67;\n\
    \    float temp68;\n    float temp69;\n    float temp70;\n    float temp71;\n\
    \    float temp72;\n    float temp73;\n    float temp74;\n    float temp75;\n\
    \    float temp76;\n    float temp77;\n    float temp78;\n    float temp79;\n\
    \    float temp80;\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvzgb5u7n.d(97): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvzgb5u7n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpj7iu1hx6.d(28): Error: template instance `tmpj7iu1hx6.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 0;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        else if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpilx2v822.d(29): Error: template instance `tmpilx2v822.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    /*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number < smallest\
    \ - epsilon) {\n            smallest = number;\n        }\n        if(number >\
    \ largest + epsilon) {\n            largest = number;\n        }\n    }\n    \n\
    \    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers, float\
    \ epsilon, float delta) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number < smallest\
    \ - delta && number > smallest + delta) {\n            smallest = number;\n  \
    \      }\n        if(number > largest + delta && number < largest - delta) {\n\
    \            largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float delta, float gamma)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ \n    foreach(number in numbers) {\n        if(number < smallest - gamma &&\
    \ number > smallest + gamma) {\n            smallest = number;\n        }\n  \
    \      if(number > largest + gamma && number < largest - gamma) {\n          \
    \  largest = number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that \nunittest\n{\n    alias candidate = find_closest_elements;\n\n   \
    \ assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuwz1kved.d(13): Error: no identifier for declarator `number`

    /tmp/tmpuwz1kved.d(13): Error: found `in` when expecting `;`

    /tmp/tmpuwz1kved.d(34): Error: no identifier for declarator `number`

    /tmp/tmpuwz1kved.d(34): Error: found `in` when expecting `;`

    /tmp/tmpuwz1kved.d(55): Error: no identifier for declarator `number`

    /tmp/tmpuwz1kved.d(55): Error: found `in` when expecting `;`

    /tmp/tmpuwz1kved.d(76): Error: no identifier for declarator `number`

    /tmp/tmpuwz1kved.d(76): Error: found `in` when expecting `;`

    /tmp/tmpuwz1kved.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuwz1kved.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] < min2)\n        {\n\
    \            min2 = numbers[i];\n        }\n        else if(numbers[i] > max2)\n\
    \        {\n            max2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, min2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min2` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpjexb0hmd.d(36): Error: template instance `tmpjexb0hmd.find_closest_elements.Tuple!(min1,
    min2)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjexb0hmd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smallest_index = -1;\n\
    \    float largest_index = -1;\n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < smallest + epsilon)\n        {\n            smallest\
    \ = numbers[i];\n            smallest_index = i;\n        }\n        else if(numbers[i]\
    \ > largest - epsilon)\n        {\n            largest = numbers[i];\n       \
    \     largest_index = i;\n        }\n    }\n    return Tuple!(smallest, largest);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float min_distance) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest + epsilon && numbers[i] - smallest < min_distance)\n        {\n \
    \           smallest = numbers[i];\n            smallest_index = i;\n        }\n\
    \        else if(numbers[i] > largest - epsilon && numbers[i] - largest < min_distance)\n\
    \        {\n            largest = numbers[i];\n            largest_index = i;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float \nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_hkza2a.d(87): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_hkza2a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest;\n\tfloat largest;\n\tfloat smallest_index;\n\tfloat largest_index;\n\
    \t\n\tsmallest = numbers[0];\n\tlargest = numbers[0];\n\tsmallest_index = 0;\n\
    \tlargest_index = 0;\n\t\n\tfor (int i = 1; i < numbers.length; i++)\n\t{\n\t\t\
    if (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\t\t\tsmallest_index\
    \ = i;\n\t\t}\n\t\telse if (numbers[i] > largest)\n\t\t{\n\t\t\tlargest = numbers[i];\n\
    \t\t\tlargest_index = i;\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmplhopjk9c.d(34): Error: template instance `tmplhopjk9c.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhopjk9c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_number;\n    float\
    \ largest_number;\n    \n    smallest = numbers[0];\n    largest = numbers[0];\n\
    \    smallest_number = numbers[0];\n    largest_number = numbers[0];\n    \n \
    \   foreach(number in numbers) {\n        if(number < smallest) {\n          \
    \  smallest = number;\n            smallest_number = number;\n        }\n    \
    \    if(number > largest) {\n            largest = number;\n            largest_number\
    \ = number;\n        }\n    }\n    \n    return Tuple!(smallest_number, largest_number);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float threshold) \n{\n    float smallest;\n    float largest;\n   \
    \ float smallest_number;\n    float largest_number;\n    \n    smallest = numbers[0];\n\
    \    largest = numbers[0];\n    smallest_number = numbers[0];\n    largest_number\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number < smallest)\
    \ {\n            smallest = number;\n            smallest_number = number;\n \
    \       }\n        if(number > largest) {\n            largest = number;\n   \
    \         largest_number = number;\n        }\n    }\n    \n    return Tuple!(smallest_number,\
    \ largest_number);\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements(float[] numbers, float threshold, float epsilon)\
    \ \n{\n    float smallest;\n    float largest;\n    float smallest_number;\n \
    \   float largest_number;\n    \n    smallest = numbers[0];\n    largest = numbers[0];\n\
    \    smallest_number = numbers[0];\n    largest_number = numbers[0];\n    \n \
    \   foreach(number in numbers) {\n        if(number < smallest) {\n          \
    \  smallest = number;\n            smallest_number = number;\n        }\n    \
    \    if(number > largest) {\n            largest = number;\n            largest_number\
    \ = number;\n        }\n    }\n    \n    return Tuple!(smallest_number, largest_number);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them \nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uqyukcp.d(20): Error: no identifier for declarator `number`

    /tmp/tmp8uqyukcp.d(20): Error: found `in` when expecting `;`

    /tmp/tmp8uqyukcp.d(50): Error: no identifier for declarator `number`

    /tmp/tmp8uqyukcp.d(50): Error: found `in` when expecting `;`

    /tmp/tmp8uqyukcp.d(80): Error: no identifier for declarator `number`

    /tmp/tmp8uqyukcp.d(80): Error: found `in` when expecting `;`

    /tmp/tmp8uqyukcp.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uqyukcp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 1;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        else if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpswpt157b.d(29): Error: template instance `tmpswpt157b.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_number;\n    float\
    \ largest_number;\n    float smallest_difference;\n    float largest_difference;\n\
    \    float smallest_second_difference;\n    float largest_second_difference;\n\
    \    float smallest_third_difference;\n    float largest_third_difference;\n \
    \   float smallest_fourth_difference;\n    float largest_fourth_difference;\n\
    \    float smallest_fifth_difference;\n    float largest_fifth_difference;\n \
    \   float smallest_sixth_difference;\n    float largest_sixth_difference;\n  \
    \  float smallest_seventh_difference;\n    float largest_seventh_difference;\n\
    \    float smallest_eighth_difference;\n    float largest_eighth_difference;\n\
    \    float smallest_ninth_difference;\n    float largest_ninth_difference;\n \
    \   float smallest_tenth_difference;\n    float largest_tenth_difference;\n  \
    \  float smallest_eleventh_difference;\n    float largest_eleventh_difference;\n\
    \    float smallest_twelfth_difference;\n    float largest_twelfth_difference;\n\
    \    float smallest_thirteenth_difference;\n    float largest_thirteenth_difference;\n\
    \    float smallest_fourteenth_difference;\n    float largest_fourteenth_difference;\n\
    \    float smallest_fifteenth_difference;\n    float largest_fifteenth_difference;\n\
    \    float smallest_sixteenth_difference;\n    float largest_sixteenth_difference;\n\
    \    float smallest_seventeenth_difference;\n    float largest_seventeenth_difference;\n\
    \    float smallest_eighteenth_difference;\n    float largest_eighteenth_difference;\n\
    \    float smallest_nineteenth_difference;\n    float largest_nineteenth_difference;\n\
    \    float smallest_twentieth;\n    float largest_twentieth;\n    float smallest_twenty;\n\
    \    float largest_twenty;\n    float smallest_thirty;\n    float largest_thirty;\n\
    \    float smallest_forty;\n    float largest_forty;\n    float smallest_fifty;\n\
    \    float largest_fifty;\n    float smallest_sixty;\n    float largest_sixty;\n\
    \    float smallest_seventy;\n    float largest_seventy;\n    float smallest_eigh\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjn5e_3yg.d(67): Error: semicolon expected, not `unittest`

    /tmp/tmpjn5e_3yg.d(67): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjn5e_3yg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largest_difference = largest-smallest;\n\
    \    \n    for (int i = 1; i < numbers.length; ++i)\n    {\n        float current_difference\
    \ = numbers[i]-smallest;\n        if (current_difference < smallest_difference)\n\
    \        {\n            smallest_difference = current_difference;\n          \
    \  smallest = numbers[i];\n        }\n        else if (current_difference > largest_difference)\n\
    \        {\n            largest_difference = current_difference;\n           \
    \ largest = numbers[i];\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpx7my0fpd.d(30): Error: template instance `tmpx7my0fpd.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_2 = numbers[0];\n    float largest_2 = numbers[0];\n    float smallest_3\
    \ = numbers[0];\n    float largest_3 = numbers[0];\n    float smallest_4 = numbers[0];\n\
    \    float largest_4 = numbers[0];\n    float smallest_5 = numbers[0];\n    float\
    \ largest_5 = numbers[0];\n    float smallest_6 = numbers[0];\n    float largest_6\
    \ = numbers[0];\n    float smallest_7 = numbers[0];\n    float largest_7 = numbers[0];\n\
    \    float smallest_8 = numbers[0];\n    float largest_8 = numbers[0];\n    float\
    \ smallest_9 = numbers[0];\n    float largest_9 = numbers[0];\n    float smallest_10\
    \ = numbers[0];\n    float largest_10 = numbers[0];\n    float smallest_11 = numbers[0];\n\
    \    float largest_11 = numbers[0];\n    float smallest_12 = numbers[0];\n   \
    \ float largest_12 = numbers[0];\n    float smallest_13 = numbers[0];\n    float\
    \ largest_13 = numbers[0];\n    float smallest_14 = numbers[0];\n    float largest_14\
    \ = numbers[0];\n    float smallest_15 = numbers[0];\n    float largest_15 = numbers[0];\n\
    \    float smallest_16 = numbers[0];\n    float largest_16 = numbers[0];\n   \
    \ float smallest_17 = numbers[0];\n    float largest_17 = numbers[0];\n    float\
    \ smallest_18 = numbers[0];\n    float largest_18 = numbers[0];\n    float smallest_19\
    \ = numbers[0];\n    float largest_19 = numbers[0];\n    float smallest_20 = numbers[0];\n\
    \    float largest_20 = numbers[0];\n    float smallest_21 = numbers[0];\n   \
    \ float largest_21 = numbers[0];\n    float smallest_22 = numbers[0];\n    float\
    \ largest_22 = numbers[0];\n    float smallest_23 = numbers[0];\n    float largest_23\
    \ = numbers[0];\n    float smallest_24 = numbers[0];\n    float largest_24 = numbers[0];\n\
    \    float smallest_25 = numbers[0];\n    float largest_25 = numbers[0];\n   \
    \ float smallest_26 = numbers[0];\n    float largest_26 = numbers[0];\n    float\
    \ smallest_27 = numbers[0];\n    float largest_27 = numbers[0];\n    float smallest_28\
    \ = numbers[0];\n    float largest_28 = numbers[0];\n    float smallest_29 = numbers[0];\n\
    \    float largest_29 = numbers[0];\n    float smallest_30 = numbers[0];\n   \
    \ float largest_\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3pebw2z_.d(70): Error: semicolon expected, not `unittest`

    /tmp/tmp3pebw2z_.d(70): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pebw2z_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(number\
    \ in numbers) {\n        if(number < smallest) {\n            smallest = number;\n\
    \        }\n        if(number > largest) {\n            largest = number;\n  \
    \      }\n    }\n    return Tuple!(smallest, largest);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ds6571y.d(12): Error: no identifier for declarator `number`

    /tmp/tmp5ds6571y.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ds6571y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp05jsu6xw.d(27): Error: template instance `tmp05jsu6xw.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05jsu6xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    \n    Tuple!(float, float)\
    \ result = Tuple!(float, float)(smallest, largest);\n    \n    for(int i = 0;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] == smallest)\n      \
    \  {\n            smallest_index = i;\n        }\n        if(numbers[i] == largest)\n\
    \        {\n            largest_index = i;\n        }\n    }\n    \n    Tuple!(float,\
    \ float) result2 = Tuple!(float, float)(numbers[smallest_index], numbers[largest_index]);\n\
    \    \n    return Tuple!(float, float)(result, result2);\n}\nunittest\n{\n   \
    \ alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0c3n7pbo.d(42): Error: cannot implicitly convert expression `smallest_index`
    of type `float` to `ulong`

    /tmp/tmp0c3n7pbo.d(42): Error: cannot implicitly convert expression `largest_index`
    of type `float` to `ulong`

    /tmp/tmp0c3n7pbo.d(44): Error: none of the overloads of `this` are callable using
    argument types `(Tuple!(float, float), Tuple!(float, float))`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(668):        `std.typecons.Tuple!(float,
    float).Tuple.this(float _param_0, float _param_1)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(689):        `std.typecons.Tuple!(float,
    float).Tuple.__ctor(U, ulong n)(U[n] values) if (n == Types.length && allSatisfy!(isBuildableFrom!U,
    Types))`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhfl'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfuwf6q9.d(13): Error: no identifier for declarator `number`

    /tmp/tmpsfuwf6q9.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfuwf6q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    /*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number < smallest\
    \ - epsilon) {\n            smallest = number;\n        }\n        if(number >\
    \ largest + epsilon) {\n            largest = number;\n        }\n    }\n    \n\
    \    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers, float\
    \ epsilon, float min_distance) \n{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number\
    \ < smallest - epsilon && number > smallest + epsilon) {\n            smallest\
    \ = number;\n        }\n        if(number > largest + epsilon && number < largest\
    \ - epsilon) {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float epsilon, float\
    \ min_distance, float max_distance) \n{\n    float smallest = numbers[0];\n  \
    \  float largest = numbers[0];\n    \n    foreach(number in numbers) {\n     \
    \   if(number < smallest - epsilon && number > smallest + epsilon && number <\
    \ largest - epsilon && number > largest + epsilon) {\n            smallest = number;\n\
    \        }\n        if(number > largest + epsilon && number < largest - epsilon\
    \ && number < smallest - epsilon && number > smallest + epsilon) {\n         \
    \   largest = number;\n        }\n    }\n    \n    return Tuple!(\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpddzqzoxc.d(13): Error: no identifier for declarator `number`

    /tmp/tmpddzqzoxc.d(13): Error: found `in` when expecting `;`

    /tmp/tmpddzqzoxc.d(34): Error: no identifier for declarator `number`

    /tmp/tmpddzqzoxc.d(34): Error: found `in` when expecting `;`

    /tmp/tmpddzqzoxc.d(55): Error: no identifier for declarator `number`

    /tmp/tmpddzqzoxc.d(55): Error: found `in` when expecting `;`

    /tmp/tmpddzqzoxc.d(76): Error: no identifier for declarator `number`

    /tmp/tmpddzqzoxc.d(76): Error: found `in` when expecting `;`

    /tmp/tmpddzqzoxc.d(86): Error: expression expected, not `unittest`

    /tmp/tmpddzqzoxc.d(87): Error: found `{` when expecting `)` following template
    argument list

    /tmp/tmpddzqzoxc.d(88): Error: found `alias` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpddzqzoxc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    float diff1 = max1 - min1;\n\
    \    float diff2 = max2 - min2;\n    float diff;\n    float temp;\n    float temp2;\n\
    \    float temp3;\n    float temp4;\n    float temp5;\n    float temp6;\n    float\
    \ temp7;\n    float temp8;\n    float temp9;\n    float temp10;\n    float temp11;\n\
    \    float temp12;\n    float temp13;\n    float temp14;\n    float temp15;\n\
    \    float temp16;\n    float temp17;\n    float temp18;\n    float temp19;\n\
    \    float temp20;\n    float temp21;\n    float temp22;\n    float temp23;\n\
    \    float temp24;\n    float temp25;\n    float temp26;\n    float temp27;\n\
    \    float temp28;\n    float temp29;\n    float temp30;\n    float temp31;\n\
    \    float temp32;\n    float temp33;\n    float temp34;\n    float temp35;\n\
    \    float temp36;\n    float temp37;\n    float temp38;\n    float temp39;\n\
    \    float temp40;\n    float temp41;\n    float temp42;\n    float temp43;\n\
    \    float temp44;\n    float temp45;\n    float temp46;\n    float temp47;\n\
    \    float temp48;\n    float temp49;\n    float temp50;\n    float temp51;\n\
    \    float temp52;\n    float temp53;\n    float temp54;\n    float temp55;\n\
    \    float temp56;\n    float temp57;\n    float temp58;\n    float temp59;\n\
    \    float temp60;\n    float temp61;\n    float temp62;\n    float temp63;\n\
    \    float temp64;\n    float temp65;\n    float temp66;\n    float temp67;\n\
    \    float temp68;\n    float temp69;\n    float temp70;\n    float temp71;\n\
    \    float temp72;\n    float temp73;\n    float temp74;\n    float temp75;\n\
    \    float temp76;\n    float temp77;\n    float temp78;\n    float temp79;\n\
    \    float temp80;\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvzgb5u7n.d(97): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvzgb5u7n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    float minDiff = float.max;\n\
    \    float maxDiff = float.min;\n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        float diff = numbers[i] - min1;\n        if(diff < minDiff)\n\
    \        {\n            minDiff = diff;\n            min2 = min1;\n          \
    \  min1 = numbers[i];\n        }\n        else if(diff > maxDiff)\n        {\n\
    \            maxDiff = diff;\n            max2 = min2;\n            max1 = numbers[i];\n\
    \        }\n    }\n    return Tuple!(min1, min2);\n}\n/*\n From a supplied list\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float epsilon) \n{\n    float min1 = numbers[0];\n    float min2 = numbers[0];\n\
    \    float max1 = numbers[0];\n    float max2 = numbers[0];\n    float minDiff\
    \ = float.max;\n    float maxDiff = float.min;\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        float diff = numbers[i] - min1;\n        if(diff < minDiff)\n\
    \        {\n            minDiff = diff;\n            min2 = min1;\n          \
    \  min1 = numbers[i];\n        }\n        else if(diff > maxDiff)\n        {\n\
    \            maxDiff = diff;\n            max2 = min2;\n            max1 = numbers[i];\n\
    \        }\n    }\n    return Tuple!(min1, min2);\n}\n/*\n From a supplied list\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float epsilon, float epsilon2) \n{\n    float min1 = numbers[0];\n    float\
    \ min2 = numbers[0];\n    float max1 = numbers[0];\n    float max2 = numbers[0];\n\
    \    float minDiff = float.max;\n    float maxDiff = float.min;\n    for(int i\
    \ = 1; i < numbers.length; ++i)\n    {\n        float diff = numbers[i] - min1;\n\
    \        if(diff < minDiff)\n        {\n            minDiff = diff;\n        \
    \    min2 = min1;\n            min1 = numbers[i];\n        }\n        else if(diff\
    \ > maxDiff)\n        {\n            maxDiff\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6o3dnh1c.d(90): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp6o3dnh1c.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp6o3dnh1c.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp6o3dnh1c.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6o3dnh1c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > max2)\n        {\n\
    \            max2 = numbers[i];\n        }\n        else if(numbers[i] < min2)\n\
    \        {\n            min2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(float,float)((min1, min2), (max1, max2));\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4l3btfa9.d(36): Error: Using the result of a comma expression is
    not allowed

    /tmp/tmp4l3btfa9.d(36): Error: Using the result of a comma expression is not allowed

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4l3btfa9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 0;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        \n        if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpkqufk5pm.d(30): Error: template instance `tmpkqufk5pm.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    \n    foreach(number in numbers) {\n        if(number < smallest_number)\
    \ {\n            smallest_number = number;\n        }\n        if(number > largest_number)\
    \ {\n            largest_number = number;\n        }\n    }\n    \n    Tuple!(float,\
    \ float) result = Tuple!(float, float)(smallest_number, largest_number);\n   \
    \ \n    return result;\n}\n/*\n From a supplied list of numbers (of length at\
    \ least two) select and return two that are the closest to each\n    other and\
    \ return them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements_2(float[] numbers) \n{\n    float smallest_number\
    \ = numbers[0];\n    float largest_number = numbers[0];\n    \n    foreach(number\
    \ in numbers) {\n        if(number < smallest_number) {\n            smallest_number\
    \ = number;\n        }\n        if(number > largest_number) {\n            largest_number\
    \ = number;\n        }\n    }\n    \n    Tuple!(float, float) result = Tuple!(float,\
    \ float)(smallest_number, largest_number);\n    \n    return result;\n}\n/*\n\
    \ From a supplied list of numbers (of length at least two) select and return two\
    \ that are the closest to each\n    other and return them in order (smaller number,\
    \ larger number).\n            \n*/\nTuple!(float, float) find_closest_elements_3(float[]\
    \ numbers) \n{\n    float smallest_number = numbers[0];\n    float largest_number\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number < smallest_number)\
    \ {\n            smallest_number = number;\n        }\n        if(number > largest_number)\
    \ {\n            largest_number = number;\n        }\n    }\n    \n    Tuple!(float,\
    \ float) result = Tuple!(float, float)(smallest_number, largest_number);\n   \
    \ \n    return result;\n}\n/*\n From a supplied list of numbers (of length at\
    \ least two) select and return two that are the closest to each\n    other and\
    \ return them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements_4(float[] numbers) \n{\n    float smallest_number\
    \ = numbers[0];\n    float largest_number = numbers[0];\n    \n    foreach(number\
    \ in numbers) {\n        if(number < smallest_number) {\n            smallest_number\
    \ = number;\n        }\n        if(number > largest_number) {\n            largest_number\
    \ = number;\n        }\n    }\n    \n    Tuple!(float, float) result = Tuple!(float,\
    \ float)(smalle\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprx42bmad.d(13): Error: no identifier for declarator `number`

    /tmp/tmprx42bmad.d(13): Error: found `in` when expecting `;`

    /tmp/tmprx42bmad.d(36): Error: no identifier for declarator `number`

    /tmp/tmprx42bmad.d(36): Error: found `in` when expecting `;`

    /tmp/tmprx42bmad.d(59): Error: no identifier for declarator `number`

    /tmp/tmprx42bmad.d(59): Error: found `in` when expecting `;`

    /tmp/tmprx42bmad.d(82): Error: no identifier for declarator `number`

    /tmp/tmprx42bmad.d(82): Error: found `in` when expecting `;`

    /tmp/tmprx42bmad.d(92): Error: found `unittest` when expecting `,`

    /tmp/tmprx42bmad.d(102): Error: found `void` when expecting `,`

    /tmp/tmprx42bmad.d(102): Error: found `{` when expecting `,`

    /tmp/tmprx42bmad.d(102): Error: expression expected, not `}`

    /tmp/tmprx42bmad.d(102): Error: found `End of File` when expecting `,`

    /tmp/tmprx42bmad.d(102): Error: found `End of File` when expecting `)`

    /tmp/tmprx42bmad.d(102): Error: semicolon expected, not `End of File`

    /tmp/tmprx42bmad.d(102): Error: found `'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(float number in numbers)\n    {\n        if(number < smallest)\n   \
    \     {\n            smallest = number;\n        }\n        if(number > largest)\n\
    \        {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float epsilon) \n\
    {\n    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n \
    \   foreach(float number in numbers)\n    {\n        if(number < smallest)\n \
    \       {\n            smallest = number;\n        }\n        if(number > largest)\n\
    \        {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float epsilon, float\
    \ min_distance) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    \n    foreach(float number in numbers)\n    {\n        if(number < smallest)\n\
    \        {\n            smallest = number;\n        }\n        if(number > largest)\n\
    \        {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float epsilon, float\
    \ min_distance, float max_distance) \n{\n    float smallest = numbers[0];\n  \
    \  float largest = numbers[0];\n    \n    foreach(float number in numbers)\n \
    \   {\n        if(number < smallest)\n        {\n            smallest = number;\n\
    \        }\n        if(number > largest)\n        {\n            largest = number;\n\
    \        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n/*\n From a\
    \ supplied list of numbers (of length at least two) select and return two that\
    \ are the closest to each\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp797gdr8w.d(13): Error: found `in` when expecting `;`

    /tmp/tmp797gdr8w.d(37): Error: found `in` when expecting `;`

    /tmp/tmp797gdr8w.d(61): Error: found `in` when expecting `;`

    /tmp/tmp797gdr8w.d(85): Error: found `in` when expecting `;`

    /tmp/tmp797gdr8w.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp797gdr8w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for (int i =\
    \ 0; i < numbers.length; ++i)\n    {\n        if (numbers[i] < smallest)\n   \
    \     {\n            smallest = numbers[i];\n            smallest_index = i;\n\
    \        }\n        if (numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpydeuby7j.d(29): Error: template instance `tmpydeuby7j.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largest_difference = largest-smallest;\n\
    \    float difference;\n    float new_smallest;\n    float new_largest;\n    float\
    \ new_smallest_difference;\n    float new_largest_difference;\n    float new_difference;\n\
    \    float new_smallest_new;\n    float new_largest_new;\n    float new_difference_new;\n\
    \    float new_smallest_new_new;\n    float new_largest_new_new;\n    float new_difference_new_new;\n\
    \    float new_smallest_new_new_new;\n    float new_largest_new_new_new;\n   \
    \ float new_difference_new_new_new;\n    float new_smallest_new_new_new;\n   \
    \ float new_largest_new_new_new;\n    float new_difference_new_new_new;\n    float\
    \ new_smallest_new_new_new;\n    float new_largest_new_new_new;\n    float new_difference_new_new_new;\n\
    \    float new_smallest_new_new_new;\n    float new_largest_new_new_new;\n   \
    \ float new_difference_new_new_new;\n    float new_smallest_new_new_new;\n   \
    \ float new_largest_new_new_new;\n    float new_difference_new_new_new;\n    float\
    \ new_smallest_new_new_new;\n    float new_largest_new_new_new;\n    float new_difference_new_new_new;\n\
    \    float new_smallest_new_new_new;\n    float new_largest_new_new_new;\n   \
    \ float new_difference_new_new_new;\n    float new_smallest_new_new_new;\n   \
    \ float new_largest_new_new_new;\n    float new_difference_new_new_new;\n    float\
    \ new_smallest_new_new_new;\n    float new_largest_new_new_new;\n    float new_difference_new_new_new;\n\
    \    float new_smallest_new_new_new;\n    float new_largest_new_new_new;\n   \
    \ float new_difference_new_new_new;\n    float new_smallest_new_new_new;\n   \
    \ float new_largest_new_new_new;\n    float new_difference_new_new_new;\n    float\
    \ new_smallest_new_new_new;\n    float new_largest_new_new_new;\n    float new_difference_new_new_new;\n\
    \    float new_smallest_new_new_new;\n    float new_largest_new_new_\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgrjqlly4.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmpgrjqlly4.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrjqlly4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_2;\n    float largest_2;\n\
    \    float smallest_3;\n    float largest_3;\n    float smallest_4;\n    float\
    \ largest_4;\n    float smallest_5;\n    float largest_5;\n    float smallest_6;\n\
    \    float largest_6;\n    float smallest_7;\n    float largest_7;\n    float\
    \ smallest_8;\n    float largest_8;\n    float smallest_9;\n    float largest_9;\n\
    \    float smallest_10;\n    float largest_10;\n    float smallest_11;\n    float\
    \ largest_11;\n    float smallest_12;\n    float largest_12;\n    float smallest_13;\n\
    \    float largest_13;\n    float smallest_14;\n    float largest_14;\n    float\
    \ smallest_15;\n    float largest_15;\n    float smallest_16;\n    float largest_16;\n\
    \    float smallest_17;\n    float largest_17;\n    float smallest_18;\n    float\
    \ largest_18;\n    float smallest_19;\n    float largest_19;\n    float smallest_20;\n\
    \    float largest_20;\n    float smallest_21;\n    float largest_21;\n    float\
    \ smallest_22;\n    float largest_22;\n    float smallest_23;\n    float largest_23;\n\
    \    float smallest_24;\n    float largest_24;\n    float smallest_25;\n    float\
    \ largest_25;\n    float smallest_26;\n    float largest_26;\n    float smallest_27;\n\
    \    float largest_27;\n    float smallest_28;\n    float largest_28;\n    float\
    \ smallest_29;\n    float largest_29;\n    float smallest_30;\n    float largest_30;\n\
    \    float smallest_31;\n    float largest_31;\n    float smallest_32;\n    float\
    \ largest_32;\n    float smallest_33;\n    float largest_33;\n    float smallest_34;\n\
    \    float largest_34;\n    float smallest_35;\n    float largest_35;\n    float\
    \ smallest_36;\n    float largest_36;\n    float smallest_37;\n    float largest_37;\n\
    \    float smallest_38;\n    float largest_38;\n    float smallest_39;\n    float\
    \ largest_39;\n    float \nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkkmqo6j.d(89): Error: no identifier for declarator `float`

    /tmp/tmpqkkmqo6j.d(89): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkkmqo6j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest-smallest;\n    float largestDiff = largest-smallest;\n\
    \    float largestDiff_2 = largestDiff*largestDiff;\n    float smallest_diff_2\
    \ = smallest_diff*smallest_diff;\n    float smallest_diff_3 = smallest_diff*smallest_diff*smallest_diff;\n\
    \    float smallest_diff_4 = smallest_diff*smallest_diff*smallest_diff*smallest_diff;\n\
    \    float smallest_diff_5 = smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff;\n\
    \    float smallest_diff_6 = smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff;\n\
    \    float smallest_diff_7 = smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff;\n\
    \    float smallest_diff_8 = smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff;\n\
    \    float smallest_diff_9 = smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff;\n\
    \    float smallest_diff_10 = smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff;\n\
    \    float smallest_diff_11 = smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff;\n\
    \    float smallest_diff_12 = smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff;\n\
    \    float smallest_diff_13 = smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff*smallest_diff;\n\
    \    float smallest_diff_14 = smallest_\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4qsx2vgt.d(28): Error: semicolon expected, not `unittest`

    /tmp/tmp4qsx2vgt.d(28): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4qsx2vgt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largest_difference = largest-smallest;\n\
    \    float smallest_second_difference = largest-smallest;\n    float largest_second_difference\
    \ = largest-smallest;\n    float smallest_third_difference = largest-smallest;\n\
    \    float largest_third_difference = largest-smallest;\n    float smallest_fourth_difference\
    \ = largest-smallest;\n    float largest_fourth_difference = largest-smallest;\n\
    \    float smallest_fifth_difference = largest-smallest;\n    float largest_fifth_difference\
    \ = largest-smallest;\n    float smallest_sixth_difference = largest-smallest;\n\
    \    float largest_sixth_difference = largest-smallest;\n    float smallest_seventh_difference\
    \ = largest-smallest;\n    float largest_seventh_difference = largest-smallest;\n\
    \    float smallest_eighth_difference = largest-smallest;\n    float largest_eighth_difference\
    \ = largest-smallest;\n    float smallest_ninth_difference = largest-smallest;\n\
    \    float largest_ninth_difference = largest-smallest;\n    float smallest_tenth_difference\
    \ = largest-smallest;\n    float largest_tenth_difference = largest-smallest;\n\
    \    float smallest_eleventh_difference = largest-smallest;\n    float largest_eleventh_difference\
    \ = largest-smallest;\n    float smallest_twelfth_difference = largest-smallest;\n\
    \    float largest_twelfth_difference = largest-smallest;\n    float smallest_thirteenth_difference\
    \ = largest-smallest;\n    float largest_thirteenth_difference = largest-smallest;\n\
    \    float smallest_fourteenth_difference = largest-smallest;\n    float largest_fourteenth_difference\
    \ = largest-smallest;\n    float smallest_fifteenth_difference = largest-smallest;\n\
    \    float largest_fifteenth_difference = largest-smallest;\n    float smallest_sixteenth_difference\
    \ = largest-smallest;\n    float largest_sixteenth_difference = largest-smallest;\n\
    \    float smalle\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39xegr76.d(45): Error: semicolon expected, not `unittest`

    /tmp/tmp39xegr76.d(45): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39xegr76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(float number in numbers) {\n        if(number < smallest) {\n      \
    \      smallest = number;\n        }\n        if(number > largest) {\n       \
    \     largest = number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpboplgbbs.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpboplgbbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for (int i =\
    \ 1; i < numbers.length; ++i)\n    {\n        if (numbers[i] < smallest)\n   \
    \     {\n            smallest = numbers[i];\n            smallest_index = i;\n\
    \        }\n        if (numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp3jw8r01j.d(29): Error: template instance `tmp3jw8r01j.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers)\n    {\n        if(number < smallest)\n        {\n\
    \            smallest = number;\n        }\n        if(number > largest)\n   \
    \     {\n            largest = number;\n        }\n    }\n    \n    Tuple!(float,\
    \ float) result;\n    result.first = smallest;\n    result.second = largest;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyk23zrq6.d(13): Error: no identifier for declarator `number`

    /tmp/tmpyk23zrq6.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyk23zrq6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    Tuple!(float, float) result\
    \ = Tuple!(float, float)(smallest, largest);\n    Tuple!(float, float) result_index\
    \ = Tuple!(float, float)(smallest_index, largest_index);\n    return result;\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements_2(float[]\
    \ numbers) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    float smallest_index = -1;\n    float largest_index = -1;\n    for(int i\
    \ = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n  \
    \      {\n            smallest = numbers[i];\n            smallest_index = i;\n\
    \        }\n        else if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    Tuple!(float,\
    \ float) result = Tuple!(float, float)(smallest, largest);\n    Tuple!(float,\
    \ float) result_index = Tuple!(float, float)(smallest_index, largest_index);\n\
    \    return result;\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements_3(float[] numbers) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest)\n        {\n            smallest = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        else if(numbers[i] > largest)\n        {\n        \
    \    largest = numbers[i];\n            largest_index = i;\n        }\n    }\n\
    \    Tuple!(float, float) result = Tuple!(float, float)(smallest, largest);\n\
    \    Tuple!(float, float) result_index = Tuple!(float, float)(smallest_index,\
    \ largest_\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpie8e07ls.d(85): Error: found `unittest` when expecting `,`

    /tmp/tmpie8e07ls.d(95): Error: found `void` when expecting `,`

    /tmp/tmpie8e07ls.d(95): Error: found `{` when expecting `,`

    /tmp/tmpie8e07ls.d(95): Error: expression expected, not `}`

    /tmp/tmpie8e07ls.d(95): Error: found `End of File` when expecting `,`

    /tmp/tmpie8e07ls.d(95): Error: found `End of File` when expecting `)`

    /tmp/tmpie8e07ls.d(95): Error: semicolon expected, not `End of File`

    /tmp/tmpie8e07ls.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpie8e07ls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    float smallest_index = -1;\n\
    \    float largest_index = -1;\n    for(int i = 1; i < numbers.length; ++i)\n\
    \    {\n        if(numbers[i] < smallest)\n        {\n            smallest = numbers[i];\n\
    \            smallest_index = i;\n        }\n        if(numbers[i] > largest)\n\
    \        {\n            largest = numbers[i];\n            largest_index = i;\n\
    \        }\n    }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float epsilon2) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest)\n        {\n            smallest = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float epsilon, float\
    \ epsilon2, float epsilon3) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    float smalle\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptdizco6p.d(91): Error: semicolon expected, not `unittest`

    /tmp/tmptdizco6p.d(91): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdizco6p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements_fast(float[] numbers) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest)\n        {\n            smallest = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        else if(numbers[i] > largest)\n        {\n        \
    \    largest = numbers[i];\n            largest_index = i;\n        }\n    }\n\
    \    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements_fast(float[] numbers, float\
    \ epsilon) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    float smallest_index = -1;\n    float largest_index = -1;\n    for(int i\
    \ = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest + epsilon)\n\
    \        {\n            smallest = numbers[i];\n            smallest_index = i;\n\
    \        }\n        else if(numbers[i] > largest - epsilon)\n        {\n     \
    \       largest = numbers[i];\n            largest_index = i;\n        }\n   \
    \ }\n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements_fast(float[] numbers, float\
    \ epsilon, float min_distance) \n{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    float \nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpza7z8epz.d(91): Error: no identifier for declarator `float`

    /tmp/tmpza7z8epz.d(91): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpza7z8epz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(float n in numbers) {\n        if(n < smallest) {\n            smallest\
    \ = n;\n        }\n        if(n > largest) {\n            largest = n;\n     \
    \   }\n    }\n    \n    Tuple!(float, float) result = Tuple!(float, float)(smallest,\
    \ largest);\n    \n    return result;\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers, float\
    \ threshold) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    \n    foreach(float n in numbers) {\n        if(n < smallest) {\n       \
    \     smallest = n;\n        }\n        if(n > largest) {\n            largest\
    \ = n;\n        }\n    }\n    \n    Tuple!(float, float) result = Tuple!(float,\
    \ float)(smallest, largest);\n    \n    if(smallest - threshold < largest + threshold)\
    \ {\n        return result;\n    }\n    \n    largest = numbers[0];\n    foreach(float\
    \ n in numbers) {\n        if(n > largest) {\n            largest = n;\n     \
    \   }\n    }\n    \n    result = Tuple!(float, float)(smallest, largest);\n  \
    \  \n    return result;\n}\n/*\n From a supplied list of numbers (of length at\
    \ least two) select and return two that are the closest to each\n    other and\
    \ return them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements(float[] numbers, float threshold, float threshold2)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ \n    foreach(float n in numbers) {\n        if(n < smallest) {\n          \
    \  smallest = n;\n        }\n        if(n > largest) {\n            largest =\
    \ n;\n        }\n    }\n    \n    Tuple!(float, float) result = Tuple!(float,\
    \ float)(smallest, largest);\n    \n    if(smallest - threshold < largest + threshold)\
    \ {\n        return result;\n    }\n    \n    largest = numbers[0];\n    foreach(float\
    \ n in numbers) {\n        if(n > largest) {\n            largest = n;\n     \
    \   }\n    }\n    \n    result = Tuple!(float, float)(smallest, largest);\n  \
    \  \n    if(smallest - threshold2 < largest + threshold2) {\n        return result;\n\
    \    }\n    \n    largest = numbers[0];\n    foreach\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvh3o0j4e.d(13): Error: found `in` when expecting `;`

    /tmp/tmpvh3o0j4e.d(36): Error: found `in` when expecting `;`

    /tmp/tmpvh3o0j4e.d(52): Error: found `in` when expecting `;`

    /tmp/tmpvh3o0j4e.d(72): Error: found `in` when expecting `;`

    /tmp/tmpvh3o0j4e.d(88): Error: found `in` when expecting `;`

    /tmp/tmpvh3o0j4e.d(102): Error: found `unittest` when expecting `(`

    /tmp/tmpvh3o0j4e.d(103): Error: basic type expected, not `{`

    /tmp/tmpvh3o0j4e.d(103): Error: no identifier for declarator `_error_`

    /tmp/tmpvh3o0j4e.d(103): Error: found `{` when expecting `;`

    /tmp/tmpvh3o0j4e.d(104): Error: expression expected, not `alias`

    /tmp/tmpvh3o0j4e.d(104): Error: found `candidate` when expecting `)`

    /tmp/tmpvh3o0j4e.d(104): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvh3o0j4e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    /*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number < smallest)\
    \ {\n            smallest = number;\n        }\n        if(number > largest) {\n\
    \            largest = number;\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float min_distance) \n\
    {\n    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n \
    \   foreach(number in numbers) {\n        if(number < smallest) {\n          \
    \  smallest = number;\n        }\n        if(number > largest) {\n           \
    \ largest = number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float min_distance, float max_distance) \n{\n    float\
    \ smallest = numbers[0];\n    float largest = numbers[0];\n    \n    foreach(number\
    \ in numbers) {\n        if(number < smallest) {\n            smallest = number;\n\
    \        }\n        if(number > largest) {\n            largest = number;\n  \
    \      }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied\
    \ list of numbers (of length at least two) select and return two that are the\
    \ closest to each\n    other and return them in order (smaller number, larger\
    \ number).\n            \n*/\nTuple!(float, float) find_\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yj4b48h.d(13): Error: no identifier for declarator `number`

    /tmp/tmp2yj4b48h.d(13): Error: found `in` when expecting `;`

    /tmp/tmp2yj4b48h.d(34): Error: no identifier for declarator `number`

    /tmp/tmp2yj4b48h.d(34): Error: found `in` when expecting `;`

    /tmp/tmp2yj4b48h.d(55): Error: no identifier for declarator `number`

    /tmp/tmp2yj4b48h.d(55): Error: found `in` when expecting `;`

    /tmp/tmp2yj4b48h.d(76): Error: no identifier for declarator `number`

    /tmp/tmp2yj4b48h.d(76): Error: found `in` when expecting `;`

    /tmp/tmp2yj4b48h.d(93): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yj4b48h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_diff = largest-smallest;\n    float largest_diff = smallest-largest;\n\
    \    \n    for(int i = 1; i < numbers.length; ++i)\n    {\n        float diff\
    \ = numbers[i]-smallest;\n        if(diff < smallest_diff)\n        {\n      \
    \      smallest_diff = diff;\n            smallest = numbers[i];\n        }\n\
    \        else if(diff > largest_diff)\n        {\n            largest_diff = diff;\n\
    \            largest = numbers[i];\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp10rfthr0.d(30): Error: template instance `tmp10rfthr0.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n        \n        if(numbers[i] > max2)\n        {\n\
    \            max2 = numbers[i];\n        }\n        else if(numbers[i] < min2)\n\
    \        {\n            min2 = numbers[i];\n        }\n    }\n    \n    return\
    \ Tuple!(min1, max1), Tuple!(max1, min2);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, max1)` cannot use local `min1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, max1)` cannot use local `max1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpyfrl_1ph.d(36): Error: template instance `tmpyfrl_1ph.find_closest_elements.Tuple!(min1,
    max1)` error instantiating

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largestDifference = largest-smallest;\n\
    \    float smallest_second_difference = largest-smallest;\n    float largestsecond_difference\
    \ = largest-smallest;\n    float smallest_third_difference = largest-smallest;\n\
    \    float largestthird_difference = largest-smallest;\n    float smallest_fourth_difference\
    \ = largest-smallest;\n    float largestfourth_difference = largest-smallest;\n\
    \    float smallest_fifth_difference = largest-smallest;\n    float largestfifth_difference\
    \ = largest-smallest;\n    float smallest_sixth_difference = largest-smallest;\n\
    \    float largestsixth_difference = largest-smallest;\n    float smallest_seventh_difference\
    \ = largest-smallest;\n    float largestseventh_difference = largest-smallest;\n\
    \    float smallest_eighth_difference = largest-smallest;\n    float largesteighth_difference\
    \ = largest-smallest;\n    float smallest_ninth_difference = largest-smallest;\n\
    \    float largestninth_difference = largest-smallest;\n    float smallest_tenth_difference\
    \ = largest-smallest;\n    float largesttenth_difference = largest-smallest;\n\
    \    float smallest_eleventh_difference = largest-smallest;\n    float largesteleventh_difference\
    \ = largest-smallest;\n    float smallest_twelfth_difference = largest-smallest;\n\
    \    float largesttwelfth_difference = largest-smallest;\n    float smallest_thirteenth_difference\
    \ = largest-smallest;\n    float largestthirteenth_difference = largest-smallest;\n\
    \    float smallest_fourteenth_difference = largest-smallest;\n    float largestfourteenth_difference\
    \ = largest-smallest;\n    float smallest_fifteenth_difference = largest-smallest;\n\
    \    float largestfifteenth_difference = largest-smallest;\n    float smallest_sixteenth_difference\
    \ = largest-smallest;\n    float largestsixteenth_difference = largest-smallest;\n\
    \    float smalle\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb59rzcei.d(45): Error: semicolon expected, not `unittest`

    /tmp/tmpb59rzcei.d(45): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb59rzcei.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float max1 = numbers[0];\n    float min2 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min1)\n        {\n            min1 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max1)\n        {\n            max1 =\
    \ numbers[i];\n        }\n    }\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < min2)\n        {\n            min2 = numbers[i];\n\
    \        }\n        else if(numbers[i] > max2)\n        {\n            max2 =\
    \ numbers[i];\n        }\n    }\n    \n    return Tuple!(float,float)((min1,min2),(float)(max1,max2));\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1mrqg0mb.d(39): Error: C style cast illegal, use `cast(float)(max1
    , max2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1mrqg0mb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfuwf6q9.d(13): Error: no identifier for declarator `number`

    /tmp/tmpsfuwf6q9.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfuwf6q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest;\n    float largest_difference = smallest;\n \
    \   float difference;\n    float temp;\n    float temp2;\n    float temp3;\n \
    \   float temp4;\n    float temp5;\n    float temp6;\n    float temp7;\n    float\
    \ temp8;\n    float temp9;\n    float temp10;\n    float temp11;\n    float temp12;\n\
    \    float temp13;\n    float temp14;\n    float temp15;\n    float temp16;\n\
    \    float temp17;\n    float temp18;\n    float temp19;\n    float temp20;\n\
    \    float temp21;\n    float temp22;\n    float temp23;\n    float temp24;\n\
    \    float temp25;\n    float temp26;\n    float temp27;\n    float temp28;\n\
    \    float temp29;\n    float temp30;\n    float temp31;\n    float temp32;\n\
    \    float temp33;\n    float temp34;\n    float temp35;\n    float temp36;\n\
    \    float temp37;\n    float temp38;\n    float temp39;\n    float temp40;\n\
    \    float temp41;\n    float temp42;\n    float temp43;\n    float temp44;\n\
    \    float temp45;\n    float temp46;\n    float temp47;\n    float temp48;\n\
    \    float temp49;\n    float temp50;\n    float temp51;\n    float temp52;\n\
    \    float temp53;\n    float temp54;\n    float temp55;\n    float temp56;\n\
    \    float temp57;\n    float temp58;\n    float temp59;\n    float temp60;\n\
    \    float temp61;\n    float temp62;\n    float temp63;\n    float temp64;\n\
    \    float temp65;\n    float temp66;\n    float temp67;\n    float temp68;\n\
    \    float temp69;\n    float temp70;\n    float temp71;\n    float temp72;\n\
    \    float temp73;\n    float temp74;\n    float temp75;\n    float temp76;\n\
    \    float temp77;\n    float temp78;\n    float temp79;\n    float temp80;\n\
    \    float temp81;\n    float temp8\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuvqa4orp.d(97): Error: semicolon expected, not `unittest`

    /tmp/tmpuvqa4orp.d(97): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvqa4orp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest_index,\
    \ largest_index);\n}\n/*\n From a supplied list of numbers (of length at least\
    \ two) select and return two that are the closest to each\n    other and return\
    \ them in order (smaller number, larger number).\n            \n*/\nTuple!(float,\
    \ float) find_closest_elements(float[] numbers, float epsilon) \n{\n    float\
    \ smallest = numbers[0];\n    float largest = numbers[0];\n    float smallest_index\
    \ = -1;\n    float largest_index = -1;\n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n            smallest\
    \ = numbers[i];\n            smallest_index = i;\n        }\n        if(numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n            largest_index\
    \ = i;\n        }\n    }\n    return Tuple!(smallest_index, largest_index);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float min_distance) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float smallest_index = -1;\n    float largest_index\
    \ = -1;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest)\n        {\n            smallest = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    return\
    \ Tuple!(smallest_index, largest_index);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers, float\
    \ epsilon, float min_distance, float max_distance) \n{\n    float smallest = numbers[0];\n\
    \    float largest = number\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_vxf1don.d(90): Error: semicolon expected, not `unittest`

    /tmp/tmp_vxf1don.d(90): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_vxf1don.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest-smallest;\n    float largest_difference = largest-smallest;\n\
    \    float smallest_second_difference = largest-smallest;\n    float largest_second_difference\
    \ = largest-smallest;\n    float smallest_third_difference = largest-smallest;\n\
    \    float largest_third_difference = largest-smallest;\n    float smallest_fourth_difference\
    \ = largest-smallest;\n    float largest_fourth_difference = largest-smallest;\n\
    \    float smallest_fifth_difference = largest-smallest;\n    float largest_fifth_difference\
    \ = largest-smallest;\n    float smallest_sixth_difference = largest-smallest;\n\
    \    float largest_sixth_difference = largest-smallest;\n    float smallest_seventh_difference\
    \ = largest-smallest;\n    float largest_seventh_difference = largest-smallest;\n\
    \    float smallest_eighth_difference = largest-smallest;\n    float largest_eighth_difference\
    \ = largest-smallest;\n    float smallest_ninth_difference = largest-smallest;\n\
    \    float largest_ninth_difference = largest-smallest;\n    float smallest_tenth_difference\
    \ = largest-smallest;\n    float largest_tenth_difference = largest-smallest;\n\
    \    float smallest_eleventh_difference = largest-smallest;\n    float largest_eleventh_difference\
    \ = largest-smallest;\n    float smallest_twelfth_difference = largest-smallest;\n\
    \    float largest_twelfth_difference = largest-smallest;\n    float smallest_thirteenth_difference\
    \ = largest-smallest;\n    float largest_thirteenth_difference = largest-smallest;\n\
    \    float smallest_fourteenth_difference = largest-smallest;\n    float largest_fourteenth_difference\
    \ = largest-smallest;\n    float smallest_fifteenth_difference = largest-smallest;\n\
    \    float largest_fifteenth_difference = largest-smallest;\n    float smallest_sixteenth_difference\
    \ = largest-smallest;\n    float largest_sixteenth_difference = largest-smallest;\n\
    \    float smalle\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39xegr76.d(45): Error: semicolon expected, not `unittest`

    /tmp/tmp39xegr76.d(45): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39xegr76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    \n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest_number)\n        {\n            smallest_number = numbers[i];\n \
    \       }\n        else if(numbers[i] > largest_number)\n        {\n         \
    \   largest_number = numbers[i];\n        }\n    }\n    \n    return Tuple!(smallest_number,\
    \ largest_number);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest_number, largest_number)` cannot
    use local `smallest_number` as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest_number, largest_number)` cannot
    use local `largest_number` as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpkdaq5w6l.d(25): Error: template instance `tmpkdaq5w6l.find_closest_elements.Tuple!(smallest_number,
    largest_number)` error instant'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(float number in numbers) {\n        if(number < smallest) {\n      \
    \      smallest = number;\n        }\n        if(number > largest) {\n       \
    \     largest = number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpboplgbbs.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpboplgbbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for (int i =\
    \ 1; i < numbers.length; ++i)\n    {\n        if (numbers[i] < smallest)\n   \
    \     {\n            smallest = numbers[i];\n            smallest_index = i;\n\
    \        }\n        if (numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp3jw8r01j.d(29): Error: template instance `tmp3jw8r01j.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp05jsu6xw.d(27): Error: template instance `tmp05jsu6xw.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05jsu6xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for(int i = 0;\
    \ i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n       \
    \ {\n            smallest = numbers[i];\n            smallest_index = i;\n   \
    \     }\n        \n        if(numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpkqufk5pm.d(30): Error: template instance `tmpkqufk5pm.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float min1 = numbers[0];\n\tfloat min2 = numbers[0];\n\tfloat max1 = numbers[0];\n\
    \tfloat max2 = numbers[0];\n\t\n\tfor (int i = 1; i < numbers.length; ++i)\n\t\
    {\n\t\tif (numbers[i] < min1)\n\t\t{\n\t\t\tmin1 = numbers[i];\n\t\t}\n\t\telse\
    \ if (numbers[i] > max1)\n\t\t{\n\t\t\tmax1 = numbers[i];\n\t\t}\n\t\t\n\t\tif\
    \ (numbers[i] < min2)\n\t\t{\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t\telse if (numbers[i]\
    \ > max2)\n\t\t{\n\t\t\tmax2 = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(min1,\
    \ min2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n   \
    \ assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min1` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(min1, min2)` cannot use local `min2` as
    parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp4q4exmbo.d(36): Error: template instance `tmp4q4exmbo.find_closest_elements.Tuple!(min1,
    min2)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4q4exmbo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n        }\n        else if(numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n        }\n    }\n\
    \    \n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float epsilon) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    \n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < smallest + epsilon)\n        {\n            smallest = numbers[i];\n     \
    \   }\n        else if(numbers[i] > largest - epsilon)\n        {\n          \
    \  largest = numbers[i];\n        }\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float delta) \n{\n   \
    \ float smallest = numbers[0];\n    float largest = numbers[0];\n    \n    for(int\
    \ i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest + delta)\n\
    \        {\n            smallest = numbers[i];\n        }\n        else if(numbers[i]\
    \ > largest - delta)\n        {\n            largest = numbers[i];\n        }\n\
    \    }\n    \n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float epsilon, float delta, float gamma) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    \n    for(int i = 1; i < numbers.length;\
    \ ++i)\n    {\n        if(numbers[i] < smallest + gamma)\n        {\n        \
    \    smallest = numbers[i];\n        }\n        else if(numbers[i] > largest -\
    \ gamma)\n        {\n            largest = numbers[i];\n        }\n    }\n   \
    \ \n    return Tuple\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm61kyvj0.d(98): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpm61kyvj0.d(108): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm61kyvj0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest=numbers[0];\n    float largest=numbers[0];\n    float smallest_index=0;\n\
    \    float largest_index=0;\n    for(int i=1; i<numbers.length; ++i)\n    {\n\
    \        if(numbers[i]<smallest)\n        {\n            smallest=numbers[i];\n\
    \            smallest_index=i;\n        }\n        if(numbers[i]>largest)\n  \
    \      {\n            largest=numbers[i];\n            largest_index=i;\n    \
    \    }\n    }\n    \n    return Tuple!(smallest,largest);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpoqu0yb10.d(28): Error: template instance `tmpoqu0yb10.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers)\n    {\n        if(number < smallest)\n         \
    \   smallest = number;\n        if(number > largest)\n            largest = number;\n\
    \    }\n    \n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float epsilon) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    \n    foreach(number in numbers)\n    {\n        if(number < smallest - epsilon)\n\
    \            smallest = number;\n        if(number > largest + epsilon)\n    \
    \        largest = number;\n    }\n    \n    return Tuple!(smallest, largest);\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon, float delta) \n{\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    \n    foreach(number in numbers)\n    {\n\
    \        if(number < smallest - delta && number > smallest + delta)\n        \
    \    smallest = number;\n        if(number > largest + delta && number < largest\
    \ - delta)\n            largest = number;\n    }\n    \n    return Tuple!(smallest,\
    \ largest);\n}\n/*\n From a supplied list of numbers (of length at least two)\
    \ select and return two that are the closest to each\n    other and return them\
    \ in order (smaller number, larger number).\n            \n*/\nTuple!(float, float)\
    \ find_closest_elements(float[] numbers, float epsilon, float delta, float gamma)\
    \ \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n   \
    \ \n    foreach(number in numbers)\n    {\n        if(number < smallest - gamma\
    \ && number > smallest + gamma)\n            smallest = number;\n        if(number\
    \ > largest + gamma && number < largest - gamma)\n            largest = number;\n\
    \    }\n    \n    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list\
    \ of numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them \nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzrdtjqr7.d(13): Error: no identifier for declarator `number`

    /tmp/tmpzrdtjqr7.d(13): Error: found `in` when expecting `;`

    /tmp/tmpzrdtjqr7.d(33): Error: no identifier for declarator `number`

    /tmp/tmpzrdtjqr7.d(33): Error: found `in` when expecting `;`

    /tmp/tmpzrdtjqr7.d(53): Error: no identifier for declarator `number`

    /tmp/tmpzrdtjqr7.d(53): Error: found `in` when expecting `;`

    /tmp/tmpzrdtjqr7.d(73): Error: no identifier for declarator `number`

    /tmp/tmpzrdtjqr7.d(73): Error: found `in` when expecting `;`

    /tmp/tmpzrdtjqr7.d(83): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzrdtjqr7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest = numbers[0];\n\tfloat largest = numbers[0];\n\tfloat smallest_index\
    \ = -1;\n\tfloat largest_index = -1;\n\tfor (int i = 1; i < numbers.length; ++i)\n\
    \t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\t\t\
    \tsmallest_index = i;\n\t\t}\n\t\telse if (numbers[i] > largest)\n\t\t{\n\t\t\t\
    largest = numbers[i];\n\t\t\tlargest_index = i;\n\t\t}\n\t}\n\treturn Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpgnat6hz1.d(27): Error: template instance `tmpgnat6hz1.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_2 = numbers[0];\n    float largest_2 = numbers[0];\n    float smallest_3\
    \ = numbers[0];\n    float largest_3 = numbers[0];\n    float smallest_4 = numbers[0];\n\
    \    float largest_4 = numbers[0];\n    float smallest_5 = numbers[0];\n    float\
    \ largest_5 = numbers[0];\n    float smallest_6 = numbers[0];\n    float largest_6\
    \ = numbers[0];\n    float smallest_7 = numbers[0];\n    float largest_7 = numbers[0];\n\
    \    float smallest_8 = numbers[0];\n    float largest_8 = numbers[0];\n    float\
    \ smallest_9 = numbers[0];\n    float largest_9 = numbers[0];\n    float smallest_10\
    \ = numbers[0];\n    float largest_10 = numbers[0];\n    float smallest_11 = numbers[0];\n\
    \    float largest_11 = numbers[0];\n    float smallest_12 = numbers[0];\n   \
    \ float largest_12 = numbers[0];\n    float smallest_13 = numbers[0];\n    float\
    \ largest_13 = numbers[0];\n    float smallest_14 = numbers[0];\n    float largest_14\
    \ = numbers[0];\n    float smallest_15 = numbers[0];\n    float largest_15 = numbers[0];\n\
    \    float smallest_16 = numbers[0];\n    float largest_16 = numbers[0];\n   \
    \ float smallest_17 = numbers[0];\n    float largest_17 = numbers[0];\n    float\
    \ smallest_18 = numbers[0];\n    float largest_18 = numbers[0];\n    float smallest_19\
    \ = numbers[0];\n    float largest_19 = numbers[0];\n    float smallest_20 = numbers[0];\n\
    \    float largest_20 = numbers[0];\n    float smallest_21 = numbers[0];\n   \
    \ float largest_21 = numbers[0];\n    float smallest_22 = numbers[0];\n    float\
    \ largest_22 = numbers[0];\n    float smallest_23 = numbers[0];\n    float largest_23\
    \ = numbers[0];\n    float smallest_24 = numbers[0];\n    float largest_24 = numbers[0];\n\
    \    float smallest_25 = numbers[0];\n    float largest_25 = numbers[0];\n   \
    \ float smallest_26 = numbers[0];\n    float largest_26 = numbers[0];\n    float\
    \ smallest_27 = numbers[0];\n    float largest_27 = numbers[0];\n    float smallest_28\
    \ = numbers[0];\n    float largest_28 = numbers[0];\n    float smallest_29 = numbers[0];\n\
    \    float largest_29 = numbers[0];\n    float smallest_30 = numbers[0];\n   \
    \ float largest_\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3pebw2z_.d(70): Error: semicolon expected, not `unittest`

    /tmp/tmp3pebw2z_.d(70): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pebw2z_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers)\n    {\n        if(number < smallest)\n        {\n\
    \            smallest = number;\n        }\n        else if(number > largest)\n\
    \        {\n            largest = number;\n        }\n    }\n    \n    Tuple!(float,\
    \ float) result = Tuple!(float, float) smallest, largest;\n    \n    return result;\n\
    }\n/*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    \n    foreach(number in numbers)\n    {\n        if(number\
    \ < smallest)\n        {\n            smallest = number;\n        }\n        else\
    \ if(number > largest)\n        {\n            largest = number;\n        }\n\
    \    }\n    \n    Tuple!(float, float) result = Tuple!(float, float) smallest,\
    \ largest;\n    \n    return result;\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers, float\
    \ epsilon, float min_distance) \n{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    \n    foreach(number in numbers)\n    {\n       \
    \ if(number < smallest)\n        {\n            smallest = number;\n        }\n\
    \        else if(number > largest)\n        {\n            largest = number;\n\
    \        }\n    }\n    \n    Tuple!(float, float) result = Tuple!(float, float)\
    \ smallest, largest;\n    \n    return result;\n}\n/*\n From a supplied list of\
    \ numbers (of length at least two) select and return two that are the closest\
    \ to each\n    other and return them in order (smaller number, larger number).\n\
    \            \n*/\nTuple!(float, float) find_closest_elements(float[] numbers,\
    \ float epsilon, float min_distance, float max_distance) \n{\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    \n    foreach(number in\
    \ numbers)\n    {\n        if(number < smallest)\n        {\n            smallest\
    \ = number;\n        }\n        else if(number > largest)\n        {\n       \
    \     largest = number;\n\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_2rz6li.d(13): Error: no identifier for declarator `number`

    /tmp/tmp6_2rz6li.d(13): Error: found `in` when expecting `;`

    /tmp/tmp6_2rz6li.d(25): Error: semicolon expected, not `smallest`

    /tmp/tmp6_2rz6li.d(39): Error: no identifier for declarator `number`

    /tmp/tmp6_2rz6li.d(39): Error: found `in` when expecting `;`

    /tmp/tmp6_2rz6li.d(51): Error: semicolon expected, not `smallest`

    /tmp/tmp6_2rz6li.d(65): Error: no identifier for declarator `number`

    /tmp/tmp6_2rz6li.d(65): Error: found `in` when expecting `;`

    /tmp/tmp6_2rz6li.d(77): Error: semicolon expected, not `smallest`

    /tmp/tmp6_2rz6li.d(91): Error: no identifier for declarator `number`

    /tmp/tmp6_2rz6li.d(91): Error: found `in` when expecting `;`

    /tmp/tmp6_2rz6li.d(101): Error: found `unittest` instead of statement

    /tmp/tmp6_2rz6li.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp6_2rz6li.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_difference = largest;\n    float largest_difference = smallest;\n \
    \   \n    foreach(number in numbers)\n    {\n        if(number < smallest)\n \
    \       {\n            smallest = number;\n            smallest_difference = largest;\n\
    \        }\n        else if(number > largest)\n        {\n            largest\
    \ = number;\n            largest_difference = smallest;\n        }\n    }\n  \
    \  \n    return Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4u6gojwx.d(15): Error: no identifier for declarator `number`

    /tmp/tmp4u6gojwx.d(15): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4u6gojwx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    \n    for (int i =\
    \ 1; i < numbers.length; ++i)\n    {\n        if (numbers[i] < smallest)\n   \
    \     {\n            smallest = numbers[i];\n            smallest_index = i;\n\
    \        }\n        else if (numbers[i] > largest)\n        {\n            largest\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpyrczp84a.d(29): Error: template instance `tmpyrczp84a.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\tfor (int i\
    \ = 1; i < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > largest)\n\t\t{\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp0pgleq97.d(25): Error: template instance `tmp0pgleq97.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_found;\n    float\
    \ largest_found;\n    float smallest_found_temp;\n    float largest_found_temp;\n\
    \    float smallest_found_temp2;\n    float largest_found_temp2;\n    float smallest_found_temp3;\n\
    \    float largest_found_temp3;\n    float smallest_found_temp4;\n    float largest_found_temp4;\n\
    \    float smallest_found_temp5;\n    float largest_found_temp5;\n    float smallest_found_temp6;\n\
    \    float largest_found_temp6;\n    float smallest_found_temp7;\n    float largest_found_temp7;\n\
    \    float smallest_found_temp8;\n    float largest_found_temp8;\n    float smallest_found_temp9;\n\
    \    float largest_found_temp9;\n    float smallest_found_temp10;\n    float largest_found_temp10;\n\
    \    float smallest_found_temp11;\n    float largest_found_temp11;\n    float\
    \ smallest_found_temp12;\n    float largest_found_temp12;\n    float smallest_found_temp13;\n\
    \    float largest_found_temp13;\n    float smallest_found_temp14;\n    float\
    \ largest_found_temp14;\n    float smallest_found_temp15;\n    float largest_found_temp15;\n\
    \    float smallest_found_temp16;\n    float largest_found_temp16;\n    float\
    \ smallest_found_temp17;\n    float largest_found_temp17;\n    float smallest_found_temp18;\n\
    \    float largest_found_temp18;\n    float smallest_found_temp19;\n    float\
    \ largest_found_temp19;\n    float smallest_found_temp20;\n    float largest_found_temp20;\n\
    \    float smallest_found_temp21;\n    float largest_found_temp21;\n    float\
    \ smallest_found_temp22;\n    float largest_found_temp22;\n    float smallest_found_temp23;\n\
    \    float largest_found_temp23;\n    float smallest_found_temp24;\n    float\
    \ largest_found_temp24;\n    float smallest_found_temp25;\n    float largest_found_temp25;\n\
    \    float smallest_found_temp26;\n    float largest_found_temp26;\n    float\
    \ smallest_found_temp27;\n    float largest_found_temp27;\n    float smallest_found_temp28;\n\
    \    float largest_found_temp28;\n    float smallest_found_temp29;\n    float\
    \ largest_found_\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgc0lcmgy.d(72): Error: semicolon expected, not `unittest`

    /tmp/tmpgc0lcmgy.d(72): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgc0lcmgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n        }\n        else if(numbers[i]\
    \ > largest)\n        {\n            largest = numbers[i];\n        }\n    }\n\
    \    \n    return Tuple!(smallest, largest);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp6kzsbo53.d(25): Error: template instance `tmp6kzsbo53.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[0];\n    float max1 =\
    \ numbers[0];\n    float max2 = numbers[0];\n    float mid1 = numbers[0];\n  \
    \  float mid2 = numbers[0];\n    float mid3 = numbers[0];\n    float mid4 = numbers[0];\n\
    \    float mid5 = numbers[0];\n    float mid6 = numbers[0];\n    float mid7 =\
    \ numbers[0];\n    float mid8 = numbers[0];\n    float mid9 = numbers[0];\n  \
    \  float mid10 = numbers[0];\n    float mid11 = numbers[0];\n    float mid12 =\
    \ numbers[0];\n    float mid13 = numbers[0];\n    float mid14 = numbers[0];\n\
    \    float mid15 = numbers[0];\n    float mid16 = numbers[0];\n    float mid17\
    \ = numbers[0];\n    float mid18 = numbers[0];\n    float mid19 = numbers[0];\n\
    \    float mid20 = numbers[0];\n    float mid21 = numbers[0];\n    float mid22\
    \ = numbers[0];\n    float mid23 = numbers[0];\n    float mid24 = numbers[0];\n\
    \    float mid25 = numbers[0];\n    float mid26 = numbers[0];\n    float mid27\
    \ = numbers[0];\n    float mid28 = numbers[0];\n    float mid29 = numbers[0];\n\
    \    float mid30 = numbers[0];\n    float mid31 = numbers[0];\n    float mid32\
    \ = numbers[0];\n    float mid33 = numbers[0];\n    float mid34 = numbers[0];\n\
    \    float mid35 = numbers[0];\n    float mid36 = numbers[0];\n    float mid37\
    \ = numbers[0];\n    float mid38 = numbers[0];\n    float mid39 = numbers[0];\n\
    \    float mid40 = numbers[0];\n    float mid41 = numbers[0];\n    float mid42\
    \ = numbers[0];\n    float mid43 = numbers[0];\n    float mid44 = numbers[0];\n\
    \    float mid45 = numbers[0];\n    float mid46 = numbers[0];\n    float mid47\
    \ = numbers[0];\n    float mid48 = numbers[0];\n    float mid49 = numbers[0];\n\
    \    float mid50 = numbers[0];\n    float mid51 = numbers[0];\n    float mid52\
    \ = numbers[0];\n    float mid53 = numbers[0];\n    float mid54 = numbers[0];\n\
    \    float mid55 = numbers[0];\n    float mid56 = numbers[0];\n    float mid57\
    \ = numbers[0];\n    float mid58 = numbers[0];\n    float mid59 = numbers[0];\n\
    \    float mid60 = numbers[0];\n    float mid61 = numbers[0];\n    float mid62\
    \ = number\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm17ufi_w.d(76): Error: semicolon expected, not `unittest`

    /tmp/tmpm17ufi_w.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm17ufi_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    foreach(number\
    \ in numbers)\n    {\n        if(number < smallest)\n        {\n            smallest\
    \ = number;\n        }\n        if(number > largest)\n        {\n            largest\
    \ = number;\n        }\n    }\n    return Tuple!(smallest, largest);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp151btqmz.d(12): Error: no identifier for declarator `number`

    /tmp/tmp151btqmz.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp151btqmz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest;\n\tfloat largest;\n\tfloat smallest_number;\n\tfloat largest_number;\n\
    \t\n\tsmallest = numbers[0];\n\tlargest = numbers[0];\n\tsmallest_number = numbers[0];\n\
    \tlargest_number = numbers[0];\n\t\n\tforeach(number in numbers)\n\t{\n\t\tif(number\
    \ < smallest)\n\t\t{\n\t\t\tsmallest = number;\n\t\t\tsmallest_number = number;\n\
    \t\t}\n\t\telse if(number > largest)\n\t\t{\n\t\t\tlargest = number;\n\t\t\tlargest_number\
    \ = number;\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest_number, largest_number);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx34m8r1p.d(20): Error: no identifier for declarator `number`

    /tmp/tmpx34m8r1p.d(20): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx34m8r1p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_number;\n    float\
    \ largest_number;\n    \n    smallest = numbers[0];\n    largest = numbers[0];\n\
    \    smallest_number = numbers[0];\n    largest_number = numbers[0];\n    \n \
    \   for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n\
    \        {\n            smallest = numbers[i];\n            smallest_number =\
    \ numbers[i];\n        }\n        else if(numbers[i] > largest)\n        {\n \
    \           largest = numbers[i];\n            largest_number = numbers[i];\n\
    \        }\n    }\n    \n    return Tuple!(smallest_number, largest_number);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest_number, largest_number)` cannot
    use local `smallest_number` as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest_number, largest_number)` cannot
    use local `largest_number` as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpz8vaiawb.d(34): Error: template instance `tmpz8vaiawb.find_closest_elements.Tuple!(smallest_number,
    largest_number)` error instant'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest;\n    float largest;\n    float smallest_number;\n    float\
    \ largest_number;\n    float smallest_difference;\n    float largest_difference;\n\
    \    float smallest_square;\n    float largest_square;\n    float smallest_square_difference;\n\
    \    float largest_square_difference;\n    float smallest_square_root;\n    float\
    \ largest_square_root;\n    float smallest_square_root_difference;\n    float\
    \ largest_square_root_difference;\n    float smallest_square_root_of_two;\n  \
    \  float largest_square_root_of_two;\n    float smallest_square_root_of_two_difference;\n\
    \    float largest_square_root_of_two_difference;\n    float smallest_square_root_of_three;\n\
    \    float largest_square_root_of_three;\n    float smallest_square_root_of_three_difference;\n\
    \    float largest_square_root_of_three_difference;\n    float smallest_square_root_of_four;\n\
    \    float largest_square_root_of_four;\n    float smallest_square_root_of_four_difference;\n\
    \    float largest_square_root_of_four_difference;\n    float smallest_square_root_of_five;\n\
    \    float largest_square_root_of_five;\n    float smallest_square_root_of_five_difference;\n\
    \    float largest_square_root_of_five_difference;\n    float smallest_square_root_of_six;\n\
    \    float largest_square_root_of_six;\n    float smallest_square_root_of_six_difference;\n\
    \    float largest_square_root_of_six_difference;\n    float smallest_square_root_of_seven;\n\
    \    float largest_square_root_of_seven;\n    float smallest_square_root_of_seven_difference;\n\
    \    float largest_square_root_of_seven_difference;\n    float smallest_square_root_of_eight;\n\
    \    float largest_square_root_of_eight;\n    float smallest_square_root_of_eight_difference;\n\
    \    float largest_square_root_of_eight_difference;\n    float smallest_square_root_of_nine;\n\
    \    float largest_square_root_of_nine;\n    float smallest_square_root_of_nine_difference;\n\
    \    float largest_square_root_of_nine_difference;\n    float smallest_square_root_of_ten;\n\
    \    \nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi4z155n7.d(58): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi4z155n7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest = numbers[0];\n\tfloat largest = numbers[0];\n\t\n\tfor(int i =\
    \ 1; i < numbers.length; ++i)\n\t{\n\t\tif(numbers[i] < smallest)\n\t\t{\n\t\t\
    \tsmallest = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > largest)\n\t\t{\n\t\t\
    \tlargest = numbers[i];\n\t\t}\n\t}\n\t\n\treturn Tuple!(smallest, largest);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmpt3atjcxe.d(25): Error: template instance `tmpt3atjcxe.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    \n   \
    \ foreach(number in numbers) {\n        if(number < smallest) {\n            smallest\
    \ = number;\n        }\n        if(number > largest) {\n            largest =\
    \ number;\n        }\n    }\n    \n    return Tuple!(smallest, largest);\n}\n\
    /*\n From a supplied list of numbers (of length at least two) select and return\
    \ two that are the closest to each\n    other and return them in order (smaller\
    \ number, larger number).\n            \n*/\nTuple!(float, float) find_closest_elements(float[]\
    \ numbers, float epsilon) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number < smallest\
    \ - epsilon) {\n            smallest = number;\n        }\n        if(number >\
    \ largest + epsilon) {\n            largest = number;\n        }\n    }\n    \n\
    \    return Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers, float\
    \ epsilon, float delta) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number < smallest\
    \ - delta) {\n            smallest = number;\n        }\n        if(number > largest\
    \ + delta) {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(float, float) find_closest_elements(float[] numbers, float epsilon, float\
    \ delta, float gamma) \n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    \n    foreach(number in numbers) {\n        if(number < smallest\
    \ - gamma) {\n            smallest = number;\n        }\n        if(number > largest\
    \ + gamma) {\n            largest = number;\n        }\n    }\n    \n    return\
    \ Tuple!(smallest, largest);\n}\n/*\n From a supplied list of numbers (of length\
    \ at least two) select and return two that are the closest to each\n    other\
    \ and return them in order (smaller number, larger number).\n            \n*/\n\
    Tuple!(\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpady0l41m.d(13): Error: no identifier for declarator `number`

    /tmp/tmpady0l41m.d(13): Error: found `in` when expecting `;`

    /tmp/tmpady0l41m.d(34): Error: no identifier for declarator `number`

    /tmp/tmpady0l41m.d(34): Error: found `in` when expecting `;`

    /tmp/tmpady0l41m.d(55): Error: no identifier for declarator `number`

    /tmp/tmpady0l41m.d(55): Error: found `in` when expecting `;`

    /tmp/tmpady0l41m.d(76): Error: no identifier for declarator `number`

    /tmp/tmpady0l41m.d(76): Error: found `in` when expecting `;`

    /tmp/tmpady0l41m.d(93): Error: expression expected, not `unittest`

    /tmp/tmpady0l41m.d(94): Error: found `{` when expecting `)` following template
    argument list

    /tmp/tmpady0l41m.d(95): Error: no identifier for declarator `Tuple!0`

    /tmp/tmpady0l41m.d(97): Error: declaration expected, not `assert`

    /tmp/tmpady0l41m.d(98): Error: declaration expected, not `assert`

    /tmp/tmpady0l41m.d(99): Error: declaration expected, not `assert`

    /tmp/tmpady0l41m.d(100): Error: declaration expected, not `assert`

    /tmp/tmpa'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float smallest = numbers[0];\n\tfloat largest = numbers[0];\n\tfloat smallest_index\
    \ = -1;\n\tfloat largest_index = -1;\n\tfor (int i = 0; i < numbers.length; ++i)\n\
    \t{\n\t\tif (numbers[i] < smallest)\n\t\t{\n\t\t\tsmallest = numbers[i];\n\t\t\
    \tsmallest_index = i;\n\t\t}\n\t\tif (numbers[i] > largest)\n\t\t{\n\t\t\tlargest\
    \ = numbers[i];\n\t\t\tlargest_index = i;\n\t\t}\n\t}\n\treturn Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp6u37my26.d(27): Error: template instance `tmp6u37my26.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/t'
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\t\
    float min1, min2;\n\tfloat max1, max2;\n\tfloat diff1, diff2;\n\tfloat diff;\n\
    \tfloat temp;\n\tfloat temp2;\n\tfloat temp3;\n\tfloat temp4;\n\tfloat temp5;\n\
    \tfloat temp6;\n\tfloat temp7;\n\tfloat temp8;\n\tfloat temp9;\n\tfloat temp10;\n\
    \tfloat temp11;\n\tfloat temp12;\n\tfloat temp13;\n\tfloat temp14;\n\tfloat temp15;\n\
    \tfloat temp16;\n\tfloat temp17;\n\tfloat temp18;\n\tfloat temp19;\n\tfloat temp20;\n\
    \tfloat temp21;\n\tfloat temp22;\n\tfloat temp23;\n\tfloat temp24;\n\tfloat temp25;\n\
    \tfloat temp26;\n\tfloat temp27;\n\tfloat temp28;\n\tfloat temp29;\n\tfloat temp30;\n\
    \tfloat temp31;\n\tfloat temp32;\n\tfloat temp33;\n\tfloat temp34;\n\tfloat temp35;\n\
    \tfloat temp36;\n\tfloat temp37;\n\tfloat temp38;\n\tfloat temp39;\n\tfloat temp40;\n\
    \tfloat temp41;\n\tfloat temp42;\n\tfloat temp43;\n\tfloat temp44;\n\tfloat temp45;\n\
    \tfloat temp46;\n\tfloat temp47;\n\tfloat temp48;\n\tfloat temp49;\n\tfloat temp50;\n\
    \tfloat temp51;\n\tfloat temp52;\n\tfloat temp53;\n\tfloat temp54;\n\tfloat temp55;\n\
    \tfloat temp56;\n\tfloat temp57;\n\tfloat temp58;\n\tfloat temp59;\n\tfloat temp60;\n\
    \tfloat temp61;\n\tfloat temp62;\n\tfloat temp63;\n\tfloat temp64;\n\tfloat temp65;\n\
    \tfloat temp66;\n\tfloat temp67;\n\tfloat temp68;\n\tfloat temp69;\n\tfloat temp70;\n\
    \tfloat temp71;\n\tfloat temp72;\n\tfloat temp73;\n\tfloat temp74;\n\tfloat temp75;\n\
    \tfloat temp76;\n\tfloat temp77;\n\tfloat temp78;\n\tfloat temp79;\n\tfloat temp80;\n\
    \tfloat temp81;\n\tfloat temp82;\n\tfloat temp83;\n\tfloat temp84;\n\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph7i4ixmu.d(99): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7i4ixmu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164427
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n       \
    \     \n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n{\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    float\
    \ smallest_index = -1;\n    float largest_index = -1;\n    for(int i = 1; i <\
    \ numbers.length; ++i)\n    {\n        if(numbers[i] < smallest)\n        {\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        else if(numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return Tuple!(smallest,\
    \ largest);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `smallest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(smallest, largest)` cannot use local `largest`
    as parameter to non-global template `parseSpecs(Specs...)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`

    /tmp/tmp05jsu6xw.d(27): Error: template instance `tmp05jsu6xw.find_closest_elements.Tuple!(smallest,
    largest)` error instantiating

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05jsu6xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164426
