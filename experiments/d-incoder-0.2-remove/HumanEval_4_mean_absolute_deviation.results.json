{
  "language": "d",
  "name": "HumanEval_4_mean_absolute_deviation",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - median) * (number - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mode) * (number - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - median) * (number - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    foreach\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps7bg_ckx.d(15): Error: found `in` when expecting `;`\n/tmp/tmps7bg_ckx.d(33): Error: found `in` when expecting `;`\n/tmp/tmps7bg_ckx.d(51): Error: found `in` when expecting `;`\n/tmp/tmps7bg_ckx.d(69): Error: found `in` when expecting `;`\n/tmp/tmps7bg_ckx.d(88): Error: found `unittest` when expecting `(`\n/tmp/tmps7bg_ckx.d(89): Error: basic type expected, not `{`\n/tmp/tmps7bg_ckx.d(89): Error: no identifier for declarator `_error_`\n/tmp/tmps7bg_ckx.d(89): Error: found `{` when expecting `;`\n/tmp/tmps7bg_ckx.d(90): Error: expression expected, not `alias`\n/tmp/tmps7bg_ckx.d(90): Error: found `candidate` when expecting `)`\n/tmp/tmps7bg_ckx.d(90): Error: found `=` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps7bg_ckx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += abs(numbers[i] - mean);\n    }\n    return deviation / numbers.length;\n}\n</code>\n<|/ a tags=c++,algorithm,c |>\n<| c |>\nThis code is not correct. `sum` should be initialized to `0` before the loop, and `deviation` should be initialized to `0` before the loop. Otherwise the average is wrong.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the code.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpye2f8wct.d(27): Error: declaration expected, not `<`\n/tmp/tmpye2f8wct.d(33): Error: unterminated character constant\n/tmp/tmpye2f8wct.d(44): Error: declaration expected, not `assert`\n/tmp/tmpye2f8wct.d(45): Error: declaration expected, not `assert`\n/tmp/tmpye2f8wct.d(46): Error: declaration expected, not `assert`\n/tmp/tmpye2f8wct.d(47): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpye2f8wct.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    \n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    \n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=c#,math,statistics |>\n<| c |>\nThe code does not compile. `std.mean` does not exist. `std.math` does not exist. `std.typecons` does not exist. `foreach` does not exist. `float` does not exist. `float[] numbers` does not exist. `sum` does not exist. `numbers.length` does not exist. `number` does not exist. `numbers - mean` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `number * number` does not exist. `\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1b9gq03h.d(16): Error: found `in` when expecting `;`\n/tmp/tmp1b9gq03h.d(23): Error: declaration expected, not `<`\n/tmp/tmp1b9gq03h.d(26): Error: unterminated string constant starting at /tmp/tmp1b9gq03h.d(26)\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1b9gq03h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nimport std.stdio;\nimport std.array;\nimport std.conv;\nimport std.algorithm;\nimport std.math;\nimport std.typecons;\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqxmb152.d(15): Error: found `in` when expecting `;`\n/tmp/tmpaqxmb152.d(21): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqxmb152.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float sumSquares2 = 0;\n    float sumSquares3 = 0;\n    float sumSquares4 = 0;\n    float sumSquares5 = 0;\n    float sumSquares6 = 0;\n    float sumSquares7 = 0;\n    float sumSquares8 = 0;\n    float sumSquares9 = 0;\n    float sumSquares10 = 0;\n    float sumSquares11 = 0;\n    float sumSquares12 = 0;\n    float sumSquares13 = 0;\n    float sumSquares14 = 0;\n    float sumSquares15 = 0;\n    float sumSquares16 = 0;\n    float sumSquares17 = 0;\n    float sumSquares18 = 0;\n    float sumSquares19 = 0;\n    float sumSquares20 = 0;\n    float sumSquares21 = 0;\n    float sumSquares22 = 0;\n    float sumSquares23 = 0;\n    float sumSquares24 = 0;\n    float sumSquares25 = 0;\n    float sumSquares26 = 0;\n    float sumSquares27 = 0;\n    float sumSquares28 = 0;\n    float sumSquares29 = 0;\n    float sumSquares30 = 0;\n    float sumSquares31 = 0;\n    float sumSquares32 = 0;\n    float sumSquares33 = 0;\n    float sumSquares34 = 0;\n    float sumSquares35 = 0;\n    float sumSquares36 = 0;\n    float sumSquares37 = 0;\n    float sumSquares38 = 0;\n    float sumSquares39 = 0;\n    float sumSquares40 = 0;\n    float sumSquares41 = 0;\n    float sumSquares42 = 0;\n    float sumSquares43 = 0;\n    float sumSquares44 = 0;\n    float sumSquares45 = 0;\n    float sumSquares46 = 0;\n    float sumSquares47 = 0;\n    float sumSquares48 = 0;\n    float sumSquares49 = 0;\n    float sumSquares50 = 0;\n    float sumSquares51 = 0;\n    float sumSquares52 = 0;\n    float sumSquares53 = 0;\n    float sumSquares54 = 0;\n    float sumSquares55 = 0;\n    float sumSquares56 = 0;\n    float sumSquares57 = 0;\n    float sumSquares58 = 0;\n    float sumSquares59 = 0;\n    float sumSquares60 = 0;\n    float sumSquares61 = 0;\n    float sumSquares62 = 0;\n    float sumSqu\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8prlt_lp.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmp8prlt_lp.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8prlt_lp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float n in numbers)\n    {\n        sum += (n - mean) * (n - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4dzy_bzn.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dzy_bzn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        float diff = numbers[i] - mean;\n        sum += diff * diff;\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3nywhqf9.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nywhqf9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        sumSquares += number * number;\n    }\n    \n    deviation = sumSquares / numbers.length;\n    mean = sum / numbers.length;\n    \n    return deviation - mean;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqdg9ss38.d(18): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqdg9ss38.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| a dscore=1 |>\n<code>\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| a tags=c++,algorithm,math |>\n<code>\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n<| a tags=c++,algorithm,math |>\n<code>\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcu6kaimo.d(15): Error: found `in` when expecting `;`\n/tmp/tmpcu6kaimo.d(21): Error: declaration expected, not `<`\n/tmp/tmpcu6kaimo.d(29): Error: declaration expected, not `foreach`\n/tmp/tmpcu6kaimo.d(32): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcu6kaimo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        float diff = numbers[i] - mean;\n        sum += diff * diff;\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3nywhqf9.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nywhqf9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum2 = 0;\n    float mean2 = 0;\n    float deviation2 = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum2 += Math.pow(numbers[i] - mean, 2);\n    }\n    mean2 = sum2 / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += Math.pow(numbers[i] - mean, 2);\n    }\n    deviation = deviation / numbers.length;\n    \n    deviation2 = Math.pow(deviation, 2);\n    \n    return deviation2 / (numbers.length - 1);\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int size) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum2 = 0;\n    float mean2 = 0;\n    float deviation2 = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / size;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum2 += Math.pow(numbers[i] - mean, 2);\n    }\n    mean2 = sum2 / size;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += Math.pow(numbers[i] - mean, 2);\n    }\n    deviation = deviation / size;\n    \n    deviation2 = Math.pow(deviation, 2);\n    \n    return deviation2 / (size - 1);\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int size, int stride) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum2 = 0;\n    float mean2 = 0;\n    float deviation2 = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / size;\n    \n    \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqd93hjly.d(105): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqd93hjly.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float n in numbers)\n    {\n        sum += (n - mean) * (n - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach(float n in numbers)\n    {\n        sum += (n - median) * (n - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    foreach(float n in numbers)\n    {\n        sum += (n - mode) * (n - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float n in numbers)\n    {\n        sum += (n - mean) * (n - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach(float n in numbers)\n    {\n        sum += (n - \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbg750q1l.d(15): Error: found `in` when expecting `;`\n/tmp/tmpbg750q1l.d(33): Error: found `in` when expecting `;`\n/tmp/tmpbg750q1l.d(51): Error: found `in` when expecting `;`\n/tmp/tmpbg750q1l.d(69): Error: found `in` when expecting `;`\n/tmp/tmpbg750q1l.d(87): Error: found `in` when expecting `;`\n/tmp/tmpbg750q1l.d(90): Error: expression expected, not `unittest`\n/tmp/tmpbg750q1l.d(89): Error: found `{` when expecting `)`\n/tmp/tmpbg750q1l.d(92): Error: found `alias` when expecting `;` following statement\n/tmp/tmpbg750q1l.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbg750q1l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(float number : numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(float number : numbers)\n    {\n        sum += (number - median) * (number - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(float number : numbers)\n    {\n        sum += (number - mode) * (number - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the standard deviation of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (standard deviation in this case):\n    MAD = average | x - x_std |\n        \n*/\nfloat standard_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(float number : numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return std.sqrt(sum / numbers.length);\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the variance of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (variance in this case):\n    MAD = average | x - x_var |\n        \n*/\nfloat variance(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(float number : numbers)\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdre2uno9.d(15): Error: semicolon expected, not `:`\n/tmp/tmpdre2uno9.d(15): Error: expression expected, not `:`\n/tmp/tmpdre2uno9.d(15): Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpdre2uno9.d(33): Error: semicolon expected, not `:`\n/tmp/tmpdre2uno9.d(33): Error: expression expected, not `:`\n/tmp/tmpdre2uno9.d(33): Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpdre2uno9.d(51): Error: semicolon expected, not `:`\n/tmp/tmpdre2uno9.d(51): Error: expression expected, not `:`\n/tmp/tmpdre2uno9.d(51): Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpdre2uno9.d(69): Error: semicolon expected, not `:`\n/tmp/tmpdre2uno9.d(69): Error: expression expected, not `:`\n/tmp/tmpdre2uno9.d(69): Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpdre2uno9.d(87): Error: semicolon expected, not `:`\n/tmp/tmpdre2uno9.d(87): Error: expression expected, not `:`\n/tmp/tmpdre2uno9.d(87): Error: found `numbers` when expecting",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        sumSquares += number * number;\n    }\n    \n    float average = sum / numbers.length;\n    float averageSquares = sumSquares / numbers.length;\n    \n    return average - averageSquares;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuo2_dan1.d(17): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuo2_dan1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        float diff = numbers[i] - mean;\n        sum += diff * diff;\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3nywhqf9.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nywhqf9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgd_9j_r.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpdgd_9j_r.__unittest_L27_C1() [0x427fa0]\n??:? void tmpdgd_9j_r.__modtest() [0x4280c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b202]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430395]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430844]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430321]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]\n??:? runModuleUnitTests [0x42c145]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumOfSquares = 0;\n    float count = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        count++;\n    }\n    mean = sum / count;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sumOfSquares += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return sumOfSquares / count;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph3hhbd05.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42834d]\n??:? void tmph3hhbd05.__unittest_L29_C1() [0x427fa8]\n??:? void tmph3hhbd05.__modtest() [0x4280d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c377]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b20a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43039d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43084c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430329]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e1]\n??:? runModuleUnitTests [0x42c14d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428810]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float deviation = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxa9c5h3p.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42835d]\n??:? void tmpxa9c5h3p.__unittest_L31_C1() [0x427fb4]\n??:? void tmpxa9c5h3p.__modtest() [0x4280dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428820]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float sumSquares = 0;\n    float mean = 0;\n    float meanSquare = 0;\n    float deviation = 0;\n    float deviationSquare = 0;\n    float deviationMean = 0;\n    float deviationMeanSquare = 0;\n    float deviationSum = 0;\n    float deviationSumSquares = 0;\n    float deviationSquareSum = 0;\n    float deviationMeanSquareSum = 0;\n    float deviationSumSquareSum = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\n    float deviationMeanSquareSumSquare = 0;\n    float deviationSumSquareSumSquare = 0;\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiipjre7u.d(68): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiipjre7u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float deviation2 = 0;\n    float deviation3 = 0;\n    float deviation4 = 0;\n    float deviation5 = 0;\n    float deviation6 = 0;\n    float deviation7 = 0;\n    float deviation8 = 0;\n    float deviation9 = 0;\n    float deviation10 = 0;\n    float deviation11 = 0;\n    float deviation12 = 0;\n    float deviation13 = 0;\n    float deviation14 = 0;\n    float deviation15 = 0;\n    float deviation16 = 0;\n    float deviation17 = 0;\n    float deviation18 = 0;\n    float deviation19 = 0;\n    float deviation20 = 0;\n    float deviation21 = 0;\n    float deviation22 = 0;\n    float deviation23 = 0;\n    float deviation24 = 0;\n    float deviation25 = 0;\n    float deviation26 = 0;\n    float deviation27 = 0;\n    float deviation28 = 0;\n    float deviation29 = 0;\n    float deviation30 = 0;\n    float deviation31 = 0;\n    float deviation32 = 0;\n    float deviation33 = 0;\n    float deviation34 = 0;\n    float deviation35 = 0;\n    float deviation36 = 0;\n    float deviation37 = 0;\n    float deviation38 = 0;\n    float deviation39 = 0;\n    float deviation40 = 0;\n    float deviation41 = 0;\n    float deviation42 = 0;\n    float deviation43 = 0;\n    float deviation44 = 0;\n    float deviation45 = 0;\n    float deviation46 = 0;\n    float deviation47 = 0;\n    float deviation48 = 0;\n    float deviation49 = 0;\n    float deviation50 = 0;\n    float deviation51 = 0;\n    float deviation52 = 0;\n    float deviation53 = 0;\n    float deviation54 = 0;\n    float deviation55 = 0;\n    float deviation56 = 0;\n    float deviation57 = 0;\n    float deviation58 = 0;\n    float deviation59 = 0;\n    float deviation60 = 0;\n    float deviation61 = 0;\n    float deviation62 = 0;\n    float deviation63 = 0;\n    float deviation64 = 0;\n    float deviation65 = 0;\n    float deviation66 = 0;\n    float deviation67 = 0;\n    float deviation68 = 0;\n    float deviation69 = 0;\n    float deviation70 = 0;\n    float deviation71 = 0;\n    float deviation72 = 0;\n    \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfyehb_f7.d(88): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfyehb_f7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum_squares = 0;\n    float sum_of_squares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        sum_squares += numbers[i] * numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n        sum_of_squares += numbers[i] * numbers[i];\n    }\n    deviation = deviation / numbers.length;\n    \n    return sqrt(sum_squares - sum_of_squares * deviation);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp97w76i8a.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428435]\n??:? void tmp97w76i8a.__unittest_L35_C1() [0x428090]\n??:? void tmp97w76i8a.__modtest() [0x4281b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c45f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430485]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430934]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430411]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]\n??:? runModuleUnitTests [0x42c235]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqj9a5c2d.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqj9a5c2d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp84bz2ih0.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp84bz2ih0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpawnwudd8.d(90): Error: expression expected, not `unittest`\n/tmp/tmpawnwudd8.d(91): Error: found `{` when expecting `,`\n/tmp/tmpawnwudd8.d(92): Error: expression expected, not `alias`\n/tmp/tmpawnwudd8.d(92): Error: found `candidate` when expecting `,`\n/tmp/tmpawnwudd8.d(92): Error: expression expected, not `=`\n/tmp/tmpawnwudd8.d(92): Error: found `mean_absolute_deviation` when expecting `,`\n/tmp/tmpawnwudd8.d(92): Error: expression expected, not `;`\n/tmp/tmpawnwudd8.d(94): Error: found `assert` when expecting `,`\n/tmp/tmpawnwudd8.d(94): Error: found `;` when expecting `,`\n/tmp/tmpawnwudd8.d(95): Error: found `;` when expecting `,`\n/tmp/tmpawnwudd8.d(96): Error: found `;` when expecting `,`\n/tmp/tmpawnwudd8.d(97): Error: expression expected, not `}`\n/tmp/tmpawnwudd8.d(98): Error: found `void` when expecting `,`\n/tmp/tmpawnwudd8.d(98): Error: found `{` when expecting `,`\n/tmp/tmpawnwudd8.d(98): Error: expression expected, not `}`\n/tmp/tmpawnwudd8.d(98): Error: found `End of File` when expecting `,`\n/tmp/",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += Math.pow(numbers[i] - mean, 2);\n    }\n    return deviation / numbers.length;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the answer. Can you please explain how this works? What does it mean to calculate the mean and deviation? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation for each number? What does it mean to calculate the mean and deviation \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7asj_e9q.d(27): Error: declaration expected, not `<`\n/tmp/tmp7asj_e9q.d(35): Error: declaration expected, not `assert`\n/tmp/tmp7asj_e9q.d(36): Error: declaration expected, not `assert`\n/tmp/tmp7asj_e9q.d(37): Error: declaration expected, not `assert`\n/tmp/tmp7asj_e9q.d(38): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7asj_e9q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n    }\n    \n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        float diff = number - mean;\n        sum += diff * diff;\n    }\n    \n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbfrdjdmy.d(16): Error: found `in` when expecting `;`\n/tmp/tmpbfrdjdmy.d(23): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbfrdjdmy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float meanSquares = 0;\n    float deviationSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        meanSquares += number * number;\n    }\n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviationSquares += (number - mean) * (number - mean);\n    }\n    deviation = sqrt(deviationSquares);\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0cy7j3uh.d(20): Error: found `in` when expecting `;`\n/tmp/tmp0cy7j3uh.d(27): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cy7j3uh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n    }\n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += abs(number - mean);\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,algorithm,statistics |>\n<code>\npublic static float MeanAbsoluteDeviation(float[] numbers)\n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n    }\n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += Math.Abs(number - mean);\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static float MeanAbsoluteDeviation(float[] numbers)\n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n    }\n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += Math.Abs(number - mean);\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\n</code>\n<|/ a tags=c#,algorithm,statistics |>\n<| a tags=c#,algorithm,statistics |>\n<code>\npublic static float MeanAbsoluteDeviation(float[] numbers)\n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n    }\n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += Math.Abs(number - mean);\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,algorithm,statistics |>\n<code>\npublic static float MeanAbsoluteDeviation(float[] numbers)\n{\n    float sum = 0;\n    float mean\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyts0n864.d(17): Error: found `in` when expecting `;`\n/tmp/tmpyts0n864.d(23): Error: found `in` when expecting `;`\n/tmp/tmpyts0n864.d(31): Error: declaration expected, not `<`\n/tmp/tmpyts0n864.d(41): Error: declaration expected, not `foreach`\n/tmp/tmpyts0n864.d(44): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyts0n864.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += Math.pow(numbers[i] - mean, 2);\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcu_9apdg.d(24): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcu_9apdg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThe best way to calculate mean absolute deviation is to subtract the mean from each element and sum them up:\n<code>\ndef mad(numbers):\n    sum = 0\n    for n in numbers:\n        sum += abs(n - mean)\n    return sum / len(numbers)\n</code>\n<|/ a tags=math,python |>\n<| a tags=math,python |>\n<code>\ndef mad(numbers):\n    sum = 0\n    for n in numbers:\n        sum += abs(n - mean)\n    return sum / len(numbers)\n</code>\n<|/ a dscore=1 |>\n<| a tags=math,python |>\n<code>\ndef mad(numbers):\n    sum = 0\n    for n in numbers:\n        sum += abs(n - mean)\n    return sum / len(numbers)\n</code>\n<|/ a dscore=1 |>\n<| a tags=math,python |>\n<code>\ndef mad(numbers):\n    sum = 0\n    for n in numbers:\n        sum += abs(n - mean)\n    return sum / len(numbers)\n</code>\n<|/ a dscore=1 |>\n<| a tags=math,python |>\n<code>\ndef mad(numbers):\n    sum = 0\n    for n in numbers:\n        sum += abs(n - mean)\n    return sum / len(numbers)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef mad(numbers):\n    sum = 0\n    for n in numbers:\n        sum += abs(n - mean)\n    return sum / len(numbers)\n</code>\n<|/ a tags=math,python |>\n<| a dscore=1 |>\n<code>\ndef mad(numbers):\n    sum = 0\n    for n in numbers:\n        sum += abs(n - mean)\n    return sum / len(numbers)\n</code>\n<|/ a tags=math,python |>\n<| a dscore=1 |>\n<code>\ndef mad(numbers):\n    sum = 0\n    for n in numbers:\n        sum += abs(n - mean)\n    return sum / len(numbers)\n</code>\n<|/ a tags=math,python |>\n<| a tags=math,python |>\n<code>\ndef mad(numbers):\n    sum = 0\n    for n in numbers:\n        sum += abs(n - mean)\n    return sum / len(\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyr8peddw.d(21): Error: declaration expected, not `<`\n/tmp/tmpyr8peddw.d(107): Error: declaration expected, not `assert`\n/tmp/tmpyr8peddw.d(108): Error: declaration expected, not `assert`\n/tmp/tmpyr8peddw.d(109): Error: declaration expected, not `assert`\n/tmp/tmpyr8peddw.d(110): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyr8peddw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += Math.pow(numbers[i] - mean, 2);\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    median = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += Math.pow(numbers[i] - median, 2);\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float mode = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mode = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += Math.pow(numbers[i] - mode, 2);\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    median = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += Math.pow(numbers[i] - median, 2);\n    }\n    return deviation / \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplyqp_fdt.d(98): Error: expression expected, not `unittest`\n/tmp/tmplyqp_fdt.d(99): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplyqp_fdt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a |>\n<| c |>\nThe `std.mean` function doesn't exist in D2.\n<|/ c |>\n<| c |>\nIt does exist in D2.\n<|/ c |>\n<| c |>\nIt does exist in D2.\n<|/ c |>\n<| a |>\nI wrote this in F# and it's working great:\n<code>\nlet mad xs = \n    let mean = List.fold (fun x y -> x + y) 0 xs\n    let sumOfDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfSquaredDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfSquaredDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfSquaredDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfSquaredDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfSquaredDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfSquaredDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfSquaredDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfSquaredDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfSquaredDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sumOfSquaredDifferences = List.fold (fun x y -> x + y) 0 xs\n    let sum\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9o0pifep.d(15): Error: found `in` when expecting `;`\n/tmp/tmp9o0pifep.d(21): Error: declaration expected, not `<`\n/tmp/tmp9o0pifep.d(24): Error: unterminated character constant\n/tmp/tmp9o0pifep.d(33): Error: unterminated character constant\n/tmp/tmp9o0pifep.d(62): Error: declaration expected, not `assert`\n/tmp/tmp9o0pifep.d(63): Error: declaration expected, not `assert`\n/tmp/tmp9o0pifep.d(64): Error: declaration expected, not `assert`\n/tmp/tmp9o0pifep.d(65): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9o0pifep.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaob2b8wn.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaob2b8wn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float sum2 = 0;\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum2 += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return sum2 / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbhqdf1w0.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmpbhqdf1w0.__unittest_L27_C1() [0x427fe4]\n??:? void tmpbhqdf1w0.__modtest() [0x42810c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b24a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303dd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43088c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430369]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b221]\n??:? runModuleUnitTests [0x42c18d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float sumOfSquares = 0;\n    float mean = 0;\n    float meanOfSquares = 0;\n    float deviation = 0;\n    float deviationOfSquares = 0;\n    float deviationOfMeanSquares = 0;\n    float deviationOfMean = 0;\n    float deviationOfMeanSquareOfSquares = 0;\n    float deviationOfMeanSquareOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfSquares = 0;\n    float deviationOfMeanSquareOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfSquares = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfSquares = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfSquares = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfSquares = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMeanOfSquares = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMeanOfSquares = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    float deviationOfMeanSquareOfMeanOfMeanOfMeanOfMeanOfMean = 0;\n    \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi2i6vnse.d(48): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi2i6vnse.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        sumSquares += number * number;\n    }\n    \n    mean = sum / numbers.length;\n    \n    return sumSquares / numbers.length - mean * mean;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpayhn848x.d(17): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpayhn848x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    median = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - median;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float mode = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mode = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mode;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    median = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - median;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprhiy6wez.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhiy6wez.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float mad = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        mad = mad + abs(numbers[i] - mean);\n    }\n    mad = mad/numbers.length;\n    \n    return mad;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code does not work. `numbers` should be `float[]` not `int[]`\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you please elaborate on what is not working?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you please elaborate on what is not working?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you please elaborate on what is not working?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you please elaborate on what is not working?\n<|/ c |>\n<| a tags=c++,arrays,algorithm |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpibileakx.d(31): Error: declaration expected, not `<`\n/tmp/tmpibileakx.d(59): Error: declaration expected, not `assert`\n/tmp/tmpibileakx.d(60): Error: declaration expected, not `assert`\n/tmp/tmpibileakx.d(61): Error: declaration expected, not `assert`\n/tmp/tmpibileakx.d(62): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpibileakx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpb3xp_zkg.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42835d]\n??:? void tmpb3xp_zkg.__unittest_L31_C1() [0x427fb4]\n??:? void tmpb3xp_zkg.__modtest() [0x4280dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428820]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    median = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - median;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float mode = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mode = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mode;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    median = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - median;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprhiy6wez.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhiy6wez.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float x in numbers)\n    {\n        sum += (x - mean) * (x - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvfy2imgn.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvfy2imgn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqgr2bz14.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42835d]\n??:? void tmpqgr2bz14.__unittest_L31_C1() [0x427fb4]\n??:? void tmpqgr2bz14.__modtest() [0x4280dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428820]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum_squares = 0;\n    float mean_squares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        mean_squares += number * number;\n    }\n    mean_squares = mean_squares / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += abs(number - mean);\n        sum_squares += (number - mean) * (number - mean);\n    }\n    deviation = deviation / numbers.length;\n    \n    return sqrt(sum_squares / numbers.length - mean_squares * deviation);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzeslyh4t.d(19): Error: found `in` when expecting `;`\n/tmp/tmpzeslyh4t.d(26): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzeslyh4t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n    }\n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        sumSquares += (number - mean) * (number - mean);\n    }\n    deviation = sqrt(sumSquares / numbers.length);\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplcpito_e.d(18): Error: found `in` when expecting `;`\n/tmp/tmplcpito_e.d(24): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplcpito_e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,statistics,math,algorithm |>\nI wrote a C# library for calculating mean absolute deviation from mean for floats and doubles.\nIt also has some basic statistical functions like mean, median, variance, standard deviation, correlation, skewness, kurtosis, etc.\nhttps://github.com/jamesmontemagno/MathNet.Numerics\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI wrote a C# library for calculating mean absolute deviation from mean for floats and doubles.\nIt also has some basic statistical functions like mean, median, variance, standard deviation, correlation, skewness, kurtosis, etc.\nhttps://github.com/jamesmontemagno/MathNet.Numerics\n<|/ a tags=c#,statistics,math,algorithm |>\n<| a tags=c#,statistics,math,algorithm |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ozjsldc.d(15): Error: found `in` when expecting `;`\n/tmp/tmp7ozjsldc.d(21): Error: declaration expected, not `<`\n/tmp/tmp7ozjsldc.d(36): Error: semicolon expected, not `.`\n/tmp/tmp7ozjsldc.d(36): Error: no identifier for declarator `.Collections.Generic`\n/tmp/tmp7ozjsldc.d(37): Error: semicolon expected, not `.`\n/tmp/tmp7ozjsldc.d(37): Error: no identifier for declarator `.Linq`\n/tmp/tmp7ozjsldc.d(38): Error: semicolon expected, not `.`\n/tmp/tmp7ozjsldc.d(38): Error: no identifier for declarator `.Text`\n/tmp/tmp7ozjsldc.d(39): Error: semicolon expected, not `.`\n/tmp/tmp7ozjsldc.d(39): Error: no identifier for declarator `.Threading.Tasks`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ozjsldc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - mode);\n    }\n    return sum\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8qn5h3wd.d(92): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmp8qn5h3wd.d(100): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qn5h3wd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float x = 0;\n    float x_mean = 0;\n    float y = 0;\n    float y_mean = 0;\n    float z = 0;\n    float z_mean = 0;\n    float xdiff = 0;\n    float ydiff = 0;\n    float zdiff = 0;\n    float xdiff2 = 0;\n    float ydiff2 = 0;\n    float zdiff2 = 0;\n    float xdiff3 = 0;\n    float ydiff3 = 0;\n    float zdiff3 = 0;\n    float xdiff4 = 0;\n    float ydiff4 = 0;\n    float zdiff4 = 0;\n    float xdiff5 = 0;\n    float ydiff5 = 0;\n    float zdiff5 = 0;\n    float xdiff6 = 0;\n    float ydiff6 = 0;\n    float zdiff6 = 0;\n    float xdiff7 = 0;\n    float ydiff7 = 0;\n    float zdiff7 = 0;\n    float xdiff8 = 0;\n    float ydiff8 = 0;\n    float zdiff8 = 0;\n    float xdiff9 = 0;\n    float ydiff9 = 0;\n    float zdiff9 = 0;\n    float xdiff10 = 0;\n    float ydiff10 = 0;\n    float zdiff10 = 0;\n    float xdiff11 = 0;\n    float ydiff11 = 0;\n    float zdiff11 = 0;\n    float xdiff12 = 0;\n    float ydiff12 = 0;\n    float zdiff12 = 0;\n    float xdiff13 = 0;\n    float ydiff13 = 0;\n    float zdiff13 = 0;\n    float xdiff14 = 0;\n    float ydiff14 = 0;\n    float zdiff14 = 0;\n    float xdiff15 = 0;\n    float ydiff15 = 0;\n    float zdiff15 = 0;\n    float xdiff16 = 0;\n    float ydiff16 = 0;\n    float zdiff16 = 0;\n    float xdiff17 = 0;\n    float ydiff17 = 0;\n    float zdiff17 = 0;\n    float xdiff18 = 0;\n    float ydiff18 = 0;\n    float zdiff18 = 0;\n    float xdiff19 = 0;\n    float ydiff19 = 0;\n    float zdiff19 = 0;\n    float xdiff20 = 0;\n    float ydiff20 = 0;\n    float zdiff20 = 0;\n    float xdiff21 = 0;\n    float ydiff21 = 0;\n    float zdiff21 = 0;\n    float xdiff22 = 0;\n    float ydiff22 = 0;\n    float zdiff22 = 0;\n    float xdiff23 = 0;\n    float ydiff23 = 0;\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf9iuugjr.d(91): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf9iuugjr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaob2b8wn.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaob2b8wn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach (float number in numbers) {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach (float number in numbers) {\n        sum += (number - median) * (number - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    foreach (float number in numbers) {\n        sum += (number - mode) * (number - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach (float number in numbers) {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach (float number in numbers) {\n        sum += (number - median\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpid2g1oy5.d(15): Error: found `in` when expecting `;`\n/tmp/tmpid2g1oy5.d(32): Error: found `in` when expecting `;`\n/tmp/tmpid2g1oy5.d(49): Error: found `in` when expecting `;`\n/tmp/tmpid2g1oy5.d(66): Error: found `in` when expecting `;`\n/tmp/tmpid2g1oy5.d(83): Error: found `in` when expecting `;`\n/tmp/tmpid2g1oy5.d(84): Error: found `unittest` when expecting `)`\n/tmp/tmpid2g1oy5.d(86): Error: found `{` when expecting `;` following statement\n/tmp/tmpid2g1oy5.d(93): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpid2g1oy5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=c++,algorithm,statistics,c |>\n<| c |>\nThe `std.mean` function doesn't exist in C++. Did you mean `std::mean`?\n<|/ c |>\n<| c |>\nYes, I meant std::mean. Thanks for pointing that out.\n<|/ c |>\n<| a tags=c++,algorithm,statistics,c |>\nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. So the mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of numbers is simply the sum of the numbers divided by the number of numbers. \nThe mean of a set of \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgo9m87l6.d(15): Error: found `in` when expecting `;`\n/tmp/tmpgo9m87l6.d(21): Error: declaration expected, not `<`\n/tmp/tmpgo9m87l6.d(24): Error: unterminated character constant\n/tmp/tmpgo9m87l6.d(56): Error: declaration expected, not `assert`\n/tmp/tmpgo9m87l6.d(57): Error: declaration expected, not `assert`\n/tmp/tmpgo9m87l6.d(58): Error: declaration expected, not `assert`\n/tmp/tmpgo9m87l6.d(59): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgo9m87l6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach (float number in numbers) {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,.net,algorithm,math,statistics |>\nI wrote a C# implementation that uses LINQ and is very fast (O(n)):\n<code>\npublic static double MeanAbsoluteDeviation(IEnumerable<double> values)\n{\n    if (values == null)\n        throw new ArgumentNullException(\"values\");\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgoyhzjaw.d(15): Error: found `in` when expecting `;`\n/tmp/tmpgoyhzjaw.d(20): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgoyhzjaw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - median) * (number - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mode) * (number - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int k) \n{\n    float sum = 0;\n    float mean = std.mean(numbers, k);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers, int k) \n{\n    float sum = 0;\n    float median = st\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprqlp4nrg.d(15): Error: found `in` when expecting `;`\n/tmp/tmprqlp4nrg.d(33): Error: found `in` when expecting `;`\n/tmp/tmprqlp4nrg.d(51): Error: found `in` when expecting `;`\n/tmp/tmprqlp4nrg.d(69): Error: found `in` when expecting `;`\n/tmp/tmprqlp4nrg.d(87): Error: semicolon expected, not `unittest`\n/tmp/tmprqlp4nrg.d(87): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqlp4nrg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float sumSquares2 = 0;\n    float sumSquares3 = 0;\n    float sumSquares4 = 0;\n    float sumSquares5 = 0;\n    float sumSquares6 = 0;\n    float sumSquares7 = 0;\n    float sumSquares8 = 0;\n    float sumSquares9 = 0;\n    float sumSquares10 = 0;\n    float sumSquares11 = 0;\n    float sumSquares12 = 0;\n    float sumSquares13 = 0;\n    float sumSquares14 = 0;\n    float sumSquares15 = 0;\n    float sumSquares16 = 0;\n    float sumSquares17 = 0;\n    float sumSquares18 = 0;\n    float sumSquares19 = 0;\n    float sumSquares20 = 0;\n    float sumSquares21 = 0;\n    float sumSquares22 = 0;\n    float sumSquares23 = 0;\n    float sumSquares24 = 0;\n    float sumSquares25 = 0;\n    float sumSquares26 = 0;\n    float sumSquares27 = 0;\n    float sumSquares28 = 0;\n    float sumSquares29 = 0;\n    float sumSquares30 = 0;\n    float sumSquares31 = 0;\n    float sumSquares32 = 0;\n    float sumSquares33 = 0;\n    float sumSquares34 = 0;\n    float sumSquares35 = 0;\n    float sumSquares36 = 0;\n    float sumSquares37 = 0;\n    float sumSquares38 = 0;\n    float sumSquares39 = 0;\n    float sumSquares40 = 0;\n    float sumSquares41 = 0;\n    float sumSquares42 = 0;\n    float sumSquares43 = 0;\n    float sumSquares44 = 0;\n    float sumSquares45 = 0;\n    float sumSquares46 = 0;\n    float sumSquares47 = 0;\n    float sumSquares48 = 0;\n    float sumSquares49 = 0;\n    float sumSquares50 = 0;\n    float sumSquares51 = 0;\n    float sumSquares52 = 0;\n    float sumSquares53 = 0;\n    float sumSquares54 = 0;\n    float sumSquares55 = 0;\n    float sumSquares56 = 0;\n    float sumSquares57 = 0;\n    float sumSquares58 = 0;\n    float sumSquares59 = 0;\n    float sumSquares60 = 0;\n    float sumSquares61 = 0;\n    float sumSquares62 = 0;\n    float sumSqu\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8prlt_lp.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmp8prlt_lp.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8prlt_lp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    \n    for (int i = 0; i < numbers.length; ++i)\n    {\n        sum += std.abs(numbers[i] - mean);\n    }\n    \n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps8nrj5x9.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\n/tmp/tmps8nrj5x9.d(18): Error: undefined identifier `abs` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps8nrj5x9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float sumSquares2 = 0;\n    float sumSquares3 = 0;\n    float sumSquares4 = 0;\n    float sumSquares5 = 0;\n    float sumSquares6 = 0;\n    float sumSquares7 = 0;\n    float sumSquares8 = 0;\n    float sumSquares9 = 0;\n    float sumSquares10 = 0;\n    float sumSquares11 = 0;\n    float sumSquares12 = 0;\n    float sumSquares13 = 0;\n    float sumSquares14 = 0;\n    float sumSquares15 = 0;\n    float sumSquares16 = 0;\n    float sumSquares17 = 0;\n    float sumSquares18 = 0;\n    float sumSquares19 = 0;\n    float sumSquares20 = 0;\n    float sumSquares21 = 0;\n    float sumSquares22 = 0;\n    float sumSquares23 = 0;\n    float sumSquares24 = 0;\n    float sumSquares25 = 0;\n    float sumSquares26 = 0;\n    float sumSquares27 = 0;\n    float sumSquares28 = 0;\n    float sumSquares29 = 0;\n    float sumSquares30 = 0;\n    float sumSquares31 = 0;\n    float sumSquares32 = 0;\n    float sumSquares33 = 0;\n    float sumSquares34 = 0;\n    float sumSquares35 = 0;\n    float sumSquares36 = 0;\n    float sumSquares37 = 0;\n    float sumSquares38 = 0;\n    float sumSquares39 = 0;\n    float sumSquares40 = 0;\n    float sumSquares41 = 0;\n    float sumSquares42 = 0;\n    float sumSquares43 = 0;\n    float sumSquares44 = 0;\n    float sumSquares45 = 0;\n    float sumSquares46 = 0;\n    float sumSquares47 = 0;\n    float sumSquares48 = 0;\n    float sumSquares49 = 0;\n    float sumSquares50 = 0;\n    float sumSquares51 = 0;\n    float sumSquares52 = 0;\n    float sumSquares53 = 0;\n    float sumSquares54 = 0;\n    float sumSquares55 = 0;\n    float sumSquares56 = 0;\n    float sumSquares57 = 0;\n    float sumSquares58 = 0;\n    float sumSquares59 = 0;\n    float sumSquares60 = 0;\n    float sumSquares61 = 0;\n    float sumSquares62 = 0;\n    float sumSqu\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8prlt_lp.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmp8prlt_lp.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8prlt_lp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float mad = 0;\n    float diff = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        diff = numbers[i] - mean;\n        mad = diff * diff;\n    }\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4yo5zp1z.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428335]\n??:? void tmp4yo5zp1z.__unittest_L31_C1() [0x427f8c]\n??:? void tmp4yo5zp1z.__modtest() [0x4280b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c35f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430385]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430834]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430311]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1c9]\n??:? runModuleUnitTests [0x42c135]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum_squares = 0;\n    float mean_squares = 0;\n    float deviation_squares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        mean_squares += number * number;\n    }\n    mean_squares = mean_squares / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation_squares += (number - mean) * (number - mean);\n    }\n    deviation_squares = deviation_squares / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += sqrt(deviation_squares);\n    }\n    deviation = deviation / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        sum_squares += (number - mean) * (number - mean);\n    }\n    sum_squares = sum_squares / numbers.length;\n    \n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_3v94qcm.d(20): Error: found `in` when expecting `;`\n/tmp/tmp_3v94qcm.d(27): Error: found `in` when expecting `;`\n/tmp/tmp_3v94qcm.d(33): Error: found `in` when expecting `;`\n/tmp/tmp_3v94qcm.d(39): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_3v94qcm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float sumOfSquares = 0;\n    float mean = 0;\n    float meanOfSquares = 0;\n    float deviation = 0;\n    float deviationOfSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        sumOfSquares += numbers[i] * numbers[i];\n    }\n    mean = sum / numbers.length;\n    meanOfSquares = sumOfSquares / numbers.length;\n    deviation = sqrt(meanOfSquares - mean * mean);\n    deviationOfSquares = sumOfSquares - meanOfSquares;\n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpieej7388.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4283ad]\n??:? void tmpieej7388.__unittest_L31_C1() [0x428091]\n??:? void tmpieej7388.__modtest() [0x428130]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b26a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430389]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b241]\n??:? runModuleUnitTests [0x42c1ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428870]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float sumOfSquares = 0;\n    float mean = 0;\n    float deviation = 0;\n    float deviationSquares = 0;\n    float sumOfDeviations = 0;\n    float sumOfDeviationsSquares = 0;\n    float sumOfDeviationsSquareOfSquares = 0;\n    float sumOfDeviationsSquareOfDeviations = 0;\n    float sumOfDeviationsSquareOfDeviationsSquares = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfSquares = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviations = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquares = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfSquares = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviations = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquares = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfSquares = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviations = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquares = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfSquares = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviations = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquares = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviations = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfSquares = 0;\n    float sumOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDeviationsSquareOfDe\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2wfcg0sj.d(38): Error: semicolon expected, not `unittest`\n/tmp/tmp2wfcg0sj.d(38): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wfcg0sj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum_squares = 0;\n    float mean_squares = 0;\n    float deviation_squares = 0;\n    float max_deviation = 0;\n    float min_deviation = 0;\n    float max_deviation_squares = 0;\n    float min_deviation_squares = 0;\n    float max_deviation_squared = 0;\n    float min_deviation_squared = 0;\n    float max_deviation_squared_squared = 0;\n    float min_deviation_squared_squared = 0;\n    float max_deviation_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squared = 0;\n    float max_deviation_squared_squared_squared_squared_squared = 0;\n    float min_deviation_squared_squared_squared_squared_squ\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcq_prrba.d(59): Error: semicolon expected, not `unittest`\n/tmp/tmpcq_prrba.d(59): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcq_prrba.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        sumSquares += number * number;\n    }\n    \n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        sumSquares -= number * number;\n    }\n    \n    return sumSquares / numbers.length - mean * mean;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsshdxxge.d(17): Error: found `in` when expecting `;`\n/tmp/tmpsshdxxge.d(25): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsshdxxge.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        sumSquares += number * number;\n    }\n    \n    mean = sum / numbers.length;\n    deviation = sqrt(sumSquares / numbers.length - mean * mean);\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsq1vrbiu.d(18): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsq1vrbiu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float n in numbers)\n    {\n        sum += (n - mean) * (n - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4dzy_bzn.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dzy_bzn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumOfSquares = 0;\n    float deviationOfSquares = 0;\n    float absDeviation = 0;\n    float absDeviationSquares = 0;\n    float absDeviationMean = 0;\n    float absDeviationMeanSquares = 0;\n    float absDeviationSum = 0;\n    float absDeviationSumSquares = 0;\n    float absDeviationSumOfSquares = 0;\n    float absDeviationSumOfSquaresSquares = 0;\n    float absDeviationSumOfSquaresMean = 0;\n    float absDeviationSumOfSquaresMeanSquares = 0;\n    float absDeviationSumOfSquaresSum = 0;\n    float absDeviationSumOfSquaresSumSquares = 0;\n    float absDeviationSumOfSquaresSumOfSquares = 0;\n    float absDeviationSumOfSquaresSumOfSquaresMean = 0;\n    float absDeviationSumOfSquaresSumOfSquaresMeanSquares = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSum = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquares = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquaresMean = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquaresMeanSquares = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquaresSum = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMean = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMeanSquares = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMean = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMeanSquares = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum = 0;\n    float absDeviationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSqu\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd4t2ceq3.d(46): Error: semicolon expected, not `unittest`\n/tmp/tmpd4t2ceq3.d(46): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4t2ceq3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumSquares = 0;\n    float sumSquares2 = 0;\n    float sumSquares3 = 0;\n    float sumSquares4 = 0;\n    float sumSquares5 = 0;\n    float sumSquares6 = 0;\n    float sumSquares7 = 0;\n    float sumSquares8 = 0;\n    float sumSquares9 = 0;\n    float sumSquares10 = 0;\n    float sumSquares11 = 0;\n    float sumSquares12 = 0;\n    float sumSquares13 = 0;\n    float sumSquares14 = 0;\n    float sumSquares15 = 0;\n    float sumSquares16 = 0;\n    float sumSquares17 = 0;\n    float sumSquares18 = 0;\n    float sumSquares19 = 0;\n    float sumSquares20 = 0;\n    float sumSquares21 = 0;\n    float sumSquares22 = 0;\n    float sumSquares23 = 0;\n    float sumSquares24 = 0;\n    float sumSquares25 = 0;\n    float sumSquares26 = 0;\n    float sumSquares27 = 0;\n    float sumSquares28 = 0;\n    float sumSquares29 = 0;\n    float sumSquares30 = 0;\n    float sumSquares31 = 0;\n    float sumSquares32 = 0;\n    float sumSquares33 = 0;\n    float sumSquares34 = 0;\n    float sumSquares35 = 0;\n    float sumSquares36 = 0;\n    float sumSquares37 = 0;\n    float sumSquares38 = 0;\n    float sumSquares39 = 0;\n    float sumSquares40 = 0;\n    float sumSquares41 = 0;\n    float sumSquares42 = 0;\n    float sumSquares43 = 0;\n    float sumSquares44 = 0;\n    float sumSquares45 = 0;\n    float sumSquares46 = 0;\n    float sumSquares47 = 0;\n    float sumSquares48 = 0;\n    float sumSquares49 = 0;\n    float sumSquares50 = 0;\n    float sumSquares51 = 0;\n    float sumSquares52 = 0;\n    float sumSquares53 = 0;\n    float sumSquares54 = 0;\n    float sumSquares55 = 0;\n    float sumSquares56 = 0;\n    float sumSquares57 = 0;\n    float sumSquares58 = 0;\n    float sumSquares59 = 0;\n    float sumSquares60 = 0;\n    float sumSquares61 = 0;\n    float sumSquares62 = 0;\n    float sumSquares63 = 0;\n    float \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg7gsn3lv.d(79): Error: no identifier for declarator `float`\n/tmp/tmpg7gsn3lv.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg7gsn3lv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float deviation = 0;\n    float sumSquareDiff = 0;\n    float absDiff = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += Math.pow(numbers[i] - mean, 2);\n    }\n    deviation = Math.sqrt(deviation);\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sumSquareDiff += Math.pow(numbers[i] - mean, 2);\n    }\n    sumSquareDiff = sumSquareDiff / numbers.length;\n    \n    absDiff = sumSquareDiff - deviation * deviation;\n    \n    return absDiff / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj5thg0q1.d(27): Error: undefined identifier `Math`\n/tmp/tmpj5thg0q1.d(29): Error: undefined identifier `Math`\n/tmp/tmpj5thg0q1.d(33): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj5thg0q1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += std.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7xbd8o4l.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\n/tmp/tmp7xbd8o4l.d(17): Error: undefined identifier `abs` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xbd8o4l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=c#,math,statistics,algorithm |>\n<| c |>\nThe `foreach` loop is unnecessary. Just do `float mean = std.mean(numbers);` and then `return sum / numbers.length;`.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to show a more general approach to calculate the mean and standard deviation. Also, the OP asked for \"the average\", not \"the mean\".\n<|/ c |>\n<| c |>\nI agree with you on that one. But the OP asked for the average, not the mean.\n<|/ c |>\n<| c |>\nI agree with you on that one. But the OP asked for the average, not the mean.\n<|/ c |>\n<| c |>\nI agree with you on that one. But the OP asked for the average, not the mean.\n<|/ c |>\n<| a dscore=5 |>\nI wrote a C# implementation for calculating mean and standard deviation using LINQ:\n<code>\npublic static class LinqExtensions\n{\n    public static double Mean(this IEnumerable<double> source)\n    {\n        return source.Sum() / source.Count();\n    }\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6f3br256.d(15): Error: found `in` when expecting `;`\n/tmp/tmp6f3br256.d(21): Error: declaration expected, not `<`\n/tmp/tmp6f3br256.d(46): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6f3br256.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(float number : numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7s6t9wx9.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7s6t9wx9.d(15): Error: expression expected, not `:`\n/tmp/tmp7s6t9wx9.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7s6t9wx9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float x = 0;\n    float x_mean = 0;\n    float y = 0;\n    float y_mean = 0;\n    float z = 0;\n    float z_mean = 0;\n    float xdiff = 0;\n    float ydiff = 0;\n    float zdiff = 0;\n    float xdiff2 = 0;\n    float ydiff2 = 0;\n    float zdiff2 = 0;\n    float xdiff3 = 0;\n    float ydiff3 = 0;\n    float zdiff3 = 0;\n    float xdiff4 = 0;\n    float ydiff4 = 0;\n    float zdiff4 = 0;\n    float xdiff5 = 0;\n    float ydiff5 = 0;\n    float zdiff5 = 0;\n    float xdiff6 = 0;\n    float ydiff6 = 0;\n    float zdiff6 = 0;\n    float xdiff7 = 0;\n    float ydiff7 = 0;\n    float zdiff7 = 0;\n    float xdiff8 = 0;\n    float ydiff8 = 0;\n    float zdiff8 = 0;\n    float xdiff9 = 0;\n    float ydiff9 = 0;\n    float zdiff9 = 0;\n    float xdiff10 = 0;\n    float ydiff10 = 0;\n    float zdiff10 = 0;\n    float xdiff11 = 0;\n    float ydiff11 = 0;\n    float zdiff11 = 0;\n    float xdiff12 = 0;\n    float ydiff12 = 0;\n    float zdiff12 = 0;\n    float xdiff13 = 0;\n    float ydiff13 = 0;\n    float zdiff13 = 0;\n    float xdiff14 = 0;\n    float ydiff14 = 0;\n    float zdiff14 = 0;\n    float xdiff15 = 0;\n    float ydiff15 = 0;\n    float zdiff15 = 0;\n    float xdiff16 = 0;\n    float ydiff16 = 0;\n    float zdiff16 = 0;\n    float xdiff17 = 0;\n    float ydiff17 = 0;\n    float zdiff17 = 0;\n    float xdiff18 = 0;\n    float ydiff18 = 0;\n    float zdiff18 = 0;\n    float xdiff19 = 0;\n    float ydiff19 = 0;\n    float zdiff19 = 0;\n    float xdiff20 = 0;\n    float ydiff20 = 0;\n    float zdiff20 = 0;\n    float xdiff21 = 0;\n    float ydiff21 = 0;\n    float zdiff21 = 0;\n    float xdiff22 = 0;\n    float ydiff22 = 0;\n    float zdiff22 = 0;\n    float xdiff23 = 0;\n    float ydiff23 = 0;\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf9iuugjr.d(91): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf9iuugjr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpawnwudd8.d(90): Error: expression expected, not `unittest`\n/tmp/tmpawnwudd8.d(91): Error: found `{` when expecting `,`\n/tmp/tmpawnwudd8.d(92): Error: expression expected, not `alias`\n/tmp/tmpawnwudd8.d(92): Error: found `candidate` when expecting `,`\n/tmp/tmpawnwudd8.d(92): Error: expression expected, not `=`\n/tmp/tmpawnwudd8.d(92): Error: found `mean_absolute_deviation` when expecting `,`\n/tmp/tmpawnwudd8.d(92): Error: expression expected, not `;`\n/tmp/tmpawnwudd8.d(94): Error: found `assert` when expecting `,`\n/tmp/tmpawnwudd8.d(94): Error: found `;` when expecting `,`\n/tmp/tmpawnwudd8.d(95): Error: found `;` when expecting `,`\n/tmp/tmpawnwudd8.d(96): Error: found `;` when expecting `,`\n/tmp/tmpawnwudd8.d(97): Error: expression expected, not `}`\n/tmp/tmpawnwudd8.d(98): Error: found `void` when expecting `,`\n/tmp/tmpawnwudd8.d(98): Error: found `{` when expecting `,`\n/tmp/tmpawnwudd8.d(98): Error: expression expected, not `}`\n/tmp/tmpawnwudd8.d(98): Error: found `End of File` when expecting `,`\n/tmp/",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float sum2 = 0;\n    float mean = 0;\n    float mean2 = 0;\n    float mad = 0;\n    float count = 0;\n    float count2 = 0;\n    float sum3 = 0;\n    float sum4 = 0;\n    float sum5 = 0;\n    float sum6 = 0;\n    float sum7 = 0;\n    float sum8 = 0;\n    float sum9 = 0;\n    float sum10 = 0;\n    float sum11 = 0;\n    float sum12 = 0;\n    float sum13 = 0;\n    float sum14 = 0;\n    float sum15 = 0;\n    float sum16 = 0;\n    float sum17 = 0;\n    float sum18 = 0;\n    float sum19 = 0;\n    float sum20 = 0;\n    float sum21 = 0;\n    float sum22 = 0;\n    float sum23 = 0;\n    float sum24 = 0;\n    float sum25 = 0;\n    float sum26 = 0;\n    float sum27 = 0;\n    float sum28 = 0;\n    float sum29 = 0;\n    float sum30 = 0;\n    float sum31 = 0;\n    float sum32 = 0;\n    float sum33 = 0;\n    float sum34 = 0;\n    float sum35 = 0;\n    float sum36 = 0;\n    float sum37 = 0;\n    float sum38 = 0;\n    float sum39 = 0;\n    float sum40 = 0;\n    float sum41 = 0;\n    float sum42 = 0;\n    float sum43 = 0;\n    float sum44 = 0;\n    float sum45 = 0;\n    float sum46 = 0;\n    float sum47 = 0;\n    float sum48 = 0;\n    float sum49 = 0;\n    float sum50 = 0;\n    float sum51 = 0;\n    float sum52 = 0;\n    float sum53 = 0;\n    float sum54 = 0;\n    float sum55 = 0;\n    float sum56 = 0;\n    float sum57 = 0;\n    float sum58 = 0;\n    float sum59 = 0;\n    float sum60 = 0;\n    float sum61 = 0;\n    float sum62 = 0;\n    float sum63 = 0;\n    float sum64 = 0;\n    float sum65 = 0;\n    float sum66 = 0;\n    float sum67 = 0;\n    float sum68 = 0;\n    float sum69 = 0;\n    float sum70 = 0;\n    float sum71 = 0;\n    float sum72 = 0;\n    float sum73 = 0;\n    float sum74 = 0;\n    float sum75 = 0;\n    float sum76 = 0;\n    float sum77 = 0;\n    float sum78 = 0;\n    float sum79 = 0;\n    float sum80 = 0;\n    float sum81 = 0;\n    float sum82 = 0;\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpznq164yz.d(100): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpznq164yz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float deviation = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n    }\n    \n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += abs(number - mean);\n    }\n    \n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptx5ab7qr.d(17): Error: found `in` when expecting `;`\n/tmp/tmptx5ab7qr.d(24): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptx5ab7qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float meanSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        sumSquares += number * number;\n    }\n    mean = sum / numbers.length;\n    meanSquared = sumSquares / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += fabs(number - mean);\n        deviationSquared += fabs(number * number - meanSquared);\n    }\n    deviation = deviation / numbers.length;\n    deviationSquared = deviationSquared / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw65zm9rr.d(19): Error: found `in` when expecting `;`\n/tmp/tmpw65zm9rr.d(27): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw65zm9rr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return sqrt(deviation / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5msklkfu.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428385]\n??:? void tmp5msklkfu.__unittest_L27_C1() [0x428065]\n??:? void tmp5msklkfu.__modtest() [0x428104]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b242]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430884]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430361]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b219]\n??:? runModuleUnitTests [0x42c185]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428848]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(float number : numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7s6t9wx9.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7s6t9wx9.d(15): Error: expression expected, not `:`\n/tmp/tmp7s6t9wx9.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7s6t9wx9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxuw7yyta.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxuw7yyta.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float meanSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        meanSquared = numbers[i] * numbers[i];\n        meanSquares += meanSquared;\n    }\n    mean = sum / numbers.length;\n    meanSquares = meanSquares / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation = numbers[i] - mean;\n        deviation *= deviation;\n        deviation += meanSquares;\n        deviation = sqrt(deviation);\n        deviation = deviation / numbers.length;\n        \n        sum += deviation;\n        sumSquares += deviation * deviation;\n    }\n    \n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph43pe46a.d(22): Error: undefined identifier `meanSquared`, did you mean variable `meanSquares`?\n/tmp/tmph43pe46a.d(23): Error: undefined identifier `meanSquared`, did you mean variable `meanSquares`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph43pe46a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach (float number in numbers) {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach (float number in numbers) {\n        sum += (number - median) * (number - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    foreach (float number in numbers) {\n        sum += (number - mode) * (number - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach (float number in numbers) {\n        sum += (number - median) * (number - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    foreach (float number in numbers) {\n        sum += (number - mode\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyssnkbiu.d(15): Error: found `in` when expecting `;`\n/tmp/tmpyssnkbiu.d(32): Error: found `in` when expecting `;`\n/tmp/tmpyssnkbiu.d(49): Error: found `in` when expecting `;`\n/tmp/tmpyssnkbiu.d(66): Error: found `in` when expecting `;`\n/tmp/tmpyssnkbiu.d(83): Error: found `in` when expecting `;`\n/tmp/tmpyssnkbiu.d(84): Error: found `unittest` when expecting `)`\n/tmp/tmpyssnkbiu.d(86): Error: found `{` when expecting `;` following statement\n/tmp/tmpyssnkbiu.d(93): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyssnkbiu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float sumSquares2 = 0;\n    float sumSquares3 = 0;\n    float sumSquares4 = 0;\n    float sumSquares5 = 0;\n    float sumSquares6 = 0;\n    float sumSquares7 = 0;\n    float sumSquares8 = 0;\n    float sumSquares9 = 0;\n    float sumSquares10 = 0;\n    float sumSquares11 = 0;\n    float sumSquares12 = 0;\n    float sumSquares13 = 0;\n    float sumSquares14 = 0;\n    float sumSquares15 = 0;\n    float sumSquares16 = 0;\n    float sumSquares17 = 0;\n    float sumSquares18 = 0;\n    float sumSquares19 = 0;\n    float sumSquares20 = 0;\n    float sumSquares21 = 0;\n    float sumSquares22 = 0;\n    float sumSquares23 = 0;\n    float sumSquares24 = 0;\n    float sumSquares25 = 0;\n    float sumSquares26 = 0;\n    float sumSquares27 = 0;\n    float sumSquares28 = 0;\n    float sumSquares29 = 0;\n    float sumSquares30 = 0;\n    float sumSquares31 = 0;\n    float sumSquares32 = 0;\n    float sumSquares33 = 0;\n    float sumSquares34 = 0;\n    float sumSquares35 = 0;\n    float sumSquares36 = 0;\n    float sumSquares37 = 0;\n    float sumSquares38 = 0;\n    float sumSquares39 = 0;\n    float sumSquares40 = 0;\n    float sumSquares41 = 0;\n    float sumSquares42 = 0;\n    float sumSquares43 = 0;\n    float sumSquares44 = 0;\n    float sumSquares45 = 0;\n    float sumSquares46 = 0;\n    float sumSquares47 = 0;\n    float sumSquares48 = 0;\n    float sumSquares49 = 0;\n    float sumSquares50 = 0;\n    float sumSquares51 = 0;\n    float sumSquares52 = 0;\n    float sumSquares53 = 0;\n    float sumSquares54 = 0;\n    float sumSquares55 = 0;\n    float sumSquares56 = 0;\n    float sumSquares57 = 0;\n    float sumSquares58 = 0;\n    float sumSquares59 = 0;\n    float sumSquares60 = 0;\n    float sumSquares61 = 0;\n    float sumSquares62 = 0;\n    float sumSqu\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8prlt_lp.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmp8prlt_lp.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8prlt_lp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqj9a5c2d.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqj9a5c2d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = 0;\n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    median = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - median;\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = 0;\n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mode = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mode;\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = 0;\n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    median\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy9may93z.d(106): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpy9may93z.d(114): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9may93z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum_squares = 0;\n    float sum_of_squares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        sum_squares += numbers[i] * numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n        sum_of_squares += numbers[i] * numbers[i];\n    }\n    deviation = deviation / numbers.length;\n    \n    return sqrt(sum_squares / numbers.length - sum_of_squares / numbers.length);\n}\n</code>\n<|/ a tags=c++,math,algorithm |>\n<| a tags=c++,math,algorithm |>\nThe mean is just the sum of the numbers divided by the number of numbers. So the mean is just the sum of the numbers divided by the number of numbers. \nThe standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nSo the standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nThe mean is just the sum of the numbers divided by the number of numbers. \nThe standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nSo the standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nThe mean is just the sum of the numbers divided by the number of numbers. \nThe standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nSo the standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nThe mean is just the sum of the numbers divided by the number of numbers. \nThe standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nSo the standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nThe mean is just the sum of the numbers divided by the number of numbers. \nThe standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nSo the standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nThe mean is just the sum of the numbers divided by the number of numbers. \nThe standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nSo the standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nThe mean is just the sum of the numbers divided by the number of numbers. \nThe standard deviation is just the square root of the mean of the squares of the numbers divided by the number of numbers. \nSo the standard deviation is just the square root of the mean of the squares of the numbers \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsqfdkyo3.d(35): Error: declaration expected, not `<`\n/tmp/tmpsqfdkyo3.d(63): Error: declaration expected, not `assert`\n/tmp/tmpsqfdkyo3.d(64): Error: declaration expected, not `assert`\n/tmp/tmpsqfdkyo3.d(65): Error: declaration expected, not `assert`\n/tmp/tmpsqfdkyo3.d(66): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqfdkyo3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumSquared = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        sumSquared += numbers[i] * numbers[i];\n    }\n    \n    mean = sum / numbers.length;\n    \n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += abs(numbers[i] - mean);\n    }\n    \n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprr4sveqt.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428445]\n??:? void tmprr4sveqt.__unittest_L34_C1() [0x4281a5]\n??:? void tmprr4sveqt.__modtest() [0x4281c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c493]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b326]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430968]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430445]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2fd]\n??:? runModuleUnitTests [0x42c269]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428908]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += pow((numbers[i] - mean), 2);\n    }\n    return sqrt(deviation / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplw5v_opy.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4284b5]\n??:? void tmplw5v_opy.__unittest_L27_C1() [0x428085]\n??:? void tmplw5v_opy.__modtest() [0x428238]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b372]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430505]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430491]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b349]\n??:? runModuleUnitTests [0x42c2b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428978]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        sumSquares += number * number;\n    }\n    \n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        sumSquares -= number * number;\n    }\n    \n    return sumSquares / numbers.length - mean * mean;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants to calculate the mean absolute deviation for each of the numbers in the list, not for the entire list.\n<|/ c |>\n<| c |>\nI thought he was asking for the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean absolute deviation for each of the numbers in the list. He also said he was trying to calculate the mean \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpug1bh1bt.d(17): Error: found `in` when expecting `;`\n/tmp/tmpug1bh1bt.d(25): Error: found `in` when expecting `;`\n/tmp/tmpug1bh1bt.d(32): Error: declaration expected, not `<`\n/tmp/tmpug1bh1bt.d(35): Error: unterminated character constant\n/tmp/tmpug1bh1bt.d(43): Error: declaration expected, not `assert`\n/tmp/tmpug1bh1bt.d(44): Error: declaration expected, not `assert`\n/tmp/tmpug1bh1bt.d(45): Error: declaration expected, not `assert`\n/tmp/tmpug1bh1bt.d(46): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpug1bh1bt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgd_9j_r.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpdgd_9j_r.__unittest_L27_C1() [0x427fa0]\n??:? void tmpdgd_9j_r.__modtest() [0x4280c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b202]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430395]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430844]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430321]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]\n??:? runModuleUnitTests [0x42c145]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgd_9j_r.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpdgd_9j_r.__unittest_L27_C1() [0x427fa0]\n??:? void tmpdgd_9j_r.__modtest() [0x4280c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b202]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430395]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430844]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430321]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]\n??:? runModuleUnitTests [0x42c145]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumOfSquares = 0;\n    float meanOfSquares = 0;\n    float deviationOfSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        meanOfSquares += number * number;\n    }\n    meanOfSquares = sumOfSquares / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviationOfSquares += (number - mean) * (number - mean);\n    }\n    deviationOfSquares = deviationOfSquares / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += abs(number - mean);\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0_vdk54s.d(20): Error: found `in` when expecting `;`\n/tmp/tmp0_vdk54s.d(27): Error: found `in` when expecting `;`\n/tmp/tmp0_vdk54s.d(33): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_vdk54s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n    }\n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += abs(number - mean);\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyxb6_ajn.d(17): Error: found `in` when expecting `;`\n/tmp/tmpyxb6_ajn.d(23): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxb6_ajn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float sumOfSquares = 0;\n    float mean = 0;\n    float deviation = 0;\n    float deviationSquare = 0;\n    float absDev = 0;\n    float absDevSquare = 0;\n    float absDevMean = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        sumOfSquares += numbers[i] * numbers[i];\n    }\n    mean = sum / numbers.length;\n    deviation = sqrt(sumOfSquares / numbers.length - mean * mean);\n    deviationSquare = deviation * deviation;\n    absDev = deviationSquare - numbers.length * mean * mean;\n    absDevSquare = absDev * absDev;\n    absDevMean = absDevSquare / numbers.length;\n    \n    return absDevMean;\n}\n</code>\n<|/ a tags=c++,math,statistics |>\n<| c |>\nThe code above is wrong. `absDevMean` should be calculated as `absDevSquare / numbers.length` and not `numbers.length * mean * mean`.\n<|/ c |>\n<| c |>\nThanks, I fixed the code. Now it works.\n<|/ c |>\n<| c |>\nI added a more efficient version of the code above. Thanks again for pointing out my mistake.\n<|/ c |>\n<| a dscore=4 |>\nThe mean absolute deviation is the average of the absolute values of the deviations from the mean.\n<|/ a tags=c++,math,statistics |>\n<| c |>\nThe mean absolute deviation is just the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute values of the deviations. So the mean absolute deviation is the mean of the absolute \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp68c_ejzm.d(36): Error: declaration expected, not `<`\n/tmp/tmp68c_ejzm.d(56): Error: declaration expected, not `assert`\n/tmp/tmp68c_ejzm.d(57): Error: declaration expected, not `assert`\n/tmp/tmp68c_ejzm.d(58): Error: declaration expected, not `assert`\n/tmp/tmp68c_ejzm.d(59): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68c_ejzm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += std.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7xbd8o4l.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\n/tmp/tmp7xbd8o4l.d(17): Error: undefined identifier `abs` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xbd8o4l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float x_mean = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += pow((numbers[i] - mean), 2);\n    }\n    deviation = sqrt(deviation);\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        x_mean += numbers[i];\n    }\n    x_mean = x_mean / numbers.length;\n    \n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcyy_dk42.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x428575]\n??:? void tmpcyy_dk42.__unittest_L38_C1() [0x4280bc]\n??:? void tmpcyy_dk42.__modtest() [0x4282f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c59f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b432]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4305c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a74]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430551]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b409]\n??:? runModuleUnitTests [0x42c375]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428a38]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumOfSquares = 0;\n    float sumOfSquares2 = 0;\n    float sumOfSquares3 = 0;\n    float sumOfSquares4 = 0;\n    float sumOfSquares5 = 0;\n    float sumOfSquares6 = 0;\n    float sumOfSquares7 = 0;\n    float sumOfSquares8 = 0;\n    float sumOfSquares9 = 0;\n    float sumOfSquares10 = 0;\n    float sumOfSquares11 = 0;\n    float sumOfSquares12 = 0;\n    float sumOfSquares13 = 0;\n    float sumOfSquares14 = 0;\n    float sumOfSquares15 = 0;\n    float sumOfSquares16 = 0;\n    float sumOfSquares17 = 0;\n    float sumOfSquares18 = 0;\n    float sumOfSquares19 = 0;\n    float sumOfSquares20 = 0;\n    float sumOfSquares21 = 0;\n    float sumOfSquares22 = 0;\n    float sumOfSquares23 = 0;\n    float sumOfSquares24 = 0;\n    float sumOfSquares25 = 0;\n    float sumOfSquares26 = 0;\n    float sumOfSquares27 = 0;\n    float sumOfSquares28 = 0;\n    float sumOfSquares29 = 0;\n    float sumOfSquares30 = 0;\n    float sumOfSquares31 = 0;\n    float sumOfSquares32 = 0;\n    float sumOfSquares33 = 0;\n    float sumOfSquares34 = 0;\n    float sumOfSquares35 = 0;\n    float sumOfSquares36 = 0;\n    float sumOfSquares37 = 0;\n    float sumOfSquares38 = 0;\n    float sumOfSquares39 = 0;\n    float sumOfSquares40 = 0;\n    float sumOfSquares41 = 0;\n    float sumOfSquares42 = 0;\n    float sumOfSquares43 = 0;\n    float sumOfSquares44 = 0;\n    float sumOfSquares45 = 0;\n    float sumOfSquares46 = 0;\n    float sumOfSquares47 = 0;\n    float sumOfSquares48 = 0;\n    float sumOfSquares49 = 0;\n    float sumOfSquares50 = 0;\n    float sumOfSquares51 = 0;\n    float sumOfSquares52 = 0;\n    float sumOfSquares53 = 0;\n    float sumOfSquares54 = 0;\n    float sumOfSquares55 = 0;\n    float sumOfSquares56 = 0;\n    float \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmbp9lz8g.d(72): Error: no identifier for declarator `float`\n/tmp/tmpmbp9lz8g.d(72): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmbp9lz8g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float meanSquares = 0;\n    float deviationSquares = 0;\n    \n    for(float number : numbers)\n    {\n        sum += number;\n        meanSquares += number * number;\n    }\n    mean = sum / numbers.length;\n    \n    for(float number : numbers)\n    {\n        deviationSquares += (number - mean) * (number - mean);\n    }\n    deviation = sqrt(deviationSquares);\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp53n7u6u3.d(20): Error: semicolon expected, not `:`\n/tmp/tmp53n7u6u3.d(20): Error: expression expected, not `:`\n/tmp/tmp53n7u6u3.d(20): Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmp53n7u6u3.d(27): Error: semicolon expected, not `:`\n/tmp/tmp53n7u6u3.d(27): Error: expression expected, not `:`\n/tmp/tmp53n7u6u3.d(27): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp53n7u6u3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float deviation = 0;\n    float mad = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    \n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += pow(numbers[i] - mean, 2);\n    }\n    \n    mad = deviation / numbers.length;\n    \n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3zg1o43x.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmp3zg1o43x.__unittest_L34_C1() [0x42801c]\n??:? void tmp3zg1o43x.__modtest() [0x428258]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b392]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430525]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b369]\n??:? runModuleUnitTests [0x42c2d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    \n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    \n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi1ooqi4f.d(16): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1ooqi4f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += Math.pow(numbers[i] - mean, 2);\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\n</code>\n<|/ a tags=c++,math,algorithm,statistics |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a small program to calculate mean absolute deviation from mean in C++. Hope it helps.\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwhje6z44.d(31): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwhje6z44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float sumSquares = 0;\n    float meanSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        sumSquares += numbers[i] * numbers[i];\n    }\n    mean = sum / numbers.length;\n    meanSquared = sumSquares / numbers.length;\n    \n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq18um_ir.d(24): Error: undefined identifier `meanSquared`, did you mean variable `meanSquares`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq18um_ir.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float n in numbers)\n    {\n        sum += std.abs(n - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a library for calculating MAD using R:\nhttps://github.com/jennybc/mad\n<code>\nlibrary(mad)\nmad(1:10)\n</code>\n<|/ a tags=statistics,r |>\n<| a |>\nThe function mad() in the stats package calculates the mean absolute deviation from the mean of a vector. \n<code>\nlibrary(stats)\nx <- c(1,2,3,4,5,6,7,8,9,10)\nmad(x)\n</code>\n<|/ a dscore=0 tags=statistics,r |>\n<| a tags=statistics,r |>\n<code>\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(tidyr)\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkjgnfm8i.d(15): Error: found `in` when expecting `;`\n/tmp/tmpkjgnfm8i.d(21): Error: declaration expected, not `<`\n/tmp/tmpkjgnfm8i.d(48): Error: declaration expected, not `assert`\n/tmp/tmpkjgnfm8i.d(49): Error: declaration expected, not `assert`\n/tmp/tmpkjgnfm8i.d(50): Error: declaration expected, not `assert`\n/tmp/tmpkjgnfm8i.d(51): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkjgnfm8i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumOfSquares = 0;\n    float meanOfSquares = 0;\n    float deviationOfSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sumOfSquares += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    meanOfSquares = sumOfSquares / numbers.length;\n    \n    deviationOfSquares = meanOfSquares - sumOfSquares;\n    deviation = sqrt(deviationOfSquares);\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpas692j6e.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x4283dd]\n??:? void tmpas692j6e.__unittest_L37_C1() [0x428034]\n??:? void tmpas692j6e.__modtest() [0x42815c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c407]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b29a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43042d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]\n??:? runModuleUnitTests [0x42c1dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(float x : numbers)\n    {\n        sum += std.abs(x - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=c++,algorithm,statistics |>\n<| a tags=c++,algorithm,statistics |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\nusing namespace std;\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp02nkj4vt.d(15): Error: semicolon expected, not `:`\n/tmp/tmp02nkj4vt.d(15): Error: expression expected, not `:`\n/tmp/tmp02nkj4vt.d(15): Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmp02nkj4vt.d(21): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02nkj4vt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvk5s7emq.d(90): Error: expression expected, not `unittest`\n/tmp/tmpvk5s7emq.d(91): Error: found `{` when expecting `,`\n/tmp/tmpvk5s7emq.d(92): Error: expression expected, not `alias`\n/tmp/tmpvk5s7emq.d(92): Error: found `candidate` when expecting `,`\n/tmp/tmpvk5s7emq.d(92): Error: expression expected, not `=`\n/tmp/tmpvk5s7emq.d(92): Error: found `mean_absolute_deviation` when expecting `,`\n/tmp/tmpvk5s7emq.d(92): Error: expression expected, not `;`\n/tmp/tmpvk5s7emq.d(94): Error: found `assert` when expecting `,`\n/tmp/tmpvk5s7emq.d(94): Error: found `;` when expecting `,`\n/tmp/tmpvk5s7emq.d(95): Error: found `;` when expecting `,`\n/tmp/tmpvk5s7emq.d(96): Error: found `;` when expecting `,`\n/tmp/tmpvk5s7emq.d(97): Error: expression expected, not `}`\n/tmp/tmpvk5s7emq.d(98): Error: found `void` when expecting `,`\n/tmp/tmpvk5s7emq.d(98): Error: found `{` when expecting `,`\n/tmp/tmpvk5s7emq.d(98): Error: expression expected, not `}`\n/tmp/tmpvk5s7emq.d(98): Error: found `End of File` when expecting `,`\n/tmp/",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float mad = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n    }\n    \n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        mad = mad + ((number - mean) * (number - mean));\n    }\n    \n    return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbvisjngk.d(17): Error: found `in` when expecting `;`\n/tmp/tmpbvisjngk.d(24): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvisjngk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp47of11vo.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\n/tmp/tmp47of11vo.d(17): Error: undefined identifier `abs` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47of11vo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        float diff = numbers[i] - mean;\n        sum += diff * diff;\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3nywhqf9.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3nywhqf9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float deviation = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n    }\n    \n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += abs(number - mean);\n    }\n    \n    return deviation / numbers.length;\n}\n</code>\n<|/ a tags=c#,math,statistics |>\n<| c |>\nThis answer does not take into account the fact that standard deviation is not the square root of the variance.\n<|/ c |>\n<| a tags=c#,math,statistics |>\nI wrote a C# library for calculating mean and standard deviation with confidence intervals.\nhttps://github.com/jonathanh/Statistics\n<|/ a dscore=4 |>\n<| a dscore=4 |>\nI wrote a C# library for calculating mean and standard deviation with confidence intervals.\nhttps://github.com/jonathanh/Statistics\n<|/ a tags=c#,math,statistics |>\n<| a dscore=4 |>\nI wrote a C# library for calculating mean and standard deviation with confidence intervals.\nhttps://github.com/jonathanh/Statistics\n<|/ a tags=c#,math,statistics |>\n<| a dscore=3 |>\nI wrote a C# library for calculating mean and standard deviation with confidence intervals.\nhttps://github.com/jonathanh/Statistics\n<|/ a tags=c#,math,statistics |>\n<| a |>\nI wrote a C# library for calculating mean and standard deviation with confidence intervals.\nhttps://github.com/jonathanh/Statistics\n<|/ a tags=c#,math,statistics dscore=3 |>\n<| a dscore=3 |>\nI wrote a C# library for calculating mean and standard deviation with confidence intervals.\nhttps://github.com/jonathanh/Statistics\n<|/ a tags=c#,math,statistics |>\n<| a dscore=3 |>\nI wrote a C# library for calculating mean and standard deviation with confidence intervals.\nhttps://github.com/jonathanh/Statistics\n<|/ a tags=c#,math,statistics |>\n<| a dscore=3 |>\nI wrote a C# library for calculating mean and standard deviation with confidence intervals.\nhttps://github.com/jonathanh/Statistics\n<|/ a tags=c#,math,statistics |>\n<| a \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp38ipovlo.d(17): Error: found `in` when expecting `;`\n/tmp/tmp38ipovlo.d(24): Error: found `in` when expecting `;`\n/tmp/tmp38ipovlo.d(31): Error: declaration expected, not `<`\n/tmp/tmp38ipovlo.d(73): Error: declaration expected, not `assert`\n/tmp/tmp38ipovlo.d(74): Error: declaration expected, not `assert`\n/tmp/tmp38ipovlo.d(75): Error: declaration expected, not `assert`\n/tmp/tmp38ipovlo.d(76): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38ipovlo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float n in numbers)\n    {\n        sum += (n - mean) * (n - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4dzy_bzn.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dzy_bzn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += std.abs(\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvk5s7emq.d(90): Error: expression expected, not `unittest`\n/tmp/tmpvk5s7emq.d(91): Error: found `{` when expecting `,`\n/tmp/tmpvk5s7emq.d(92): Error: expression expected, not `alias`\n/tmp/tmpvk5s7emq.d(92): Error: found `candidate` when expecting `,`\n/tmp/tmpvk5s7emq.d(92): Error: expression expected, not `=`\n/tmp/tmpvk5s7emq.d(92): Error: found `mean_absolute_deviation` when expecting `,`\n/tmp/tmpvk5s7emq.d(92): Error: expression expected, not `;`\n/tmp/tmpvk5s7emq.d(94): Error: found `assert` when expecting `,`\n/tmp/tmpvk5s7emq.d(94): Error: found `;` when expecting `,`\n/tmp/tmpvk5s7emq.d(95): Error: found `;` when expecting `,`\n/tmp/tmpvk5s7emq.d(96): Error: found `;` when expecting `,`\n/tmp/tmpvk5s7emq.d(97): Error: expression expected, not `}`\n/tmp/tmpvk5s7emq.d(98): Error: found `void` when expecting `,`\n/tmp/tmpvk5s7emq.d(98): Error: found `{` when expecting `,`\n/tmp/tmpvk5s7emq.d(98): Error: expression expected, not `}`\n/tmp/tmpvk5s7emq.d(98): Error: found `End of File` when expecting `,`\n/tmp/",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float x_mean = 0;\n    float x_deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        x_deviation += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    x_deviation = x_deviation / numbers.length;\n    \n    deviation = sqrt(x_deviation);\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpeynh5rdd.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x4283b5]\n??:? void tmpeynh5rdd.__unittest_L35_C1() [0x428099]\n??:? void tmpeynh5rdd.__modtest() [0x428138]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430405]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430391]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428878]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpb3xp_zkg.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42835d]\n??:? void tmpb3xp_zkg.__unittest_L31_C1() [0x427fb4]\n??:? void tmpb3xp_zkg.__modtest() [0x4280dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428820]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=c++,math,statistics |>\n<| a tags=c++,math,statistics |>\nI wrote a library for calculating mean absolute deviation from mean in C++.\nhttps://github.com/jonathanh/madev\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpexrhq5vm.d(15): Error: found `in` when expecting `;`\n/tmp/tmpexrhq5vm.d(21): Error: declaration expected, not `<`\n/tmp/tmpexrhq5vm.d(38): Error: declaration expected, not `assert`\n/tmp/tmpexrhq5vm.d(39): Error: declaration expected, not `assert`\n/tmp/tmpexrhq5vm.d(40): Error: declaration expected, not `assert`\n/tmp/tmpexrhq5vm.d(41): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexrhq5vm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        sumSquares += number * number;\n    }\n    \n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        sumSquares -= number * number;\n    }\n    \n    return sumSquares / numbers.length - mean * mean;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsshdxxge.d(17): Error: found `in` when expecting `;`\n/tmp/tmpsshdxxge.d(25): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsshdxxge.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean;\n    float sum = 0;\n    float sumSquares = 0;\n    float sumOfSquares = 0;\n    float sumOfSquareOfDifferences = 0;\n    float sumOfSquareOfDifferenceSquares = 0;\n    float sumOfDifferences = 0;\n    float sumOfDifferenceSquares = 0;\n    float sumOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquares = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares = 0;\n    float sumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3fe7j7hz.d(42): Error: semicolon expected, not `unittest`\n/tmp/tmp3fe7j7hz.d(42): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fe7j7hz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float x = 0;\n    float x_mean = 0;\n    float y = 0;\n    float y_mean = 0;\n    float z = 0;\n    float z_mean = 0;\n    float x_deviation = 0;\n    float y_deviation = 0;\n    float z_deviation = 0;\n    float x_deviation_squared = 0;\n    float y_deviation_squared = 0;\n    float z_deviation_squared = 0;\n    float x_deviation_squared_mean = 0;\n    float y_deviation_squared_mean = 0;\n    float z_deviation_squared_mean = 0;\n    float x_deviation_squared_deviation = 0;\n    float y_deviation_squared_deviation = 0;\n    float z_deviation_squared_deviation = 0;\n    float x_deviation_squared_deviation_mean = 0;\n    float y_deviation_squared_deviation_mean = 0;\n    float z_deviation_squared_deviation_mean = 0;\n    float x_deviation_squared_deviation_deviation = 0;\n    float y_deviation_squared_deviation_deviation = 0;\n    float z_deviation_squared_deviation_deviation = 0;\n    float x_deviation_squared_deviation_deviation_mean = 0;\n    float y_deviation_squared_deviation_deviation_mean = 0;\n    float z_deviation_squared_deviation_deviation_mean = 0;\n    float x_deviation_squared_deviation_deviation_deviation = 0;\n    float y_deviation_squared_deviation_deviation_deviation = 0;\n    float z_deviation_squared_deviation_deviation_deviation = 0;\n    float x_deviation_squared_deviation_deviation_deviation_mean = 0;\n    float y_deviation_squared_deviation_deviation_deviation_mean = 0;\n    float z_deviation_squared_deviation_deviation_deviation_mean = 0;\n    float x_deviation_squared_deviation_deviation_deviation_deviation = 0;\n    float y_deviation_squared_deviation_deviation_deviation_deviation = 0;\n    float z_deviation_squared_deviation_deviation_deviation_deviation = 0;\n    float x_deviation_squared_deviation_deviation_deviation_deviation_mean = 0;\n    float y_deviation_squared_deviation_deviation_deviation_deviation_mean = 0;\n    float z_deviation_squared_deviation_deviation_deviation_deviation_mean = 0;\n    float x_deviation_squared_deviation_deviation_deviation_deviation_deviation = 0;\n    float y_deviation_squared_deviation_deviation_deviation_deviation_deviation = 0;\n    float z_deviation_squared_deviation_deviation_deviation_deviation_\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjgnv12vt.d(58): Error: semicolon expected, not `unittest`\n/tmp/tmpjgnv12vt.d(58): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjgnv12vt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float meanSquares = 0;\n    float deviationSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        meanSquares += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviationSquares += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    deviation = sqrt(deviationSquares/numbers.length);\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsu42d4ak.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x428425]\n??:? void tmpsu42d4ak.__unittest_L35_C1() [0x428109]\n??:? void tmpsu42d4ak.__modtest() [0x4281a8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c44f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430475]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430924]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430401]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b9]\n??:? runModuleUnitTests [0x42c225]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288e8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(float number : numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7s6t9wx9.d(15): Error: semicolon expected, not `:`\n/tmp/tmp7s6t9wx9.d(15): Error: expression expected, not `:`\n/tmp/tmp7s6t9wx9.d(15): Error: found `numbers` when expecting `;` following `for` condition\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7s6t9wx9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float meanSquares = 0;\n    float deviationSquares = 0;\n    float deviationMean = 0;\n    float deviationMeanSquares = 0;\n    float deviationSum = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSumSquares = 0;\n    float deviationSum\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxz300co9.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpxz300co9.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxz300co9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float mad = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        mad += abs(numbers[i] - mean);\n    }\n    mad = mad/numbers.length;\n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp15kp7x5s.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4283ed]\n??:? void tmp15kp7x5s.__unittest_L30_C1() [0x42814d]\n??:? void tmp15kp7x5s.__modtest() [0x42816c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c43b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430461]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430910]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a5]\n??:? runModuleUnitTests [0x42c211]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum_squares = 0;\n    float mean_squares = 0;\n    float deviations = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        mean_squares += numbers[i] * numbers[i];\n    }\n    mean = sum / numbers.length;\n    mean_squares = mean_squares / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n        deviations += numbers[i] * numbers[i];\n    }\n    deviation = deviation / numbers.length;\n    deviations = deviations / numbers.length;\n    \n    return deviations / mean_squares;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwsg_87ef.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4284cd]\n??:? void tmpwsg_87ef.__unittest_L38_C1() [0x428128]\n??:? void tmpwsg_87ef.__modtest() [0x428250]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c4f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b38a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43051d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b361]\n??:? runModuleUnitTests [0x42c2cd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428990]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float meanSquares = 0;\n    float deviationSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        sumSquares += numbers[i] * numbers[i];\n    }\n    mean = sum / numbers.length;\n    meanSquares = sumSquares / numbers.length;\n    deviationSquares = meanSquares - mean * mean;\n    deviation = sqrt(deviationSquares);\n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnyolqzuu.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4283bd]\n??:? void tmpnyolqzuu.__unittest_L31_C1() [0x42809d]\n??:? void tmpnyolqzuu.__modtest() [0x42813c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b27a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43040d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430399]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b251]\n??:? runModuleUnitTests [0x42c1bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428880]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += std.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7xbd8o4l.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\n/tmp/tmp7xbd8o4l.d(17): Error: undefined identifier `abs` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xbd8o4l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float mad = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += pow((numbers[i] - mean), 2);\n    }\n    deviation = sqrt(deviation);\n    mad = deviation / numbers.length;\n    \n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvn8qixs8.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4284e5]\n??:? void tmpvn8qixs8.__unittest_L33_C1() [0x42802c]\n??:? void tmpvn8qixs8.__modtest() [0x428268]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c50f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430535]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4309e4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b379]\n??:? runModuleUnitTests [0x42c2e5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float sumSquares2 = 0;\n    float sumSquares3 = 0;\n    float sumSquares4 = 0;\n    float sumSquares5 = 0;\n    float sumSquares6 = 0;\n    float sumSquares7 = 0;\n    float sumSquares8 = 0;\n    float sumSquares9 = 0;\n    float sumSquares10 = 0;\n    float sumSquares11 = 0;\n    float sumSquares12 = 0;\n    float sumSquares13 = 0;\n    float sumSquares14 = 0;\n    float sumSquares15 = 0;\n    float sumSquares16 = 0;\n    float sumSquares17 = 0;\n    float sumSquares18 = 0;\n    float sumSquares19 = 0;\n    float sumSquares20 = 0;\n    float sumSquares21 = 0;\n    float sumSquares22 = 0;\n    float sumSquares23 = 0;\n    float sumSquares24 = 0;\n    float sumSquares25 = 0;\n    float sumSquares26 = 0;\n    float sumSquares27 = 0;\n    float sumSquares28 = 0;\n    float sumSquares29 = 0;\n    float sumSquares30 = 0;\n    float sumSquares31 = 0;\n    float sumSquares32 = 0;\n    float sumSquares33 = 0;\n    float sumSquares34 = 0;\n    float sumSquares35 = 0;\n    float sumSquares36 = 0;\n    float sumSquares37 = 0;\n    float sumSquares38 = 0;\n    float sumSquares39 = 0;\n    float sumSquares40 = 0;\n    float sumSquares41 = 0;\n    float sumSquares42 = 0;\n    float sumSquares43 = 0;\n    float sumSquares44 = 0;\n    float sumSquares45 = 0;\n    float sumSquares46 = 0;\n    float sumSquares47 = 0;\n    float sumSquares48 = 0;\n    float sumSquares49 = 0;\n    float sumSquares50 = 0;\n    float sumSquares51 = 0;\n    float sumSquares52 = 0;\n    float sumSquares53 = 0;\n    float sumSquares54 = 0;\n    float sumSquares55 = 0;\n    float sumSquares56 = 0;\n    float sumSquares57 = 0;\n    float sumSquares58 = 0;\n    float sumSquares59 = 0;\n    float sumSquares60 = 0;\n    float sumSquares61 = 0;\n    float sumSquares62 = 0;\n    float sumSqu\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8prlt_lp.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmp8prlt_lp.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8prlt_lp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqgr2bz14.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42835d]\n??:? void tmpqgr2bz14.__unittest_L31_C1() [0x427fb4]\n??:? void tmpqgr2bz14.__modtest() [0x4280dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428820]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float n in numbers)\n    {\n        sum += (n - mean) * (n - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4dzy_bzn.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dzy_bzn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float sumOfSquares = 0;\n    float mean = 0;\n    float meanOfSquares = 0;\n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        sumOfSquares += numbers[i] * numbers[i];\n    }\n    mean = sum / numbers.length;\n    meanOfSquares = sumOfSquares / numbers.length;\n    deviation = sqrt(meanOfSquares - pow(mean, 2));\n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf1afhmqk.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428515]\n??:? void tmpf1afhmqk.__unittest_L29_C1() [0x4280e1]\n??:? void tmpf1afhmqk.__modtest() [0x428294]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c53f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b3d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430565]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430a14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4304f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]\n??:? runModuleUnitTests [0x42c315]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4289d8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float n in numbers)\n    {\n        sum += std.abs(n - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw18qe3u0.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw18qe3u0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(float number : numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(float number : numbers)\n    {\n        sum += (number - median) * (number - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(float number : numbers)\n    {\n        sum += (number - mode) * (number - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(float number : numbers)\n    {\n        sum += (number - median) * (number - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(float number : number\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx6a1bez4.d(15): Error: semicolon expected, not `:`\n/tmp/tmpx6a1bez4.d(15): Error: expression expected, not `:`\n/tmp/tmpx6a1bez4.d(15): Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpx6a1bez4.d(33): Error: semicolon expected, not `:`\n/tmp/tmpx6a1bez4.d(33): Error: expression expected, not `:`\n/tmp/tmpx6a1bez4.d(33): Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpx6a1bez4.d(51): Error: semicolon expected, not `:`\n/tmp/tmpx6a1bez4.d(51): Error: expression expected, not `:`\n/tmp/tmpx6a1bez4.d(51): Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpx6a1bez4.d(69): Error: semicolon expected, not `:`\n/tmp/tmpx6a1bez4.d(69): Error: expression expected, not `:`\n/tmp/tmpx6a1bez4.d(69): Error: found `numbers` when expecting `;` following `for` condition\n/tmp/tmpx6a1bez4.d(87): Error: semicolon expected, not `:`\n/tmp/tmpx6a1bez4.d(87): Error: expression expected, not `:`\n/tmp/tmpx6a1bez4.d(87): Error: found `number` when expecting ",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float sumSquares = 0;\n    float meanSquares = 0;\n    float sumSquares2 = 0;\n    float meanSquares2 = 0;\n    float sumSquares3 = 0;\n    float meanSquares3 = 0;\n    float sumSquares4 = 0;\n    float meanSquares4 = 0;\n    float sumSquares5 = 0;\n    float meanSquares5 = 0;\n    float sumSquares6 = 0;\n    float meanSquares6 = 0;\n    float sumSquares7 = 0;\n    float meanSquares7 = 0;\n    float sumSquares8 = 0;\n    float meanSquares8 = 0;\n    float sumSquares9 = 0;\n    float meanSquares9 = 0;\n    float sumSquares10 = 0;\n    float meanSquares10 = 0;\n    float sumSquares11 = 0;\n    float meanSquares11 = 0;\n    float sumSquares12 = 0;\n    float meanSquares12 = 0;\n    float sumSquares13 = 0;\n    float meanSquares13 = 0;\n    float sumSquares14 = 0;\n    float meanSquares14 = 0;\n    float sumSquares15 = 0;\n    float meanSquares15 = 0;\n    float sumSquares16 = 0;\n    float meanSquares16 = 0;\n    float sumSquares17 = 0;\n    float meanSquares17 = 0;\n    float sumSquares18 = 0;\n    float meanSquares18 = 0;\n    float sumSquares19 = 0;\n    float meanSquares19 = 0;\n    float sumSquares20 = 0;\n    float meanSquares20 = 0;\n    float sumSquares21 = 0;\n    float meanSquares21 = 0;\n    float sumSquares22 = 0;\n    float meanSquares22 = 0;\n    float sumSquares23 = 0;\n    float meanSquares23 = 0;\n    float sumSquares24 = 0;\n    float meanSquares24 = 0;\n    float sumSquares25 = 0;\n    float meanSquares25 = 0;\n    float sumSquares26 = 0;\n    float meanSquares26 = 0;\n    float sumSquares27 = 0;\n    float meanSquares27 = 0;\n    float sumSquares28 = 0;\n    float meanSquares28 = 0;\n    float sumSquares29 = 0;\n    float meanSquares29 = 0;\n    float sumSquares30 = 0;\n    float meanSquares30 = 0;\n    float sumSquares31 = 0;\n    float meanSquares31 = 0;\n    float sumSquares32 = 0;\n    float meanSquares32 = 0;\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9k2zwgwm.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9k2zwgwm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n    }\n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += abs(number - mean);\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyxb6_ajn.d(17): Error: found `in` when expecting `;`\n/tmp/tmpyxb6_ajn.d(23): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxb6_ajn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float meanSquares = 0;\n    float deviationSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        meanSquares += number * number;\n    }\n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviationSquares += (number - mean) * (number - mean);\n    }\n    deviation = sqrt(deviationSquares);\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0cy7j3uh.d(20): Error: found `in` when expecting `;`\n/tmp/tmp0cy7j3uh.d(27): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cy7j3uh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqj9a5c2d.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqj9a5c2d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumSquared = 0;\n    float sumSquared2 = 0;\n    float sumSquared3 = 0;\n    float sumSquared4 = 0;\n    float sumSquared5 = 0;\n    float sumSquared6 = 0;\n    float sumSquared7 = 0;\n    float sumSquared8 = 0;\n    float sumSquared9 = 0;\n    float sumSquared10 = 0;\n    float sumSquared11 = 0;\n    float sumSquared12 = 0;\n    float sumSquared13 = 0;\n    float sumSquared14 = 0;\n    float sumSquared15 = 0;\n    float sumSquared16 = 0;\n    float sumSquared17 = 0;\n    float sumSquared18 = 0;\n    float sumSquared19 = 0;\n    float sumSquared20 = 0;\n    float sumSquared21 = 0;\n    float sumSquared22 = 0;\n    float sumSquared23 = 0;\n    float sumSquared24 = 0;\n    float sumSquared25 = 0;\n    float sumSquared26 = 0;\n    float sumSquared27 = 0;\n    float sumSquared28 = 0;\n    float sumSquared29 = 0;\n    float sumSquared30 = 0;\n    float sumSquared31 = 0;\n    float sumSquared32 = 0;\n    float sumSquared33 = 0;\n    float sumSquared34 = 0;\n    float sumSquared35 = 0;\n    float sumSquared36 = 0;\n    float sumSquared37 = 0;\n    float sumSquared38 = 0;\n    float sumSquared39 = 0;\n    float sumSquared40 = 0;\n    float sumSquared41 = 0;\n    float sumSquared42 = 0;\n    float sumSquared43 = 0;\n    float sumSquared44 = 0;\n    float sumSquared45 = 0;\n    float sumSquared46 = 0;\n    float sumSquared47 = 0;\n    float sumSquared48 = 0;\n    float sumSquared49 = 0;\n    float sumSquared50 = 0;\n    float sumSquared51 = 0;\n    float sumSquared52 = 0;\n    float sumSquared53 = 0;\n    float sumSquared54 = 0;\n    float sumSquared55 = 0;\n    float sumSquared56 = 0;\n    float sumSquared57 = 0;\n    float sumSquared58 = 0;\n    float sumSquared59 = 0;\n    float sumSquared60 = 0;\n    float sumSquared61 = 0;\n    float sumSquared62 = 0;\n    float sumSquared63 = 0;\n    \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmitn52h_.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmitn52h_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumSquares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        sumSquares += number * number;\n    }\n    \n    mean = sum / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        sumSquares -= number * number;\n    }\n    \n    return sumSquares / numbers.length - mean * mean;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsshdxxge.d(17): Error: found `in` when expecting `;`\n/tmp/tmpsshdxxge.d(25): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsshdxxge.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float mad = 0;\n    float diff = 0;\n    float diff2 = 0;\n    float diff3 = 0;\n    float diff4 = 0;\n    float diff5 = 0;\n    float diff6 = 0;\n    float diff7 = 0;\n    float diff8 = 0;\n    float diff9 = 0;\n    float diff10 = 0;\n    float diff11 = 0;\n    float diff12 = 0;\n    float diff13 = 0;\n    float diff14 = 0;\n    float diff15 = 0;\n    float diff16 = 0;\n    float diff17 = 0;\n    float diff18 = 0;\n    float diff19 = 0;\n    float diff20 = 0;\n    float diff21 = 0;\n    float diff22 = 0;\n    float diff23 = 0;\n    float diff24 = 0;\n    float diff25 = 0;\n    float diff26 = 0;\n    float diff27 = 0;\n    float diff28 = 0;\n    float diff29 = 0;\n    float diff30 = 0;\n    float diff31 = 0;\n    float diff32 = 0;\n    float diff33 = 0;\n    float diff34 = 0;\n    float diff35 = 0;\n    float diff36 = 0;\n    float diff37 = 0;\n    float diff38 = 0;\n    float diff39 = 0;\n    float diff40 = 0;\n    float diff41 = 0;\n    float diff42 = 0;\n    float diff43 = 0;\n    float diff44 = 0;\n    float diff45 = 0;\n    float diff46 = 0;\n    float diff47 = 0;\n    float diff48 = 0;\n    float diff49 = 0;\n    float diff50 = 0;\n    float diff51 = 0;\n    float diff52 = 0;\n    float diff53 = 0;\n    float diff54 = 0;\n    float diff55 = 0;\n    float diff56 = 0;\n    float diff57 = 0;\n    float diff58 = 0;\n    float diff59 = 0;\n    float diff60 = 0;\n    float diff61 = 0;\n    float diff62 = 0;\n    float diff63 = 0;\n    float diff64 = 0;\n    float diff65 = 0;\n    float diff66 = 0;\n    float diff67 = 0;\n    float diff68 = 0;\n    float diff69 = 0;\n    float diff70 = 0;\n    float diff71 = 0;\n    float diff72 = 0;\n    float diff73 = 0;\n    float diff74 = 0;\n    float diff75 = 0;\n    float diff76 = 0;\n    float diff77 = 0;\n    float diff78 = 0;\n    float diff79 = 0;\n    float diff80 = 0;\n    float diff81 = 0;\n    float diff82 = 0;\n    float diff83 = 0;\n    float \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpohs9gxqj.d(100): Error: no identifier for declarator `float`\n/tmp/tmpohs9gxqj.d(100): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohs9gxqj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sumSquares += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    deviation = sqrt(sumSquares / numbers.length);\n    \n    return deviation;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    median = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sumSquares += (numbers[i] - median) * (numbers[i] - median);\n    }\n    deviation = sqrt(sumSquares / numbers.length);\n    \n    return deviation;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mode = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sumSquares += (numbers[i] - mode) * (numbers[i] - mode);\n    }\n    deviation = sqrt(sumSquares / numbers.length);\n    \n    return deviation;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpulg3inok.d(99): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulg3inok.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - median) * (number - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mode) * (number - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int size) \n{\n    float sum = 0;\n    float mean = std.mean(numbers, size);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers, int size) \n{\n    float sum = 0;\n    float median = std.\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd4p9sgv5.d(15): Error: found `in` when expecting `;`\n/tmp/tmpd4p9sgv5.d(33): Error: found `in` when expecting `;`\n/tmp/tmpd4p9sgv5.d(51): Error: found `in` when expecting `;`\n/tmp/tmpd4p9sgv5.d(69): Error: found `in` when expecting `;`\n/tmp/tmpd4p9sgv5.d(87): Error: identifier expected following `.`, not `unittest`\n/tmp/tmpd4p9sgv5.d(88): Error: semicolon expected, not `{`\n/tmp/tmpd4p9sgv5.d(95): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd4p9sgv5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += abs(numbers[i] - mode);\n    }\n    return sum\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8qn5h3wd.d(92): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmp8qn5h3wd.d(100): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8qn5h3wd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum_squares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        mean = sum / numbers.length;\n        deviation = numbers[i] - mean;\n        sum_squares += deviation * deviation;\n    }\n    \n    return sqrt(sum_squares / numbers.length);\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6scdgz60.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42835d]\n??:? void tmp6scdgz60.__unittest_L28_C1() [0x428041]\n??:? void tmp6scdgz60.__modtest() [0x4280e0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428820]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgd_9j_r.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpdgd_9j_r.__unittest_L27_C1() [0x427fa0]\n??:? void tmpdgd_9j_r.__modtest() [0x4280c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b202]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430395]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430844]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430321]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]\n??:? runModuleUnitTests [0x42c145]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    \n    mean = sum / numbers.length;\n    \n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += abs(numbers[i] - mean);\n    }\n    \n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7sw_k5xf.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x4283d5]\n??:? void tmp7sw_k5xf.__unittest_L32_C1() [0x428139]\n??:? void tmp7sw_k5xf.__modtest() [0x428158]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c423]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430449]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b28d]\n??:? runModuleUnitTests [0x42c1f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428898]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float n in numbers)\n    {\n        sum += (n - mean) * (n - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4dzy_bzn.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dzy_bzn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum2 = 0;\n    float mean2 = 0;\n    float deviation2 = 0;\n    float sum3 = 0;\n    float mean3 = 0;\n    float deviation3 = 0;\n    float sum4 = 0;\n    float mean4 = 0;\n    float deviation4 = 0;\n    float sum5 = 0;\n    float mean5 = 0;\n    float deviation5 = 0;\n    float sum6 = 0;\n    float mean6 = 0;\n    float deviation6 = 0;\n    float sum7 = 0;\n    float mean7 = 0;\n    float deviation7 = 0;\n    float sum8 = 0;\n    float mean8 = 0;\n    float deviation8 = 0;\n    float sum9 = 0;\n    float mean9 = 0;\n    float deviation9 = 0;\n    float sum10 = 0;\n    float mean10 = 0;\n    float deviation10 = 0;\n    float sum11 = 0;\n    float mean11 = 0;\n    float deviation11 = 0;\n    float sum12 = 0;\n    float mean12 = 0;\n    float deviation12 = 0;\n    float sum13 = 0;\n    float mean13 = 0;\n    float deviation13 = 0;\n    float sum14 = 0;\n    float mean14 = 0;\n    float deviation14 = 0;\n    float sum15 = 0;\n    float mean15 = 0;\n    float deviation15 = 0;\n    float sum16 = 0;\n    float mean16 = 0;\n    float deviation16 = 0;\n    float sum17 = 0;\n    float mean17 = 0;\n    float deviation17 = 0;\n    float sum18 = 0;\n    float mean18 = 0;\n    float deviation18 = 0;\n    float sum19 = 0;\n    float mean19 = 0;\n    float deviation19 = 0;\n    float sum20 = 0;\n    float mean20 = 0;\n    float deviation20 = 0;\n    float sum21 = 0;\n    float mean21 = 0;\n    float deviation21 = 0;\n    float sum22 = 0;\n    float mean22 = 0;\n    float deviation22 = 0;\n    float sum23 = 0;\n    float mean23 = 0;\n    float deviation23 = 0;\n    float sum24 = 0;\n    float mean24 = 0;\n    float deviation24 = 0;\n    float sum25 = 0;\n    float mean25 = 0;\n    float deviation25 = 0;\n    float sum26 = 0;\n    float mean26 = 0;\n    float deviation26 = 0;\n    float sum27 = 0;\n    float mean27 = 0;\n    float deviation27 = 0;\n    float sum28 = 0;\n    float mean28 = 0;\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjbrfpywr.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjbrfpywr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpb3xp_zkg.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42835d]\n??:? void tmpb3xp_zkg.__unittest_L31_C1() [0x427fb4]\n??:? void tmpb3xp_zkg.__modtest() [0x4280dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428820]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float x = 0;\n    float x_mean = 0;\n    float y = 0;\n    float y_mean = 0;\n    float z = 0;\n    float z_mean = 0;\n    float x_deviation = 0;\n    float y_deviation = 0;\n    float z_deviation = 0;\n    float x_deviation2 = 0;\n    float y_deviation2 = 0;\n    float z_deviation2 = 0;\n    float x_deviation3 = 0;\n    float y_deviation3 = 0;\n    float z_deviation3 = 0;\n    float x_deviation4 = 0;\n    float y_deviation4 = 0;\n    float z_deviation4 = 0;\n    float x_deviation5 = 0;\n    float y_deviation5 = 0;\n    float z_deviation5 = 0;\n    float x_deviation6 = 0;\n    float y_deviation6 = 0;\n    float z_deviation6 = 0;\n    float x_deviation7 = 0;\n    float y_deviation7 = 0;\n    float z_deviation7 = 0;\n    float x_deviation8 = 0;\n    float y_deviation8 = 0;\n    float z_deviation8 = 0;\n    float x_deviation9 = 0;\n    float y_deviation9 = 0;\n    float z_deviation9 = 0;\n    float x_deviation10 = 0;\n    float y_deviation10 = 0;\n    float z_deviation10 = 0;\n    float x_deviation11 = 0;\n    float y_deviation11 = 0;\n    float z_deviation11 = 0;\n    float x_deviation12 = 0;\n    float y_deviation12 = 0;\n    float z_deviation12 = 0;\n    float x_deviation13 = 0;\n    float y_deviation13 = 0;\n    float z_deviation13 = 0;\n    float x_deviation14 = 0;\n    float y_deviation14 = 0;\n    float z_deviation14 = 0;\n    float x_deviation15 = 0;\n    float y_deviation15 = 0;\n    float z_deviation15 = 0;\n    float x_deviation16 = 0;\n    float y_deviation16 = 0;\n    float z_deviation16 = 0;\n    float x_deviation17 = 0;\n    float y_deviation17 = 0;\n    float z_deviation17 = 0;\n    float x_deviation18 = 0;\n    float y_deviation18 = 0;\n    float z_deviation18 = 0;\n    float x_deviation19 = 0;\n    float y_deviation19 = 0;\n    float z_deviation19 = 0;\n    \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptmd_2pk7.d(80): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmd_2pk7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfunction meanAbsoluteDeviation(numbers: number[]): number {\n    let sum = 0;\n    let mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    numbers.forEach((n) => {\n        sum += Math.abs(n - mean);\n    });\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=arrays,math,javascript |>\n<| a tags=arrays,math,javascript |>\n<code>\nfunction meanAbsoluteDeviation(numbers) {\n    let sum = 0;\n    let mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    numbers.forEach((n) => {\n        sum += Math.abs(n - mean);\n    });\n    return sum / numbers.length;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfunction meanAbsoluteDeviation(numbers) {\n    let sum = 0;\n    let mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    numbers.forEach((n) => {\n        sum += Math.abs(n - mean);\n    });\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=arrays,math,javascript |>\n<| a |>\n<code>\nfunction meanAbsoluteDeviation(numbers) {\n    let sum = 0;\n    let mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    numbers.forEach((n) => {\n        sum += Math.abs(n - mean);\n    });\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=arrays,math,javascript dscore=2 |>\n<| a dscore=1 |>\n<code>\nfunction meanAbsoluteDeviation(numbers) {\n    let sum = 0;\n    let mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    numbers.forEach((n) => {\n        sum += Math.abs(n - mean);\n    });\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=arrays,math,javascript |>\n<| a tags=arrays,math,javascript |>\n<code>\nfunction meanAbsoluteDeviation(numbers) {\n    let sum = 0;\n    let mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    numbers.forEach((n) => {\n        sum += Math.abs(n - mean);\n    });\n    return sum / numbers.length;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqc3exfe2.d(15): Error: found `in` when expecting `;`\n/tmp/tmpqc3exfe2.d(21): Error: declaration expected, not `<`\n/tmp/tmpqc3exfe2.d(28): Error: function declaration without return type. (Note that constructors are always named `this`)\n/tmp/tmpqc3exfe2.d(28): Error: found `=>` when expecting `)`\n/tmp/tmpqc3exfe2.d(28): Error: no identifier for declarator `numbers.forEach(n)`\n/tmp/tmpqc3exfe2.d(30): Error: declaration expected, not `)`\n/tmp/tmpqc3exfe2.d(31): Error: declaration expected, not `return`\n/tmp/tmpqc3exfe2.d(32): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqc3exfe2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum2 = 0;\n    float mean2 = 0;\n    float deviation2 = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum2 += Math.pow(numbers[i] - mean, 2);\n    }\n    mean2 = sum2 / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += Math.pow(numbers[i] - mean, 2);\n    }\n    deviation = deviation / numbers.length;\n    \n    deviation2 = Math.pow(deviation, 0.5);\n    \n    return deviation2;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplkuzxkcu.d(28): Error: undefined identifier `Math`\n/tmp/tmplkuzxkcu.d(34): Error: undefined identifier `Math`\n/tmp/tmplkuzxkcu.d(38): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplkuzxkcu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float n in numbers)\n    {\n        sum += std.abs(n - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw18qe3u0.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw18qe3u0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    for (int i = 0; i < numbers.length; ++i)\n    {\n        sum += numbers[i];\n    }\n    \n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; ++i)\n    {\n        deviation += numbers[i] - mean;\n    }\n    \n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp474gvfok.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42835d]\n??:? void tmp474gvfok.__unittest_L31_C1() [0x427fb4]\n??:? void tmp474gvfok.__modtest() [0x4280dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428820]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float sum_squares = 0;\n    float squared_sum = 0;\n    float squared_mean = 0;\n    float squared_sum_squares = 0;\n    float squared_squared_sum = 0;\n    float squared_squared_mean = 0;\n    float squared_sum_squares_squared = 0;\n    float squared_squared_sum_squares = 0;\n    float squared_squared_mean_square = 0;\n    float squared_sum_squares_squared_squared = 0;\n    float squared_squared_mean_square_square = 0;\n    float sum_squares_squared = 0;\n    float sum_squares_squared_squared = 0;\n    float sum_squares_squared_mean = 0;\n    float sum_squares_squared_mean_square = 0;\n    float sum_squares_mean = 0;\n    float sum_squares_mean_square = 0;\n    float sum = 0;\n    float sum_squares = 0;\n    float sum_squares_squared = 0;\n    float sum_squares_squared_squared = 0;\n    float sum_squares_squared_mean = 0;\n    float sum_squares_squared_mean_square = 0;\n    float sum_squares_mean = 0;\n    float sum_squares_mean_square = 0;\n    float sum = 0;\n    float sum_squares = 0;\n    float sum_squares_squared = 0;\n    float sum_squares_squared_squared = 0;\n    float sum_squares_squared_mean = 0;\n    float sum_squares_squared_mean_square = 0;\n    float sum_squares_mean = 0;\n    float sum_squares_mean_square = 0;\n    float sum = 0;\n    float sum_squares = 0;\n    float sum_squares_squared = 0;\n    float sum_squares_squared_squared = 0;\n    float sum_squares_squared_mean = 0;\n    float sum_squares_squared_mean_square = 0;\n    float sum_squares_mean = 0;\n    float sum_squares_mean_square = 0;\n    float sum = 0;\n    float sum_squares = 0;\n    float sum_squares_squared = 0;\n    float sum_squares_squared_squared = 0;\n    float sum_squares_squared_mean = 0;\n    float sum_squares_squared_mean_square = 0;\n    float sum_squares_mean = 0;\n    float sum_squares_mean_square = 0;\n    float sum = 0;\n    float sum_squares = 0;\n    float sum_squares_squared = 0;\n    float sum_squares_squared_squared = 0;\n    float sum_squares_squared_mean = 0;\n    float sum_squares_squared_mean_square = 0;\n    float sum_squares_mean = 0;\n    float sum_squares_mean_square = 0;\n    float sum = 0;\n    float sum_squares = 0;\n    float sum_squares_squared = 0;\n    float sum_squares_squared_squared = 0;\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv2h938mw.d(77): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv2h938mw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    median = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - median;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float mode = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mode = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mode;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float median = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    median = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - median;\n    }\n    return deviation / numbers.length;\n}\n/*\n For a given \nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprhiy6wez.d(99): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhiy6wez.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += std.abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += std.abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += std.abs(numbers[i] - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += std.abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptmrqacjl.d(90): Error: found `unittest` instead of statement\n/tmp/tmptmrqacjl.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmrqacjl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float x_mean = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    deviation = deviation / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        x_mean += numbers[i];\n    }\n    x_mean = x_mean / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3ed3dpg9.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4283f5]\n??:? void tmp3ed3dpg9.__unittest_L38_C1() [0x428050]\n??:? void tmp3ed3dpg9.__modtest() [0x428178]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c41f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430445]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]\n??:? runModuleUnitTests [0x42c1f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288b8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        mean += number;\n    }\n    \n    deviation = sum / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1biutxxz.d(17): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1biutxxz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumSquares = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        sumSquares += numbers[i] * numbers[i];\n    }\n    \n    mean = sum / numbers.length;\n    \n    float sumSquareDiff = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        sumSquareDiff += Math.pow(numbers[i] - mean, 2);\n    }\n    \n    return sumSquareDiff / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9h2bvzr5.d(29): Error: undefined identifier `Math`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9h2bvzr5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += abs(numbers[i] - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += abs(numbers[i] - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += abs(numbers[i] - mode);\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqu6z1xz1.d(90): Error: found `unittest` instead of statement\n/tmp/tmpqu6z1xz1.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqu6z1xz1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    float meanSquares = 0;\n    float deviationSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        meanSquares += numbers[i] * numbers[i];\n    }\n    mean = sum / numbers.length;\n    meanSquares = meanSquares / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviationSquares += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    deviation = sqrt(deviationSquares);\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy5i6jo2m.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42842d]\n??:? void tmpy5i6jo2m.__unittest_L36_C1() [0x428084]\n??:? void tmpy5i6jo2m.__modtest() [0x4281ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c457]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43047d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43092c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430409]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c1]\n??:? runModuleUnitTests [0x42c22d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288f0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float sum2 = 0;\n    float mean = 0;\n    float mean2 = 0;\n    float deviation = 0;\n    float deviation2 = 0;\n    float deviation3 = 0;\n    float deviation4 = 0;\n    float deviation5 = 0;\n    float deviation6 = 0;\n    float deviation7 = 0;\n    float deviation8 = 0;\n    float deviation9 = 0;\n    float deviation10 = 0;\n    float deviation11 = 0;\n    float deviation12 = 0;\n    float deviation13 = 0;\n    float deviation14 = 0;\n    float deviation15 = 0;\n    float deviation16 = 0;\n    float deviation17 = 0;\n    float deviation18 = 0;\n    float deviation19 = 0;\n    float deviation20 = 0;\n    float deviation21 = 0;\n    float deviation22 = 0;\n    float deviation23 = 0;\n    float deviation24 = 0;\n    float deviation25 = 0;\n    float deviation26 = 0;\n    float deviation27 = 0;\n    float deviation28 = 0;\n    float deviation29 = 0;\n    float deviation30 = 0;\n    float deviation31 = 0;\n    float deviation32 = 0;\n    float deviation33 = 0;\n    float deviation34 = 0;\n    float deviation35 = 0;\n    float deviation36 = 0;\n    float deviation37 = 0;\n    float deviation38 = 0;\n    float deviation39 = 0;\n    float deviation40 = 0;\n    float deviation41 = 0;\n    float deviation42 = 0;\n    float deviation43 = 0;\n    float deviation44 = 0;\n    float deviation45 = 0;\n    float deviation46 = 0;\n    float deviation47 = 0;\n    float deviation48 = 0;\n    float deviation49 = 0;\n    float deviation50 = 0;\n    float deviation51 = 0;\n    float deviation52 = 0;\n    float deviation53 = 0;\n    float deviation54 = 0;\n    float deviation55 = 0;\n    float deviation56 = 0;\n    float deviation57 = 0;\n    float deviation58 = 0;\n    float deviation59 = 0;\n    float deviation60 = 0;\n    float deviation61 = 0;\n    float deviation62 = 0;\n    float deviation63 = 0;\n    float deviation64 = 0;\n    float deviation65 = 0;\n    float deviation66 = 0;\n    float deviation67 = 0;\n    float deviation68 = 0;\n    float deviation69 = 0;\n    float deviation70 = 0;\n    float deviation71\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvha9g6ig.d(88): Error: semicolon expected, not `unittest`\n/tmp/tmpvha9g6ig.d(88): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvha9g6ig.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += abs(numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\n</code>\n<|/ a tags=c++,math,statistics |>\n<| c |>\nThis code does not compile. `std.mean` does not exist. `std.abs` is also not defined. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist. `std.sqrt` does not exist\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxthkiu71.d(21): Error: declaration expected, not `<`\n/tmp/tmpxthkiu71.d(29): Error: declaration expected, not `assert`\n/tmp/tmpxthkiu71.d(30): Error: declaration expected, not `assert`\n/tmp/tmpxthkiu71.d(31): Error: declaration expected, not `assert`\n/tmp/tmpxthkiu71.d(32): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxthkiu71.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float mad = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        mad = mad + abs(numbers[i] - mean);\n    }\n    \n    return mad / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa7mg8qxw.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4283e5]\n??:? void tmpa7mg8qxw.__unittest_L30_C1() [0x428145]\n??:? void tmpa7mg8qxw.__modtest() [0x428164]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c433]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b2c6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430459]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430908]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b29d]\n??:? runModuleUnitTests [0x42c209]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4288a8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaob2b8wn.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaob2b8wn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float sumOfSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n        sumOfSquares += numbers[i] * numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    sumOfSquares = sumOfSquares / numbers.length;\n    \n    return sumOfSquares - mean * mean;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv40tpcjx.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428375]\n??:? void tmpv40tpcjx.__unittest_L28_C1() [0x427fd0]\n??:? void tmpv40tpcjx.__modtest() [0x4280f8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c39f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b232]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303c5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430874]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430351]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b209]\n??:? runModuleUnitTests [0x42c175]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428838]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaob2b8wn.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaob2b8wn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgd_9j_r.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpdgd_9j_r.__unittest_L27_C1() [0x427fa0]\n??:? void tmpdgd_9j_r.__modtest() [0x4280c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b202]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430395]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430844]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430321]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]\n??:? runModuleUnitTests [0x42c145]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxuw7yyta.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxuw7yyta.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    \n    mean = sum / numbers.length;\n    \n    float deviation = 0;\n    \n    for (int i = 0; i < numbers.length; i++)\n    {\n        deviation += fabs(numbers[i] - mean);\n    }\n    \n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2_6dk6s0.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42838d]\n??:? void tmp2_6dk6s0.__unittest_L32_C1() [0x4280f9]\n??:? void tmp2_6dk6s0.__modtest() [0x42810c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b26e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430401]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43038d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b245]\n??:? runModuleUnitTests [0x42c1b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428850]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int size) \n{\n    float sum = 0;\n    float mean = std.mean(numbers, size);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int size, int stride) \n{\n    float sum = 0;\n    float mean = std.mean(numbers, size, stride);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int size, int stride, float mean) \n{\n    float sum = 0;\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int size, int stride, float mean, float std) \n{\n    float sum\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpopble8tv.d(15): Error: found `in` when expecting `;`\n/tmp/tmpopble8tv.d(33): Error: found `in` when expecting `;`\n/tmp/tmpopble8tv.d(51): Error: found `in` when expecting `;`\n/tmp/tmpopble8tv.d(68): Error: found `in` when expecting `;`\n/tmp/tmpopble8tv.d(85): Error: semicolon expected, not `unittest`\n/tmp/tmpopble8tv.d(85): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpopble8tv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float n in numbers)\n    {\n        sum += (n - mean) * (n - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4dzy_bzn.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4dzy_bzn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    float deviation = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    return deviation / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgd_9j_r.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428345]\n??:? void tmpdgd_9j_r.__unittest_L27_C1() [0x427fa0]\n??:? void tmpdgd_9j_r.__modtest() [0x4280c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c36f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b202]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430395]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430844]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430321]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]\n??:? runModuleUnitTests [0x42c145]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428808]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        deviation += numbers[i] - mean;\n    }\n    deviation = deviation / numbers.length;\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpb3xp_zkg.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42835d]\n??:? void tmpb3xp_zkg.__unittest_L31_C1() [0x427fb4]\n??:? void tmpb3xp_zkg.__modtest() [0x4280dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c387]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b21a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43085c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430339]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]\n??:? runModuleUnitTests [0x42c15d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428820]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int size) \n{\n    float sum = 0;\n    float mean = std.mean(numbers, size);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int size, int stride) \n{\n    float sum = 0;\n    float mean = std.mean(numbers, size, stride);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int size, int stride, float mean) \n{\n    float sum = 0;\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers, int size, int stride, float mean, float stddev) \n{\n    float sum\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpn00h4vio.d(15): Error: found `in` when expecting `;`\n/tmp/tmpn00h4vio.d(33): Error: found `in` when expecting `;`\n/tmp/tmpn00h4vio.d(51): Error: found `in` when expecting `;`\n/tmp/tmpn00h4vio.d(68): Error: found `in` when expecting `;`\n/tmp/tmpn00h4vio.d(85): Error: semicolon expected, not `unittest`\n/tmp/tmpn00h4vio.d(85): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn00h4vio.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sumSquares = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sumSquares += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    deviation = sqrt(sumSquares / numbers.length);\n    \n    return deviation;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn3kpvz_l.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4283a5]\n??:? void tmpn3kpvz_l.__unittest_L32_C1() [0x428089]\n??:? void tmpn3kpvz_l.__modtest() [0x428128]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b262]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430381]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b239]\n??:? runModuleUnitTests [0x42c1a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428868]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += (numbers[i] - mean) * (numbers[i] - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxuw7yyta.d(14): Error: undefined identifier `mean` in package `std`, did you mean module `meta`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxuw7yyta.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = 0;\n    float deviation = 0;\n    float sum_squares = 0;\n    float mean_squares = 0;\n    \n    foreach(float number in numbers)\n    {\n        sum += number;\n        mean_squares += number * number;\n    }\n    mean_squares = mean_squares / numbers.length;\n    \n    foreach(float number in numbers)\n    {\n        deviation += Math.pow(number - mean, 2);\n        sum_squares += Math.pow(number, 2);\n    }\n    deviation = deviation / numbers.length;\n    \n    return sum_squares / numbers.length - mean_square / numbers.length;\n}\n</code>\n<|/ a tags=c#,algorithm,statistics,math,.net |>\n<| c |>\nThis is not the correct definition of MAD. MAD is defined as the mean absolute deviation. Your code calculates the mean absolute deviation for each number in the dataset. MAD is the mean of the absolute deviations from the mean.\n<|/ c |>\n<| c |>\n: You are correct. I've corrected my answer.\n<|/ c |>\n<| c |>\nI believe this answer is wrong. MAD is defined as the mean absolute deviation. Your code calculates the mean absolute deviation for each number in the dataset. MAD is the mean of the absolute deviations from the mean.\n<|/ c |>\n<| c |>\n: You are correct. I've corrected my answer.\n<|/ c |>\n<| a dscore=4 |>\nI wrote a C# library for calculating MAD using LINQ and a little bit of math. \n<code>\npublic static class MathExtensions\n{\n    public static double MAD(this IEnumerable<double> values)\n    {\n        var mad = values.Select(v => Math.Abs(v - values.Average())).Average();\n        return mad;\n    }\n}\n</code>\n<|/ a tags=c#,algorithm,statistics,math,.net |>\n<| c |>\nI believe this answer is wrong. MAD is defined as the mean absolute deviation. Your code calculates the mean absolute deviation for each number in the dataset. MAD is the mean of the absolute deviations from the mean.\n<|/ c |>\n<| c |>\nThis answer is wrong. MAD is defined as the mean absolute deviation. Your code calculates the mean absolute deviation for each number in the dataset. MAD is the mean of the absolute deviations from the mean.\n<|/ c |>\n<| c |>\nThis answer is wrong. MAD\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph1dph2cf.d(19): Error: found `in` when expecting `;`\n/tmp/tmph1dph2cf.d(26): Error: found `in` when expecting `;`\n/tmp/tmph1dph2cf.d(35): Error: declaration expected, not `<`\n/tmp/tmph1dph2cf.d(41): Error: unterminated character constant\n/tmp/tmph1dph2cf.d(47): Error: unterminated character constant\n/tmp/tmph1dph2cf.d(57): Error: declaration expected, not `return`\n/tmp/tmph1dph2cf.d(58): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1dph2cf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float mean = 0;\n    float sum = 0;\n    float mad = 0;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        sum += numbers[i];\n    }\n    \n    mean = sum / numbers.length;\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        mad = mad + abs(numbers[i] - mean);\n    }\n    \n    return mad;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyruxj0x5.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4283ad]\n??:? void tmpyruxj0x5.__unittest_L31_C1() [0x427ff8]\n??:? void tmpyruxj0x5.__modtest() [0x42812c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b28e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430421]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4308d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4303ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b265]\n??:? runModuleUnitTests [0x42c1d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428870]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float x in numbers)\n    {\n        sum += std.abs(x - mean);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach(float x in numbers)\n    {\n        sum += std.abs(x - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    foreach(float x in numbers)\n    {\n        sum += std.abs(x - mode);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the median of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n        \n*/\nfloat median_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float median = std.median(numbers);\n    foreach(float x in numbers)\n    {\n        sum += std.abs(x - median);\n    }\n    return sum / numbers.length;\n}\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mode of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mode in this case):\n    MAD = average | x - x_mode |\n        \n*/\nfloat mode_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mode = std.mode(numbers);\n    foreach(float x in numbers)\n    {\n        sum += std.abs(x - mode);\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9h_63_33.d(15): Error: found `in` when expecting `;`\n/tmp/tmp9h_63_33.d(33): Error: found `in` when expecting `;`\n/tmp/tmp9h_63_33.d(51): Error: found `in` when expecting `;`\n/tmp/tmp9h_63_33.d(69): Error: found `in` when expecting `;`\n/tmp/tmp9h_63_33.d(87): Error: found `in` when expecting `;`\n/tmp/tmp9h_63_33.d(90): Error: found `unittest` instead of statement\n/tmp/tmp9h_63_33.d(98): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9h_63_33.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164186
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n        \n*/\nfloat mean_absolute_deviation(float[] numbers) \n{\n    float sum = 0;\n    float mean = std.mean(numbers);\n    foreach(float number in numbers)\n    {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum / numbers.length;\n}\nunittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp80gtnc5e.d(15): Error: found `in` when expecting `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80gtnc5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164185
    }
  ]
}