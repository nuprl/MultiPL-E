language: d
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpee3c9tnz.d(13): Error: no identifier for declarator dict\n/tmp/tmpee3c9tnz.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpee3c9tnz.d(20): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpee3c9tnz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key]))\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5rxjwbzi.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rxjwbzi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\n</code>\n<|/ a tags=d,string,case-sensitive,dictionary\
    \ |>\n<| a dscore=2 |>\nI like using std.algorithm.toLower or std.algorithm.toUpper\n\
    <code>\nimport std.algorithm;\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf9jjbo11.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpf9jjbo11.d(19):
    Error: Declaration expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpf9jjbo11.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(isLower(key) || isUpper(key))) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvfb3bo5s.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfb3bo5s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn68g_zz8.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn68g_zz8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) {\n        if (!(key.to_lowercase() == key)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkhe1wyd3.d(13): Error: no identifier for declarator dict\n/tmp/tmpkhe1wyd3.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpkhe1wyd3.d(18): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkhe1wyd3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) {\n        if (!is_string(key)) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpukmryiio.d(13): Error: no identifier for declarator dict\n/tmp/tmpukmryiio.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpukmryiio.d(18): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpukmryiio.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(is_string(key) && is_string(dict[key]))) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n  \
    \  alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpthfw0la2.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthfw0la2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        bool isLower = key.isLower();\n        bool isUpper = key.isUpper();\n\
    \        if(!isLower && !isUpper) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jk9stk5.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jk9stk5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!is_string(k))\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbp5u3ff5.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbp5u3ff5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        string value = dict[key];\n        if (value.length() ==\
    \ 0) {\n            return false;\n        }\n        if (value.length() == 1)\
    \ {\n            if (value[0] < 'a' || value[0] > 'z') {\n                return\
    \ false;\n            }\n        }\n        if (value.length() == 2) {\n     \
    \       if (value[0] < 'A' || value[0] > 'Z') {\n                return false;\n\
    \            }\n            if (value[1] < 'a' || value[1] > 'z') {\n        \
    \        return false;\n            }\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpceqjv43_.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpceqjv43_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!std.string.isLower(key))\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj9jsje2v.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9jsje2v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        string lowerKey = key.to_lower();\n        string upperKey\
    \ = key.to_upper();\n        if(!dict.contains(lowerKey) || !dict.contains(upperKey))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn08f6wsb.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn08f6wsb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key])) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ys75biq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ys75biq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!is_string(k) || !is_string(dict[k]))\n           \
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0qyoc36e.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0qyoc36e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(key is string)) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjgk5j_5e.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgk5j_5e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key])) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ys75biq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ys75biq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    \n    foreach (string key in dict) {\n        if (!(key is string)\
    \ || !(key is string)) return false;\n        if (key.caseInsensitiveCompare(key.lowercase())\
    \ != 0) return false;\n        if (key.caseInsensitiveCompare(key.uppercase())\
    \ != 0) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplhe5bn0m.d(15): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhe5bn0m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!is_string(key)) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwpj7yrio.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpj7yrio.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(dict[key] is string)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nj61bvq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nj61bvq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (dict[key] == null) {\n            return false;\n  \
    \      }\n        if (dict[key].length != 0) {\n            if (dict[key].length\
    \ != dict[key].toLower()) {\n                return false;\n            }\n  \
    \      }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpku1glfsi.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpku1glfsi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!std.string.isLower(key)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwb8smm1x.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwb8smm1x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplyqmxl7x.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplyqmxl7x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5apx2fiv.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5apx2fiv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(dict[key] is string)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nj61bvq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nj61bvq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!isLower(key)) {\n            return false;\n       \
    \ }\n        if(!isUpper(key)) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpru4_d1l9.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpru4_d1l9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0vdeetu.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0vdeetu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key])) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ys75biq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ys75biq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key]))\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5rxjwbzi.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rxjwbzi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict) {\n        if (!k.isLower()) return false;\n        if (!k.isUpper())\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps6fc180i.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6fc180i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (key.isLower) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to do it without using any external libraries.\
    \ I mean the solution should be in pure C/C++.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses only standard libraries.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ uses only standard libraries.\n<|/ c |>\n<| c |>\nI added a solution that uses\
    \ only standard libraries.\n<|/ c |>\n<| a |>\nHere's a solution using only standard\
    \ libraries:\n<code>\n#include <algorithm>\n#include <cctype>\n#include <cstdint>\n\
    #include <cstring>\n#include <iostream>\n#include <string>\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkarb1_8s.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpkarb1_8s.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmpkarb1_8s.d(35): Error: unterminated
    character constant\n/tmp/tmpkarb1_8s.d(47): Error: Declaration expected, not \''assert\''\n/tmp/tmpkarb1_8s.d(48):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpkarb1_8s.d(49): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpkarb1_8s.d(50): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpkarb1_8s.d(51): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpkarb1_8s.d(52): Error: Declaration expected, not \''assert\''\n/tmp/tmpkarb1_8s.d(53):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpkarb1_8s.d(54): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkarb1_8s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0vdeetu.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0vdeetu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpivavfgbw.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivavfgbw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(isLower(key) || isUpper(key))) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvfb3bo5s.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfb3bo5s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn68g_zz8.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn68g_zz8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    foreach (string key in dict) {\n        if (!(key.size() == 1 &&\
    \ key[0] == 'a')) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsugbdm4y.d(14): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsugbdm4y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(dict[key] is string)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nj61bvq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nj61bvq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplyqmxl7x.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplyqmxl7x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.is_string(key) || !std.is_string(dict[key]))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph36zilz.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph36zilz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_jadc56e.d(13): Error: no identifier for declarator dict\n/tmp/tmp_jadc56e.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp_jadc56e.d(17): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_jadc56e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplyqmxl7x.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplyqmxl7x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(is_string(key) || is_string(key.to_lower()))) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq1hhq_hh.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1hhq_hh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) {\n        if (!is_string(key)) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpukmryiio.d(13): Error: no identifier for declarator dict\n/tmp/tmpukmryiio.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpukmryiio.d(18): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpukmryiio.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(dict[key] is string)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nj61bvq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nj61bvq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!is_string(key) || !is_string(dict[key]))\n        \
    \    return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu5ydhmyh.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5ydhmyh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (dict[key] == null) {\n            return false;\n  \
    \      }\n        if (dict[key].length != 0) {\n            foreach(char c in\
    \ dict[key]) {\n                if (c >= 'A' && c <= 'Z') {\n                \
    \    return false;\n                }\n                if (c >= 'a' && c <= 'z')\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvt8029a3.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpvt8029a3.d(18):
    Error: found \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvt8029a3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!std.isLowercase(key) || !std.isUppercase(key))\n   \
    \         return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd8fo97nr.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8fo97nr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpee3c9tnz.d(13): Error: no identifier for declarator dict\n/tmp/tmpee3c9tnz.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpee3c9tnz.d(20): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpee3c9tnz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    \n    foreach(string key in dict.keys) {\n        if (!(isLower(key)\
    \ || isUpper(key))) return false;\n    }\n    \n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplw9fbg8s.d(15): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplw9fbg8s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(dict[key] is string)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nj61bvq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nj61bvq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (dict[key] is string) {\n            if (dict[key].length\
    \ != 0) {\n                if (dict[key].isLower) {\n                    return\
    \ true;\n                }\n                else {\n                    return\
    \ false;\n                }\n            }\n            else {\n             \
    \   return false;\n            }\n        }\n        else {\n            return\
    \ false;\n        }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\nimport std.algorithm;\nimport std.conv;\nimport std.string;\n\
    import std.stdio;\nimport std.conv;\nimport std.array;\nimport std.array;\nimport\
    \ std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\n\
    import std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\n\
    import std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\n\
    import std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\n\
    import std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\n\
    import std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\n\
    import std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\n\
    import std.conv;\nimport std.conv;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.conv;\nimport st\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4n387rp1.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4n387rp1.d(33):
    Error: Declaration expected, not \''<\''\n/tmp/tmp4n387rp1.d(109): Error: \'';\''
    expected\n/tmp/tmp4n387rp1.d(110): Error: Declaration expected, not \''{\''\n/tmp/tmp4n387rp1.d(113):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp4n387rp1.d(114): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp4n387rp1.d(115): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp4n387rp1.d(116): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp4n387rp1.d(117): Error: Declaration expected, not \''assert\''\n/tmp/tmp4n387rp1.d(118):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp4n387rp1.d(119): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp4n387rp1.d(120): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4n387rp1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    \n    foreach (string key in dict) {\n        if (!std.string.isLowercase(key)\
    \ || !std.string.isUppercase(key)) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_cyfqofa.d(15): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_cyfqofa.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!key.IsLower()) {\n            return false;\n      \
    \  }\n    }\n    foreach(string key in dict) {\n        if(!key.IsUpper()) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvs0x51y8.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpvs0x51y8.d(18):
    Error: found \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvs0x51y8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9bqrgo2t.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9bqrgo2t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!std.string.isLower(key))\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj9jsje2v.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9jsje2v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!key.IsLower()) return false;\n        if(!key.IsUpper())\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6pxp8hgx.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6pxp8hgx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        string lowerKey = key.to_lower();\n        string upperKey\
    \ = key.to_upper();\n        if(!dict.contains(lowerKey) || !dict.contains(upperKey))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn08f6wsb.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn08f6wsb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    \n    foreach (string key in dict.keys) {\n        string lowerKey\
    \ = key.to_lowercase();\n        string upperKey = key.to_uppercase();\n     \
    \   if (lowerKey != upperKey) return false;\n    }\n    \n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkjd3c4nu.d(15): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkjd3c4nu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict) {\n        if(!is_string(k)) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2ka9i_q.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2ka9i_q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.isLowercase(key) || !std.isUppercase(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5llhjl8b.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5llhjl8b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        string lowerCaseKey = key.to_lowercase();\n      \
    \  string upperCaseKey = key.to_uppercase();\n        if(lowerCaseKey == key ||\
    \ upperCaseKey == key)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpujnmnzyi.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujnmnzyi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key])) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ys75biq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ys75biq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (dict[key] == null) {\n            return false;\n  \
    \      }\n        bool isUpper = isUpper(key);\n        bool isLower = isLower(key);\n\
    \        if (isUpper != isLower) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9olb8io0.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp9olb8io0.d(25):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9olb8io0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!key.IsLower()) return false;\n        if(!key.IsUpper())\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6pxp8hgx.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6pxp8hgx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    \n    foreach (string key in dict.keys) \n    {\n        if (!(key\
    \ == key.ToLower())) return false;\n        if (!(key == key.ToUpper())) return\
    \ false;\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpph313gkf.d(15): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpph313gkf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(is_string(key) || is_string(key.upcase()))) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqyuay2qd.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqyuay2qd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!std.string.isLower(key)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwb8smm1x.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwb8smm1x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key])) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ys75biq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ys75biq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpivavfgbw.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivavfgbw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!std.string.isLower(k))\n        {\n            return\
    \ false;\n        }\n    }\n    foreach(string k in dict)\n    {\n        if(!std.string.isUpper(k))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk1plkp1v.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpk1plkp1v.d(20):
    Error: found \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpk1plkp1v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0vdeetu.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0vdeetu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key]))\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5rxjwbzi.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rxjwbzi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict) \n    {\n        if(!std.string.isLower(k)) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvtmxrqc2.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvtmxrqc2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!std.string.isLowercase(key) || !std.string.isUppercase(key))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl5d2d7k1.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl5d2d7k1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!isLower(key) || !isUpper(key)) return false;\n\
    \    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp58v1fppk.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp58v1fppk.d(19):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp58v1fppk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!is_string(k) || !is_string(dict[k]))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpegtxh3vk.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegtxh3vk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) {\n        if (key == null || key.empty()) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5hocmevj.d(13): Error: no identifier for declarator dict\n/tmp/tmp5hocmevj.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp5hocmevj.d(18): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5hocmevj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!std.string.isLower(key))\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj9jsje2v.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9jsje2v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict) \n    {\n        if(!std.string.isLower(k)) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvtmxrqc2.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvtmxrqc2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict) {\n        if (k == k.to_lowercase()) {\n            return true;\n  \
    \      }\n        if (k == k.to_uppercase()) {\n            return true;\n   \
    \     }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphvupo3xd.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphvupo3xd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn68g_zz8.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn68g_zz8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (dict[key] == null) {\n            return false;\n  \
    \      }\n        char c = tolower(dict[key]);\n        if (c == toupper(c)) {\n\
    \            continue;\n        }\n        return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprs9ln4eg.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprs9ln4eg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!k.isLower())\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2lki1hfs.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lki1hfs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpivavfgbw.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivavfgbw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(dict[key] is string)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3nj61bvq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nj61bvq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpivavfgbw.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivavfgbw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!std.string.isLower(key))\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj9jsje2v.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9jsje2v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!std.string.isLower(key)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwb8smm1x.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwb8smm1x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(is_string(key) && is_string(dict[key]))) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n  \
    \  alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpthfw0la2.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthfw0la2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) \n    {\n        if(!std.isLower(key) || !std.isUpper(key))\n        \
    \    return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0kmgm2ic.d(13): Error: no identifier for declarator dict\n/tmp/tmp0kmgm2ic.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp0kmgm2ic.d(18): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp0kmgm2ic.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(key.to_lowercase() == key)) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkpppqkmo.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpppqkmo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!std.string.isLower(key)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwb8smm1x.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwb8smm1x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key]))\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5rxjwbzi.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rxjwbzi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    \n    foreach (string key in dict) {\n        if (!std.string.isLowercase(key)\
    \ || !std.string.isUppercase(key)) return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk18wxq_z.d(15): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk18wxq_z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0vdeetu.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0vdeetu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    \n    foreach (string key in dict) {\n        if (!(key.caseInsensitiveCompare(key.lowercase())\
    \ == 0)) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps043xaz6.d(15): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps043xaz6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key])) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ys75biq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ys75biq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(isLowercase(key) || isUppercase(key))) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5pwiohxi.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5pwiohxi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict) \n    {\n        if(!k.isLower()) return false;\n    }\n    foreach(string\
    \ k in dict) \n    {\n        if(!k.isUpper()) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpma4gqh1k.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpma4gqh1k.d(17):
    Error: found \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpma4gqh1k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (dict[key] == null) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd5ofy68l.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5ofy68l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!isLower(key))\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi9s13rjv.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9s13rjv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.is_string(key) || !std.is_string(dict[key]))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptwf0128l.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwf0128l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!key.IsLower()) return false;\n        if(!key.IsUpper())\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6pxp8hgx.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6pxp8hgx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn68g_zz8.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn68g_zz8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n      \
    \  {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9x1lw2xy.d(13): Error: no identifier for declarator dict\n/tmp/tmp9x1lw2xy.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp9x1lw2xy.d(20): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9x1lw2xy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpivavfgbw.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivavfgbw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn68g_zz8.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn68g_zz8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key]))\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5rxjwbzi.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rxjwbzi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!std.string.isLower(key))\n        {\n         \
    \   return false;\n        }\n    }\n    foreach(string key in dict)\n    {\n\
    \        if(!std.string.isUpper(key))\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=d,string,case-sensitive\
    \ |>\n<| c |>\nThis doesn't work if you have a dictionary that has keys that are\
    \ both upper and lower case. For example, `{\"a\":\"A\",\"b\":\"B\"}` will return\
    \ `True` when it should return `False`.\n<|/ c |>\n<| c |>\n: Yes, you are right.\
    \ I've updated the answer to reflect that.\n<|/ c |>\n<| a dscore=2 |>\nI wrote\
    \ a library for this: https://github.com/dlang-libc/libc\n<code>\nimport std.stdio;\n\
    import std.string;\nimport std.algorithm;\nunittest\n{\n    alias candidate =\
    \ check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"\
    ].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\"\
    , \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplqpgyo9i.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmplqpgyo9i.d(20):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmplqpgyo9i.d(29): Error: Declaration
    expected, not \''<\''\n/tmp/tmplqpgyo9i.d(32): Error: unterminated character constant\n/tmp/tmplqpgyo9i.d(35):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmplqpgyo9i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!is_string(k) || !is_string(dict[k]))\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpegtxh3vk.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegtxh3vk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (dict[key] == null) {\n            return false;\n  \
    \      }\n        if (dict[key].length() != 0) {\n            foreach(char c in\
    \ dict[key]) {\n                if (c >= 'A' && c <= 'Z') {\n                \
    \    return false;\n                }\n                if (c >= 'a' && c <= 'z')\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ly179qk.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1ly179qk.d(18):
    Error: found \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp1ly179qk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!k.isLower())\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2lki1hfs.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lki1hfs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key]))\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5rxjwbzi.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rxjwbzi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    foreach (string key in dict.keys) \n    {\n        if (!(key.size()\
    \ == 1 && key[0] >= 'A' && key[0] <= 'Z')) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp113t7agy.d(14): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp113t7agy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0vdeetu.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0vdeetu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(isLower(key) || isUpper(key))) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvfb3bo5s.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfb3bo5s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict == null)\n\
    \        return false;\n    foreach (string key in dict)\n    {\n        if (!(key\
    \ is string))\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt2zc5fzy.d(15): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt2zc5fzy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(isLowercase(key) || isUppercase(key))) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpebregorc.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpebregorc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn68g_zz8.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn68g_zz8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!is_string(key))\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd254rq2l.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd254rq2l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(key is string)) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjgk5j_5e.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgk5j_5e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        string lowerCase = key.to_lowercase();\n        string upperCase\
    \ = key.to_uppercase();\n        if (lowerCase == upperCase) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ga4kq9_.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ga4kq9_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0vdeetu.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0vdeetu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!k.isLower())\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2lki1hfs.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lki1hfs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    \n    foreach (string key in dict) {\n        if (!(key == key.ToLower()))\
    \ return false;\n        if (!(key == key.ToUpper())) return false;\n    }\n \
    \   \n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_d5180sw.d(15): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_d5180sw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    foreach (string key in dict.keys) \n    {\n        if (key.isLower())\
    \ return true;\n        if (key.isUpper()) return true;\n    }\n    return false;\n\
    }\n</code>\n<|/ a tags=dictionary,c#,.net |>\n<| a tags=dictionary,c#,.net |>\n\
    <code>\npublic static bool IsCaseInsensitiveDictionary(this IDictionary<string,\
    \ object> dictionary)\n{\n    if (dictionary == null)\n    {\n        throw new\
    \ ArgumentNullException(nameof(dictionary));\n    }\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ne5_6do.d(14): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp5ne5_6do.d(21):
    Error: Declaration expected, not \''<\''\n/tmp/tmp5ne5_6do.d(30): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ne5_6do.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpee3c9tnz.d(13): Error: no identifier for declarator dict\n/tmp/tmpee3c9tnz.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpee3c9tnz.d(20): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpee3c9tnz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(key.to_lowercase() == key)) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkpppqkmo.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpppqkmo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n   \
    \         return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmqa6bi62.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqa6bi62.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) {\n        if (!(key.to_lowercase() == key)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkhe1wyd3.d(13): Error: no identifier for declarator dict\n/tmp/tmpkhe1wyd3.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpkhe1wyd3.d(18): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkhe1wyd3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!is_string(k))\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbp5u3ff5.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbp5u3ff5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull)\n\
    \        return false;\n    \n    foreach(string key in dict.keys) {\n       \
    \ if (key.isLower)\n            return false;\n        if (key.isUpper)\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpigvyi0lh.d(16): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigvyi0lh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9bqrgo2t.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9bqrgo2t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5apx2fiv.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5apx2fiv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!is_string(k))\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbp5u3ff5.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbp5u3ff5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0vdeetu.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0vdeetu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0vdeetu.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0vdeetu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        bool isUpper = isupper(key);\n        bool isLower = islower(key);\n\
    \        if(isUpper != isLower) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd5i6gmbi.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5i6gmbi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.isNull) return\
    \ true;\n    foreach (string key in dict) {\n        if (!(key.size() == 1 &&\
    \ key[0] == 'a')) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsugbdm4y.d(14): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsugbdm4y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa3pb4ikq.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3pb4ikq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe0ajs_6z.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0ajs_6z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!key.IsLower())\n            return false;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n \
    \   assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn5zaau1r.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn5zaau1r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!key.IsLower()) return false;\n        if(!key.IsUpper())\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6pxp8hgx.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6pxp8hgx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!(key is string))\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\n\
    \    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"\
    ].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"\
    banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\"\
    : \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n   \
    \ assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqvvl9lfs.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvvl9lfs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl2ht2lng.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2ht2lng.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpivavfgbw.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivavfgbw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!k.isLower())\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2lki1hfs.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lki1hfs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!std.string.isLower(key) || !std.string.isUpper(key))\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9bqrgo2t.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9bqrgo2t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!is_string(key) || !is_string(dict[key]))\n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn68g_zz8.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn68g_zz8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!k.isLower())\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2lki1hfs.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lki1hfs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0vdeetu.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0vdeetu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        string lowerCase = key.to_lowercase();\n        string upperCase\
    \ = key.to_uppercase();\n        if(lowerCase == upperCase) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc0fo7cym.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc0fo7cym.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict.is_null) {\n\
    \        return false;\n    }\n    \n    foreach(string key in dict) {\n     \
    \   if (!(key.to_lowercase() == key)) {\n            return false;\n        }\n\
    \    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeup1prtw.d(17): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeup1prtw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key])) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn0vdeetu.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0vdeetu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) \n    {\n        if(!is_string(key) || !is_string(dict[key]))\n   \
    \     {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\"\
    , \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpivavfgbw.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivavfgbw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if (!is_string(key)) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwpj7yrio.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpj7yrio.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict)\n    {\n        if(!std.isLower(k))\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9asa2az.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9asa2az.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) \n    {\n        if(!isLower(key) || !isUpper(key))\n        {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=d,string,case-sensitive,dictionary\
    \ |>\n<| a tags=d,string,case-sensitive,dictionary |>\nI came up with this solution:\n\
    <code>\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\nimport std.array;\n\
    unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjpm_1v5k.d(13): Error: no identifier for declarator dict\n/tmp/tmpjpm_1v5k.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpjpm_1v5k.d(20): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmpjpm_1v5k.d(22): Error: Declaration
    expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpm_1v5k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!is_string(key))\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd254rq2l.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd254rq2l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!key.to_lowercase().equals(key)) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3psstl4d.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3psstl4d.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string k in\
    \ dict) {\n        if (!k.isLower()) return false;\n    }\n    foreach(string\
    \ k in dict) {\n        if (!k.isUpper()) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"\
    p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n\
    \    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"\
    ].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\"\
    : \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\"\
    : \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp7srksiv.d(13): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpp7srksiv.d(16):
    Error: found \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpp7srksiv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    if (dict == null)\n\
    \        return false;\n    foreach (string key in dict) {\n        if (!(key\
    \ is string))\n            return false;\n        string s = key;\n        if\
    \ (s.isLower())\n            return true;\n        if (s.isUpper())\n        \
    \    return true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=dictionary,c#,.net |>\n<code>\npublic static bool IsStringInUpperOrLower(this\
    \ Dictionary<string, string> dictionary, string key)\n{\n    return dictionary.ContainsKey(key)\
    \ && dictionary[key].ToUpper() == dictionary[key];\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\npublic static bool IsStringInUpperOrLower(this Dictionary<string,\
    \ string> dictionary, string key)\n{\n    return dictionary.ContainsKey(key) &&\
    \ dictionary[key].ToUpper() == dictionary[key];\n}\n</code>\n<|/ a tags=dictionary,c#,.net\
    \ dscore=1 |>\n<| a |>\n<code>\npublic static bool IsStringInUpperOrLower(this\
    \ Dictionary<string, string> dictionary, string key)\n{\n    return dictionary.ContainsKey(key)\
    \ && dictionary[key].ToUpper() == dictionary[key];\n}\n</code>\n<|/ a tags=dictionary,c#,.net\
    \ dscore=1 |>\n<| a tags=dictionary,c#,.net |>\n<code>\npublic static bool IsStringInUpperOrLower(this\
    \ Dictionary<string, string> dictionary, string key)\n{\n    return dictionary.ContainsKey(key)\
    \ && dictionary[key].ToUpper() == dictionary[key];\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=dictionary,c#,.net |>\n<code>\npublic static bool IsStringInUpperOrLower(this\
    \ Dictionary<string, string> dictionary, string key)\n{\n    return dictionary.ContainsKey(key)\
    \ && dictionary[key].ToUpper() == dictionary[key];\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\npublic static bool IsStringInUpperOrLower(this Dictionary<string,\
    \ string> dictionary, string key)\n{\n    return dictionary.ContainsKey(key) &&\
    \ dictionary[key].ToUpper() == dictionary[key];\n}\n</code>\n<|/ a tags=dictionary,c#,.net\
    \ dscore=1 |>\n<| a tags=dictionary,c#,.net |>\n<code>\npublic static bool IsStringInUpperOrLower(this\
    \ Dictionary<string, string> dictionary, string key)\n{\n    return dictionary.ContainsKey(key)\
    \ && dictionary[key].ToUpper() == dictionary[key];\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=dictionary,c\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj2h8oyy4.d(15): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpj2h8oyy4.d(26):
    Error: Declaration expected, not \''<\''\n/tmp/tmpj2h8oyy4.d(33): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2h8oyy4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key) || !is_string(dict[key]))\n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"\
    banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5rxjwbzi.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rxjwbzi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!is_string(key)) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplpy50q7u.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpy50q7u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key,\
    \ dict) {\n        if(!is_string(key) || !is_string(dict[key]))\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwlyflyyq.d(13): Error: no identifier for declarator dict\n/tmp/tmpwlyflyyq.d(13):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmpwlyflyyq.d(17): Error: found
    \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwlyflyyq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015348
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict) {\n        if(!std.string.isLower(key)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = check_dict_case;\n\
    \n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) ==\
    \ true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n\
    \    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n\
    \    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable)\
    \ == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwb8smm1x.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwb8smm1x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n                        \n*/\nbool\
    \ check_dict_case(Nullable!(string[string]) dict) \n{\n    foreach(string key\
    \ in dict)\n    {\n        if(!std.string.isLower(key))\n        {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\",\
    \ \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n\
    \    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    ].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"\
    ].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\"\
    : \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init)\
    \ == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj9jsje2v.d(13): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9jsje2v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015347
