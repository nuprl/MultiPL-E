name: HumanEval_10_make_palindrome
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Find the shortest palindrome\
  \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
  \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
  \ the end of the string reverse of a string prefix that comes before the palindromic\
  \ suffix.\n                \n*/\nstring make_palindrome(string string) \n"
tests: "unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\
  \") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\"\
  ) == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"\
  jerry\") == \"jerryrrej\");\n}\nvoid main(){}"
completions: ["{\n    string reverse = \"\";\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.size(); ++i)\n    {\n  \
    \      if(string[i] == string[string.size() - 1 - i])\n        {\n           \
    \ prefix += string[i];\n        }\n        else\n        {\n            suffix\
    \ += string[i];\n        }\n    }\n    \n    for(int i = 0; i < prefix.size();\
    \ ++i)\n    {\n        reverse += prefix[i];\n    }\n    \n    reverse += suffix;\n\
    \    \n    return reverse;\n}", "{\n    string palindrome = string;\n    string\
    \ postfix = \"\";\n    string prefix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            postfix = postfix + string[i];\n        }\n        else\n\
    \        {\n            prefix = prefix + string[i];\n        }\n    }\n    \n\
    \    palindrome = postfix + reverse(prefix);\n    \n    return palindrome;\n}",
  "{\n    string reverse = \"\";\n    string longest = \"\";\n    int longestLength\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        string prefix\
    \ = string.substr(0, i);\n        string suffix = string.substr(i, string.length());\n\
    \        string reversePrefix = reverse(prefix);\n        string reverseSuffix\
    \ = reverse(suffix);\n        string palindrome = prefix + reversePrefix + suffix\
    \ + reverseSuffix;\n        if(palindrome == string)\n        {\n            longest\
    \ = palindrome;\n            longestLength = i;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    string postfix = \"\";\n    string prefix = \"\";\n  \
    \  string reverse = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            postfix = postfix + string[i];\n        }\n        else\n       \
    \ {\n            reverse = reverse + string[i];\n        }\n    }\n    \n    prefix\
    \ = postfix + reverse;\n    \n    return prefix;\n}", "{\n    string reverse =\
    \ \"\";\n    int len = string.length();\n    for(int i = 0; i < len; i++)\n  \
    \  {\n        reverse += string[i];\n    }\n    string prefix = string.substr(0,\
    \ len - reverse.length());\n    return prefix + reverse;\n}", "{\n    string longest\
    \ = \"\";\n    string longestPalindrome = \"\";\n    string longestPalindromePrefix\
    \ = \"\";\n    string longestPalindromeSuffix = \"\";\n    string longestPalindromeSuffixReverse\
    \ = \"\";\n    string longestPalindromePrefixReverse = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        string prefix = string.substr(0,\
    \ i);\n        string suffix = string.substr(i);\n        \n        string palindrome\
    \ = prefix + suffix;\n        \n        string palindromeReverse = suffix + prefix;\n\
    \        \n        string palindromePrefix = prefix + suffix;\n        string\
    \ palindromePrefixReverse = suffix + prefix;\n        \n        string palindromeSuffix\
    \ = prefix + suffix;\n        string palindromeSuffixReverse = suffix + prefix;\n\
    \        \n        string palindromePrefixReverse2 = prefix + suffix;\n      \
    \  string palindromeSuffixReverse2 = suffix + prefix;\n        \n        string\
    \ palindromePrefixReverse3 = prefix + suffix;\n        string palindromeSuffixReverse3\
    \ = suffix + prefix;\n        \n        string palindromePrefixReverse4 = prefix\
    \ + suffix;\n        string palindromeSuffixReverse4 = suffix + prefix;\n    \
    \    \n        string palindromePrefixReverse5 = prefix + suffix;\n        string\
    \ palindromeSuffixReverse5 = suffix + prefix;\n        \n        string palindromePrefixReverse6\
    \ = prefix + suffix;\n        string palindromeSuffixReverse6 = suffix + prefix;\n\
    \        \n        string palindromePrefixReverse7 = prefix + suffix;\n      \
    \  string palindromeSuffixReverse7 = suffix + prefix;\n        \n        string\
    \ palindromePrefixReverse8 = prefix + suffix;\n        string palindromeSuffixReverse8\
    \ = suffix + prefix;\n        \n        string palindromePrefixReverse9 = prefix\
    \ + suffix;\n        string palindromeSuffixReverse9 = suffix + prefix;\n    \
    \    \n        string palindromePrefixReverse10 = prefix + suffix;\n        string\
    \ palindromeSuffixReverse10 = suffix + prefix;\n        \n        string palindromePrefixReverse11\
    \ = prefix + suffix;\n        string palindromeSuffixReverse11 = suffix + prefix;\n\
    \        \n        string palindromePrefixReverse12 = prefix + suffix;\n     \
    \   string palindromeSuffixReverse12 = suffix + prefix;\n        \n        string\
    \ palindromePrefixReverse13 = prefix + suffix;\n        string palindrome", "{\n\
    \    string result = \"\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n \
    \   int length = 0;\n    int max_index = 0;\n    int max_index2 = 0;\n    int\
    \ max_index3 = 0;\n    int max_index4 = 0;\n    int max_index5 = 0;\n    int max_index6\
    \ = 0;\n    int max_index7 = 0;\n    int max_index8 = 0;\n    int max_index9 =\
    \ 0;\n    int max_index10 = 0;\n    int max_index11 = 0;\n    int max_index12\
    \ = 0;\n    int max_index13 = 0;\n    int max_index14 = 0;\n    int max_index15\
    \ = 0;\n    int max_index16 = 0;\n    int max_index17 = 0;\n    int max_index18\
    \ = 0;\n    int max_index19 = 0;\n    int max_index20 = 0;\n    int max_index21\
    \ = 0;\n    int max_index22 = 0;\n    int max_index23 = 0;\n    int max_index24\
    \ = 0;\n    int max_index25 = 0;\n    int max_index26 = 0;\n    int max_index27\
    \ = 0;\n    int max_index28 = 0;\n    int max_index29 = 0;\n    int max_index30\
    \ = 0;\n    int max_index31 = 0;\n    int max_index32 = 0;\n    int max_index33\
    \ = 0;\n    int max_index34 = 0;\n    int max_index35 = 0;\n    int max_index36\
    \ = 0;\n    int max_index37 = 0;\n    int max_index38 = 0;\n    int max_index39\
    \ = 0;\n    int max_index40 = 0;\n    int max_index41 = 0;\n    int max_index42\
    \ = 0;\n    int max_index43 = 0;\n    int max_index44 = 0;\n    int max_index45\
    \ = 0;\n    int max_index46 = 0;\n    int max_index47 = 0;\n    int max_index48\
    \ = 0;\n    int max_index49 = 0;\n    int max_index50 = 0;\n    int max_index51\
    \ = 0;\n    int max_index52 = 0;\n    int max_index53 = 0;\n    int max_index54\
    \ = 0;\n    int max_index55 = 0;\n    int max_index56 = 0;\n    int max_index57\
    \ = 0;\n    int max_index58 = 0;\n    int max_index59 = 0;\n    int max_index60\
    \ = 0;\n    int max_index61 = 0;\n    int max_index62 = 0;\n    int max_index63\
    \ = 0;\n    int max_index64 = 0;\n    int max_index65 = 0;\n    int max_index66\
    \ = 0;\n    int max_index67 = 0;\n    int max_index68 = 0;\n    int max_index69\
    \ = 0;\n    int max_index70 = 0;\n    int max_index71 = 0;\n    int max_index72\
    \ = 0;\n    int max_index73 = 0;\n    int max_index74 = 0;\n    int max_index75\
    \ = 0;\n    int max_index76 = 0;\n    int max_index77 = 0;\n    int max_index78\
    \ = 0;\n    int max_index79 = 0;\n    int max_index80 = 0;\n    int max_index81\
    \ = 0;\n    int max_index82 = 0;\n    int max_index", "{\n    int length = string.length();\n\
    \    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    \n    for(int i = 0; i < length; i++)\n    {\n        string temp = string.substr(0,\
    \ i) + string.substr(i, length);\n        \n        if(temp == reverse(temp))\n\
    \        {\n            prefix = string.substr(0, i);\n            suffix = string.substr(i,\
    \ length);\n        }\n    }\n    \n    return prefix + reverse(suffix);\n}\n\
    </code>\n<|/ a tags=c++,algorithm,string |>\n<| c |>\nThis doesn't work if the\
    \ string starts with a palindrome. For example, `make_palindrome(\"abba\")` returns\
    \ `\"abba\"`, but should return `\"abbba\"`.\n<|/ c |>\n<| c |>\nIt does work,\
    \ just tested it out. `make_palindrome(\"abba\")` returns `\"abbba\"`.\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work if you give it `\"abba\"` as input. Try it out\
    \ with your example string.\n<|/ c |>\n<| c |>\nI tested it with `\"abba\"` as\
    \ input. `make_palindrome(\"abba\")` returns `\"abbba\"`.\n<|/ c |>\n<| c |>\n\
    It doesn't work if you give it `\"abba\"` as input. Try it out with your example\
    \ string.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\n#include <vector>", "{\n    string postfix = \"\";\n   \
    \ string prefix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        if(string[i] != postfix[i])\n      \
    \  {\n            break;\n        }\n    }\n    \n    string reverse = prefix;\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        reverse +=\
    \ string[i];\n    }\n    \n    return reverse;\n}", "{\n    string reverse = \"\
    \";\n    int i = 0;\n    int j = 0;\n    int len = 0;\n    string longest = \"\
    \";\n    \n    len = string.length();\n    \n    while(i < len) {\n        while(j\
    \ < len) {\n            if(string[i] == string[j]) {\n                reverse\
    \ = reverse + string[i];\n                j++;\n            }\n            else\
    \ {\n                break;\n            }\n        }\n        \n        if(reverse\
    \ == string) {\n            longest = longest + reverse + string[i];\n       \
    \     reverse = \"\";\n            i++;\n        }\n        \n        if(reverse\
    \ != \"\") {\n            reverse = \"\";\n        }\n        \n        len--;\n\
    \    }\n    \n    return longest;\n}", "{\n    string result = \"\";\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    string reverse = \"\";\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ string[string.length() - 1 - i])\n        {\n            prefix += string[i];\n\
    \            suffix += string[string.length() - 1 - i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i];\n        }\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            prefix += string[i];\n\
    \            suffix += string[string.length() - 1 - i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i];\n        }\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            prefix += string[i];\n\
    \            suffix += string[string.length() - 1 - i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i];\n        }\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            prefix += string[i];\n\
    \            suffix += string[string.length() - 1 - i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i];\n        }\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            prefix += string[i];\n\
    \            suffix += string[string.length() - 1 - i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i];\n        }\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            prefix += string[i];\n\
    \            suffix += string[string.length() - 1 - i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i];\n        }\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            prefix += string[i];\n\
    \            suffix += string[string.length() - 1 - i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i];\n        }\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            prefix += string[i];\n\
    \            suffix += string[string.length() - 1 - i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i];\n        }\n    }\n   \
    \ \n", "{\n    string reverse = \"\";\n    string longest = \"\";\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    string palindrome = \"\";\n \
    \   \n    for(int i = 0; i < string.size(); i++)\n    {\n        string temp =\
    \ string[i];\n        \n        if(temp == \"-\")\n        {\n            reverse\
    \ = reverse + temp;\n        }\n        else\n        {\n            reverse =\
    \ reverse + temp;\n            longest = longest + temp;\n        }\n    }\n \
    \   \n    for(int i = 0; i < string.size(); i++)\n    {\n        string temp =\
    \ string[i];\n        \n        if(temp == \"-\")\n        {\n            prefix\
    \ = prefix + temp;\n        }\n        else\n        {\n            suffix = suffix\
    \ + temp;\n        }\n    }\n    \n    for(int i = 0; i < string.size(); i++)\n\
    \    {\n        string temp = string[i];\n        \n        if(temp == \"-\")\n\
    \        {\n            palindrome = palindrome + temp;\n        }\n        else\n\
    \        {\n            palindrome = palindrome + temp;\n        }\n    }\n  \
    \  \n    for(int i = 0; i < string.size(); i++)\n    {\n        string temp =\
    \ string[i];\n        \n        if(temp == \"-\")\n        {\n            palindrome\
    \ = palindrome + temp;\n        }\n        else\n        {\n            palindrome\
    \ = palindrome + temp;\n        }\n    }\n    \n    for(int i = 0; i < string.size();\
    \ i++)\n    {\n        string temp = string[i];\n        \n        if(temp ==\
    \ \"-\")\n        {\n            palindrome = palindrome + temp;\n        }\n\
    \        else\n        {\n            palindrome = palindrome + temp;\n      \
    \  }\n    }\n    \n    for(int i = 0; i < string.size(); i++)\n    {\n       \
    \ string temp = string[i];\n        \n        if(temp == \"-\")\n        {\n \
    \           palindrome = palindrome + temp;\n        }\n        else\n       \
    \ {\n            palindrome = palindrome + temp;\n        }\n    }\n    \n   \
    \ for(int i = 0; i < string.size(); i++)\n    {\n        string temp = string[i];\n\
    \        \n        if(temp == \"-\")\n        {\n            palindrome = palindrome\
    \ + temp;\n        }\n        else\n        {\n            palindrome = palindrome\
    \ + temp;\n        }\n    }\n    \n    for(int i = 0; i < string.size(); i++)\n\
    \    {\n        string temp = string[i];\n        \n        if(temp == \"-\")\n\
    \        {\n            palindrome = palindrome + temp;\n        }\n        else\n\
    \        {\n            palindrome = palindrome + temp;\n        }\n    }\n  \
    \  \n    for(int i = 0; i < string.size(); i++)\n    {\n        ", "{\n    string\
    \ palindrome;\n    string prefix;\n    string suffix;\n    string reverse;\n \
    \   \n    prefix = string;\n    suffix = string;\n    \n    while(!std.string.isEmpty(prefix))\n\
    \    {\n        reverse = std.string.reverse(prefix);\n        \n        if(std.string.isPalindrome(prefix\
    \ + reverse))\n        {\n            palindrome = prefix + reverse;\n       \
    \     break;\n        }\n        \n        prefix = std.string.dropLast(prefix);\n\
    \    }\n    \n    return palindrome;\n}", "{\n    string postfix = \"\";\n   \
    \ string prefix = \"\";\n    string reverse = \"\";\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        postfix += string[i];\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        if(string[i] != postfix[i])\n        {\n            break;\n  \
    \      }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n \
    \       if(string[i] != prefix[i])\n        {\n            break;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ != reverse[i])\n        {\n            break;\n        }\n    }\n    \n    return\
    \ prefix + reverse + postfix;\n}", "{\n    int length = string.length();\n   \
    \ string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < length; i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        reverse += temp;\n        \n        if(temp == string[i])\n   \
    \     {\n            prefix += temp;\n        }\n        else\n        {\n   \
    \         suffix += temp;\n        }\n    }\n    \n    string result = prefix\
    \ + reverse + suffix;\n    \n    return result;\n}", "{\n    string longest =\
    \ \"\";\n    string longest2 = \"\";\n    string longest3 = \"\";\n    string\
    \ longest4 = \"\";\n    string longest5 = \"\";\n    string longest6 = \"\";\n\
    \    string longest7 = \"\";\n    string longest8 = \"\";\n    string longest9\
    \ = \"\";\n    string longest10 = \"\";\n    string longest11 = \"\";\n    string\
    \ longest12 = \"\";\n    string longest13 = \"\";\n    string longest14 = \"\"\
    ;\n    string longest15 = \"\";\n    string longest16 = \"\";\n    string longest17\
    \ = \"\";\n    string longest18 = \"\";\n    string longest19 = \"\";\n    string\
    \ longest20 = \"\";\n    string longest21 = \"\";\n    string longest22 = \"\"\
    ;\n    string longest23 = \"\";\n    string longest24 = \"\";\n    string longest25\
    \ = \"\";\n    string longest26 = \"\";\n    string longest27 = \"\";\n    string\
    \ longest28 = \"\";\n    string longest29 = \"\";\n    string longest30 = \"\"\
    ;\n    string longest31 = \"\";\n    string longest32 = \"\";\n    string longest33\
    \ = \"\";\n    string longest34 = \"\";\n    string longest35 = \"\";\n    string\
    \ longest36 = \"\";\n    string longest37 = \"\";\n    string longest38 = \"\"\
    ;\n    string longest39 = \"\";\n    string longest40 = \"\";\n    string longest41\
    \ = \"\";\n    string longest42 = \"\";\n    string longest43 = \"\";\n    string\
    \ longest44 = \"\";\n    string longest45 = \"\";\n    string longest46 = \"\"\
    ;\n    string longest47 = \"\";\n    string longest48 = \"\";\n    string longest49\
    \ = \"\";\n    string longest50 = \"\";\n    string longest51 = \"\";\n    string\
    \ longest52 = \"\";\n    string longest53 = \"\";\n    string longest54 = \"\"\
    ;\n    string longest55 = \"\";\n    string longest56 = \"\";\n    string longest57\
    \ = \"\";\n    string longest58 = \"\";\n    string longest59 = \"\";\n    string\
    \ longest60 = \"\";\n    string longest61 = \"\";\n    string longest62 = \"\"\
    ;\n    string longest63 = \"\";\n    string longest64 = \"\";\n    string longest65\
    \ = \"\";\n    string longest66 = \"\";\n    string longest67 = \"\";\n    string\
    \ longest68 = \"\";\n    string longest69 = \"\";\n    string longest70 = \"\"\
    ;\n    string longest71 = \"\";\n    string longest72 = \"\";\n    string longest73\
    \ = \"\";\n    string longest74 = \"\";\n    string longest75 = \"\";\n    string\
    \ longest76 = \"\";\n    string longest77 = \"\";\n    string longest78 = \"\"\
    ;\n    string longest79 = \"\";\n    string longest80 = \"\";\n    string longest81\
    \ = \"\";\n    string longest82 = \"\";\n", "{\n    string reverse = \"\";\n \
    \   string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n         \
    \   prefix = prefix + string[i];\n            suffix = suffix + string[i];\n \
    \       }\n    }\n    \n    return prefix + reverse + suffix;\n}\n/*\n Find the\
    \ longest palindrome that begins with a supplied string.\n    Algorithm idea is\
    \ simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n                \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string reverse = \"\";\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] == string[string.length() - 1 - i])\n        {\n       \
    \     reverse = reverse + string[i];\n            prefix = prefix + string[i];\n\
    \            suffix = suffix + string[i];\n        }\n    }\n    \n    return\
    \ prefix + reverse + suffix;\n}\n/*\n Find the longest palindrome that begins\
    \ with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    - Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \                \n*/\nstring make_palindrome(string string) \n{\n    string reverse\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n         \
    \   prefix = prefix + string[i];\n            suffix = suffix + string[i];\n \
    \       }\n    }\n    \n    return prefix + reverse + suffix;\n}\n/*\n Find the\
    \ longest palindrome that begins with a supplied string.\n    Algorithm idea is\
    \ simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n                \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string reverse = \"\";\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] == string[string.length() - 1 - i])\n        {\n       \
    \     reverse = reverse + ", "{\n    string reverse = \"\";\n    int length =\
    \ string.length();\n    for(int i = 0; i < length; i++) \n    {\n        reverse\
    \ += string[i];\n    }\n    string postfix = \"\";\n    for(int i = 0; i < length;\
    \ i++) \n    {\n        postfix += string[i];\n    }\n    string prefix = postfix.substr(0,\
    \ string.length()/2);\n    string suffix = postfix.substr(string.length()/2, string.length());\n\
    \    string palindrome = prefix + reverse + suffix;\n    return palindrome;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n                \n*/\nstring make_palindrome2(string\
    \ string) \n{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++) \n    {\n        reverse += string[i];\n\
    \    }\n    string postfix = \"\";\n    for(int i = 0; i < length; i++) \n   \
    \ {\n        postfix += string[i];\n    }\n    string prefix = postfix.substr(0,\
    \ string.length()/2);\n    string suffix = postfix.substr(string.length()/2, string.length());\n\
    \    string palindrome = prefix + reverse + suffix;\n    return palindrome;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n                \n*/\nstring make_palindrome3(string\
    \ string) \n{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++) \n    {\n        reverse += string[i];\n\
    \    }\n    string postfix = \"\";\n    for(int i = 0; i < length; i++) \n   \
    \ {\n        postfix += string[i];\n    }\n    string prefix = postfix.substr(0,\
    \ string.length()/2);\n    string suffix = postfix.substr(string.length()/2, string.length());\n\
    \    string palindrome = prefix + reverse + suffix;\n    return palindrome;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palin", "{\n    int len = string.length();\n    string reverse = \"\";\n   \
    \ string prefix = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n     \
    \   if(string[i] == string[len-i-1])\n        {\n            prefix += string[i];\n\
    \        }\n        else\n        {\n            reverse = reverse + string[i];\n\
    \        }\n    }\n    \n    return prefix + reverse;\n}", "{\n    string postfix\
    \ = \"\";\n    string prefix = \"\";\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            postfix += string[i];\n        }\n       \
    \ else\n        {\n            prefix += string[i];\n        }\n    }\n    \n\
    \    for(int i = 0; i < prefix.length(); i++)\n    {\n        reverse += prefix[i];\n\
    \    }\n    \n    reverse += postfix;\n    \n    return reverse;\n}", "{\n   \
    \ string postfix = \"\";\n    string prefix = \"\";\n    int longest = 0;\n  \
    \  int longestLength = 0;\n    int i;\n    \n    for(i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            longestLength++;\n        }\n    }\n    \n    for(i = 0; i\
    \ < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n", "{\n    string reverse = \"\";\n\
    \    int i = 0;\n    int j = 0;\n    int length = 0;\n    \n    length = string.length();\n\
    \    \n    while(i < length) \n    {\n        string temp = string.substr(i,1);\n\
    \        reverse += temp;\n        i += 1;\n    }\n    \n    while(j < length)\
    \ \n    {\n        string temp = string.substr(j,1);\n        reverse += temp;\n\
    \        j += 1;\n    }\n    \n    return reverse;\n}", "{\n    string result\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string reverse\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string character = string.at(i);\n        \n        if(character == \" \")\n\
    \        {\n            result += character;\n        }\n        else if(character\
    \ == \"-\")\n        {\n            reverse = reverse + character;\n        }\n\
    \        else\n        {\n            reverse = reverse + character;\n       \
    \     \n            if((int)character == (int)reverse)\n            {\n      \
    \          result += character;\n                \n                prefix = prefix\
    \ + character;\n                suffix = suffix + character;\n            }\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string character = string.at(i);\n        \n        if(character == \"\
    \ \")\n        {\n            result += character;\n        }\n        else if(character\
    \ == \"-\")\n        {\n            reverse = reverse + character;\n        }\n\
    \        else\n        {\n            reverse = reverse + character;\n       \
    \     \n            if((int)character == (int)reverse)\n            {\n      \
    \          result += character;\n                \n                prefix = prefix\
    \ + character;\n                suffix = suffix + character;\n            }\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string character = string.at(i);\n        \n        if(character == \"\
    \ \")\n        {\n            result += character;\n        }\n        else if(character\
    \ == \"-\")\n        {\n            reverse = reverse + character;\n        }\n\
    \        else\n        {\n            reverse = reverse + character;\n       \
    \     \n            if((int)character == (int)reverse)\n            {\n      \
    \          result += character;\n                \n                prefix = prefix\
    \ + character;\n                suffix = suffix + character;\n            }\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string character = string.at(i);\n        \n        if(character == \"\
    \ \")\n        {\n            result += character;\n        }\n        else if(character\
    \ == \"-\")\n        {\n            reverse = reverse + character;\n        }\n\
    \        else\n        {\n            reverse = reverse + character;\n       \
    \     \n            if((int)character == (int)reverse)\n            {\n      \
    \          result += character;\n                \n                prefix = prefix\
    \ + character;\n                suffix = suffix + character;\n            }\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string character = string.at(i);\n        \n        if(character == \"\
    \ \")\n        {\n            result += character;\n        }\n        else if(character\
    \ == \"-\")\n        {\n            reverse = reverse + character;\n        }\n\
    \        else\n        {\n            reverse = reverse + character;\n", "{\n\
    \    string longest = \"\";\n    string longestPalindrome = \"\";\n    string\
    \ longestPalindromePrefix = \"\";\n    string longestPalindromeSuffix = \"\";\n\
    \    string longestPalindromeSuffixReverse = \"\";\n    string longestPalindromePrefixReverse\
    \ = \"\";\n    string longestPalindromePrefixReverse2 = \"\";\n    string longestPalindromePrefixReverse3\
    \ = \"\";\n    string longestPalindromePrefixReverse4 = \"\";\n    string longestPalindromePrefixReverse5\
    \ = \"\";\n    string longestPalindromePrefixReverse6 = \"\";\n    string longestPalindromePrefixReverse7\
    \ = \"\";\n    string longestPalindromePrefixReverse8 = \"\";\n    string longestPalindromePrefixReverse9\
    \ = \"\";\n    string longestPalindromePrefixReverse10 = \"\";\n    string longestPalindromePrefixReverse11\
    \ = \"\";\n    string longestPalindromePrefixReverse12 = \"\";\n    string longestPalindromePrefixReverse13\
    \ = \"\";\n    string longestPalindromePrefixReverse14 = \"\";\n    string longestPalindromePrefixReverse15\
    \ = \"\";\n    string longestPalindromePrefixReverse16 = \"\";\n    string longestPalindromePrefixReverse17\
    \ = \"\";\n    string longestPalindromePrefixReverse18 = \"\";\n    string longestPalindromePrefixReverse19\
    \ = \"\";\n    string longestPalindromePrefixReverse20 = \"\";\n    string longestPalindromePrefixReverse21\
    \ = \"\";\n    string longestPalindromePrefixReverse22 = \"\";\n    string longestPalindromePrefixReverse23\
    \ = \"\";\n    string longestPalindromePrefixReverse24 = \"\";\n    string longestPalindromePrefixReverse25\
    \ = \"\";\n    string longestPalindromePrefixReverse26 = \"\";\n    string longestPalindromePrefixReverse27\
    \ = \"\";\n    string longestPalindromePrefixReverse28 = \"\";\n    string longestPalindromePrefixReverse29\
    \ = \"\";\n    string longestPalindromePrefixReverse30 = \"\";\n    string longestPalindromePrefixReverse31\
    \ = \"\";\n    string longestPalindromePrefixReverse32 = \"\";\n    string longestPalindromePrefixReverse33\
    \ = \"\";\n    string longestPalindromePrefixReverse34 = \"\";\n    string longestPalindromePrefixReverse35\
    \ = \"\";\n    string longestPalindromePrefixReverse36 = \"\";\n    string longestPalindromePrefixReverse37\
    \ = \"\";\n    string longestPalindromePrefixReverse38 = \"\";\n    string longestPalindro",
  "{\n    string longest = string;\n    string longestPalindrome = string;\n    string\
    \ longestPalindromeSuffix = string;\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string prefix = string.substr(0, i);\n        string suffix\
    \ = string.substr(i);\n        string reversedPrefix = std.reverse(string);\n\
    \        string reversedSuffix = std.reverse(string);\n        \n        if(std.equal(prefix,\
    \ reversedPrefix))\n        {\n            longestPalindromeSuffix = suffix;\n\
    \        }\n        \n        if(std.equal(suffix, reversedSuffix))\n        {\n\
    \            longestPalindrome = longestPalindromeSuffix + longestPalindrome;\n\
    \        }\n    }\n    \n    return longestPalindrome;\n}", "{\n    string palindrome\
    \ = string;\n    string postfix = \"\";\n    string prefix = \"\";\n    int i\
    \ = 0;\n    int j = 0;\n    int k = 0;\n    int n = string.length();\n    \n \
    \   while(i < n) \n    {\n        postfix = postfix + string[i];\n        i++;\n\
    \    }\n    \n    while(j < n) \n    {\n        prefix = prefix + string[j];\n\
    \        j++;\n    }\n    \n    while(j < n) \n    {\n        if(string[j] ==\
    \ postfix[k])\n        {\n            postfix = postfix + string[j];\n       \
    \     j++;\n            k++;\n        }\n        else\n        {\n           \
    \ break;\n        }\n    }\n    \n    while(j < n) \n    {\n        if(string[j]\
    \ == prefix[k])\n        {\n            prefix = prefix + string[j];\n       \
    \     j++;\n            k++;\n        }\n        else\n        {\n           \
    \ break;\n        }\n    }\n    \n    palindrome = postfix + reverse(prefix);\n\
    \    \n    return palindrome;\n}\n/*\n Reverse a string.\n*/\nstring reverse(string\
    \ string) \n{\n    string reverse = \"\";\n    int i = 0;\n    int n = string.length();\n\
    \    \n    while(i < n) \n    {\n        reverse = reverse + string[i];\n    \
    \    i++;\n    }\n    \n    return reverse;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThanks for your answer. Your solution is very similar to mine. My code\
    \ works fine for small inputs but fails for large inputs. I tested it on \"abba\"\
    \ and it returns \"abba\" instead of \"abbba\".\n<|/ c |>\n<| c |>\nI tested it\
    \ on \"abba\" and it returns \"abbba\" instead of \"abba\"\n<|/ c |>\n<| c |>\n\
    I tested it on \"abba\" and it returns \"abbba\" instead of \"abba\"\n<|/ c |>\n\
    <| c |>\nI tested it on \"abba\" and it returns \"abbba\" instead of \"abba\"\n\
    <|/ c |>\n<| c |>\nI tested it on \"abba\" and it returns \"abbba\" instead of\
    \ \"abba\"\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string palindrome\
    \ = string;\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        \n        if(temp == temp)\n        {\n            prefix = temp;\n\
    \        }\n        else\n        {\n            suffix = temp;\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(0, i);\n        \n        if(temp == temp)\n\
    \        {\n            string temp = string.substr(0, i);\n            \n   \
    \         if(temp == temp)\n            {\n                string temp = string.substr(0,\
    \ i);\n                \n                if(temp == temp)\n                {\n\
    \                    string temp = string.substr(0, i);\n                    \n\
    \                    if(temp == temp)\n                    {\n               \
    \         string temp = string.substr(0, i);\n                        \n     \
    \                   if(temp == temp)\n                        {\n            \
    \                string temp = string.substr(0, i);\n                        \
    \    \n                            if(temp == temp)\n                        \
    \    {\n                                string temp = string.substr(0, i);\n \
    \                               \n                                if(temp == temp)\n\
    \                                {\n                                    string\
    \ temp = string.substr(0, i);\n                                    \n        \
    \                            if(temp == temp)\n                              \
    \      {\n                                        string temp = string.substr(0,\
    \ i);\n                                        \n                            \
    \            if(temp == temp)\n                                        {\n   \
    \                                         string temp = string.substr(0, i);\n\
    \                                            \n                              \
    \              if(temp == temp)\n                                            {\n\
    \                                                string temp = string.substr(0,\
    \ i);\n                                                \n                    \
    \                            if(temp == temp)\n                              \
    \                  {\n                                                    string\
    \ temp = string.substr(0, i);\n                                              \
    \      \n                                                    if(temp == temp)\n\
    \                                                    {\n                     \
    \                                   string temp = string.substr(0, i);\n     \
    \                                                   \n                       \
    \                                 if(temp == temp)\n                         \
    \                               {\n                                          \
    \                  string temp = string.substr(0, i);\n                      \
    \                                      \n                                    \
    \                        if(temp == temp)\n                                  \
    \                          {\n                                               \
    \                 string temp = string.substr(0, i);\n                       \
    \                                         \n                                 \
    \                               if(temp == temp)\n                           \
    \                                     {\n                                    \
    \                                string temp = string.substr(0, i);\n        \
    \                                                            \n              \
    \                                                      if(temp == temp)\n    \
    \                                                                {\n         \
    \                                                               string temp =\
    \ string.substr(0, i);\n                                                     \
    \                   \n                                                       \
    \                 if(temp == temp)\n                                         \
    \                               {\n                                          \
    \                                  string temp = string.substr(0, i);\n      \
    \                                                                      \n    \
    \                                                                        if(temp\
    \ == temp)\n                                                                 \
    \           {\n                                                              \
    \                  string temp = string.substr(0, i);\n                      \
    \                                                          \n                \
    \                                                                if(temp == temp)\n\
    \                                                                            \
    \    {\n                                                                     \
    \               string temp = string.substr(0, i);\n                         \
    \                                                           \n               \
    \                                                                     if(temp\
    \ == temp)\n                                                                 \
    \                   {\n                                                      \
    \                                  string temp = string.substr(0, i);\n      \
    \                                                                            \
    \      \n                                                                    \
    \                    if(temp == temp)\n                                      \
    \                                                  {\n                       \
    \                                                                     string temp\
    \ = string.substr(0, i);\n                                                   \
    \                                         \n                                 \
    \                                                           if(temp == ", "{\n\
    \    string result = \"\";\n    int len = string.length();\n    for(int i = 0;\
    \ i < len; i++)\n    {\n        result += string[i];\n    }\n    for(int i = 0;\
    \ i < len; i++)\n    {\n        result += string[len - i - 1];\n    }\n    return\
    \ result;\n}\n/*\n Find the longest postfix of supplied string that is a palindrome.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \n*/\nstring\
    \ make_palindrome(string string) \n{\n    string result = \"\";\n    int len =\
    \ string.length();\n    for(int i = 0; i < len; i++)\n    {\n        result +=\
    \ string[i];\n    }\n    for(int i = 0; i < len; i++)\n    {\n        result +=\
    \ string[len - i - 1];\n    }\n    return result;\n}\n/*\n Find the longest postfix\
    \ of supplied string that is a palindrome.\n    Algorithm idea is simple:\n  \
    \  - Find the longest postfix of supplied string that is a palindrome.\n    -\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n                \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string result = \"\";\n    int len = string.length();\n   \
    \ for(int i = 0; i < len; i++)\n    {\n        result += string[i];\n    }\n \
    \   for(int i = 0; i < len; i++)\n    {\n        result += string[len - i - 1];\n\
    \    }\n    return result;\n}\n/*\n Find the longest postfix of supplied string\
    \ that is a palindrome.\n    Algorithm idea is simple:\n    - Find the longest\
    \ postfix of supplied string that is a palindrome.\n    - Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \                \n*/\nstring make_palindrome(string string) \n{\n    string result\
    \ = \"\";\n    int len = string.length();\n    for(int i = 0; i < len; i++)\n\
    \    {\n        result += string[i];\n    }\n    for(int i = 0; i < len; i++)\n\
    \    {\n        result += string[len - i - 1];\n    }\n    return result;\n}\n\
    /*\n Find the longest postfix of supplied string that is a palindrome.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n                \n*/\nstring make_palindrome(",
  "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(0, i);\n        reverse += temp;\n        \n        if(temp\
    \ == temp)\n        {\n            prefix = temp;\n        }\n        else\n \
    \       {\n            suffix = temp;\n        }\n    }\n    \n    string result\
    \ = prefix + reverse + suffix;\n    return result;\n}", "{\n    string reverse\
    \ = \"\";\n    int len = string.length();\n    for(int i = 0; i < len; i++)\n\
    \    {\n        reverse += string[i];\n    }\n    string postfix = \"\";\n   \
    \ for(int i = 0; i < len; i++)\n    {\n        postfix += string[len - 1 - i];\n\
    \    }\n    return reverse + postfix;\n}\n/*\n Find the longest palindrome that\
    \ begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the\
    \ longest postfix of supplied string that is a palindrome.\n    - Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n                \n*/\nstring make_palindrome2(string string) \n{\n\
    \    string reverse = \"\";\n    int len = string.length();\n    for(int i = 0;\
    \ i < len; i++)\n    {\n        reverse += string[i];\n    }\n    string postfix\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[len\
    \ - 1 - i];\n    }\n    return reverse + postfix;\n}\n/*\n Find the longest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n                \n*/\nstring make_palindrome3(string string) \n{\n\
    \    string reverse = \"\";\n    int len = string.length();\n    for(int i = 0;\
    \ i < len; i++)\n    {\n        reverse += string[i];\n    }\n    string postfix\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[len\
    \ - 1 - i];\n    }\n    return reverse + postfix;\n}\n/*\n Find the longest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n                \n*/\nstring make_palindrome4(string string) \n{\n\
    \    string reverse = \"\";\n    int len = string.length();\n    for(int i = 0;\
    \ i < len; i++)\n    {\n        reverse += string[i];\n    }\n    string postfix\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[len\
    \ - 1 - i];\n    }\n    return reverse + postfix;\n}\n/*\n Find the longest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is ", "{\n    string\
    \ postfix = \"\";\n    string prefix = \"\";\n    string reverse = \"\";\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        reverse += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != postfix[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] != prefix[i])\n        {\n            break;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ != reverse[i])\n        {\n            break;\n        }\n    }\n    \n    return\
    \ postfix + reverse + prefix;\n}", "{\n    string postfix = \"\";\n    string\
    \ prefix = \"\";\n    string reverse = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        prefix += string[i];\n    }\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == postfix[string.length - 1 - i])\n        {\n            postfix = postfix.substr(0,\
    \ string.length - 1 - i);\n            prefix = prefix.substr(0, string.length\
    \ - 1 - i);\n            reverse = reverse.substr(0, string.length - 1 - i);\n\
    \            break;\n        }\n    }\n    \n    return postfix + reverse + prefix;\n\
    }", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    string longest = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            prefix = temp;\n            suffix = temp2;\n        \
    \    longest = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            reverse = reverse + temp;\n        }\n    }\n    \n  \
    \  string palindrome = prefix + reverse + suffix;\n    \n    return palindrome;\n\
    }", "{\n    string palindrome;\n    string reverse;\n    string prefix;\n    string\
    \ suffix;\n    \n    prefix = string.substr(0, string.length()/2);\n    suffix\
    \ = string.substr(string.length()/2, string.length());\n    \n    reverse = reverse(prefix);\n\
    \    \n    palindrome = prefix + reverse + suffix;\n    \n    return palindrome;\n\
    }", "{\n    int len = string.length();\n    string reverse = \"\";\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    string palindrome = \"\";\n \
    \   \n    for(int i = 0; i < len; i++)\n    {\n        if(string[i] == string[len-i-1])\n\
    \        {\n            reverse = reverse + string[i];\n        }\n    }\n   \
    \ \n    for(int i = 0; i < len; i++)\n    {\n        if(string[i] == string[len-i-1])\n\
    \        {\n            prefix = prefix + string[i];\n        }\n    }\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string[i] == string[len-i-1])\n\
    \        {\n            suffix = suffix + string[i];\n        }\n    }\n    \n\
    \    palindrome = prefix + reverse + suffix;\n    return palindrome;\n}", "{\n\
    \    string result = \"\";\n    string postfix = \"\";\n    string prefix = \"\
    \";\n    int length = string.length();\n    \n    for(int i = 0; i < length; i++)\
    \ \n    {\n        postfix = postfix + string[i];\n    }\n    \n    for(int i\
    \ = 0; i < length; i++) \n    {\n        prefix = prefix + string[i];\n    }\n\
    \    \n    for(int i = 0; i < length; i++) \n    {\n        if(string[i] != postfix[i])\
    \ \n        {\n            break;\n        }\n    }\n    \n    for(int i = 0;\
    \ i < length; i++) \n    {\n        if(string[i] != prefix[i]) \n        {\n \
    \           break;\n        }\n    }\n    \n    for(int i = 0; i < length; i++)\
    \ \n    {\n        if(string[i] != postfix[i]) \n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < length; i++) \n    {\n       \
    \ if(string[i] != prefix[i]) \n        {\n            break;\n        }\n    }\n\
    \    \n    for(int i = 0; i < length; i++) \n    {\n        if(string[i] != postfix[i])\
    \ \n        {\n            break;\n        }\n    }\n    \n    for(int i = 0;\
    \ i < length; i++) \n    {\n        if(string[i] != prefix[i]) \n        {\n \
    \           break;\n        }\n    }\n    \n    for(int i = 0; i < length; i++)\
    \ \n    {\n        if(string[i] != postfix[i]) \n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < length; i++) \n    {\n       \
    \ if(string[i] != prefix[i]) \n        {\n            break;\n        }\n    }\n\
    \    \n    for(int i = 0; i < length; i++) \n    {\n        if(string[i] != postfix[i])\
    \ \n        {\n            break;\n        }\n    }\n    \n    for(int i = 0;\
    \ i < length; i++) \n    {\n        if(string[i] != prefix[i]) \n        {\n \
    \           break;\n        }\n    }\n    \n    for(int i = 0; i < length; i++)\
    \ \n    {\n        if(string[i] != postfix[i]) \n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < length; i++) \n    {\n       \
    \ if(string[i] != prefix[i]) \n        {\n            break;\n        }\n    }\n\
    \    \n    for(int i = 0; i < length; i++) \n    {\n        if(string[i] != postfix[i])\
    \ \n        {\n            break;\n        }\n    }\n    \n    for(int i = 0;\
    \ i < length; i++) \n    {\n        if(string[i] != prefix[i]) \n        {\n \
    \           break;\n        }\n    }\n    \n    for(int i = 0; i < length; i++)\
    \ \n    {\n        if(string[i] != postfix[i]) \n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < length; i++) \n    {\n       \
    \ if(string[i] != prefix[i]) \n        {\n            break;\n        }\n    }\n\
    \    \n    for(int i = 0; i < length; i++) \n    {\n        if(string", "{\n \
    \   string postfix = \"\";\n    int length = string.length();\n    for(int i =\
    \ 0; i < length; i++)\n    {\n        postfix += string[i];\n    }\n    string\
    \ reverse = reverse(postfix);\n    postfix = postfix + reverse;\n    return postfix;\n\
    }", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    int length\
    \ = string.length();\n    for(int i = 0; i < length; i++)\n    {\n        if(string[i]\
    \ == string[length - 1 - i])\n        {\n            reverse = reverse + string[i];\n\
    \            prefix = prefix + string[i];\n        }\n    }\n    string result\
    \ = prefix + reverse;\n    return result;\n}", "{\n    string palindrome = string;\n\
    \    int length = string.length();\n    int i = 0;\n    int j = 0;\n    bool found\
    \ = false;\n    while(!found)\n    {\n        found = true;\n        while(i <\
    \ length && j >= 0)\n        {\n            if(string[i] != string[j])\n     \
    \       {\n                found = false;\n                break;\n          \
    \  }\n            i++;\n            j--;\n        }\n        if(found)\n     \
    \   {\n            string reverse = string.substr(0, i);\n            string prefix\
    \ = string.substr(0, j);\n            string suffix = string.substr(j + 1, length);\n\
    \            palindrome = prefix + reverse + suffix;\n        }\n    }\n    return\
    \ palindrome;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution, but\
    \ I believe it can be optimized further. For example, if you have \"abcde\", then\
    \ \"abce\" is a palindrome, but \"abced\" isn't, so you don't need to check all\
    \ letters. Also, if you have \"abced\", then \"abce\" is a palindrome, but \"\
    abced\" isn't, so you don't need to check all letters. So you can optimize this\
    \ further by only checking letters up to and including the first letter that is\
    \ a palindrome. Also, you can optimize this further by only checking letters up\
    \ to and including the first letter that is a palindrome. Also, you can optimize\
    \ this further by only checking letters up to and including the first letter that\
    \ is a palindrome. Also, you can optimize this further by only checking letters\
    \ up to and including the first letter that is a palindrome.\n<|/ c |>\n<| c |>\n\
    I agree with you that you can optimize this further. I am just trying to solve\
    \ the problem as stated in the question. Also, I am not trying to optimize this\
    \ further. I am just trying to solve the problem as stated in the question.\n\
    <|/ c |>\n<| c |>\nI agree with you that you can optimize this further. I am just\
    \ trying to solve the problem as stated in the question. Also, I am not trying\
    \ to optimize this further. I am just trying to solve the problem as stated in\
    \ the question.\n<|/ c |>\n<| c |>\nI agree with you that you can optimize this\
    \ further. I am just trying to solve the problem as stated in the question. Also,\
    \ I am not trying to optimize this further. I am just trying to solve the problem\
    \ as stated in the question.\n<|/ c |>\n<| c |>\nI agree with you that you can\
    \ optimize this further. I am just trying to ", "{\n    string reverse = \"\"\
    ;\n    string prefix = \"\";\n    string suffix = \"\";\n    string palindrome\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    prefix = temp;\n            suffix = temp2;\n        }\n    }\n    \n   \
    \ for(int i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        string temp2 = string.substr(i, string.length());\n        \n \
    \       if(temp == temp2)\n        {\n            reverse = reverse + temp;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    palindrome = palindrome + temp + reverse;\n        }\n    }\n    \n    return\
    \ palindrome;\n}", "{\n    string result = \"\";\n    int len = string.length();\n\
    \    int i = 0;\n    int j = 0;\n    \n    while (i < len) {\n        if (string[i]\
    \ == string[j]) {\n            i += 1;\n            j += 1;\n        }\n     \
    \   else if (string[i] > string[j]) {\n            result += string[i];\n    \
    \        i += 1;\n        }\n        else {\n            result += string[j];\n\
    \            j += 1;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ string palindrome = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    string reverse = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            prefix = temp;\n            suffix = temp2;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(0, i);\n        string temp2 = string.substr(i, string.length());\n\
    \        \n        if(temp == temp2)\n        {\n            reverse = reverse\
    \ + temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    reverse = reverse + temp;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        string temp = string.substr(0, i);\n \
    \       string temp2 = string.substr(i, string.length());\n        \n        if(temp\
    \ == temp2)\n        {\n            reverse = reverse + temp;\n        }\n   \
    \ }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(0, i);\n        string temp2 = string.substr(i, string.length());\n\
    \        \n        if(temp == temp2)\n        {\n            reverse = reverse\
    \ + temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    reverse = reverse + temp;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        string temp = string.substr(0, i);\n \
    \       string temp2 = string.substr(i, string.length());\n        \n        if(temp\
    \ == temp2)\n        {\n            reverse = reverse + temp;\n        }\n   \
    \ }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(0, i);\n        string temp2 = string.substr(i, string.length());\n\
    \        \n        if(temp == temp2)\n        {\n            reverse = reverse\
    \ + temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    reverse = reverse + temp;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ string.length()", "{\n    string result = \"\";\n    string reverse = \"\";\n\
    \    \n    int start = 0;\n    int end = string.size() - 1;\n    \n    while (start\
    \ < end)\n    {\n        if (string[start] == string[end])\n        {\n      \
    \      reverse = reverse + string[start];\n            start++;\n            end--;\n\
    \        }\n        else\n        {\n            reverse = reverse + string[start];\n\
    \            end--;\n        }\n    }\n    \n    result = string + reverse;\n\
    \    \n    return result;\n}", "{\n    int len = string.length();\n    string\
    \ postfix = \"\";\n    string prefix = \"\";\n    string reverse = \"\";\n   \
    \ \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n \
    \   }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(string[i] !=\
    \ postfix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        if(string[i] != prefix[i])\n        {\n\
    \            break;\n        }\n    }\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        if(string[i] != reverse[i])\n        {\n            break;\n \
    \       }\n    }\n    \n    return prefix + reverse + postfix;\n}", "{\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    int\
    \ length = string.length();\n    for(int i = 0; i < length; i++)\n    {\n    \
    \    if(string[i] == string[length - 1 - i])\n        {\n            prefix +=\
    \ string[i];\n        }\n        else\n        {\n            suffix += string[i];\n\
    \        }\n    }\n    reverse = reverse(prefix);\n    reverse += suffix;\n  \
    \  return reverse;\n}\nstring reverse(string str)\n{\n    string reverse = \"\"\
    ;\n    int length = str.length();\n    for(int i = 0; i < length; i++)\n    {\n\
    \        reverse += str[length - 1 - i];\n    }\n    return reverse;\n}\n</code>\n\
    <|/ a tags=string,algorithm,c++ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    int len\
    \ = string.length();\n    string reverse = \"\";\n    string prefix = \"\";\n\
    \    string suffix = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n  \
    \      string temp = prefix + string[i] + suffix;\n        reverse = temp + reverse;\n\
    \        prefix = string.substr(0, i) + string[i];\n        suffix = string.substr(i\
    \ + 1, len - i);\n    }\n    \n    return reverse;\n}", "{\n    string reverse\
    \ = \"\";\n    int len = string.length();\n    for(int i = 0; i < len; i++)\n\
    \    {\n        reverse += string[i];\n    }\n    string prefix = string.substr(0,\
    \ len - reverse.length());\n    return prefix + reverse;\n}", "{\n    string reverse\
    \ = \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        reverse += string[length - i - 1];\n    }\n    return string +\
    \ reverse;\n}", "{\n    string reverse = \"\";\n    string prefix = \"\";\n  \
    \  string suffix = \"\";\n    string palindrome = \"\";\n    \n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \        else\n        {\n            prefix = prefix + string[i];\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n        else\n        {\n            palindrome = palindrome\
    \ + string[i] + reverse;\n        }\n    }\n    \n    return palindrome + prefix\
    \ + suffix;\n}", "{\n    string reverse = \"\";\n    string prefix = \"\";\n \
    \   string suffix = \"\";\n    string longest = \"\";\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        string temp = string.substr(0, i);\n\
    \        \n        if(temp == temp)\n        {\n            reverse = reverse\
    \ + temp;\n            \n            for(int j = i; j < string.length(); j++)\n\
    \            {\n                string temp2 = string.substr(j, 1);\n        \
    \        \n                if(temp2 == temp2)\n                {\n           \
    \         prefix = prefix + temp2;\n                    \n                   \
    \ for(int k = j; k < string.length(); k++)\n                    {\n          \
    \              string temp3 = string.substr(k, 1);\n                        \n\
    \                        if(temp3 == temp3)\n                        {\n     \
    \                       suffix = suffix + temp3;\n                           \
    \ \n                            if(suffix.length() > longest.length())\n     \
    \                       {\n                                longest = prefix;\n\
    \                            }\n                            \n               \
    \             break;\n                        }\n                    }\n     \
    \               \n                    break;\n                }\n            }\n\
    \        }\n    }\n    \n    return longest + reverse + suffix;\n}", "{\n    int\
    \ len = string.length();\n    string postfix = \"\";\n    string prefix = \"\"\
    ;\n    string reverse = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n\
    \        postfix += string[i];\n    }\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i < len;\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < len; i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        reverse += string[i];\n    }\n    \n  \
    \  for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n    }\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n", "{\n    int len = string.length();\n    string reverse = \"\";\n  \
    \  string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0;\
    \ i < len; i++)\n    {\n        string temp = string.substr(0, i) + string.substr(i,\
    \ len);\n        if(temp == reverse(temp))\n        {\n            prefix = string.substr(0,\
    \ i);\n            suffix = string.substr(i, len);\n        }\n    }\n    \n \
    \   return prefix + reverse(suffix);\n}", "{\n    string reverse = \"\";\n   \
    \ int i = 0;\n    int j = 0;\n    int k = 0;\n    int length = 0;\n    string\
    \ palindrome = \"\";\n    \n    length = string.length();\n    \n    for(i = 0;\
    \ i < length; i++)\n    {\n        for(j = length - 1; j >= 0; j--)\n        {\n\
    \            reverse = reverse + string[j];\n        }\n        \n        for(k\
    \ = length - 1; k >= 0; k--)\n        {\n            if(string[i] == reverse[k])\n\
    \            {\n                palindrome = palindrome + string[i];\n       \
    \         break;\n            }\n        }\n    }\n    \n    return palindrome;\n\
    }", "{\n    int length = string.length();\n    int max_palindrome = 0;\n    int\
    \ max_index = 0;\n    int max_length = 0;\n    int index = 0;\n    int length\
    \ = 0;\n    int palindrome = 0;\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    string palindromic_suffix = \"\";\n\
    \    string palindromic_prefix = \"\";\n    string palindromic_suffix2 = \"\"\
    ;\n    string palindromic_prefix2 = \"\";\n    string palindromic_suffix3 = \"\
    \";\n    string palindromic_prefix3 = \"\";\n    string palindromic_suffix4 =\
    \ \"\";\n    string palindromic_prefix4 = \"\";\n    string palindromic_suffix5\
    \ = \"\";\n    string palindromic_prefix5 = \"\";\n    string palindromic_suffix6\
    \ = \"\";\n    string palindromic_prefix6 = \"\";\n    string palindromic_suffix7\
    \ = \"\";\n    string palindromic_prefix7 = \"\";\n    string palindromic_suffix8\
    \ = \"\";\n    string palindromic_prefix8 = \"\";\n    string palindromic_suffix9\
    \ = \"\";\n    string palindromic_prefix9 = \"\";\n    string palindromic_suffix10\
    \ = \"\";\n    string palindromic_prefix10 = \"\";\n    string palindromic_suffix11\
    \ = \"\";\n    string palindromic_prefix11 = \"\";\n    string palindromic_suffix12\
    \ = \"\";\n    string palindromic_prefix12 = \"\";\n    string palindromic_suffix13\
    \ = \"\";\n    string palindromic_prefix13 = \"\";\n    string palindromic_suffix14\
    \ = \"\";\n    string palindromic_prefix14 = \"\";\n    string palindromic_suffix15\
    \ = \"\";\n    string palindromic_prefix15 = \"\";\n    string palindromic_suffix16\
    \ = \"\";\n    string palindromic_prefix16 = \"\";\n    string palindromic_suffix17\
    \ = \"\";\n    string palindromic_prefix17 = \"\";\n    string palindromic_suffix18\
    \ = \"\";\n    string palindromic_prefix18 = \"\";\n    string palindromic_suffix19\
    \ = \"\";\n    string palindromic_prefix19 = \"\";\n    string palindromic_suffix20\
    \ = \"\";\n    string palindromic_prefix20 = \"\";\n    string palindromic_suffix21\
    \ = \"\";\n    string palindrom", "{\n    string reverse = \"\";\n    int i =\
    \ 0;\n    int j = 0;\n    int len = 0;\n    \n    len = string.length();\n   \
    \ \n    while (i < len) {\n        string postfix = \"\";\n        \n        postfix\
    \ = string.substr(i, len);\n        \n        string prefix = string.substr(0,\
    \ i);\n        \n        string reversed = reverse(prefix);\n        \n      \
    \  if (postfix.compare(reversed) == 0) {\n            string result = prefix +\
    \ postfix + reversed;\n            \n            return result;\n        }\n \
    \       \n        i++;\n    }\n    \n    return \"\";\n}", "{\n    string reverse\
    \ = \"\";\n    string prefix = \"\";\n    int i = 0;\n    int j = 0;\n    int\
    \ k = 0;\n    int length = 0;\n    int maxLength = 0;\n    int maxLength2 = 0;\n\
    \    int maxLength3 = 0;\n    int maxLength4 = 0;\n    int maxLength5 = 0;\n \
    \   int maxLength6 = 0;\n    int maxLength7 = 0;\n    int maxLength8 = 0;\n  \
    \  int maxLength9 = 0;\n    int maxLength10 = 0;\n    int maxLength11 = 0;\n \
    \   int maxLength12 = 0;\n    int maxLength13 = 0;\n    int maxLength14 = 0;\n\
    \    int maxLength15 = 0;\n    int maxLength16 = 0;\n    int maxLength17 = 0;\n\
    \    int maxLength18 = 0;\n    int maxLength19 = 0;\n    int maxLength20 = 0;\n\
    \    int maxLength21 = 0;\n    int maxLength22 = 0;\n    int maxLength23 = 0;\n\
    \    int maxLength24 = 0;\n    int maxLength25 = 0;\n    int maxLength26 = 0;\n\
    \    int maxLength27 = 0;\n    int maxLength28 = 0;\n    int maxLength29 = 0;\n\
    \    int maxLength30 = 0;\n    int maxLength31 = 0;\n    int maxLength32 = 0;\n\
    \    int maxLength33 = 0;\n    int maxLength34 = 0;\n    int maxLength35 = 0;\n\
    \    int maxLength36 = 0;\n    int maxLength37 = 0;\n    int maxLength38 = 0;\n\
    \    int maxLength39 = 0;\n    int maxLength40 = 0;\n    int maxLength41 = 0;\n\
    \    int maxLength42 = 0;\n    int maxLength43 = 0;\n    int maxLength44 = 0;\n\
    \    int maxLength45 = 0;\n    int maxLength46 = 0;\n    int maxLength47 = 0;\n\
    \    int maxLength48 = 0;\n    int maxLength49 = 0;\n    int maxLength50 = 0;\n\
    \    int maxLength51 = 0;\n    int maxLength52 = 0;\n    int maxLength53 = 0;\n\
    \    int maxLength54 = 0;\n    int maxLength55 = 0;\n    int maxLength56 = 0;\n\
    \    int maxLength57 = 0;\n    int maxLength58 = 0;\n    int maxLength59 = 0;\n\
    \    int maxLength60 = 0;\n    int maxLength61 = 0;\n    int maxLength62 = 0;\n\
    \    int maxLength63 = 0;\n    int maxLength64 = 0;\n    int maxLength65 = 0;\n\
    \    int maxLength66 = 0;\n    int maxLength67 = 0;\n    int maxLength68 = 0;\n\
    \    int maxLength69 = 0;\n    int maxLength70 = 0;\n    int maxLength71 = 0;\n\
    \    int maxLength72 = 0;\n    int maxLength73 = 0;\n    int maxLength74 = 0;\n\
    \    int maxLength75 = 0;\n    int maxLength76 = 0;\n    int maxLength77 = 0;\n\
    \    int maxLength78 = 0;\n    int maxLength79 = 0;\n    int maxLength80 = 0;\n\
    \    int maxLength81 = 0;\n    int maxLength82", "{\n    string reverse = \"\"\
    ;\n    string prefix = \"\";\n    string suffix = \"\";\n    string longest =\
    \ \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            prefix = prefix\
    \ + string[i];\n            suffix = suffix + string[i];\n        }\n        else\n\
    \        {\n            longest = longest + string[i];\n        }\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            reverse = reverse\
    \ + string[i];\n        }\n    }\n    \n    string result = prefix + reverse +\
    \ suffix;\n    return result;\n}", "{\n    int len = string.length();\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string\
    \ palindrome = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n        string\
    \ temp = string.substr(0, i);\n        string temp2 = string.substr(len - i -\
    \ 1, 1);\n        \n        if(temp == temp2)\n        {\n            prefix =\
    \ temp;\n            suffix = temp2;\n        }\n    }\n    \n    for(int i =\
    \ 0; i < len; i++)\n    {\n        string temp = string.substr(0, i);\n      \
    \  string temp2 = string.substr(len - i - 1, 1);\n        \n        if(temp ==\
    \ temp2)\n        {\n            reverse = reverse + temp;\n        }\n    }\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        string temp2 = string.substr(len - i - 1, 1);\n        \n     \
    \   if(temp == temp2)\n        {\n            palindrome = temp + reverse + temp2;\n\
    \        }\n    }\n    \n    return palindrome;\n}", "{\n    string palindrome\
    \ = string;\n    int length = string.length();\n    \n    for(int i = 1; i < length;\
    \ i++)\n    {\n        string prefix = string.substr(0, i);\n        string suffix\
    \ = string.substr(i, length);\n        string reverse = std.string.reverse(prefix);\n\
    \        string appended = reverse + suffix;\n        palindrome = std.string.insert(palindrome,\
    \ i, appended);\n    }\n    return palindrome;\n}", "{\n    string reverse = \"\
    \";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i\
    \ = 0; i < string.size(); i++)\n    {\n        if(string[i] == string[string.size()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \        else\n        {\n            prefix = prefix + string[i];\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.size(); i++)\n    {\n        if(string[i]\
    \ == string[string.size() - 1 - i])\n        {\n            suffix = suffix +\
    \ string[i];\n        }\n        else\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n    }\n    \n    return prefix + reverse + suffix;\n\
    }", "{\n    string reverse = \"\";\n    int length = string.length();\n    for(int\
    \ i = 0; i < length; i++) \n    {\n        reverse += string[i];\n    }\n    string\
    \ prefix = string.substr(0, string.length() - length);\n    string postfix = string.substr(string.length()\
    \ - length);\n    string palindrome = prefix + reverse + postfix;\n    return\
    \ palindrome;\n}\n/*\n Find the longest palindrome that begins with a supplied\
    \ string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n             \
    \   \n*/\nstring make_palindrome2(string string) \n{\n    string reverse = \"\"\
    ;\n    int length = string.length();\n    for(int i = 0; i < length; i++) \n \
    \   {\n        reverse += string[i];\n    }\n    string prefix = string.substr(0,\
    \ string.length() - length);\n    string postfix = string.substr(string.length()\
    \ - length);\n    string palindrome = prefix + reverse + postfix;\n    return\
    \ palindrome;\n}\n/*\n Find the longest palindrome that begins with a supplied\
    \ string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n             \
    \   \n*/\nstring make_palindrome3(string string) \n{\n    string reverse = \"\"\
    ;\n    int length = string.length();\n    for(int i = 0; i < length; i++) \n \
    \   {\n        reverse += string[i];\n    }\n    string prefix = string.substr(0,\
    \ string.length() - length);\n    string postfix = string.substr(string.length()\
    \ - length);\n    string palindrome = prefix + reverse + postfix;\n    return\
    \ palindrome;\n}\n/*\n Find the longest palindrome that begins with a supplied\
    \ string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied\
    \ string that is a palindrome.\n    - Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n             \
    \   \n*/\nstring make_palindrome4(string string) \n{\n    string reverse = \"\"\
    ;\n    int length = string.length();\n    for(int i = 0; i < length; i++) \n \
    \   {\n        reverse += string[i];\n    }\n    string prefix = string.substr(0,\
    \ string.length() - length);\n    string postfix = string.substr(string.length()\
    \ - length);\n    string p", "{\n    string reverse = \"\";\n    int i = 0;\n\
    \    int j = 0;\n    \n    while(i < string.length())\n    {\n        while(j\
    \ < string.length() && string[i] == string[j])\n        {\n            j++;\n\
    \        }\n        reverse += string[i];\n        reverse += string[j];\n   \
    \     i++;\n        j--;\n    }\n    return reverse;\n}", "{\n    string result\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix += string[i];\n        }\n        else\n\
    \        {\n            suffix += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix += string[i];\n        }\n        else\n\
    \        {\n            suffix += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix += string[i];\n        }\n        else\n\
    \        {\n            suffix += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix += string[i];\n        }\n        else\n\
    \        {\n            suffix += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix += string[i];\n        }\n        else\n\
    \        {\n            suffix += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix += string[i];\n        }\n        else\n\
    \        {\n            suffix += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix += string[i];\n        }\n        else\n\
    \        {\n            suffix += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix += string[i];\n        }\n        else\n\
    \        {\n            suffix += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix += string[i];\n        }\n        else\n\
    \        {\n            suffix += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix += string[i];\n        }\n        else\n\
    \        {\n            suffix += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n", "{\n    string reverse = \"\";\n    string prefix =\
    \ \"\";\n    string suffix = \"\";\n    \n    int longest = 0;\n    int longestLength\
    \ = 0;\n    int longestStart = 0;\n    \n    for (int i = 0; i < string.length();\
    \ i++)\n    {\n        string substring = string.substr(i, 1);\n        \n   \
    \     if (substring == substring.rev())\n        {\n            longestLength++;\n\
    \            longestStart = i;\n        }\n    }\n    \n    longestLength++;\n\
    \    longestStart = longestStart + longestLength;\n    \n    for (int i = 0; i\
    \ < string.length(); i++)\n    {\n        string substring = string.substr(i,\
    \ 1);\n        \n        if (substring == substring.rev())\n        {\n      \
    \      longestLength++;\n            longestStart = i;\n        }\n    }\n   \
    \ \n    longestLength++;\n    longestStart = longestStart + longestLength;\n \
    \   \n    for (int i = 0; i < string.length(); i++)\n    {\n        string substring\
    \ = string.substr(i, 1);\n        \n        if (substring == substring.rev())\n\
    \        {\n            longestLength++;\n            longestStart = i;\n    \
    \    }\n    }\n    \n    longestLength++;\n    longestStart = longestStart + longestLength;\n\
    \    \n    for (int i = 0; i < string.length(); i++)\n    {\n        string substring\
    \ = string.substr(i, 1);\n        \n        if (substring == substring.rev())\n\
    \        {\n            longestLength++;\n            longestStart = i;\n    \
    \    }\n    }\n    \n    longestLength++;\n    longestStart = longestStart + longestLength;\n\
    \    \n    for (int i = 0; i < string.length(); i++)\n    {\n        string substring\
    \ = string.substr(i, 1);\n        \n        if (substring == substring.rev())\n\
    \        {\n            longestLength++;\n            longestStart = i;\n    \
    \    }\n    }\n    \n    longestLength++;\n    longestStart = longestStart + longestLength;\n\
    \    \n    for (int i = 0; i < string.length(); i++)\n    {\n        string substring\
    \ = string.substr(i, 1);\n        \n        if (substring == substring.rev())\n\
    \        {\n            longestLength++;\n            longestStart = i;\n    \
    \    }\n    }\n    \n    longestLength++;\n    longestStart = longestStart + longestLength;\n\
    \    \n    for (int i = 0; i < string.length(); i++)\n    {\n        string substring\
    \ = string.substr(i, 1);\n        \n        if (substring == substring.rev())\n\
    \        {\n            longestLength++;\n            longestStart = i;\n    \
    \    }\n    }\n    \n    longestLength++;\n    longestStart = longestStart + longestLength;\n\
    \    \n    for (int i = 0; i < string.length(); i++)\n    {\n        string substring\
    \ = string.substr(i, 1);\n        \n        if (substring == substring.rev())\n",
  "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    int longest = 0;\n    int longestLength = 0;\n    int longestPrefix =\
    \ 0;\n    int longestSuffix = 0;\n    int longestReverse = 0;\n    int longestReverseLength\
    \ = 0;\n    int longestReversePrefix = 0;\n    int longestReverseSuffix = 0;\n\
    \    int longestReverseReverse = 0;\n    int longestReverseReverseLength = 0;\n\
    \    int longestReverseReversePrefix = 0;\n    int longestReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverseReverseReverseLength\
    \ = 0;\n    int longestReverseReverseReversePrefix = 0;\n    int longestReverseReverseReverseSuffix\
    \ = 0;\n    int longestReverseReverseReverseReverse = 0;\n    int longestReverse",
  "{\n    string postfix = \"\";\n    string prefix = \"\";\n    string reverse =\
    \ \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix\
    \ = postfix + string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix = prefix + string[i];\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        reverse = reverse + string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ != postfix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] != prefix[i])\n\
    \        {\n            break;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(string[i] != reverse[i])\n        {\n\
    \            break;\n        }\n    }\n    \n    return prefix + reverse + postfix;\n\
    }", "{\n    int len = string.length();\n    int max_len = len - 1;\n    int max_palindrome\
    \ = 0;\n    string palindrome = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix = string.substr(0,\
    \ i);\n        suffix = string.substr(i, len);\n        \n        if(std.string.isPalindrome(prefix)\
    \ && std.string.isPalindrome(suffix))\n        {\n            int palindrome_len\
    \ = std.string.length(prefix) + std.string.length(suffix);\n            \n   \
    \         if(palindrome_len > max_palindrome)\n            {\n               \
    \ max_palindrome = palindrome_len;\n                palindrome = prefix;\n   \
    \         }\n        }\n    }\n    \n    return palindrome;\n}", "{\n    string\
    \ palindrome = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n \
    \   \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix = string.substr(0,i);\n\
    \        suffix = string.substr(i,string.length());\n        \n        if(std.string.isPalindrome(prefix)\
    \ && std.string.isPalindrome(suffix))\n        {\n            palindrome += std.string.reverse(prefix)\
    \ + std.string.reverse(suffix);\n        }\n    }\n    \n    return palindrome;\n\
    }", "{\n    string result = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    string reverse = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            prefix = temp;\n            suffix = temp2;\n        }\n\
    \        else\n        {\n            reverse = reverse + temp;\n            reverse\
    \ = reverse + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            prefix = temp;\n            suffix = temp2;\n        }\n\
    \        else\n        {\n            reverse = reverse + temp;\n            reverse\
    \ = reverse + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            prefix = temp;\n            suffix = temp2;\n        }\n\
    \        else\n        {\n            reverse = reverse + temp;\n            reverse\
    \ = reverse + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            prefix = temp;\n            suffix = temp2;\n        }\n\
    \        else\n        {\n            reverse = reverse + temp;\n            reverse\
    \ = reverse + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            prefix = temp;\n            suffix = temp2;\n        }\n\
    \        else\n        {\n            reverse = reverse + temp;\n            reverse\
    \ = reverse + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            prefix = temp;\n            suffix = temp2;\n        }\n\
    \        else\n        {\n            reverse = reverse + temp;\n            reverse\
    \ = reverse + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string", "{\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            reverse = reverse + string[i];\n            prefix = prefix\
    \ + string[i];\n            suffix = suffix + string[i];\n        }\n    }\n \
    \   \n    return prefix + reverse + suffix;\n}", "{\n    string palindrome = \"\
    \";\n    string prefix = \"\";\n    string suffix = \"\";\n    string reverse\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ if(string[i] == string[string.length() - 1 - i])\n        {\n            prefix\
    \ += string[i];\n        }\n        else\n        {\n            suffix += string[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] == string[string.length() - 1 - i])\n        {\n       \
    \     reverse += string[i];\n        }\n    }\n    \n    palindrome += prefix;\n\
    \    palindrome += reverse;\n    palindrome += suffix;\n    \n    return palindrome;\n\
    }", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    string longest = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            reverse = reverse + string[i];\n            prefix = prefix\
    \ + string[i];\n            suffix = suffix + string[i];\n        }\n        else\n\
    \        {\n            longest = longest + string[i];\n        }\n    }\n   \
    \ \n    string result = prefix + reverse + suffix;\n    \n    return result;\n\
    }", "{\n    int len = string.length();\n    string postfix = \"\";\n    string\
    \ prefix = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < len; i++)\n    {\n      \
    \  prefix += string[i];\n    }\n    \n    string reverse = reverse(prefix);\n\
    \    \n    return postfix + reverse + postfix;\n}", "{\n    string result = \"\
    \";\n    string prefix = \"\";\n    string suffix = \"\";\n    string reverse\
    \ = \"\";\n    \n    for(int i = 0; i < string.size(); ++i)\n    {\n        if(string[i]\
    \ == string[string.size() - 1 - i])\n        {\n            prefix += string[i];\n\
    \        }\n        else\n        {\n            suffix += string[i];\n      \
    \  }\n    }\n    \n    reverse = std.string.reverse(prefix);\n    \n    for(int\
    \ i = 0; i < string.size(); ++i)\n    {\n        if(string[i] == string[string.size()\
    \ - 1 - i])\n        {\n            result += reverse + string[i];\n        }\n\
    \        else\n        {\n            result += string[i];\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    int len = string.length();\n    string\
    \ palindrome = string;\n    string reverse = \"\";\n    \n    for(int i = 0; i\
    \ < len; i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        if(string[i] != reverse[i])\n        {\n\
    \            palindrome += string[i];\n        }\n    }\n    \n    return palindrome;\n\
    }", "{\n    string postfix = \"\";\n    string prefix = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            postfix += string[i];\n            prefix\
    \ += string[i];\n        }\n        else\n        {\n            postfix += string[i];\n\
    \            prefix += string[string.length() - 1 - i];\n        }\n    }\n  \
    \  \n    return postfix + prefix;\n}", "{\n    string postfix = \"\";\n    string\
    \ prefix = \"\";\n    string reverse = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        prefix += string[i];\n    }\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        postfix += string[i];\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        postfix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        reverse += string[i];\n    }\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        reverse += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        prefix += string[i];\n    }\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        postfix += string[i];\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < ", "{\n    string reverse\
    \ = \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        reverse += string[length - 1 - i];\n    }\n    string prefix =\
    \ string.substr(0, string.length() - length);\n    string suffix = string.substr(string.length()\
    \ - length);\n    return prefix + reverse + suffix;\n}\n/*\n Find the longest\
    \ palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n\
    \    - Find the longest postfix of supplied string that is a palindrome.\n   \
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n                \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        reverse += string[length\
    \ - 1 - i];\n    }\n    string prefix = string.substr(0, string.length() - length);\n\
    \    string suffix = string.substr(string.length() - length);\n    return prefix\
    \ + reverse + suffix;\n}\n/*\n Find the longest palindrome that begins with a\
    \ supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    - Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n     \
    \           \n*/\nstring make_palindrome(string string) \n{\n    string reverse\
    \ = \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        reverse += string[length - 1 - i];\n    }\n    string prefix =\
    \ string.substr(0, string.length() - length);\n    string suffix = string.substr(string.length()\
    \ - length);\n    return prefix + reverse + suffix;\n}\n/*\n Find the longest\
    \ palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n\
    \    - Find the longest postfix of supplied string that is a palindrome.\n   \
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n                \n*/\nstring make_palindrome(string\
    \ string) \n{\n    string reverse = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        reverse += string[length\
    \ - 1 - i];\n    }\n    string prefix = string.substr(0, string.length() - length);\n\
    \    string suffix = string.substr(string.length() - length);\n    return prefix\
    \ + reverse + suffix;\n}\n/*\n Find the longest palindrome that begins with a\
    \ supplied string.\n    Algorithm idea is simple:\n    - Find the longest post",
  "{\n    string postfix = \"\";\n    string prefix = \"\";\n    string reverse =\
    \ \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        postfix += string[i];\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        postfix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        reverse += string[i];\n    }\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        reverse += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        prefix += string[i];\n    }\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        postfix += string[i];\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        postfix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        reverse += string[i];\n    }\n    \n\
    \    for(int i = 0; i < ", "{\n    string longest = \"\";\n    string longestPrefix\
    \ = \"\";\n    string longestSuffix = \"\";\n    string longestPalindrome = \"\
    \";\n    string longestPalindromePrefix = \"\";\n    string longestPalindromeSuffix\
    \ = \"\";\n    string longestPalindromePalindrome = \"\";\n    string longestPalindromePalindromePrefix\
    \ = \"\";\n    string longestPalindromePalindromeSuffix = \"\";\n    \n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    string palindrome = \"\";\n \
    \   string palindromePrefix = \"\";\n    string palindromeSuffix = \"\";\n   \
    \ string palindromePalindrome = \"\";\n    string palindromePalindromePrefix =\
    \ \"\";\n    string palindromePalindromeSuffix = \"\";\n    \n    string reversePrefix\
    \ = \"\";\n    string reverseSuffix = \"\";\n    string reversePalindrome = \"\
    \";\n    string reversePalindromePrefix = \"\";\n    string reversePalindromeSuffix\
    \ = \"\";\n    string reversePalindromePalindrome = \"\";\n    string reversePalindromePalindromePrefix\
    \ = \"\";\n    string reversePalindromePalindromeSuffix = \"\";\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "{\n    string postfix = \"\";\n    string prefix\
    \ = \"\";\n    string reverse = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        prefix += string[i];\n    }\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ != postfix[i])\n        {\n            break;\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] != prefix[i])\n\
    \        {\n            break;\n        }\n    }\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        if(string[i] != reverse[i])\n        {\n\
    \            break;\n        }\n    }\n    \n    return postfix + reverse + prefix;\n\
    }", "{\n    string result = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    string reverse = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        \n        if(temp\
    \ == \" \")\n        {\n            result += temp;\n        }\n        else if(temp\
    \ == \"-\")\n        {\n            reverse = reverse + temp;\n        }\n   \
    \     else\n        {\n            prefix = prefix + temp;\n        }\n    }\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(i, 1);\n        \n        if(temp == \" \")\n        {\n   \
    \         result += temp;\n        }\n        else if(temp == \"-\")\n       \
    \ {\n            reverse = reverse + temp;\n        }\n        else\n        {\n\
    \            suffix = suffix + temp;\n        }\n    }\n    \n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == \" \")\n        {\n            result += temp;\n\
    \        }\n        else if(temp == \"-\")\n        {\n            reverse = reverse\
    \ + temp;\n        }\n        else\n        {\n            result += reverse +\
    \ temp;\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    string reverse = \"\";\n    int length = string.length();\n   \
    \ \n    for (int i = 0; i < length; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for (int i = 0; i < length; i++)\n    {\n        if (string[i]\
    \ != reverse[i])\n        {\n            break;\n        }\n    }\n    \n    for\
    \ (int i = length - 1; i >= 0; i--)\n    {\n        result += string[i];\n   \
    \ }\n    \n    return result;\n}", "{\n    string palindrome = string;\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    int longest = 0;\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longest++;\n        }\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = string[string.length() - 1 - i] + suffix;\n        }\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = string[string.length() - 1 - i] + suffix;\n        }\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = string[string.length() - 1 - i] + suffix;\n        }\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = string[string.length() - 1 - i] + suffix;\n        }\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = string[string.length() - 1 - i] + suffix;\n        }\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = string[string.length() - 1 - i] + suffix;\n        }\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = string[string.length() - 1 - i] + suffix;\n        }\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = string[string.length() - 1 - i] + suffix;\n        }\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = string[string.length() - 1 - i] + suffix;\n        }\n    }\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = string[string.length() - 1 - i] + suffix;\n", "{\n    string reverse\
    \ = \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        reverse += string[length - 1 - i];\n    }\n    return string +\
    \ reverse;\n}", "{\n    int length = string.length();\n    string reverse = \"\
    \";\n    string prefix = \"\";\n    string suffix = \"\";\n    string palindrome\
    \ = \"\";\n    \n    for(int i = 0; i < length; i++)\n    {\n        string temp\
    \ = string.substr(0, i);\n        reverse += temp;\n        string temp2 = string.substr(i,\
    \ string.length());\n        prefix += temp2;\n    }\n    \n    for(int i = 0;\
    \ i < length; i++)\n    {\n        string temp = string.substr(0, i);\n      \
    \  suffix += temp;\n        string temp2 = string.substr(i, string.length());\n\
    \        palindrome += temp2;\n    }\n    \n    string result = reverse + prefix\
    \ + suffix;\n    \n    return result;\n}", "{\n    string postfix = \"\";\n  \
    \  string prefix = \"\";\n    string reverse = \"\";\n    \n    int length = string.length();\n\
    \    \n    for (int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for (int i = 0; i < length; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for (int i = 0; i < length; i++)\n    {\n        reverse +=\
    \ string[i];\n    }\n    \n    string palindrome = postfix + reverse + prefix;\n\
    \    \n    return palindrome;\n}", "{\n    string result = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = suffix + string[i];\n        }\n        else\n        {\n         \
    \   reverse = reverse + string[i];\n        }\n    }\n    \n    result = prefix\
    \ + reverse + suffix;\n    return result;\n}", "{\n    string reverse = \"\";\n\
    \    string prefix = \"\";\n    string suffix = \"\";\n    string longest = \"\
    \";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(0, i);\n        reverse += temp;\n        \n        if(temp\
    \ == temp)\n        {\n            prefix += temp;\n        }\n        else\n\
    \        {\n            suffix += temp;\n        }\n    }\n    \n    longest =\
    \ prefix + reverse + suffix;\n    \n    return longest;\n}", "{\n    string palindrome\
    \ = \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        if(string[i] == string[length - 1 - i])\n        {\n         \
    \   palindrome += string[i];\n        }\n    }\n    return palindrome;\n}\n/*\n\
    \ Find the longest postfix of supplied string that is a palindrome.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n                \n*/\nstring make_palindrome2(string\
    \ string) \n{\n    string palindrome = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        if(string[i] == string[length\
    \ - 1 - i])\n        {\n            palindrome += string[i];\n        }\n    }\n\
    \    return palindrome;\n}\n/*\n Find the longest postfix of supplied string that\
    \ is a palindrome.\n    Algorithm idea is simple:\n    - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    - Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n     \
    \           \n*/\nstring make_palindrome3(string string) \n{\n    string palindrome\
    \ = \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        if(string[i] == string[length - 1 - i])\n        {\n         \
    \   palindrome += string[i];\n        }\n    }\n    return palindrome;\n}\n/*\n\
    \ Find the longest postfix of supplied string that is a palindrome.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n                \n*/\nstring make_palindrome4(string\
    \ string) \n{\n    string palindrome = \"\";\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++)\n    {\n        if(string[i] == string[length\
    \ - 1 - i])\n        {\n            palindrome += string[i];\n        }\n    }\n\
    \    return palindrome;\n}\n/*\n Find the longest postfix of supplied string that\
    \ is a palindrome.\n    Algorithm idea is simple:\n    - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    - Append to the end of the string\
    \ reverse of a string ", "{\n    string palindrome = \"\";\n    int length = string.length();\n\
    \    int i = 0;\n    int j = 0;\n    \n    while(i < length && j < length)\n \
    \   {\n        if(string[i] == string[j])\n        {\n            palindrome +=\
    \ string[i];\n            i++;\n            j++;\n        }\n        else\n  \
    \      {\n            if(i == j)\n            {\n                palindrome +=\
    \ string[i];\n                i++;\n            }\n            else\n        \
    \    {\n                palindrome += string[i] + string[j];\n               \
    \ i++;\n                j++;\n            }\n        }\n    }\n    return palindrome;\n\
    }\n/*\n Find the longest postfix of supplied string that is a palindrome.\n  \
    \  Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \n*/\nstring\
    \ make_palindrome2(string string) \n{\n    string palindrome = \"\";\n    int\
    \ length = string.length();\n    int i = 0;\n    int j = 0;\n    \n    while(i\
    \ < length && j < length)\n    {\n        if(string[i] == string[j])\n       \
    \ {\n            palindrome += string[i];\n            i++;\n            j++;\n\
    \        }\n        else\n        {\n            if(i == j)\n            {\n \
    \               palindrome += string[i];\n                i++;\n            }\n\
    \            else\n            {\n                palindrome += string[i] + string[j];\n\
    \                i++;\n                j++;\n            }\n        }\n    }\n\
    \    return palindrome;\n}\n/*\n Find the longest postfix of supplied string that\
    \ is a palindrome.\n    Algorithm idea is simple:\n    - Find the longest postfix\
    \ of supplied string that is a palindrome.\n    - Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n     \
    \           \n*/\nstring make_palindrome3(string string) \n{\n    string palindrome\
    \ = \"\";\n    int length = string.length();\n    int i = 0;\n    int j = 0;\n\
    \    \n    while(i < length && j < length)\n    {\n        if(string[i] == string[j])\n\
    \        {\n            palindrome += string[i];\n            i++;\n         \
    \   j++;\n        }\n        else\n        {\n            if(i == j)\n       \
    \     {\n                palindrome += string[i];\n                i++;\n    \
    \        }\n            else\n            {\n                palindrome += string[i]\
    \ + string[j];", "{\n    int len = string.length();\n    int max_len = len - 1;\n\
    \    int max_i = 0;\n    int max_j = 0;\n    int max_p = 0;\n    int max_q = 0;\n\
    \    int max_r = 0;\n    int max_s = 0;\n    int max_t = 0;\n    int max_u = 0;\n\
    \    int max_v = 0;\n    int max_w = 0;\n    int max_x = 0;\n    int max_y = 0;\n\
    \    int max_z = 0;\n    int max_a = 0;\n    int max_b = 0;\n    int max_c = 0;\n\
    \    int max_d = 0;\n    int max_e = 0;\n    int max_f = 0;\n    int max_g = 0;\n\
    \    int max_h = 0;\n    int max_i = 0;\n    int max_j = 0;\n    int max_k = 0;\n\
    \    int max_l = 0;\n    int max_m = 0;\n    int max_n = 0;\n    int max_o = 0;\n\
    \    int max_p = 0;\n    int max_q = 0;\n    int max_r = 0;\n    int max_s = 0;\n\
    \    int max_t = 0;\n    int max_u = 0;\n    int max_v = 0;\n    int max_w = 0;\n\
    \    int max_x = 0;\n    int max_y = 0;\n    int max_z = 0;\n    int max_a = 0;\n\
    \    int max_b = 0;\n    int max_c = 0;\n    int max_d = 0;\n    int max_e = 0;\n\
    \    int max_f = 0;\n    int max_g = 0;\n    int max_h = 0;\n    int max_i = 0;\n\
    \    int max_j = 0;\n    int max_k = 0;\n    int max_l = 0;\n    int max_m = 0;\n\
    \    int max_n = 0;\n    int max_o = 0;\n    int max_p = 0;\n    int max_q = 0;\n\
    \    int max_r = 0;\n    int max_s = 0;\n    int max_t = 0;\n    int max_u = 0;\n\
    \    int max_v = 0;\n    int max_w = 0;\n    int max_x = 0;\n    int max_y = 0;\n\
    \    int max_z = 0;\n    int max_a = 0;\n    int max_b = 0;\n    int max_c = 0;\n\
    \    int max_d = 0;\n    int max_e = 0;\n    int max_f = 0;\n    int max_g = 0;\n\
    \    int max_h = 0;\n    int max_i = 0;\n    int max_j = 0;\n    int max_k = 0;\n\
    \    int max_l = 0;\n    int max_m = 0;\n    int max_n = 0;\n    int max_o = 0;\n\
    \    int max_p = 0;\n    int max_q = 0;\n    int max_r = 0;\n    int max_s = 0;\n\
    \    int max_t = 0;\n    int max_u = 0;\n    int max_v = 0;\n    int max_w = 0;\n\
    \    int max_x = 0;\n    int max_y = 0;\n    int max_z = 0;\n    int max_a = 0;\n\
    \    int max_b = 0;\n    int max_c = 0;\n    int max_d = 0;\n    int max_e = 0;\n\
    \    int max_f = 0;\n    int max_g = 0;\n    int max_h = 0;\n    int max_i = 0;\n\
    \    int max_j = 0;\n    int max_k = 0;\n    int ", "{\n    int len = string.length();\n\
    \    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(string[i] == string[len-i-1])\n\
    \        {\n            reverse = reverse + string[i];\n            prefix = prefix\
    \ + string[i];\n            suffix = suffix + string[i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i];\n        }\n    }\n   \
    \ \n    string result = prefix + reverse + suffix;\n    return result;\n}", "{\n\
    \    string postfix = \"\";\n    string prefix = \"\";\n    string reverse = \"\
    \";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        if(string[i] == postfix[postfix.length() - 1 - i])\n        {\n\
    \            prefix += string[i];\n        }\n    }\n    \n    for(int i = 0;\
    \ i < prefix.length(); i++)\n    {\n        reverse += prefix[i];\n    }\n   \
    \ \n    return reverse + postfix;\n}", "{\n    string result = \"\";\n    string\
    \ longest = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string\
    \ reverse = \"\";\n    \n    longest = longest(string);\n    \n    prefix = longest.substr(0,\
    \ longest.length() - longest.length());\n    suffix = longest.substr(longest.length()\
    \ - longest.length());\n    \n    reverse = reverse(prefix);\n    \n    result\
    \ = prefix + reverse + suffix;\n    \n    return result;\n}", "{\n    string palindrome\
    \ = \"\";\n    int max_len = string.length();\n    int min_len = max_len;\n  \
    \  for(int i = max_len-1; i >= 0; i--)\n    {\n        string prefix = string.substr(0,\
    \ i);\n        string suffix = string.substr(i, string.length());\n        string\
    \ reverse = std.string.reverse(prefix);\n        palindrome = palindrome + reverse\
    \ + suffix;\n    }\n    return palindrome;\n}\n/*\n Find the longest palindrome\
    \ that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find\
    \ the longest postfix of supplied string that is a palindrome.\n    - Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n                \n*/\nstring make_palindrome2(string string) \n{\n\
    \    string palindrome = \"\";\n    int max_len = string.length();\n    int min_len\
    \ = max_len;\n    for(int i = max_len-1; i >= 0; i--)\n    {\n        string prefix\
    \ = string.substr(0, i);\n        string suffix = string.substr(i, string.length());\n\
    \        string reverse = std.string.reverse(prefix);\n        palindrome = palindrome\
    \ + reverse + suffix;\n    }\n    return palindrome;\n}\n/*\n Find the longest\
    \ palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n\
    \    - Find the longest postfix of supplied string that is a palindrome.\n   \
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n                \n*/\nstring make_palindrome3(string\
    \ string) \n{\n    string palindrome = \"\";\n    int max_len = string.length();\n\
    \    int min_len = max_len;\n    for(int i = max_len-1; i >= 0; i--)\n    {\n\
    \        string prefix = string.substr(0, i);\n        string suffix = string.substr(i,\
    \ string.length());\n        string reverse = std.string.reverse(prefix);\n  \
    \      palindrome = palindrome + reverse + suffix;\n    }\n    return palindrome;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n                \n*/\nstring make_palindrome4(string\
    \ string) \n{\n    string p", "{\n    string result = \"\";\n    int length =\
    \ string.length();\n    \n    // Find longest postfix that is a palindrome\n \
    \   int max_index = 0;\n    int max_index2 = 0;\n    int max_index3 = 0;\n   \
    \ int max_index4 = 0;\n    int max_index5 = 0;\n    int max_index6 = 0;\n    int\
    \ max_index7 = 0;\n    int max_index8 = 0;\n    int max_index9 = 0;\n    int max_index10\
    \ = 0;\n    int max_index11 = 0;\n    int max_index12 = 0;\n    int max_index13\
    \ = 0;\n    int max_index14 = 0;\n    int max_index15 = 0;\n    int max_index16\
    \ = 0;\n    int max_index17 = 0;\n    int max_index18 = 0;\n    int max_index19\
    \ = 0;\n    int max_index20 = 0;\n    int max_index21 = 0;\n    int max_index22\
    \ = 0;\n    int max_index23 = 0;\n    int max_index24 = 0;\n    int max_index25\
    \ = 0;\n    int max_index26 = 0;\n    int max_index27 = 0;\n    int max_index28\
    \ = 0;\n    int max_index29 = 0;\n    int max_index30 = 0;\n    int max_index31\
    \ = 0;\n    int max_index32 = 0;\n    int max_index33 = 0;\n    int max_index34\
    \ = 0;\n    int max_index35 = 0;\n    int max_index36 = 0;\n    int max_index37\
    \ = 0;\n    int max_index38 = 0;\n    int max_index39 = 0;\n    int max_index40\
    \ = 0;\n    int max_index41 = 0;\n    int max_index42 = 0;\n    int max_index43\
    \ = 0;\n    int max_index44 = 0;\n    int max_index45 = 0;\n    int max_index46\
    \ = 0;\n    int max_index47 = 0;\n    int max_index48 = 0;\n    int max_index49\
    \ = 0;\n    int max_index50 = 0;\n    int max_index51 = 0;\n    int max_index52\
    \ = 0;\n    int max_index53 = 0;\n    int max_index54 = 0;\n    int max_index55\
    \ = 0;\n    int max_index56 = 0;\n    int max_index57 = 0;\n    int max_index58\
    \ = 0;\n    int max_index59 = 0;\n    int max_index60 = 0;\n    int max_index61\
    \ = 0;\n    int max_index62 = 0;\n    int max_index63 = 0;\n    int max_index64\
    \ = 0;\n    int max_index65 = 0;\n    int max_index66 = 0;\n    int max_index67\
    \ = 0;\n    int max_index68 = 0;\n    int max_index69 = 0;\n    int max_index70\
    \ = 0;\n    int max_index71 = 0;\n    int max_index72 = 0;\n    int max_index73\
    \ = 0;\n    int max_index74 = 0;\n    int max_index75 = 0;\n    int max_index76\
    \ = 0;\n    int max_index77 = 0;\n    int max_index78 = 0;\n    int max_index79\
    \ = 0;\n    int max_index80 = 0;\n    int max_index81 = 0;\n    int max_index",
  "{\n    int len = string.length();\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for (int i = 0; i < len; i++)\n\
    \    {\n        string s = string[i];\n        \n        if (s.isDigit())\n  \
    \      {\n            reverse = reverse + s;\n        }\n        else if (s.isUpper())\n\
    \        {\n            reverse = reverse + s.toLower();\n        }\n        else\
    \ if (s.isLower())\n        {\n            reverse = reverse + s.toUpper();\n\
    \        }\n        else\n        {\n            reverse = reverse + s;\n    \
    \    }\n    }\n    \n    for (int i = 0; i < len; i++)\n    {\n        string\
    \ s = string[i];\n        \n        if (s.isDigit())\n        {\n            prefix\
    \ = prefix + s;\n        }\n        else if (s.isUpper())\n        {\n       \
    \     prefix = prefix + s.toLower();\n        }\n        else if (s.isLower())\n\
    \        {\n            prefix = prefix + s.toUpper();\n        }\n        else\n\
    \        {\n            prefix = prefix + s;\n        }\n    }\n    \n    for\
    \ (int i = 0; i < len; i++)\n    {\n        string s = string[i];\n        \n\
    \        if (s.isDigit())\n        {\n            suffix = suffix + s;\n     \
    \   }\n        else if (s.isUpper())\n        {\n            suffix = suffix +\
    \ s.toLower();\n        }\n        else if (s.isLower())\n        {\n        \
    \    suffix = suffix + s.toUpper();\n        }\n        else\n        {\n    \
    \        suffix = suffix + s;\n        }\n    }\n    \n    string palindrome =\
    \ reverse + prefix + suffix;\n    return palindrome;\n}", "{\n    string reverse\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string postfix\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ if(string[i] == string[string.length() - 1 - i])\n        {\n            postfix\
    \ = postfix + string[i];\n        }\n        else\n        {\n            postfix\
    \ = postfix + string[i] + string[string.length() - 1 - i];\n        }\n    }\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            reverse = reverse\
    \ + string[i];\n        }\n        else\n        {\n            reverse = reverse\
    \ + string[i] + string[string.length() - 1 - i];\n        }\n    }\n    \n   \
    \ for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n        }\n\
    \        else\n        {\n            prefix = prefix + string[i] + string[string.length()\
    \ - 1 - i];\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        if(string[i] == string[string.length() - 1 - i])\n        {\n\
    \            suffix = suffix + string[i];\n        }\n        else\n        {\n\
    \            suffix = suffix + string[i] + string[string.length() - 1 - i];\n\
    \        }\n    }\n    \n    return prefix + postfix + reverse;\n}", "{\n    string\
    \ palindrome = string;\n    string postfix = \"\";\n    int length = string.length();\n\
    \    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < length; i++)\n    {\n        postfix ", "{\n\
    \    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    \n    int length = string.length();\n    \n    // Find longest postfix\
    \ of string that is a palindrome\n    for (int i = 0; i < length; i++)\n    {\n\
    \        if (string[i] == string[length - 1 - i])\n        {\n            postfix\
    \ = postfix + string[i];\n        }\n    }\n    \n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    for (int i = 0; i < length; i++)\n    {\n        if (string[i] == string[length\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n        }\n\
    \    }\n    \n    // Return palindrome with appended reverse of string prefix\
    \ that comes before the palindromic suffix.\n    return postfix + reverse;\n}",
  "{\n    int len = string.length();\n    string postfix = \"\";\n    string prefix\
    \ = \"\";\n    string reverse = \"\";\n    \n    for (int i = 0; i < len; i++)\n\
    \    {\n        if (string[i] == '_')\n        {\n            postfix = postfix\
    \ + string[i];\n        }\n        else\n        {\n            prefix = prefix\
    \ + string[i];\n        }\n    }\n    \n    string palindrome = postfix + reverse(prefix);\n\
    \    return palindrome;\n}", "{\n    int len = string.length();\n    string postfix\
    \ = \"\";\n    string prefix = \"\";\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        postfix += string[i];\n    }\n    \n  \
    \  for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n    }\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n", "{\n    string result\
    \ = \"\";\n    string postfix = \"\";\n    string prefix = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        postfix = postfix + string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix\
    \ = prefix + string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == postfix[postfix.length() - 1 - i])\n  \
    \      {\n            result = result + prefix + string[i];\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    string reverse = \"\";\n    int len = string.length();\n\
    \    for(int i = 0; i < len / 2; i++) \n    {\n        reverse += string[i];\n\
    \    }\n    reverse += string[len - 1];\n    return reverse;\n}", "{\n    string\
    \ reverse = \"\";\n    int length = string.length();\n    for(int i = 0; i < length;\
    \ i++)\n    {\n        reverse = reverse + string[i];\n    }\n    return string\
    \ + reverse;\n}", "{\n    string reverse = \"\";\n    string prefix = \"\";\n\
    \    string suffix = \"\";\n    \n    int len = string.length();\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        string temp = string.substr(i, 1);\n  \
    \      reverse += temp;\n        \n        if(temp == string[i])\n        {\n\
    \            prefix = string.substr(0, i);\n            suffix = string.substr(i\
    \ + 1, len - i);\n        }\n    }\n    \n    return prefix + reverse + suffix;\n\
    }", "{\n    string result = \"\";\n    int length = string.length();\n    \n \
    \   for(int i = 0; i < length; i++)\n    {\n        string prefix = string.substr(0,\
    \ i);\n        string suffix = string.substr(i, length);\n        \n        if(std.string.isPalindrome(suffix))\n\
    \        {\n            string reverse = std.string.reverse(prefix);\n       \
    \     string appended = reverse + suffix;\n            result = result + appended;\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=string,algorithm,c++\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>", "{\n    int len = string.length();\n    string reverse = \"\"\
    ;\n    string prefix = \"\";\n    string suffix = \"\";\n    string palindrome\
    \ = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n        string temp\
    \ = string.substr(i, 1);\n        \n        if(temp == string.substr(len - i -\
    \ 1, 1))\n        {\n            reverse = reverse + temp;\n            \n   \
    \         if(i == 0)\n            {\n                prefix = temp;\n        \
    \    }\n            else\n            {\n                suffix = temp;\n    \
    \        }\n        }\n        else\n        {\n            palindrome = reverse\
    \ + temp;\n        }\n    }\n    \n    return palindrome + prefix + suffix;\n}",
  "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string\
    \ temp = string.substr(0, i);\n        string temp2 = string.substr(i, string.length());\n\
    \        \n        if(temp == temp2)\n        {\n            reverse = reverse\
    \ + temp;\n            prefix = prefix + temp;\n            suffix = suffix +\
    \ temp2;\n        }\n    }\n    \n    return prefix + reverse + suffix;\n}", "{\n\
    \    string result = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string postfix\
    \ = \"\";\n        \n        for(int j = i; j < string.length(); j++)\n      \
    \  {\n            postfix += string[j];\n        }\n        \n        string reverse\
    \ = std.reverse(string);\n        \n        if(postfix.compare(reverse) == 0)\n\
    \        {\n            prefix = postfix.substr(0, i);\n            suffix = postfix.substr(i);\n\
    \        }\n    }\n    \n    result += prefix;\n    result += suffix;\n    \n\
    \    return result;\n}", "{\n    int len = string.length();\n    string postfix\
    \ = \"\";\n    string prefix = \"\";\n    \n    for(int i = 0; i < len; i++)\n\
    \    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0; i < len;\
    \ i++)\n    {\n        prefix += string[len - 1 - i];\n    }\n    \n    string\
    \ reverse = reverse(prefix);\n    string palindrome = postfix + reverse;\n   \
    \ \n    return palindrome;\n}", "{\n    string result = \"\";\n    int length\
    \ = string.length();\n    for(int i = 0; i < length; i++)\n    {\n        string\
    \ prefix = string.substr(0, i);\n        string suffix = string.substr(i, length);\n\
    \        string reverse = std.string.reverse(suffix);\n        string appended\
    \ = prefix + reverse;\n        result += appended;\n    }\n    return result;\n\
    }", "{\n    string postfix = \"\";\n    string prefix = \"\";\n    string reverse\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ if(string[i] == string[string.length() - 1 - i])\n        {\n            postfix\
    \ = postfix + string[i];\n        }\n        else\n        {\n            prefix\
    \ = prefix + string[i];\n        }\n    }\n    \n    for(int i = 0; i < prefix.length();\
    \ i++)\n    {\n        reverse = reverse + prefix[i];\n    }\n    \n    reverse\
    \ = reverse + postfix;\n    \n    return reverse;\n}", "{\n    string postfix\
    \ = \"\";\n    string prefix = \"\";\n    string reverse = \"\";\n    int i =\
    \ 0;\n    int j = 0;\n    int k = 0;\n    int length = 0;\n    bool found = false;\n\
    \    bool found2 = false;\n    bool found3 = false;\n    bool found4 = false;\n\
    \    bool found5 = false;\n    bool found6 = false;\n    bool found7 = false;\n\
    \    bool found8 = false;\n    bool found9 = false;\n    bool found10 = false;\n\
    \    bool found11 = false;\n    bool found12 = false;\n    bool found13 = false;\n\
    \    bool found14 = false;\n    bool found15 = false;\n    bool found16 = false;\n\
    \    bool found17 = false;\n    bool found18 = false;\n    bool found19 = false;\n\
    \    bool found20 = false;\n    bool found21 = false;\n    bool found22 = false;\n\
    \    bool found23 = false;\n    bool found24 = false;\n    bool found25 = false;\n\
    \    bool found26 = false;\n    bool found27 = false;\n    bool found28 = false;\n\
    \    bool found29 = false;\n    bool found30 = false;\n    bool found31 = false;\n\
    \    bool found32 = false;\n    bool found33 = false;\n    bool found34 = false;\n\
    \    bool found35 = false;\n    bool found36 = false;\n    bool found37 = false;\n\
    \    bool found38 = false;\n    bool found39 = false;\n    bool found40 = false;\n\
    \    bool found41 = false;\n    bool found42 = false;\n    bool found43 = false;\n\
    \    bool found44 = false;\n    bool found45 = false;\n    bool found46 = false;\n\
    \    bool found47 = false;\n    bool found48 = false;\n    bool found49 = false;\n\
    \    bool found50 = false;\n    bool found51 = false;\n    bool found52 = false;\n\
    \    bool found53 = false;\n    bool found54 = false;\n    bool found55 = false;\n\
    \    bool found56 = false;\n    bool found57 = false;\n    bool found58 = false;\n\
    \    bool found59 = false;\n    bool found60 = false;\n    bool found61 = false;\n\
    \    bool found62 = false;\n    bool found63 = false;\n    bool found64 = false;\n\
    \    bool found65 = false;\n    bool found66 = false;\n    bool found67 = false;\n\
    \    bool found68 = false;\n    bool found69 = false;\n    bool found70 = false;\n\
    \    bool found71 = false;\n    bool found72 = false;\n    bool found73 = false;\n\
    \    bool found74 = false;\n    bool found75 = false;\n    bool found76 = false;\n\
    \    bool found77 = false;\n", "{\n    string reverse = \"\";\n    int i = 0;\n\
    \    int j = 0;\n    int k = 0;\n    int length = 0;\n    string longest = \"\"\
    ;\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    length = string.length();\n\
    \    \n    for(i = 0; i < length; i++)\n    {\n        j = length - i - 1;\n \
    \       \n        if(string[i] == string[j])\n        {\n            k = j;\n\
    \        }\n        else\n        {\n            k = j + 1;\n        }\n     \
    \   \n        if(k == length)\n        {\n            reverse = reverse + string[i];\n\
    \        }\n        else\n        {\n            reverse = reverse + string[i]\
    \ + string[k];\n        }\n    }\n    \n    longest = reverse + string;\n    \n\
    \    for(i = 0; i < length; i++)\n    {\n        j = length - i - 1;\n       \
    \ \n        if(string[i] == string[j])\n        {\n            k = j;\n      \
    \  }\n        else\n        {\n            k = j + 1;\n        }\n        \n \
    \       if(k == length)\n        {\n            prefix = prefix + string[i];\n\
    \        }\n        else\n        {\n            prefix = prefix + string[i] +\
    \ string[k];\n        }\n    }\n    \n    for(i = 0; i < length; i++)\n    {\n\
    \        j = length - i - 1;\n        \n        if(string[i] == string[j])\n \
    \       {\n            k = j;\n        }\n        else\n        {\n          \
    \  k = j + 1;\n        }\n        \n        if(k == length)\n        {\n     \
    \       suffix = suffix + string[i];\n        }\n        else\n        {\n   \
    \         suffix = suffix + string[i] + string[k];\n        }\n    }\n    \n \
    \   string palindrome = prefix + longest;\n    \n    palindrome = palindrome +\
    \ suffix;\n    \n    return palindrome;\n}", "{\n    string result = \"\";\n \
    \   string reverse = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != reverse[i])\n        {\n            break;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] != reverse[i])\n        {\n            result += string[i];\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    string reverse = \"\"\
    ;\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        reverse += temp;\n        \n        if(temp == string[i])\n   \
    \     {\n            prefix = string.substr(0, i);\n            suffix = string.substr(i\
    \ + 1, string.length() - i - 1);\n        }\n    }\n    \n    return prefix +\
    \ reverse + suffix;\n}", "{\n    int len = string.length();\n    string reverse\
    \ = \"\";\n    for(int i = 0; i < len; i++)\n    {\n        reverse = reverse\
    \ + string[i];\n    }\n    string prefix = \"\";\n    for(int i = 0; i < len;\
    \ i++)\n    {\n        prefix = prefix + string[i];\n    }\n    return prefix\
    \ + reverse;\n}", "{\n    int length = string.length();\n    string reverse =\
    \ \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string palindrome\
    \ = \"\";\n    \n    for(int i = 0; i < length; i++)\n    {\n        string temp\
    \ = string.substr(0, i);\n        string temp2 = string.substr(i, length);\n \
    \       \n        if(temp == temp2)\n        {\n            prefix = temp;\n \
    \           suffix = temp2;\n        }\n    }\n    \n    for(int i = 0; i < length;\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, length);\n        \n        if(temp == temp2)\n        {\n\
    \            reverse = reverse + temp;\n        }\n    }\n    \n    palindrome\
    \ = prefix + reverse + suffix;\n    return palindrome;\n}", "{\n    string reverse\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n           \
    \ suffix = suffix + string[i];\n        }\n        else\n        {\n         \
    \   reverse = reverse + string[i];\n        }\n    }\n    \n    return prefix\
    \ + reverse + suffix;\n}", "{\n    string result = \"\";\n    string prefix =\
    \ \"\";\n    string suffix = \"\";\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < string.size(); i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        string temp2 = string.substr(i, string.length());\n        \n \
    \       if(temp == temp2)\n        {\n            prefix = temp;\n           \
    \ suffix = temp2;\n        }\n        else\n        {\n            reverse = reverse\
    \ + temp;\n            reverse = reverse + temp2;\n        }\n    }\n    \n  \
    \  for(int i = 0; i < suffix.length(); i++)\n    {\n        reverse = reverse\
    \ + suffix[i];\n    }\n    \n    result = prefix + reverse;\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    string reverse = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            prefix += string[i];\n        }\n        else\n        {\n\
    \            suffix += string[i];\n        }\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse += string[i];\n        }\n    }\n\
    \    \n    string palindrome = prefix + reverse + suffix;\n    \n    for(int i\
    \ = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            string temp = string[i];\n            string[i]\
    \ = string[string.length() - 1 - i];\n            string[string.length() - 1 -\
    \ i] = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            string temp = string[i];\n            string[i] = string[string.length()\
    \ - 1 - i];\n            string[string.length() - 1 - i] = temp;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            string temp = string[i];\n\
    \            string[i] = string[string.length() - 1 - i];\n            string[string.length()\
    \ - 1 - i] = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            string temp = string[i];\n            string[i] = string[string.length()\
    \ - 1 - i];\n            string[string.length() - 1 - i] = temp;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            string temp = string[i];\n\
    \            string[i] = string[string.length() - 1 - i];\n            string[string.length()\
    \ - 1 - i] = temp;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            string temp = string[i];\n            string[i] = string[string.length()\
    \ - 1 - i];\n            string[string.length() - 1 - i] = temp;\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            string temp = string[i];\n\
    \            string[i] = string[string.length() - 1 - i];\n            string",
  "{\n    string result = \"\";\n    int length = string.length();\n    for(int i\
    \ = 0; i < length; i++)\n    {\n        string prefix = string.substr(0, i);\n\
    \        string suffix = string.substr(i, length);\n        string reverse = reverse(prefix);\n\
    \        string appended = reverse + suffix;\n        result += appended;\n  \
    \  }\n    return result;\n}", "{\n    string reverse = \"\";\n    int i = 0;\n\
    \    int j = string.size() - 1;\n    while (i < j)\n    {\n        reverse +=\
    \ string[i];\n        i++;\n        j--;\n    }\n    return reverse + string;\n\
    }", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    int length\
    \ = 0;\n    int i = 0;\n    int j = 0;\n    bool found = false;\n    \n    length\
    \ = string.length();\n    \n    for(i = 0; i < length; i++)\n    {\n        if(string[i]\
    \ == string[length - 1 - i])\n        {\n            found = true;\n         \
    \   break;\n        }\n    }\n    \n    if(found)\n    {\n        for(i = 0; i\
    \ < length; i++)\n        {\n            if(string[i] == string[length - 1 - i])\n\
    \            {\n                reverse = reverse + string[i];\n             \
    \   j = length - 1;\n                while(j >= 0)\n                {\n      \
    \              reverse = reverse + string[j];\n                    j--;\n    \
    \            }\n                break;\n            }\n        }\n        \n \
    \       prefix = string.substr(0, i);\n        \n        string result = prefix\
    \ + reverse + string.substr(i, string.length() - i);\n        \n        return\
    \ result;\n    }\n    \n    return string;\n}", "{\n    string reverse = \"\"\
    ;\n    string prefix = \"\";\n    string suffix = \"\";\n    int longest = 0;\n\
    \    int longestLength = 0;\n    int longestPrefixLength = 0;\n    int longestSuffixLength\
    \ = 0;\n    int longestPrefix = 0;\n    int longestSuffix = 0;\n    int longestLengthOfLongest\
    \ = 0;\n    int longestPrefixLengthOfLongest = 0;\n    int longestSuffixLengthOfLongest\
    \ = 0;\n    int longestPrefixOfLongest = 0;\n    int longestSuffixOfLongest =\
    \ 0;\n    int longestLengthOfLongestPalindrome = 0;\n    int longestPrefixLengthOfLongestPalindrome\
    \ = 0;\n    int longestSuffixLengthOfLongestPalindrome = 0;\n    int longestPrefixOfLongestPalindrome\
    \ = 0;\n    int longestSuffixOfLongestPalindrome = 0;\n    int longestLengthOfLongestPalindromeWithPrefix\
    \ = 0;\n    int longestPrefixLengthOfLongestPalindromeWithPrefix = 0;\n    int\
    \ longestSuffixLengthOfLongestPalindromeWithPrefix = 0;\n    int longestPrefixOfLongestPalindromeWithPrefix\
    \ = 0;\n    int longestSuffixOfLongestPalindromeWithPrefix = 0;\n    int longestLengthOfLongestPalindromeWithSuffix\
    \ = 0;\n    int longestPrefixLengthOfLongestPalindromeWithSuffix = 0;\n    int\
    \ longestSuffixOfLongestPalindromeWithSuffix = 0;\n    int longestLengthOfLongestPalindromeWithPrefixAndSuffix\
    \ = 0;\n    int longestPrefixLengthOfLongestPalindromeWithPrefixAndSuffix = 0;\n\
    \    int longestSuffixOfLongestPalindromeWithPrefixAndSuffix = 0;\n    int longestLengthOfLongestPalindromeWithSuffixAndPrefix\
    \ = 0;\n    int longestPrefixLengthOfLongestPalindromeWithSuffixAndPrefix = 0;\n\
    \    int longestSuffixOfLongestPalindromeWithSuffixAndPrefix = 0;\n    int longestLengthOfLongestPalindromeWithPrefixAndSuffixAndPrefix\
    \ = 0;\n    int longestPrefixLengthOfLongestPalindromeWithPrefixAndSuffixAndPrefix\
    \ = 0;\n    int longestSuffixOfLongestPalindromeWithPrefixAndSuffixAndPrefix =\
    \ 0;\n    int longestLengthOfLongestPalindromeWithSuffixAndPrefixAndSuffix = 0;\n\
    \    int longestPrefixLengthOfLongestPalindromeWithSuffixAndPrefixAndSuffix =\
    \ 0;\n    int longestSuffixOfLongestPalindromeWithSuffixAndPrefixAndSuffix = 0;\n\
    \    int longestLengthOfLongestPalindromeWithPrefixAndSuffixAndPrefixAndSuffix\
    \ = 0;\n    int longestPrefixLengthOfLongestPalindromeWithPrefixAndSuffixAndPrefix",
  "{\n    string reverse = \"\";\n    int length = string.length();\n    int i = 0;\n\
    \    \n    while(i < length) \n    {\n        reverse += string[i];\n        i++;\n\
    \    }\n    \n    string prefix = \"\";\n    string suffix = \"\";\n    \n   \
    \ int start = 0;\n    int end = length - 1;\n    \n    while(start < end) \n \
    \   {\n        string temp = string.substr(start, end - start);\n        \n  \
    \      if(temp == reverse) \n        {\n            prefix = string.substr(0,\
    \ start);\n            suffix = string.substr(start + 1, end - start);\n     \
    \       break;\n        }\n        \n        start++;\n        end--;\n    }\n\
    \    \n    return prefix + reverse;\n}", "{\n    int len = string.length();\n\
    \    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    \n    for(int i = 0; i < len; i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        reverse += temp;\n        \n        if(temp == temp.rev())\n  \
    \      {\n            prefix = string.substr(0, i);\n            suffix = string.substr(i,\
    \ len);\n        }\n    }\n    \n    return prefix + reverse + suffix;\n}", "{\n\
    \    string result = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(0, i);\n        string temp2 = string.substr(i, string.length());\n\
    \        \n        if(temp == temp2)\n        {\n            prefix = temp;\n\
    \            suffix = temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(0, i);\n        string temp2\
    \ = string.substr(i, string.length());\n        \n        if(temp == temp2)\n\
    \        {\n            string temp = prefix + temp + suffix;\n            \n\
    \            if(temp == temp2)\n            {\n                result = temp;\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    string\
    \ postfix = \"\";\n    string prefix = \"\";\n    string reverse = \"\";\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            postfix += string[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] == string[string.length() - 1 - i])\n        {\n       \
    \     prefix += string[i];\n        }\n    }\n    \n    for(int i = 0; i < prefix.length();\
    \ i++)\n    {\n        reverse += prefix[i];\n    }\n    \n    reverse += postfix;\n\
    \    \n    return reverse;\n}", "{\n    string palindrome;\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix += string[i];\n        }\n        else\n\
    \        {\n            suffix += string[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse += string[i];\n        }\n    }\n\
    \    \n    palindrome = prefix + reverse + suffix;\n    return palindrome;\n}",
  "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\
    \";\n    string longest = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        reverse +=\
    \ temp;\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        prefix += temp;\n    }\n  \
    \  \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(i, 1);\n        suffix += temp;\n    }\n    \n    longest =\
    \ prefix + reverse + suffix;\n    \n    return longest;\n}", "{\n    string reverse\
    \ = \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        reverse += string[i];\n    }\n    string prefix = string.substr(0,\
    \ string.length() - 1);\n    string suffix = string.substr(string.length() - 1,\
    \ string.length());\n    string palindrome = prefix + reverse + suffix;\n    return\
    \ palindrome;\n}\n</code>\n<|/ a tags=c++,string,palindrome,algorithm |>\n<| c\
    \ |>\nThis doesn't work if the string starts with a palindrome. For example, `make_palindrome(\"\
    abba\")` returns `\"abba\"`, not `\"abbba\"`.\n<|/ c |>\n<| c |>\nYes, you are\
    \ right. I missed that case. Thanks for pointing it out.\n<|/ c |>\n<| c |>\n\
    I added a fix for that case.\n<|/ c |>\n<| c |>\nThis doesn't work if the string\
    \ starts with a palindrome. For example, `make_palindrome(\"abba\")` returns `\"\
    abba\"`, not `\"abbba\"`.\n<|/ c |>\n<| c |>\nI added a fix for that case.\n<|/\
    \ c |>\n<| a tags=c++,string,palindrome,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string postfix = \"\";\n   \
    \ string prefix = \"\";\n    string reverse = \"\";\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            postfix += string[i];\n        }\n       \
    \ else\n        {\n            prefix += string[i];\n        }\n    }\n    \n\
    \    for(int i = 0; i < prefix.length(); i++)\n    {\n        reverse += prefix[i];\n\
    \    }\n    \n    reverse += postfix;\n    \n    return reverse;\n}", "{\n   \
    \ string longest = \"\";\n    string longest2 = \"\";\n    string longest3 = \"\
    \";\n    string longest4 = \"\";\n    string longest5 = \"\";\n    string longest6\
    \ = \"\";\n    string longest7 = \"\";\n    string longest8 = \"\";\n    string\
    \ longest9 = \"\";\n    string longest10 = \"\";\n    string longest11 = \"\"\
    ;\n    string longest12 = \"\";\n    string longest13 = \"\";\n    string longest14\
    \ = \"\";\n    string longest15 = \"\";\n    string longest16 = \"\";\n    string\
    \ longest17 = \"\";\n    string longest18 = \"\";\n    string longest19 = \"\"\
    ;\n    string longest20 = \"\";\n    string longest21 = \"\";\n    string longest22\
    \ = \"\";\n    string longest23 = \"\";\n    string longest24 = \"\";\n    string\
    \ longest25 = \"\";\n    string longest26 = \"\";\n    string longest27 = \"\"\
    ;\n    string longest28 = \"\";\n    string longest29 = \"\";\n    string longest30\
    \ = \"\";\n    string longest31 = \"\";\n    string longest32 = \"\";\n    string\
    \ longest33 = \"\";\n    string longest34 = \"\";\n    string longest35 = \"\"\
    ;\n    string longest36 = \"\";\n    string longest37 = \"\";\n    string longest38\
    \ = \"\";\n    string longest39 = \"\";\n    string longest40 = \"\";\n    string\
    \ longest41 = \"\";\n    string longest42 = \"\";\n    string longest43 = \"\"\
    ;\n    string longest44 = \"\";\n    string longest45 = \"\";\n    string longest46\
    \ = \"\";\n    string longest47 = \"\";\n    string longest48 = \"\";\n    string\
    \ longest49 = \"\";\n    string longest50 = \"\";\n    string longest51 = \"\"\
    ;\n    string longest52 = \"\";\n    string longest53 = \"\";\n    string longest54\
    \ = \"\";\n    string longest55 = \"\";\n    string longest56 = \"\";\n    string\
    \ longest57 = \"\";\n    string longest58 = \"\";\n    string longest59 = \"\"\
    ;\n    string longest60 = \"\";\n    string longest61 = \"\";\n    string longest62\
    \ = \"\";\n    string longest63 = \"\";\n    string longest64 = \"\";\n    string\
    \ longest65 = \"\";\n    string longest66 = \"\";\n    string longest67 = \"\"\
    ;\n    string longest68 = \"\";\n    string longest69 = \"\";\n    string longest70\
    \ = \"\";\n    string longest71 = \"\";\n    string longest72 = \"\";\n    string\
    \ longest73 = \"\";\n    string longest74 = \"\";\n    string longest75 = \"\"\
    ;\n    string longest76 = \"\";\n    string longest77 = \"\";\n    string longest78\
    \ = \"\";\n    string longest79 = \"\";\n    string longest80 = \"\";\n    string\
    \ longest81 = \"\";\n    string longest82 = \"\";\n", "{\n    string postfix =\
    \ \"\";\n    string prefix = \"\";\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        postfix += string[i];\n   \
    \ }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        reverse += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        prefix += string[i];\n    }\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        postfix += string[i];\n    }\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        postfix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        reverse += string[i];\n    }\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        reverse += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        prefix += string[i];\n    }\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        prefix += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        reverse += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < ", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(0, i) + string.substr(i, string.length());\n\
    \        if(std.string.isPalindrome(temp))\n        {\n            reverse = reverse\
    \ + temp;\n            prefix = string.substr(0, i);\n            suffix = string.substr(i,\
    \ string.length());\n        }\n    }\n    \n    return reverse + prefix + suffix;\n\
    }\n</code>\n<|/ a tags=string,algorithm,c++ |>\n<| c |>\nI like this solution,\
    \ however it fails for \"abba\" which should return \"abba\" but instead returns\
    \ \"abb\".\n<|/ c |>\n<| c |>\nI added a fix for that case\n<|/ c |>\n<| c |>\n\
    I added a fix for that case\n<|/ c |>\n<| c |>\nI added a fix for that case\n\
    <|/ c |>\n<| c |>\nI added a fix for that case\n<|/ c |>\n<| a tags=string,algorithm,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string reverse = \"\";\n    string prefix = \"\";\n\
    \    string suffix = \"\";\n    \n    int len = string.length();\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        if(string[i] == string[len-i-1])\n    \
    \    {\n            reverse = reverse + string[i];\n        }\n        else\n\
    \        {\n            prefix = prefix + string[i];\n        }\n    }\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        if(string[i] == string[len-i-1])\n\
    \        {\n            suffix = suffix + string[i];\n        }\n        else\n\
    \        {\n            suffix = suffix + string[i];\n        }\n    }\n    \n\
    \    return prefix + reverse + suffix;\n}", "{\n    int len = string.length();\n\
    \    string postfix = \"\";\n    string prefix = \"\";\n    for(int i = 0; i <\
    \ len; i++)\n    {\n        postfix += string[i];\n    }\n    for(int i = 0; i\
    \ < len; i++)\n    {\n        prefix += string[i];\n    }\n    string reverse\
    \ = reverse(prefix);\n    return postfix + reverse + postfix;\n}\nstring reverse(string\
    \ s)\n{\n    string reverse = \"\";\n    for(int i = s.length() - 1; i >= 0; i--)\n\
    \    {\n        reverse += s[i];\n    }\n    return reverse;\n}\n</code>\n<|/\
    \ a tags=algorithm,c++ |>\n<| c |>\nThis algorithm is O(n^2) in the worst case\
    \ (when all characters are unique). A better algorithm is O(n).\n<|/ c |>\n<|\
    \ c |>\n: I agree, my algorithm is O(n^2) in the worst case. My algorithm is O(n)\
    \ in the best case. My algorithm is O(n) in the average case. My algorithm is\
    \ O(n) in the best case when all characters are unique.\n<|/ c |>\n<| c |>\n:\
    \ I agree, my algorithm is O(n^2) in the worst case. My algorithm is O(n) in the\
    \ best case. My algorithm is O(n) in the average case. My algorithm is O(n) in\
    \ the best case when all characters are unique.\n<|/ c |>\n<| c |>\n: I agree,\
    \ my algorithm is O(n^2) in the worst case. My algorithm is O(n) in the best case.\
    \ My algorithm is O(n) in the average case. My algorithm is O(n) in the best case\
    \ when all characters are unique.\n<|/ c |>\n<| c |>\n: I agree, my algorithm\
    \ is O(n^2) in the worst case. My algorithm is O(n) in the best case. My algorithm\
    \ is O(n) in the average case. My algorithm is O(n) in the best case when all\
    \ characters are unique.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string\
    \ longest = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(i, 1);\n        \n        if(temp == string.substr(string.length()\
    \ - i, 1))\n        {\n            reverse = reverse + temp;\n            \n \
    \           if(i == 0)\n            {\n                prefix = temp;\n      \
    \      }\n            else\n            {\n                suffix = temp;\n  \
    \          }\n        }\n        else\n        {\n            longest = longest\
    \ + temp;\n        }\n    }\n    \n    string palindrome = prefix + reverse +\
    \ suffix;\n    \n    return palindrome;\n}", "{\n    string reverse = \"\";\n\
    \    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0;\
    \ i < string.length(); i++)\n    {\n        string temp = string.substr(i, 1);\n\
    \        \n        if(temp == string[i])\n        {\n            reverse = reverse\
    \ + temp;\n        }\n        else\n        {\n            prefix = prefix + temp;\n\
    \            suffix = suffix + temp;\n        }\n    }\n    \n    return prefix\
    \ + reverse + suffix;\n}", "{\n    string result = \"\";\n    int start = 0;\n\
    \    int end = string.size() - 1;\n    while(start < end)\n    {\n        if(string[start]\
    \ == string[end])\n        {\n            result += string[start];\n         \
    \   start++;\n            end--;\n        }\n        else\n        {\n       \
    \     result += string[start];\n            start++;\n            end--;\n   \
    \     }\n    }\n    result += string[end];\n    return result;\n}", "{\n    int\
    \ length = string.length();\n    string reverse = \"\";\n    for(int i = 0; i\
    \ < length; i++)\n    {\n        reverse = reverse + string[i];\n    }\n    string\
    \ prefix = \"\";\n    for(int i = 0; i < length; i++)\n    {\n        prefix =\
    \ prefix + string[i];\n    }\n    string postfix = \"\";\n    for(int i = 0; i\
    \ < length; i++)\n    {\n        postfix = postfix + string[i];\n    }\n    string\
    \ palindrome = prefix + reverse + postfix;\n    return palindrome;\n}\n/*\n Find\
    \ the longest palindrome that begins with a supplied string.\n    Algorithm idea\
    \ is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n\
    \    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n                \n*/\nstring make_palindrome2(string\
    \ string) \n{\n    int length = string.length();\n    string reverse = \"\";\n\
    \    for(int i = 0; i < length; i++)\n    {\n        reverse = reverse + string[i];\n\
    \    }\n    string prefix = \"\";\n    for(int i = 0; i < length; i++)\n    {\n\
    \        prefix = prefix + string[i];\n    }\n    string postfix = \"\";\n   \
    \ for(int i = 0; i < length; i++)\n    {\n        postfix = postfix + string[i];\n\
    \    }\n    string palindrome = prefix + reverse + postfix;\n    return palindrome;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n                \n*/\nstring make_palindrome3(string\
    \ string) \n{\n    int length = string.length();\n    string reverse = \"\";\n\
    \    for(int i = 0; i < length; i++)\n    {\n        reverse = reverse + string[i];\n\
    \    }\n    string prefix = \"\";\n    for(int i = 0; i < length; i++)\n    {\n\
    \        prefix = prefix + string[i];\n    }\n    string postfix = \"\";\n   \
    \ for(int i = 0; i < length; i++)\n    {\n        postfix = postfix + string[i];\n\
    \    }\n    string palindrome = prefix + reverse + postfix;\n    return palindrome;\n\
    }\n/*\n Find the longest palindrome that begins with a supplied string.\n    Algorithm\
    \ idea is simple:\n    - Find the longest postfix of supplied string that is a\
    \ palindrome.\n    - Append to the end of the string reverse of a string prefix\
    \ that comes before the p", "{\n    string postfix = \"\";\n    string prefix\
    \ = \"\";\n    string reverse = \"\";\n    \n    int length = string.length();\n\
    \    \n    for (int i = 0; i < length; i++) \n    {\n        postfix += string[i];\n\
    \    }\n    \n    for (int i = 0; i < length; i++) \n    {\n        prefix +=\
    \ string[i];\n    }\n    \n    for (int i = 0; i < length; i++) \n    {\n    \
    \    reverse += string[i];\n    }\n    \n    string palindrome = postfix + reverse\
    \ + prefix;\n    \n    return palindrome;\n}", "{\n    string palindrome = string;\n\
    \    string postfix = \"\";\n    string prefix = \"\";\n    \n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        postfix = postfix + string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix\
    \ = prefix + string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != postfix[i])\n        {\n            palindrome\
    \ = palindrome + prefix + postfix;\n            break;\n        }\n    }\n   \
    \ \n    return palindrome;\n}", "{\n    int len = string.length();\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n\
    \    for(int i = 0; i < len; i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        reverse += temp;\n        \n        if(temp == temp.reverse())\n\
    \        {\n            prefix = string.substr(0, i);\n            suffix = string.substr(i,\
    \ len);\n        }\n    }\n    \n    return prefix + reverse + suffix;\n}", "{\n\
    \    string postfix = \"\";\n    string prefix = \"\";\n    int longest = 0;\n\
    \    int longestLength = 0;\n    int i;\n    \n    for(i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            longestLength++;\n        }\n    }\n    \n    for(i = 0; i\
    \ < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            longestLength++;\n        }\n    }\n    \n\
    \    for(i = 0; i < string.length(); i++)\n", "{\n    string reverse = \"\";\n\
    \    int length = string.length();\n    int i = 0;\n    \n    while(i < length\
    \ / 2)\n    {\n        reverse = reverse + string[i];\n        i = i + 1;\n  \
    \  }\n    \n    reverse = reverse + string[length - 1];\n    \n    return reverse;\n\
    }", "{\n    string postfix = \"\";\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        postfix += string[i];\n   \
    \ }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        reverse\
    \ += string[string.length() - 1 - i];\n    }\n    \n    return postfix + reverse;\n\
    }", "{\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string.substr(i, 1);\n        reverse += temp;\n        \n   \
    \     if(temp == string[i])\n        {\n            prefix += temp;\n        }\n\
    \        else\n        {\n            suffix += temp;\n        }\n    }\n    \n\
    \    return prefix + reverse + suffix;\n}", "{\n    string postfix = \"\";\n \
    \   string prefix = \"\";\n    string reverse = \"\";\n    string palindrome =\
    \ \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix\
    \ = postfix + string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix = prefix + string[i];\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        reverse = reverse + string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == postfix[postfix.length() - i])\n        {\n            palindrome = palindrome\
    \ + prefix + reverse;\n        }\n    }\n    \n    return palindrome;\n}", "{\n\
    \    string reverse = \"\";\n    int start = 0;\n    int end = 0;\n    int length\
    \ = 0;\n    bool found = false;\n    \n    while(!found)\n    {\n        end =\
    \ string.find_first_of(\"+-\", start);\n        if(end == string::npos)\n    \
    \    {\n            end = string.length();\n        }\n        length = end -\
    \ start;\n        reverse = reverse + string.substr(start, length);\n        start\
    \ = end + 1;\n        \n        if(length == 0)\n        {\n            found\
    \ = true;\n        }\n    }\n    \n    string result = string;\n    \n    while(start\
    \ < string.length())\n    {\n        end = string.find_first_of(\"+-\", start);\n\
    \        if(end == string::npos)\n        {\n            end = string.length();\n\
    \        }\n        length = end - start;\n        result = result + string.substr(start,\
    \ length);\n        start = end + 1;\n    }\n    \n    result = reverse + result;\n\
    \    \n    return result;\n}", "{\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.size();\
    \ i++)\n    {\n        string temp = string[i];\n        reverse += temp;\n  \
    \  }\n    \n    for(int i = 0; i < string.size(); i++)\n    {\n        string\
    \ temp = string[i];\n        prefix += temp;\n    }\n    \n    for(int i = 0;\
    \ i < string.size(); i++)\n    {\n        string temp = string[i];\n        suffix\
    \ += temp;\n    }\n    \n    string palindrome = prefix + reverse + suffix;\n\
    \    \n    return palindrome;\n}", "{\n    string result = \"\";\n    string longest\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string reverse\
    \ = \"\";\n    \n    longest = longestPalindrome(string);\n    \n    prefix =\
    \ string.substr(0, longest.length());\n    suffix = string.substr(longest.length(),\
    \ string.length());\n    \n    reverse = reverse(prefix);\n    \n    result =\
    \ prefix + reverse + suffix;\n    \n    return result;\n}", "{\n    string reverse\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string postfix\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ postfix = postfix + string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix = prefix + string[i];\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        suffix = suffix + string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        reverse\
    \ = reverse + string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != postfix[postfix.length() - 1 - i])\n  \
    \      {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != prefix[prefix.length() - 1 - i])\n    \
    \    {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != suffix[suffix.length() - 1 - i])\n    \
    \    {\n            break;\n        }\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] != reverse[reverse.length() - 1 - i])\n  \
    \      {\n            break;\n        }\n    }\n    \n    return prefix + reverse\
    \ + suffix;\n}", "{\n    string reverse = \"\";\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int n = string.size();\n    \n    while(i < n) \n    {\n\
    \        while(j < n) \n        {\n            if(string[i] == string[j]) \n \
    \           {\n                reverse = reverse + string[i];\n              \
    \  j = j + 1;\n            }\n            else\n            {\n              \
    \  j = j + 1;\n            }\n        }\n        i = i + 1;\n    }\n    return\
    \ reverse + string;\n}", "{\n    string result = \"\";\n    string prefix = \"\
    \";\n    string suffix = \"\";\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == \" \")\n        {\n            result += temp;\n\
    \        }\n        else if(temp == \"-\")\n        {\n            reverse = reverse\
    \ + temp;\n        }\n        else\n        {\n            prefix = prefix + temp;\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(i, 1);\n        \n        if(temp == \" \"\
    )\n        {\n            result += temp;\n        }\n        else if(temp ==\
    \ \"-\")\n        {\n            reverse = reverse + temp;\n        }\n      \
    \  else\n        {\n            suffix = suffix + temp;\n        }\n    }\n  \
    \  \n    for(int i = 0; i < string.length(); i++)\n    {\n        string temp\
    \ = string.substr(i, 1);\n        \n        if(temp == \" \")\n        {\n   \
    \         result += temp;\n        }\n        else if(temp == \"-\")\n       \
    \ {\n            reverse = reverse + temp;\n        }\n        else\n        {\n\
    \            reverse = reverse + temp;\n            \n            if(reverse ==\
    \ prefix)\n            {\n                result = result + suffix;\n        \
    \    }\n        }\n    }\n    \n    return result;\n}", "{\n    int len = string.length();\n\
    \    string postfix = \"\";\n    string prefix = \"\";\n    string reverse = \"\
    \";\n    \n    for (int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for (int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for (int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    string palindrome = prefix + reverse + postfix;\n    \n    return\
    \ palindrome;\n}", "{\n    string reverse = \"\";\n    string prefix = \"\";\n\
    \    string suffix = \"\";\n    string postfix = \"\";\n    \n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        postfix = postfix + string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix\
    \ = prefix + string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        suffix = suffix + string[i];\n    }\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        reverse = reverse + string[i];\n\
    \    }\n    \n    if(postfix.length() > suffix.length())\n    {\n        postfix\
    \ = postfix.substr(0, postfix.length() - suffix.length());\n    }\n    \n    if(postfix.length()\
    \ > prefix.length())\n    {\n        postfix = postfix.substr(0, postfix.length()\
    \ - suffix.length());\n    }\n    \n    if(postfix.length() > reverse.length())\n\
    \    {\n        postfix = postfix.substr(0, postfix.length() - suffix.length());\n\
    \    }\n    \n    if(postfix.length() > suffix.length())\n    {\n        postfix\
    \ = postfix.substr(0, postfix.length() - suffix.length());\n    }\n    \n    if(postfix.length()\
    \ > prefix.length())\n    {\n        postfix = postfix.substr(0, postfix.length()\
    \ - suffix.length());\n    }\n    \n    if(postfix.length() > reverse.length())\n\
    \    {\n        postfix = postfix.substr(0, postfix.length() - suffix.length());\n\
    \    }\n    \n    if(postfix.length() > suffix.length())\n    {\n        postfix\
    \ = postfix.substr(0, postfix.length() - suffix.length());\n    }\n    \n    if(postfix.length()\
    \ > prefix.length())\n    {\n        postfix = postfix.substr(0, postfix.length()\
    \ - suffix.length());\n    }\n    \n    if(postfix.length() > reverse.length())\n\
    \    {\n        postfix = postfix.substr(0, postfix.length() - suffix.length());\n\
    \    }\n    \n    if(postfix.length() > suffix.length())\n    {\n        postfix\
    \ = postfix.substr(0, postfix.length() - suffix.length());\n    }\n    \n    if(postfix.length()\
    \ > prefix.length())\n    {\n        postfix = postfix.substr(0, postfix.length()\
    \ - suffix.length());\n    }\n    \n    if(postfix.length() > reverse.length())\n\
    \    {\n        postfix = postfix.substr(0, postfix.length() - suffix.length());\n\
    \    }\n    \n    if(postfi", "{\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            reverse = reverse + string[i];\n        }\n        else\n\
    \        {\n            prefix = prefix + string[i];\n            suffix = suffix\
    \ + string[string.length() - 1 - i];\n        }\n    }\n    \n    return prefix\
    \ + reverse + suffix;\n}", "{\n    int len = string.length();\n    string reverse\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        string temp = string.substr(i, 1);\n  \
    \      \n        if(temp == string.substr(len - i - 1, 1))\n        {\n      \
    \      reverse = reverse + temp;\n            suffix = string.substr(len - i -\
    \ 1, 1);\n        }\n        else\n        {\n            reverse = reverse +\
    \ temp;\n            prefix = prefix + suffix;\n        }\n    }\n    \n    return\
    \ prefix + reverse;\n}", "{\n    string result = \"\";\n    string prefix = \"\
    \";\n    string suffix = \"\";\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(0,\
    \ i);\n        \n        if(temp == temp)\n        {\n            prefix = temp;\n\
    \            suffix = string.substr(i, string.length() - i);\n        }\n    \
    \    else\n        {\n            reverse = reverse + temp;\n        }\n    }\n\
    \    \n    for(int i = 0; i < suffix.length(); i++)\n    {\n        string temp\
    \ = reverse + suffix.substr(i, 1);\n        \n        if(temp == temp)\n     \
    \   {\n            result = result + prefix + temp;\n        }\n        else\n\
    \        {\n            result = result + prefix + temp;\n        }\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    string reverse = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == \" \")\n        {\n            result += temp;\n\
    \        }\n        else\n        {\n            prefix += temp;\n        }\n\
    \    }\n    \n    for(int i = string.length() - 1; i >= 0; i--)\n    {\n     \
    \   string temp = string.substr(i, 1);\n        \n        if(temp == \" \")\n\
    \        {\n            result += temp;\n        }\n        else\n        {\n\
    \            suffix += temp;\n        }\n    }\n    \n    reverse = std.string.reverse(suffix);\n\
    \    \n    result += reverse;\n    \n    for(int i = 0; i < prefix.length(); i++)\n\
    \    {\n        string temp = prefix.substr(i, 1);\n        \n        if(temp\
    \ == \" \")\n        {\n            result += temp;\n        }\n        else\n\
    \        {\n            result += temp + reverse;\n        }\n    }\n    \n  \
    \  return result;\n}", "{\n    string longest = string;\n    int longestLength\
    \ = 0;\n    int longestIndex = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        string prefix = string.substr(0, i);\n        string suffix =\
    \ string.substr(i, string.length);\n        if(std.string.isPalindrome(suffix))\n\
    \        {\n            string reverse = std.string.reverse(prefix);\n       \
    \     string newString = prefix + reverse + suffix;\n            if(std.string.isPalindrome(newString))\n\
    \            {\n                longestLength = std.string.len(newString);\n \
    \               longestIndex = i;\n                longest = newString;\n    \
    \        }\n        }\n    }\n    return longest;\n}", "{\n    string result =\
    \ \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string reverse\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    prefix = temp;\n            suffix = temp2;\n        }\n        else\n  \
    \      {\n            reverse = reverse + temp;\n            reverse = reverse\
    \ + temp2;\n        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    reverse = reverse + temp;\n            reverse = reverse + temp2;\n     \
    \   }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    reverse = reverse + temp;\n            reverse = reverse + temp2;\n     \
    \   }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    reverse = reverse + temp;\n            reverse = reverse + temp2;\n     \
    \   }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    reverse = reverse + temp;\n            reverse = reverse + temp2;\n     \
    \   }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    reverse = reverse + temp;\n            reverse = reverse + temp2;\n     \
    \   }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    reverse = reverse + temp;\n            reverse = reverse + temp2;\n     \
    \   }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    string temp = string.substr(0, i);\n        string temp2 = string.substr(i,\
    \ string.length());\n        \n        if(temp == temp2)\n        {\n        \
    \    reverse = reverse + temp", "{\n    string reverse = \"\";\n    int i = 0;\n\
    \    int j = 0;\n    int k = 0;\n    int length = 0;\n    int maxLength = 0;\n\
    \    bool found = false;\n    \n    while(!found)\n    {\n        length = string.size();\n\
    \        \n        for(i = 0; i < length; i++)\n        {\n            reverse\
    \ = reverse + string[i];\n        }\n        \n        for(i = 0; i < length;\
    \ i++)\n        {\n            reverse = reverse + string[i];\n        }\n   \
    \     \n        for(i = 0; i < length; i++)\n        {\n            reverse =\
    \ reverse + string[i];\n        }\n        \n        for(i = 0; i < length; i++)\n\
    \        {\n            reverse = reverse + string[i];\n        }\n        \n\
    \        for(i = 0; i < length; i++)\n        {\n            reverse = reverse\
    \ + string[i];\n        }\n        \n        for(i = 0; i < length; i++)\n   \
    \     {\n            reverse = reverse + string[i];\n        }\n        \n   \
    \     for(i = 0; i < length; i++)\n        {\n            reverse = reverse +\
    \ string[i];\n        }\n        \n        for(i = 0; i < length; i++)\n     \
    \   {\n            reverse = reverse + string[i];\n        }\n        \n     \
    \   for(i = 0; i < length; i++)\n        {\n            reverse = reverse + string[i];\n\
    \        }\n        \n        for(i = 0; i < length; i++)\n        {\n       \
    \     reverse = reverse + string[i];\n        }\n        \n        for(i = 0;\
    \ i < length; i++)\n        {\n            reverse = reverse + string[i];\n  \
    \      }\n        \n        for(i = 0; i < length; i++)\n        {\n         \
    \   reverse = reverse + string[i];\n        }\n        \n        for(i = 0; i\
    \ < length; i++)\n        {\n            reverse = reverse + string[i];\n    \
    \    }\n        \n        for(i = 0; i < length; i++)\n        {\n           \
    \ reverse = reverse + string[i];\n        }\n        \n        for(i = 0; i <\
    \ length; i++)\n        {\n            reverse = reverse + string[i];\n      \
    \  }\n        \n        for(i = 0; i < length; i++)\n        {\n            reverse\
    \ = reverse + string[i];\n        }\n        \n        for(i = 0; i < length;\
    \ i++)\n        {\n            reverse = reverse + string[i];\n        }\n   \
    \     \n        for(i = 0; i < length; i++)\n        {\n            reverse =\
    \ reverse + string[i];\n        }\n        \n        for(i = 0; i < length; i++)\n\
    \        {\n            reverse = reverse + string[i];\n        }\n        \n\
    \        for(i = 0; i < length; i++)\n        {\n            reverse = reverse\
    \ + string[i];\n        }\n        \n        for(i = 0; i < length; i++)\n   \
    \     {\n            reverse = reverse + string[i];\n        }\n        \n   \
    \     for(i = 0; i < length; i++)\n        {\n            reverse = reverse +\
    \ string[i];\n        }\n        \n        for(i = 0; i < length; i++)\n     \
    \   {\n            reverse = reverse + string[i];\n        }\n        \n     \
    \   for", "{\n    string postfix = \"\";\n    string prefix = \"\";\n    string\
    \ reverse = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        if(string[i] == string[string.length() - 1 - i])\n        {\n       \
    \     postfix += string[i];\n        }\n        else\n        {\n            prefix\
    \ += string[i];\n        }\n    }\n    \n    reverse = reverse(prefix);\n    postfix\
    \ = reverse(postfix);\n    \n    return postfix + reverse;\n}", "{\n    string\
    \ reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string\
    \ longest = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(0, i);\n        \n        if(temp == temp)\n\
    \        {\n            reverse = reverse + temp;\n            \n            for(int\
    \ j = i; j < string.length(); j++)\n            {\n                string temp2\
    \ = string.substr(j, string.length());\n                \n                if(temp2\
    \ == temp2)\n                {\n                    prefix = prefix + temp2;\n\
    \                    \n                    for(int k = j; k < string.length();\
    \ k++)\n                    {\n                        string temp3 = string.substr(k,\
    \ string.length());\n                        \n                        if(temp3\
    \ == temp3)\n                        {\n                            suffix = suffix\
    \ + temp3;\n                            \n                            for(int\
    \ l = k; l < string.length(); l++)\n                            {\n          \
    \                      string temp4 = string.substr(l, string.length());\n   \
    \                             \n                                if(temp4 == temp4)\n\
    \                                {\n                                    longest\
    \ = longest + temp4;\n                                }\n                    \
    \        }\n                        }\n                    }\n               \
    \ }\n            }\n        }\n    }\n    \n    string palindrome = prefix + reverse\
    \ + suffix;\n    \n    return palindrome;\n}", "{\n    string result = \"\";\n\
    \    string reverse = \"\";\n    int i = 0;\n    int j = 0;\n    \n    for(i =\
    \ 0; i < string.size(); i++)\n    {\n        string temp = string;\n        temp\
    \ = temp + reverse;\n        temp = temp + string[i];\n        \n        if(std.string.isPalindrome(temp))\n\
    \        {\n            reverse = temp;\n        }\n    }\n    \n    string temp\
    \ = string;\n    temp = temp + reverse;\n    temp = temp + string[i];\n    \n\
    \    if(std.string.isPalindrome(temp))\n    {\n        result = temp;\n    }\n\
    \    \n    return result;\n}", "{\n    string reverse = \"\";\n    int length\
    \ = string.length();\n    for(int i = 0; i < length; i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    string prefix = string.substr(0, length - 1);\n  \
    \  string suffix = string.substr(length - 1, length);\n    return prefix + reverse\
    \ + suffix;\n}\n/*\n Find the longest postfix of supplied string that is a palindrome.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \n*/\nstring\
    \ make_palindrome(string string) \n{\n    string reverse = \"\";\n    int length\
    \ = string.length();\n    for(int i = 0; i < length; i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    string prefix = string.substr(0, length - 1);\n  \
    \  string suffix = string.substr(length - 1, length);\n    return prefix + reverse\
    \ + suffix;\n}\n/*\n Find the longest postfix of supplied string that is a palindrome.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \n*/\nstring\
    \ make_palindrome(string string) \n{\n    string reverse = \"\";\n    int length\
    \ = string.length();\n    for(int i = 0; i < length; i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    string prefix = string.substr(0, length - 1);\n  \
    \  string suffix = string.substr(length - 1, length);\n    return prefix + reverse\
    \ + suffix;\n}\n/*\n Find the longest postfix of supplied string that is a palindrome.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n                \n*/\nstring\
    \ make_palindrome(string string) \n{\n    string reverse = \"\";\n    int length\
    \ = string.length();\n    for(int i = 0; i < length; i++)\n    {\n        reverse\
    \ += string[i];\n    }\n    string prefix = string.substr(0, length - 1);\n  \
    \  string suffix = string.substr(length - 1, length);\n    return prefix + reverse\
    \ + suffix;\n}\n/*\n Find the longest postfix of supplied string that is a palindrome.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string ",
  "{\n    string reverse = \"\";\n    int length = string.length();\n    for(int i\
    \ = 0; i < length; i++)\n    {\n        reverse += string[length - i - 1];\n \
    \   }\n    return string + reverse;\n}", "{\n    string result = \"\";\n    string\
    \ longest = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string\
    \ reverse = \"\";\n    \n    longest = longestPalindrome(string);\n    \n    prefix\
    \ = string.substr(0, longest.length);\n    suffix = string.substr(longest.length);\n\
    \    \n    reverse = reverse(prefix);\n    \n    string result = prefix + reverse\
    \ + suffix;\n    \n    return result;\n}", "{\n    string result = \"\";\n   \
    \ int i = 0;\n    int j = 0;\n    int k = 0;\n    \n    while(i < string.length())\n\
    \    {\n        j = string.find_first_of(string[i], k);\n        k = string.find_first_of(string[i],\
    \ k);\n        \n        if(j == string.length())\n        {\n            result\
    \ += string[i];\n            i++;\n        }\n        else if(j > k)\n       \
    \ {\n            result += string[i];\n            result += string[j];\n    \
    \        i++;\n            j++;\n        }\n        else\n        {\n        \
    \    result += string[i];\n            result += string[j];\n            i++;\n\
    \            j++;\n            k++;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    string palindrome = \"\";\n    int length = string.length();\n   \
    \ int i = 0;\n    int j = 0;\n    \n    while(i < length && j < length)\n    {\n\
    \        if(string[i] == string[j])\n        {\n            palindrome += string[i];\n\
    \            i++;\n            j++;\n        }\n        else if(string[i] > string[j])\n\
    \        {\n            palindrome += string[j];\n            j++;\n        }\n\
    \        else\n        {\n            palindrome += string[i];\n            i++;\n\
    \        }\n    }\n    \n    return palindrome;\n}", "{\n    string reverse =\
    \ \"\";\n    int length = string.length();\n    for(int i = 0; i < length; i++)\n\
    \    {\n        reverse = reverse + string[i];\n    }\n    string prefix = \"\"\
    ;\n    for(int i = 0; i < length; i++)\n    {\n        prefix = prefix + string[i];\n\
    \    }\n    string postfix = \"\";\n    for(int i = length-1; i >= 0; i--)\n \
    \   {\n        postfix = postfix + string[i];\n    }\n    return prefix + reverse\
    \ + postfix;\n}\n</code>\n<|/ a tags=string,algorithm,c++ |>\n<| c |>\nThis doesn't\
    \ work if the string starts with a palindrome. For example, `make_palindrome(\"\
    abba\")` returns `\"abba\"`.\n<|/ c |>\n<| c |>\nIt doesn't work for `make_palindrome(\"\
    abba\")` because `make_palindrome(\"abba\")` returns `\"abba\"` but `make_palindrome(\"\
    abbac\")` returns `\"abba\"`.\n<|/ c |>\n<| c |>\n: I see what you mean. I've\
    \ updated my answer to account for that.\n<|/ c |>\n<| c |>\n: I see what you\
    \ mean. I've updated my answer to account for that.\n<|/ c |>\n<| c |>\n: I see\
    \ what you mean. I've updated my answer to account for that.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    string postfix = \"\";\n    string prefix = \"\
    \";\n    \n    int length = string.length();\n    \n    for (int i = 0; i < length;\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    \n    for (int i = 0;\
    \ i < length; i++)\n    {\n        prefix += string[i];\n    }\n    \n    bool\
    \ isPalindrome = true;\n    \n    for (int i = 0; i < length; i++)\n    {\n  \
    \      if (string[i] != postfix[i])\n        {\n            isPalindrome = false;\n\
    \            break;\n        }\n    }\n    \n    if (isPalindrome)\n    {\n  \
    \      string reverse = std.string.reverse(postfix);\n        \n        string\
    \ newString = prefix + reverse;\n        \n        result = newString;\n    }\n\
    \    \n    return result;\n}", "{\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        \n        if(temp\
    \ == string[i])\n        {\n            reverse = reverse + temp;\n        }\n\
    \        else\n        {\n            reverse = reverse + temp + string[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        string temp = string.substr(i, 1);\n        \n        if(temp == string[i])\n\
    \        {\n            prefix = prefix + temp;\n        }\n        else\n   \
    \     {\n            suffix = suffix + temp + string[i];\n        }\n    }\n \
    \   \n    string palindrome = prefix + reverse + suffix;\n    \n    return palindrome;\n\
    }", "{\n    string postfix = \"\";\n    string prefix = \"\";\n    string reverse\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ if(string[i] == string[string.length() - 1 - i])\n        {\n            postfix\
    \ += string[i];\n        }\n        else\n        {\n            prefix += string[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < prefix.length(); i++)\n    {\n\
    \        reverse += prefix[i];\n    }\n    \n    reverse += postfix;\n    \n \
    \   return reverse;\n}", "{\n    int len = string.length();\n    string reverse\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        if(string[i] == string[len-i-1])\n    \
    \    {\n            reverse = reverse + string[i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i] + string[len-i-1];\n   \
    \         prefix = prefix + string[i];\n            suffix = string[len-i-1] +\
    \ suffix;\n        }\n    }\n    \n    return prefix + reverse + suffix;\n}",
  "{\n    string reverse = \"\";\n    int length = string.length();\n    int i = 0;\n\
    \    int j = 0;\n    \n    while(i < length / 2)\n    {\n        reverse = reverse\
    \ + string[i];\n        i = i + 1;\n    }\n    \n    while(j < length)\n    {\n\
    \        reverse = reverse + string[j];\n        j = j + 1;\n    }\n    \n   \
    \ return reverse;\n}", "{\n    string palindrome = \"\";\n    int length = string.length();\n\
    \    \n    for (int i = 0; i < length; i++)\n    {\n        if (string[i] == string[length\
    \ - 1 - i])\n        {\n            palindrome += string[i];\n        }\n    }\n\
    \    \n    return palindrome;\n}", "{\n    string reverse = \"\";\n    int len\
    \ = string.length();\n    for(int i = 0; i < len; i++)\n    {\n        reverse\
    \ += string[len - 1 - i];\n    }\n    return string + reverse;\n}", "{\n    int\
    \ len = string.length();\n    string palindrome = \"\";\n    string prefix = \"\
    \";\n    string suffix = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n\
    \        prefix = prefix + string[i];\n        suffix = string[len - i - 1] +\
    \ suffix;\n    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(string[i]\
    \ == string[len - i - 1])\n        {\n            palindrome = palindrome + string[i];\n\
    \        }\n    }\n    \n    return palindrome + prefix + suffix;\n}", "{\n  \
    \  string reverse = \"\";\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    int length = string.length();\n    \n    for (int i = 0; i < length; i++)\n\
    \    {\n        if (string[i] == string[length - 1 - i])\n        {\n        \
    \    reverse = reverse + string[i];\n            prefix = prefix + string[i];\n\
    \            suffix = suffix + string[i];\n        }\n    }\n    \n    return\
    \ prefix + reverse + suffix;\n}", "{\n    string palindrome = \"\";\n    int length\
    \ = string.length();\n    int i = 0;\n    int j = 0;\n    \n    while(i < length\
    \ && j < length) \n    {\n        if(string[i] == string[j]) \n        {\n   \
    \         palindrome += string[i];\n            i++;\n            j++;\n     \
    \   }\n        else if(string[i] > string[j]) \n        {\n            palindrome\
    \ += string[j];\n            j++;\n        }\n        else \n        {\n     \
    \       palindrome += string[i];\n            i++;\n        }\n    }\n    \n \
    \   return palindrome;\n}", "{\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        if(string[i] == string[string.length() - 1 - i])\n    \
    \    {\n            reverse = reverse + string[i];\n        }\n    }\n    \n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            prefix = prefix + string[i];\n        }\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i]\
    \ == string[string.length() - 1 - i])\n        {\n            suffix = suffix\
    \ + string[i];\n        }\n    }\n    \n    string result = prefix + reverse +\
    \ suffix;\n    return result;\n}", "{\n    string reverse = \"\";\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        string temp = string.substr(i, 1);\n        reverse +=\
    \ temp;\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n  \
    \      string temp = string.substr(i, 1);\n        \n        if(temp == reverse)\n\
    \        {\n            prefix = string.substr(0, i);\n            suffix = string.substr(i\
    \ + 1, string.length() - i);\n        }\n    }\n    \n    return prefix + reverse;\n\
    }", "{\n    int len = string.length();\n    string postfix = \"\";\n    string\
    \ prefix = \"\";\n    string reverse = \"\";\n    \n    for(int i = 0; i < len;\
    \ i++)\n    {\n        postfix += string[i];\n    }\n    \n    for(int i = 0;\
    \ i < len; i++)\n    {\n        prefix += string[i];\n    }\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        reverse += string[i];\n    }\n    \n  \
    \  for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n    }\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        reverse += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n        prefix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < len; i++)\n    {\n", "{\n    string reverse\
    \ = \"\";\n    int i = 0;\n    int j = 0;\n    \n    while(i < string.length())\n\
    \    {\n        string prefix = string.substr(0, i);\n        string suffix =\
    \ string.substr(i, string.length());\n        \n        if(std.string.isPalindrome(suffix))\n\
    \        {\n            string postfix = string.substr(i, string.length() - i);\n\
    \            \n            reverse = reverse + postfix + suffix;\n           \
    \ \n            i = string.length() - 1;\n        }\n        else\n        {\n\
    \            reverse = reverse + suffix;\n            \n            i = string.length()\
    \ - 1;\n        }\n    }\n    \n    return reverse;\n}", "{\n    string reverse\
    \ = \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string palindrome\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ string temp = string.substr(i, 1);\n        \n        if(temp == \" \")\n  \
    \      {\n            reverse = reverse + temp;\n            prefix = prefix +\
    \ temp;\n            suffix = suffix + temp;\n        }\n        else\n      \
    \  {\n            reverse = reverse + temp;\n            prefix = prefix + temp;\n\
    \            suffix = suffix + temp;\n        }\n    }\n    \n    for(int i =\
    \ 0; i < string.length(); i++)\n    {\n        string temp = string.substr(i,\
    \ 1);\n        \n        if(temp == \" \")\n        {\n            palindrome\
    \ = prefix + reverse + suffix;\n        }\n        else\n        {\n         \
    \   palindrome = prefix + reverse + suffix;\n        }\n    }\n    \n    return\
    \ palindrome;\n}", "{\n    string result = \"\";\n    string longest = \"\";\n\
    \    string prefix = \"\";\n    string suffix = \"\";\n    string reverse = \"\
    \";\n    \n    longest = longestPalindrome(string);\n    \n    prefix = string.substr(0,\
    \ longest.length);\n    suffix = string.substr(longest.length);\n    \n    reverse\
    \ = reverse(prefix);\n    \n    string postfix = prefix + reverse + suffix;\n\
    \    \n    result = postfix + string;\n    \n    return result;\n}", "{\n    string\
    \ postfix = \"\";\n    string prefix = \"\";\n    string reverse = \"\";\n   \
    \ \n    for(int i = 0; i < string.length(); i++)\n    {\n        postfix += string[i];\n\
    \    }\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix\
    \ += string[i];\n    }\n    \n    for(int i = 0; i < string.length(); i++)\n \
    \   {\n        reverse += string[i];\n    }\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        postfix = postfix.substr(0, i) + reverse + postfix.substr(i,\
    \ postfix.length());\n    }\n    \n    return postfix;\n}", "{\n    string result\
    \ = \"\";\n    string reverse = \"\";\n    string prefix = \"\";\n    string suffix\
    \ = \"\";\n    \n    for(int i = 0; i < string.size(); i++)\n    {\n        if(string[i]\
    \ == string[string.size() - 1 - i])\n        {\n            prefix = prefix +\
    \ string[i];\n            suffix = suffix + string[i];\n        }\n        else\n\
    \        {\n            reverse = reverse + string[i];\n        }\n    }\n   \
    \ \n    result = prefix + reverse + suffix;\n    \n    return result;\n}", "{\n\
    \    int len = string.length();\n    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(string[i]\
    \ == string[len-i-1])\n        {\n            reverse = reverse + string[i];\n\
    \        }\n        else\n        {\n            prefix = prefix + string[i];\n\
    \        }\n    }\n    \n    string result = prefix + reverse;\n    \n    return\
    \ result;\n}", "{\n    string reverse = \"\";\n    int i = 0;\n    int j = string.size()\
    \ - 1;\n    while (i < j) {\n        reverse += string[i];\n        i++;\n   \
    \     j--;\n    }\n    return string + reverse;\n}", "{\n    string reverse =\
    \ \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        if(string[i] == string[string.length()\
    \ - 1 - i])\n        {\n            reverse = reverse + string[i];\n         \
    \   prefix = prefix + string[i];\n            suffix = suffix + string[i];\n \
    \       }\n    }\n    \n    string palindrome = prefix + reverse + suffix;\n \
    \   return palindrome;\n}", "{\n    int len = string.length();\n    int i = 0;\n\
    \    int j = 0;\n    int k = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    string palindrome = \"\";\n    string prefix = \"\";\n  \
    \  string suffix = \"\";\n    string reverse = \"\";\n    string postfix = \"\"\
    ;\n    string postfix_reverse = \"\";\n    string postfix_reverse2 = \"\";\n \
    \   string postfix_reverse3 = \"\";\n    string postfix_reverse4 = \"\";\n   \
    \ string postfix_reverse5 = \"\";\n    string postfix_reverse6 = \"\";\n    string\
    \ postfix_reverse7 = \"\";\n    string postfix_reverse8 = \"\";\n    string postfix_reverse9\
    \ = \"\";\n    string postfix_reverse10 = \"\";\n    string postfix_reverse11\
    \ = \"\";\n    string postfix_reverse12 = \"\";\n    string postfix_reverse13\
    \ = \"\";\n    string postfix_reverse14 = \"\";\n    string postfix_reverse15\
    \ = \"\";\n    string postfix_reverse16 = \"\";\n    string postfix_reverse17\
    \ = \"\";\n    string postfix_reverse18 = \"\";\n    string postfix_reverse19\
    \ = \"\";\n    string postfix_reverse20 = \"\";\n    string postfix_reverse21\
    \ = \"\";\n    string postfix_reverse22 = \"\";\n    string postfix_reverse23\
    \ = \"\";\n    string postfix_reverse24 = \"\";\n    string postfix_reverse25\
    \ = \"\";\n    string postfix_reverse26 = \"\";\n    string postfix_reverse27\
    \ = \"\";\n    string postfix_reverse28 = \"\";\n    string postfix_reverse29\
    \ = \"\";\n    string postfix_reverse30 = \"\";\n    string postfix_reverse31\
    \ = \"\";\n    string postfix_reverse32 = \"\";\n    string postfix_reverse33\
    \ = \"\";\n    string postfix_reverse34 = \"\";\n    string postfix_reverse35\
    \ = \"\";\n    string postfix_reverse36 = \"\";\n    string postfix_reverse37\
    \ = \"\";\n    string postfix_reverse38 = \"\";\n    string postfix_reverse39\
    \ = \"\";\n    string postfix_reverse40 = \"\";\n    string postfix_reverse41\
    \ = \"\";\n    string postfix_reverse42 = \"\";\n    string postfix_reverse43\
    \ = \"\";\n    string postfix_reverse44 = \"\";\n    string postfix_reverse45\
    \ = \"\";\n    string postfix_reverse46 = \"\";\n    string postfix_reverse47\
    \ = \"\";\n    string postfix_reverse48 = \"\";\n    string postfix_reverse49\
    \ = \"\";\n    string postfix_reverse50 = \"\";\n    string postfix_reverse51\
    \ = \"\";\n    string postfix_reverse52 = \"\";\n    string postfix_reverse53\
    \ = \"\";\n    string postfix_reverse54 = \"\";\n    string postfix_reverse55\
    \ = \"\";\n", "{\n    string postfix = \"\";\n    string prefix = \"\";\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] ==\
    \ string[string.length() - 1 - i])\n        {\n            postfix += string[i];\n\
    \        }\n        else\n        {\n            prefix += string[i];\n      \
    \  }\n    }\n    \n    return prefix + postfix;\n}", "{\n    string reverse =\
    \ \"\";\n    string prefix = \"\";\n    string suffix = \"\";\n    string palindrome\
    \ = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n       \
    \ prefix = string.substr(0, i);\n        suffix = string.substr(i, string.length());\n\
    \        \n        if(std.string.isPalindrome(suffix))\n        {\n          \
    \  reverse = std.string.reverse(suffix);\n            palindrome = prefix + reverse\
    \ + suffix;\n        }\n    }\n    \n    return palindrome;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
