name: HumanEval_136_largest_smallest_integers
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
  \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and\
  \ 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative\
  \ or positive integers, return them as None.\n\n    Examples:\n                \n\
  */\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[] lst)\
  \ \n"
tests: "unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n     \
  \   auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
  \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
  \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
  \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n\
  \        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto\
  \ result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
  }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
  \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n   \
    \ foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : result)\
    \ \n    {\n        if (i < 0) \n        {\n            result.a = i;\n       \
    \     result.b = null;\n        }\n        else if (i > 0) \n        {\n     \
    \       result.a = null;\n            result.b = i;\n        }\n        else \n\
    \        {\n            result.a = null;\n            result.b = null;\n     \
    \   }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i < 0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n           else result = Tuple!(i, i));\n    \n    return\
    \ result;\n}", "{\n    var max: Nullable!(long);\n    var min: Nullable!(long);\n\
    \    var i: long;\n    var j: long;\n    \n    for(i = 0; i < lst.Length; i++)\
    \ {\n        if(lst[i] < 0)\n            max = Nullable!(long);\n        else\n\
    \            min = Nullable!(long);\n        \n        for(j = 0; j < lst.Length;\
    \ j++) {\n            if(lst[j] > 0)\n                max = Nullable!(long);\n\
    \            else\n                min = Nullable!(long);\n        }\n       \
    \ \n        if(max != Nullable!(long) && min != Nullable!(long))\n           \
    \ return Tuple!(max, min);\n    }\n    \n    return Tuple!(Nullable!(long), Nullable!(long));\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n\
    \        if (i < 0) \n        {\n            result.a = i;\n            result.b\
    \ = null;\n        }\n        else if (i > 0) \n        {\n            result.a\
    \ = null;\n            result.b = i;\n        }\n        else \n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i < 0) \n           {\n\
    \               result.a = i;\n               result.b = null;\n           }\n\
    \           else\n           {\n               result.a = null;\n            \
    \   result.b = i;\n           }\n    );\n    \n    return result;\n}", "{\n  \
    \  \n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    \n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        \n            if(i.x < 0)\n            {\n                result.a\
    \ = i;\n                result.b = null;\n            }\n            else\n  \
    \          {\n                result.a = null;\n                result.b = i;\n\
    \            }\n            \n        );\n    \n    return result;\n}", "{\n \
    \   Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n           if(i < 0) result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \           else result = Tuple!(i, i));\n    \n    return result;\n}", "{\n \
    \   Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        Tuple!(Nullable!(long), Nullable!(long)) : result)\n    {\n      \
    \  if(i.x < 0)\n        {\n            result.a = i.x;\n            result.b =\
    \ i.y;\n        }\n        else\n        {\n            result.a = i.y;\n    \
    \        result.b = i.x;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n           if(i < 0) result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \           else result = Tuple!(i, i));\n    \n    return result;\n}", "{\n \
    \   var max: Nullable!(long);\n    var min: Nullable!(long);\n    var i: long;\n\
    \    var j: long;\n    \n    for(i = 0; i < lst.Length; i++) {\n        if(lst[i]\
    \ < 0)\n            max = Nullable!(long);\n        else\n            min = Nullable!(long);\n\
    \        \n        for(j = i; j < lst.Length; j++) {\n            if(lst[j] >=\
    \ 0)\n                break;\n            \n            if(lst[j] > max) {\n \
    \               max = Nullable!(long);\n                max = j;\n           \
    \ }\n        }\n        \n        if(max != Nullable!(long)) {\n            min\
    \ = max;\n            max = Nullable!(long);\n            \n            for(j\
    \ = i; j < lst.Length; j++) {\n                if(lst[j] <= min) {\n         \
    \           min = Nullable!(long);\n                    min = j;\n           \
    \     }\n            }\n            \n            if(min != Nullable!(long)) {\n\
    \                return Tuple!(max, min);\n            }\n        }\n    }\n \
    \   \n    return Tuple!(Nullable!(long), Nullable!(long));\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        if (i < 0) \n        {\n       \
    \     result.a = i;\n            result.b = null;\n        }\n        else if\
    \ (i > 0) \n        {\n            result.a = null;\n            result.b = i;\n\
    \        }\n        else \n        {\n            result.a = null;\n         \
    \   result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n            if(i<0) \n                result.a = i;\n            else\n  \
    \              result.b = i;\n            );\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n     \
    \   if (i < 0) \n        {\n            result.a = i;\n            result.b =\
    \ null;\n        }\n        else if (i > 0) \n        {\n            result.a\
    \ = null;\n            result.b = i;\n        }\n        else \n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i<0) then\n            \
    \   result.a = i;\n           else\n               result.b = i;\n           end);\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i<0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (null, i); \n           else if(i>0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (i, null); \n           else result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (i, null));\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst)\n    {\n        if\
    \ (x < 0)\n        {\n            result.a = x;\n            result.b = null;\n\
    \        }\n        else if (x > 0)\n        {\n            result.a = null;\n\
    \            result.b = x;\n        }\n        else\n        {\n            result.a\
    \ = null;\n            result.b = null;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n           if(i >= 0) \n           {\n               result.a = i;\n\
    \               break;\n           }\n           else\n           {\n        \
    \       result.a = null;\n           }\n    );\n    \n    foreach(i : lst, \n\
    \           if(i < 0) \n           {\n               result.b = i;\n         \
    \      break;\n           }\n           else\n           {\n               result.b\
    \ = null;\n           }\n    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n            if(i<0) result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n            if(i>0) result = Tuple!(i,\
    \ i);\n            );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n            if(i<0) \n\
    \                result.a = i;\n            else\n                result.b = i;\n\
    \            );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst)\n    {\n        if(x\
    \ < 0)\n        {\n            result.a = x;\n        }\n        else\n      \
    \  {\n            result.b = x;\n        }\n    }\n    \n    return result;\n}",
  "{\n    \n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if (lst.is_empty())\n\
    \    {\n        result.first = null;\n        result.second = null;\n    }\n \
    \   else\n    {\n        long a = lst.min_element();\n        long b = lst.max_element();\n\
    \        result.first = a;\n        result.second = b;\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(i : lst, \n           {\n               if (i < 0) \n           \
    \    {\n                   result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \               }\n               else\n               {\n                   result\
    \ = Tuple!(i, i);\n               }\n           });\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : \n            if(i<0)\
    \ result = Tuple!(Nullable!(long), Nullable!(long)) : \n            if(i>0) result\
    \ = Tuple!(Nullable!(long), Nullable!(long)) : \n            Tuple!(Nullable!(long),\
    \ Nullable!(long))\n    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i<0) then\n\
    \               result.a = i;\n               result.b = null;\n           else\n\
    \               result.a = null;\n               result.b = i;\n           end);\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t : Tuple!(Nullable!(long), Nullable!(long))) \n    {\n        if (t.0 == null\
    \ || t.1 == null) \n        {\n            result = t;\n        }\n        else\
    \ if (t.0 < 0 && t.1 < 0) \n        {\n            result = t;\n        }\n  \
    \  }\n    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n   \
    \ \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) :\
    \ result) \n    {\n        if (i < 0) \n        {\n            result.a = i;\n\
    \            result.b = null;\n        }\n        else if (i > 0) \n        {\n\
    \            result.a = null;\n            result.b = i;\n        }\n        else\
    \ \n        {\n            result.a = null;\n            result.b = null;\n  \
    \      }\n    }\n    \n    return result;\n}", "{\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n           if(i<0) then\n               result.a\
    \ = i;\n           else\n               result.b = i;\n           end);\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach (i, e) in lst | \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t = largest_smallest_integers(e) | \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ result = t | \n                Tuple!(Nullable!(long), Nullable!(long)) result\
    \ = result | \n                    Tuple!(Nullable!(long), Nullable!(long)) result\
    \ = result | \n                        Tuple!(Nullable!(long), Nullable!(long))\
    \ result = result | \n                            Tuple!(Nullable!(long), Nullable!(long))\
    \ result = result | \n                                Tuple!(Nullable!(long),\
    \ Nullable!(long)) result = result | \n                                    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result = result | \n                                      \
    \  Tuple!(Nullable!(long), Nullable!(long)) result = result | \n             \
    \                               Tuple!(Nullable!(long), Nullable!(long)) result\
    \ = result | \n                                                Tuple!(Nullable!(long),\
    \ Nullable!(long)) result = result | \n                                      \
    \              Tuple!(Nullable!(long), Nullable!(long)) result = result | \n \
    \                                                       Tuple!(Nullable!(long),\
    \ Nullable!(long)) result = result | \n                                      \
    \                      Tuple!(Nullable!(long), Nullable!(long)) result = result\
    \ | \n                                                                Tuple!(Nullable!(long),\
    \ Nullable!(long)) result = result | \n                                      \
    \                              Tuple!(Nullable!(long), Nullable!(long)) result\
    \ = result | \n                                                              \
    \          Tuple!(Nullable!(long), Nullable!(long)) result = result | \n     \
    \                                                                       Tuple!(Nullable!(long),\
    \ Nullable!(long)) result = result | \n                                      \
    \                                          Tuple!(Nullable!(long), Nullable!(long))\
    \ result = result | \n                                                       \
    \                             Tuple!(Nullable!(long), Nullable!(long)) result\
    \ = result | \n                                                              \
    \                          Tuple!(Nullable!(long), Nullable!(long)) result = result\
    \ | \n                                                                       \
    \                     Tuple!(Nullable!(long), Nullable!(long)) result = result\
    \ | \n                                                                       \
    \                         Tuple!(Nullable!(long), Nullable!(long)) result = result\
    \ | \n                                                                       \
    \                             Tuple!(Nullable!(long), Nullable!(long)) result\
    \ = result | \n                                                              \
    \                                          Tuple!(Nullable!(long), Nullable!(long))\
    \ result = result | \n                                                       \
    \                                                     Tuple!(Nullable!(long),\
    \ Nullable!(long)) result = result | \n                                      \
    \                                                                          Tuple!(Nullable!(long),\
    \ Nullable!(long)) result = result | \n                                      \
    \                                                                            \
    \  Tuple!(Nullable!(", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    if (lst.is_empty())\n    {\n        result.a = result.b = null;\n \
    \   }\n    else\n    {\n        auto a = lst.iter().find_map([](long x) -> long\
    \ {\n            if (x < 0) return x;\n            return 0;\n        });\n  \
    \      auto b = lst.iter().find_map([](long x) -> long {\n            if (x >\
    \ 0) return x;\n            return 0;\n        });\n        result.a = std.math.max(a.index(),\
    \ b.index());\n        result.b = std.math.min(a.index(), b.index());\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i == null) \n          \
    \ {\n               result = Tuple!(Nullable!(long), Nullable!(long));\n     \
    \      }\n           else\n           {\n               if(i < 0) \n         \
    \      {\n                   result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \               }\n               else\n               {\n                   result\
    \ = Tuple!(i, Nullable!(long));\n               }\n           }\n    );\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n           {\n               if (i < 0)\n      \
    \             result = Tuple!(Nullable!(long), Nullable!(long));\n           \
    \    else\n                   result = Tuple!(i, Nullable!(long));\n         \
    \  });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n            if(i<0) then\n           \
    \     result.0 = i;\n            else\n                result.1 = i;\n       \
    \     );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst)\n    {\n        if (x < 0)\n       \
    \ {\n            result.a = x;\n            result.b = null;\n        }\n    \
    \    else\n        {\n            result.a = null;\n            result.b = x;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i < 0)\
    \ result = Tuple!(Nullable!(long), Nullable!(long))(Nullable!(i), Nullable!(i)),\
    \ \n           if(i > 0) result = Tuple!(Nullable!(long), Nullable!(long))(Nullable!(i),\
    \ Nullable!(i)));\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i<0) \n\
    \           {\n               result.a = i;\n               result.b = null;\n\
    \           }\n           else \n           {\n               result.a = null;\n\
    \               result.b = i;\n           }\n    );\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n\
    \        if (i < 0) \n        {\n            result.a = i;\n            result.b\
    \ = null;\n        }\n        else if (i > 0) \n        {\n            result.a\
    \ = null;\n            result.b = i;\n        }\n        else \n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n   \
    \ foreach(long x, lst) {\n        if (x < 0) {\n            result.a = x;\n  \
    \      } else if (x > 0) {\n            result.b = x;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ : result) \n    {\n        if (i < 0) \n        {\n            result.a = i;\n\
    \            result.b = null;\n        }\n        else if (i > 0) \n        {\n\
    \            result.a = null;\n            result.b = i;\n        }\n        else\
    \ \n        {\n            result.a = null;\n            result.b = null;\n  \
    \      }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = Tuple!(i, i);\n        \n        if (tuple.a < tuple.b && tuple.a !=\
    \ null)\n        {\n            result.a = tuple.a;\n        }\n        else if\
    \ (tuple.a > tuple.b && tuple.a != null)\n        {\n            result.b = tuple.a;\n\
    \        }\n        else\n        {\n            result.a = null;\n          \
    \  result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ \n            { \n                if(i.value < 0)\n                {\n     \
    \               result.a = null;\n                    result.b = i.value;\n  \
    \              }\n                else\n                {\n                  \
    \  result.a = i.value;\n                    result.b = null;\n               \
    \ }\n            }\n    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        if (i < 0) \n        {\n       \
    \     result.a = i;\n            result.b = null;\n        }\n        else if\
    \ (i > 0) \n        {\n            result.a = null;\n            result.b = i;\n\
    \        }\n        else \n        {\n            result.a = null;\n         \
    \   result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        Tuple!(Nullable!(long), Nullable!(long)) tuple = \n            Tuple!(i,\
    \ i));\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = \n            Tuple!(i, i));\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = \n            Tuple!(i, i));\n    \n    foreach(i :\
    \ lst, \n        Tuple!(Nullable!(long), Nullable!(long)) tuple = \n         \
    \   Tuple!(i, i));\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = \n            Tuple!(i, i));\n    \n    foreach(i :\
    \ lst, \n        Tuple!(Nullable!(long), Nullable!(long)) tuple = \n         \
    \   Tuple!(i, i));\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = \n            Tuple!(i, i));\n    \n    foreach(i :\
    \ lst, \n        Tuple!(Nullable!(long), Nullable!(long)) tuple = \n         \
    \   Tuple!(i, i));\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = \n            Tuple!(i, i));\n    \n    foreach(i :\
    \ lst, \n        Tuple!(Nullable!(long), Nullable!(long)) tuple = \n         \
    \   Tuple!(i, i));\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = \n            Tuple!(i, i));\n    \n    foreach(i :\
    \ lst, \n        Tuple!(Nullable!(long), Nullable!(long)) tuple = \n         \
    \   Tuple!(i, i));\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = \n            Tuple!(i, i));\n    \n    foreach(i :\
    \ lst, \n        Tuple!(Nullable!(long), Nullable!(long)) tuple = \n         \
    \   Tuple!(i, i));\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = \n            Tuple!(i, i));\n", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) t : Tuple!(Nullable!(long), Nullable!(long))) \n    {\n   \
    \     if (t.0 == null || t.1 == null) \n        {\n            result = t;\n \
    \       }\n        else if (t.0.value > t.1.value) \n        {\n            result\
    \ = t;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    if (lst.is_empty)\n    {\n        result.a\
    \ = result.b = null;\n        return result;\n    }\n    \n    long a = lst.iter().max().unwrap();\n\
    \    long b = lst.iter().min().unwrap();\n    \n    if (a < 0)\n    {\n      \
    \  result.a = null;\n        result.b = b;\n    }\n    else\n    {\n        result.a\
    \ = a;\n        result.b = b;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        ", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if (i < 0) \n             \
    \  {\n                   result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \                   break;\n               }\n           else\n              \
    \ {\n                   result = Tuple!(Nullable!(long), Nullable!(long));\n \
    \              }\n           );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) t : Tuple!(Nullable!(long), Nullable!(long))) \n    {\n   \
    \     if (t.f0.isNull) \n        {\n            result.f0 = t.f1;\n          \
    \  result.f1 = t.f0;\n        }\n        else if (t.f0.isNull && t.f1.isNull)\
    \ \n        {\n            result.f0 = t.f0;\n            result.f1 = t.f1;\n\
    \        }\n        else if (t.f0.isNull && t.f1.isNotNull) \n        {\n    \
    \        result.f0 = t.f1;\n            result.f1 = t.f0;\n        }\n       \
    \ else if (t.f0.isNotNull && t.f1.isNull) \n        {\n            result.f0 =\
    \ t.f0;\n            result.f1 = t.f1;\n        }\n        else if (t.f0.isNotNull\
    \ && t.f1.isNotNull) \n        {\n            if (t.f0.f1 < t.f1.f1) \n      \
    \      {\n                result.f0 = t.f0;\n                result.f1 = t.f1;\n\
    \            }\n            else if (t.f0.f1 > t.f1.f1) \n            {\n    \
    \            result.f0 = t.f1;\n                result.f1 = t.f0;\n          \
    \  }\n            else \n            {\n                result.f0 = t.f0;\n  \
    \              result.f1 = t.f1;\n            }\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach (i, el) in lst | \n        Tuple!(el | Nullable!(el)) | \n      \
    \  Tuple!(Nullable!(el) | el)\n    \n    foreach (i, el) in lst | \n        Tuple!(el\
    \ | Nullable!(el)) | \n        Tuple!(Nullable!(el) | el)\n    \n    foreach (i,\
    \ el) in lst | \n        Tuple!(el | Nullable!(el)) | \n        Tuple!(Nullable!(el)\
    \ | el)\n    \n    foreach (i, el) in lst | \n        Tuple!(el | Nullable!(el))\
    \ | \n        Tuple!(Nullable!(el) | el)\n    \n    foreach (i, el) in lst | \n\
    \        Tuple!(el | Nullable!(el)) | \n        Tuple!(Nullable!(el) | el)\n \
    \   \n    foreach (i, el) in lst | \n        Tuple!(el | Nullable!(el)) | \n \
    \       Tuple!(Nullable!(el) | el)\n    \n    foreach (i, el) in lst | \n    \
    \    Tuple!(el | Nullable!(el)) | \n        Tuple!(Nullable!(el) | el)\n    \n\
    \    foreach (i, el) in lst | \n        Tuple!(el | Nullable!(el)) | \n      \
    \  Tuple!(Nullable!(el) | el)\n    \n    foreach (i, el) in lst | \n        Tuple!(el\
    \ | Nullable!(el)) | \n        Tuple!(Nullable!(el) | el)\n    \n    foreach (i,\
    \ el) in lst | \n        Tuple!(el | Nullable!(el)) | \n        Tuple!(Nullable!(el)\
    \ | el)\n    \n    foreach (i, el) in lst | \n        Tuple!(el | Nullable!(el))\
    \ | \n        Tuple!(Nullable!(el) | el)\n    \n    foreach (i, el) in lst | \n\
    \        Tuple!(el | Nullable!(el)) | \n        Tuple!(Nullable!(el) | el)\n \
    \   \n    foreach (i, el) in lst | \n        Tuple!(el | Nullable!(el)) | \n \
    \       Tuple!(Nullable!(el) | el)\n    \n    foreach (i, el) in lst | \n    \
    \    Tuple!(el | Nullable!(el)) | \n        Tuple!(Nullable!(el) | el)\n    \n\
    \    foreach (i, el) in lst | \n        Tuple!(el | Nullable!(", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        if (i < 0) \n        {\n       \
    \     result.a = i;\n            result.b = null;\n        }\n        else if\
    \ (i > 0) \n        {\n            result.a = null;\n            result.b = i;\n\
    \        }\n        else \n        {\n            result.a = null;\n         \
    \   result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ \n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n            if(i<0) then\n                result := Tuple!(Nullable!(long),\
    \ Nullable!(long))(Nullable!(i), Nullable!(Nullable!(i)))\n            else\n\
    \                result := Tuple!(Nullable!(long), Nullable!(long))(Nullable!(Nullable!(i)),\
    \ Nullable!(i))\n            );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i < 0)\
    \ result = Tuple!(Nullable!(long), Nullable!(long));\n           else result =\
    \ Tuple!(i, i));\n    \n    return result;\n}", "{\n    var max: long;\n    var\
    \ min: long;\n    var i: long;\n    var j: long;\n    var k: long;\n    var len:\
    \ long;\n    \n    len = length(lst);\n    \n    if (len == 0)\n        return\
    \ (None, None);\n    \n    max = lst[0];\n    min = lst[0];\n    \n    for (i\
    \ = 1; i < len; i++)\n    {\n        if (lst[i] > max)\n        {\n          \
    \  max = lst[i];\n        }\n        else if (lst[i] < min)\n        {\n     \
    \       min = lst[i];\n        }\n    }\n    \n    return (max, min);\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst)\n    {\n        if (x < 0)\n        {\n            result.a = x;\n \
    \           result.b = Nullable!(long);\n        }\n        else if (x > 0)\n\
    \        {\n            result.b = x;\n            result.a = Nullable!(long);\n\
    \        }\n        else\n        {\n            result.a = Nullable!(long);\n\
    \            result.b = Nullable!(long);\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst)\n    {\n        if (x < 0)\n        {\n            result.a = x;\n \
    \       }\n        else\n        {\n            result.b = x;\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i < 0) \n           {\n\
    \               result.a = i;\n               result.b = null;\n           }\n\
    \           else\n           {\n               result.a = null;\n            \
    \   result.b = i;\n           }\n    );\n    \n    return result;\n}", "{\n  \
    \  Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        Tuple!(Nullable!(long), Nullable!(long)) t : Tuple!(Nullable!(long),\
    \ Nullable!(long))) \n    {\n        if (t.0 == null || t.1 == null) \n      \
    \  {\n            result = t;\n        }\n        else if (t.0 < 0 || t.0 > result.0)\
    \ \n        {\n            result = t;\n        }\n        else if (t.1 < 0 ||\
    \ t.1 > result.1) \n        {\n            result = t;\n        }\n    }\n   \
    \ \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = \n            Tuple!(Nullable!(long), Nullable!(long)) \n          \
    \      largest_smallest_integers(i :: lst));\n    \n    foreach(i : lst, \n  \
    \      Tuple!(Nullable!(long), Nullable!(long)) tuple = \n            Tuple!(Nullable!(long),\
    \ Nullable!(long)) \n                largest_smallest_integers(i :: lst));\n \
    \   \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = \n            Tuple!(Nullable!(long), Nullable!(long)) \n          \
    \      largest_smallest_integers(i :: lst));\n    \n    foreach(i : lst, \n  \
    \      Tuple!(Nullable!(long), Nullable!(long)) tuple = \n            Tuple!(Nullable!(long),\
    \ Nullable!(long)) \n                largest_smallest_integers(i :: lst));\n \
    \   \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = \n            Tuple!(Nullable!(long), Nullable!(long)) \n          \
    \      largest_smallest_integers(i :: lst));\n    \n    foreach(i : lst, \n  \
    \      Tuple!(Nullable!(long), Nullable!(long)) tuple = \n            Tuple!(Nullable!(long),\
    \ Nullable!(long)) \n                largest_smallest_integers(i :: lst));\n \
    \   \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = \n            Tuple!(Nullable!(long), Nullable!(long)) \n          \
    \      largest_smallest_integers(i :: lst));\n    \n    foreach(i : lst, \n  \
    \      Tuple!(Nullable!(long), Nullable!(long)) tuple = \n            Tuple!(Nullable!(long),\
    \ Nullable!(long)) \n                largest_smallest_integers(i :: lst));\n \
    \   \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = \n            Tuple!(Nullable!(long), Nullable!(long)) \n          \
    \      largest_smallest_integers(i :: lst));\n    \n    foreach(i : lst, \n  \
    \      Tuple!(Nullable!(long), Nullable!(long)) tuple = \n            ", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n            if(i<0) then\n                result.a = i;\n            else\n\
    \                result.b = i;\n            );\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if (lst.is_empty)\n\
    \    {\n        result.a = result.b = null;\n        return result;\n    }\n \
    \   \n    long a = lst[0];\n    long b = lst[0];\n    \n    for (long i = 1; i\
    \ < lst.size(); ++i)\n    {\n        if (lst[i] < a)\n        {\n            a\
    \ = lst[i];\n        }\n        else if (lst[i] > b)\n        {\n            b\
    \ = lst[i];\n        }\n    }\n    \n    result.a = a;\n    result.b = b;\n  \
    \  \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = \n            Tuple!(Nullable!(long), Nullable!(long)) \n          \
    \  { \n                if(i.value < 0)\n                    result = tuple;\n\
    \                else\n                    result = tuple;\n            }\n  \
    \  );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n            if(i<0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long))(None,None);\n            else result = Tuple!(Nullable!(long),\
    \ Nullable!(long))(None,i));\n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if (i < 0)\
    \ then (result.a = i, result.b = null) else (result.a = null, result.b = i));\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        ", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ : result) \n    {\n        if (i < 0) \n        {\n            result.a = i;\n\
    \            result.b = null;\n        }\n        else if (i > 0) \n        {\n\
    \            result.a = null;\n            result.b = i;\n        }\n        else\
    \ \n        {\n            result.a = null;\n            result.b = null;\n  \
    \      }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           {\n      \
    \         if (i < 0) \n               {\n                   result.a = i;\n  \
    \                 result.b = null;\n               }\n               else \n \
    \              {\n                   result.a = null;\n                   result.b\
    \ = i;\n               }\n           });\n    \n    return result;\n}\n/*", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n           {\n               if (i < 0) \n               {\n             \
    \      result.a = i;\n                   result.b = null;\n               }\n\
    \               else\n               {\n                   result.a = null;\n\
    \                   result.b = i;\n               }\n           });\n    \n  \
    \  return result;\n}", "{\n    var max: long = Long.MinValue;\n    var min: long\
    \ = Long.MaxValue;\n    var i: long = 0;\n    var j: long = 0;\n    var k: long\
    \ = 0;\n    var maxIndex: long = 0;\n    var minIndex: long = 0;\n    var maxIndex2:\
    \ long = 0;\n    var minIndex2: long = 0;\n    var maxIndex3: long = 0;\n    var\
    \ minIndex3: long = 0;\n    var maxIndex4: long = 0;\n    var minIndex4: long\
    \ = 0;\n    var maxIndex5: long = 0;\n    var minIndex5: long = 0;\n    var maxIndex6:\
    \ long = 0;\n    var minIndex6: long = 0;\n    var maxIndex7: long = 0;\n    var\
    \ minIndex7: long = 0;\n    var maxIndex8: long = 0;\n    var minIndex8: long\
    \ = 0;\n    var maxIndex9: long = 0;\n    var minIndex9: long = 0;\n    var maxIndex10:\
    \ long = 0;\n    var minIndex10: long = 0;\n    var maxIndex11: long = 0;\n  \
    \  var minIndex11: long = 0;\n    var maxIndex12: long = 0;\n    var minIndex12:\
    \ long = 0;\n    var maxIndex13: long = 0;\n    var minIndex13: long = 0;\n  \
    \  var maxIndex14: long = 0;\n    var minIndex14: long = 0;\n    var maxIndex15:\
    \ long = 0;\n    var minIndex15: long = 0;\n    var maxIndex16: long = 0;\n  \
    \  var minIndex16: long = 0;\n    var maxIndex17: long = 0;\n    var minIndex17:\
    \ long = 0;\n    var maxIndex18: long = 0;\n    var minIndex18: long = 0;\n  \
    \  var maxIndex19: long = 0;\n    var minIndex19: long = 0;\n    var maxIndex20:\
    \ long = 0;\n    var minIndex20: long = 0;\n    var maxIndex21: long = 0;\n  \
    \  var minIndex21: long = 0;\n    var maxIndex22: long = 0;\n    var minIndex22:\
    \ long = 0;\n    var maxIndex23: long = 0;\n    var minIndex23: long = 0;\n  \
    \  var maxIndex24: long = 0;\n    var minIndex24: long = 0;\n    var maxIndex25:\
    \ long = 0;\n    var minIndex25: long = 0;\n    var maxIndex26: long = 0;\n  \
    \  var minIndex26: long = 0;\n    var maxIndex27: long = 0;\n    var minIndex27:\
    \ long = 0;\n    var maxIndex28: long = 0;\n    var minIndex28: long = 0;\n  \
    \  var maxIndex29: long = 0;\n    var minIndex29: long = 0;\n    var maxIndex30:\
    \ long = 0;\n    var minIndex30: long = 0;\n    var maxIndex31", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst) {\n        if (x <\
    \ 0) {\n            result.a = x;\n        } else {\n            result.b = x;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result)\n    {\n        if (i < 0)\n        {\n         \
    \   result.a = i;\n            result.b = null;\n        }\n        else\n   \
    \     {\n            result.a = null;\n            result.b = i;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n            if(i<0) then\n           \
    \     result.a = i;\n            else\n                result.b = i;\n       \
    \     );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ : result)\n    {\n        if (i < 0) \n        {\n            result.a = i;\n\
    \            result.b = null;\n        }\n        else if (i > 0) \n        {\n\
    \            result.a = null;\n            result.b = i;\n        }\n        else\
    \ \n        {\n            result.a = null;\n            result.b = null;\n  \
    \      }\n    }\n    \n    return result;\n}", "{\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t = largest_smallest_integers(i))\n    {\n        if(!t.a.isNull)\n        {\n\
    \            t.a = max(t.a, i);\n        }\n        if(!t.b.isNull)\n        {\n\
    \            t.b = min(t.b, i);\n        }\n    }\n    \n    if(!result.a.isNull)\n\
    \    {\n        result.a = max(result.a, result.b);\n    }\n    if(!result.b.isNull)\n\
    \    {\n        result.b = min(result.b, result.a);\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n\
    \        if (i < 0) \n        {\n            result.a = i;\n            result.b\
    \ = null;\n        }\n        else if (i > 0) \n        {\n            result.a\
    \ = null;\n            result.b = i;\n        }\n        else \n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ : result) \n    {\n        if(i.x >= 0)\n        {\n            result.x = i.x;\n\
    \            result.y = i.y;\n        }\n        else\n        {\n           \
    \ result.x = null;\n            result.y = i;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(i : lst, \n           {\n               if (i.isNegative) \n    \
    \           {\n                   if (result.isNull)\n                   {\n \
    \                      result = i;\n                   }\n                   else\n\
    \                   {\n                       if (result.isNull)\n           \
    \            {\n                           result = i;\n                     \
    \  }\n                       else if (result.isNegative)\n                   \
    \    {\n                           result = i;\n                       }\n   \
    \                }\n               }\n               else if (i.isPositive)\n\
    \               {\n                   if (result.isNull)\n                   {\n\
    \                       result = i;\n                   }\n                  \
    \ else\n                   {\n                       if (result.isNull)\n    \
    \                   {\n                           result = i;\n              \
    \         }\n                       else if (result.isPositive)\n            \
    \           {\n                           result = i;\n                      \
    \ }\n                   }\n               }\n           });\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) tuple\
    \ = \n            Tuple!(Nullable!(long), Nullable!(long)) \n            (i ==\
    \ 0 ? Tuple!(Nullable!(long), Nullable!(long)) : \n                Tuple!(Nullable!(long),\
    \ Nullable!(long)) \n                (\n                    if(i < 0) \n     \
    \                   Tuple!(Nullable!(long), Nullable!(long)) \n              \
    \          else \n                        Tuple!(Nullable!(long), Nullable!(long))\
    \ \n                        (\n                            if(i > 0) \n      \
    \                          Tuple!(Nullable!(long), Nullable!(long)) \n       \
    \                         else \n                                Tuple!(Nullable!(long),\
    \ Nullable!(long)) \n                                (\n                     \
    \               Tuple!(Nullable!(long), Nullable!(long)) \n                  \
    \                  (\n                                        Tuple!(Nullable!(long),\
    \ Nullable!(long)) \n                                        (\n             \
    \                               Tuple!(Nullable!(long), Nullable!(long)) \n  \
    \                                          (\n                               \
    \                 Tuple!(Nullable!(long), Nullable!(long)) \n                \
    \                                (\n                                         \
    \           Tuple!(Nullable!(long), Nullable!(long)) \n                      \
    \                              (\n                                           \
    \             Tuple!(Nullable!(long), Nullable!(long)) \n                    \
    \                                    (\n                                     \
    \                       Tuple!(Nullable!(long), Nullable!(long)) \n          \
    \                                                  (\n                       \
    \                                         Tuple!(Nullable!(long), Nullable!(long))\
    \ \n                                                                (\n      \
    \                                                              Tuple!(Nullable!(long),\
    \ Nullable!(long)) \n                                                        \
    \            (\n                                                             \
    \           Tuple!(Nullable!(long), Nullable!(long)) \n                      \
    \                                                  (\n                       \
    \                                                     Tuple!(Nullable!(long),\
    \ Nullable!(long)) \n                                                        \
    \                    (\n                                                     \
    \                           Tuple!(Nullable!(long), Nullable!(long)) \n      \
    \                                                                          (\n\
    \                                                                            \
    \        Tuple!(Nullable!(long), Nullable!(long)) \n                         \
    \                                                           (\n              \
    \                                                                          Tuple!(Nullable!(long),\
    \ Nullable!(long)) \n                                                        \
    \                                (\n                                         \
    \                                                   Tuple!(Nullable!(long), Nullable!(long))\
    \ \n                                                                         \
    \                   (\n                                                      \
    \                                          Tuple!(Nullable!(long), Nullable!(long))\
    \ \n                                                                         \
    \                       (\n                                                  \
    \                                                  Tuple!(Nullable!(long), Nullable!(long))\
    \ \n                                                                         \
    \                           (\n                                              \
    \                                                          Tuple!(Nullable!(long),\
    \ Nullable!(long)) \n                                                        \
    \                                                (\n                         \
    \                                                                            \
    \       Tuple!(Nullable!(long), Nullable!(long)) \n                          \
    \                                                                            \
    \      (\n                                                                   \
    \                                             Tuple", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i < 0)\
    \ \n               result = Tuple!(Nullable!(long), Nullable!(long));\n      \
    \     else\n               result = Tuple!(i, i));\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n\
    \        Tuple!(Nullable!(long), Nullable!(long)) temp;\n        \n        if(i\
    \ < 0) \n        {\n            temp = Tuple!(Nullable!(long), Nullable!(long))\
    \ (null, i);\n        }\n        else \n        {\n            temp = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (i, null);\n        }\n        \n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (result, temp);\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n     \
    \   if (i < 0) \n        {\n            result.0 = i;\n            result.1 =\
    \ null;\n        }\n        else if (i > 0) \n        {\n            result.0\
    \ = null;\n            result.1 = i;\n        }\n        else \n        {\n  \
    \          result.0 = null;\n            result.1 = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst)\n    {\n        if(x < 0)\n        {\n\
    \            result.a = x;\n            result.b = null;\n        }\n        else\n\
    \        {\n            result.a = null;\n            result.b = x;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst)\n    {\n        if (x < 0)\n       \
    \ {\n            result.a = x;\n        }\n        else if (x > 0)\n        {\n\
    \            result.b = x;\n        }\n        else\n        {\n            result.a\
    \ = null;\n            result.b = null;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : \n            if(i\
    \ == null || i > 0) \n                result := Tuple!(i, i); \n            else\n\
    \                result := Tuple!(null, null));\n    \n    return result;\n}\n\
    /*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n\
    \        if (i < 0) \n        {\n            result.a = i;\n            result.b\
    \ = null;\n        }\n        else if (i > 0) \n        {\n            result.a\
    \ = null;\n            result.b = i;\n        }\n        else \n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = \n            Tuple!(Nullable!(long), Nullable!(long)) \n          \
    \  { \n                if(i.value < 0)\n                    result = tuple;\n\
    \                else\n                    result = tuple;\n            }\n  \
    \  );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t : Tuple!(Nullable!(long), Nullable!(long))) \n    {\n        if(t.a == null\
    \ || t.b == null)\n        {\n            result.a = t.a;\n            result.b\
    \ = t.b;\n        }\n        else\n        {\n            if(t.a > t.b)\n    \
    \        {\n                result.a = t.a;\n                result.b = t.b;\n\
    \            }\n            else\n            {\n                result.a = t.b;\n\
    \                result.b = t.a;\n            }\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(i : lst, \n           {\n               if (i < 0) \n           \
    \    {\n                   result.a = i;\n                   result.b = null;\n\
    \               }\n               else \n               {\n                  \
    \ result.a = null;\n                   result.b = i;\n               }\n     \
    \      });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    if (lst.is_empty())\n    {\n        result.a = result.b =\
    \ null;\n    }\n    else\n    {\n        auto min = (lst.begin()).get<long>();\n\
    \        auto max = (lst.rbegin()).get<long>();\n        \n        if (min < 0)\n\
    \        {\n            result.a = min;\n            result.b = max;\n       \
    \ }\n        else\n        {\n            result.a = max;\n            result.b\
    \ = min;\n        }\n    }\n    \n    return result;\n}", "{\n    \n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n            if(i<0) \n\
    \                result.a = i;\n            else\n                result.b = i;\n\
    \            );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i == null\
    \ || i >= 0) \n           {\n               result = i;\n           }\n      \
    \     else\n           {\n               result = null;\n           }\n    );\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst)\n    {\n        if(x < 0)\n        {\n\
    \            result.a = x;\n        }\n        else\n        {\n            result.b\
    \ = x;\n        }\n    }\n    \n    return result;\n}", "{\n    \n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        ", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    if (lst.is_empty())\n    {\n        result.first = null;\n        result.second\
    \ = null;\n    }\n    else\n    {\n        long a = lst.iter().max().unwrap();\n\
    \        long b = lst.iter().min().unwrap();\n        result.first = a;\n    \
    \    result.second = b;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n            if(i<0) \n\
    \                result.a = i;\n            else\n                result.b = i;\n\
    \            );\n    \n    return result;\n}", "{\n    \n    var max: long;\n\
    \    var min: long;\n    var i: long;\n    var j: long;\n    var k: long;\n  \
    \  var result: Tuple!(Nullable!(long), Nullable!(long));\n    \n    max = lst[0];\n\
    \    min = lst[0];\n    \n    for (i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n        if (lst[i] < min) {\n\
    \            min = lst[i];\n        }\n    }\n    \n    if (max < 0 && min > 0)\
    \ {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n        result.0\
    \ = max;\n        result.1 = min;\n    }\n    else if (max < 0) {\n        result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n        result.0 = max;\n     \
    \   result.1 = null;\n    }\n    else if (min > 0) {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.0 = null;\n        result.1 = min;\n    }\n\
    \    else {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n    \
    \    result.0 = null;\n        result.1 = null;\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) t = largest_smallest_integers(i))\n\
    \    {\n        if(t.a != null)\n        {\n            if(t.b != null)\n    \
    \        {\n                result = t;\n                break;\n            }\n\
    \            else\n            {\n                t.b = i;\n            }\n  \
    \      }\n        else\n        {\n            t.a = i;\n        }\n    }\n  \
    \  \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n            if(i<0) then\n           \
    \     result.0 = i;\n            else\n                result.1 = i;\n       \
    \     );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        ", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(long x, lst)\n    {\n        if(x < 0)\n        {\n       \
    \     result.a = x;\n        }\n        else\n        {\n            result.b\
    \ = x;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i < 0)\
    \ \n           {\n               result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \               break;\n           }\n           else\n           {\n        \
    \       result = Tuple!(Nullable!(long), Nullable!(long));\n           }\n   \
    \ );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n            if(i<0) \n               \
    \ result.a = i;\n            else\n                result.b = i;\n           \
    \ );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    if (lst.is_empty())\n        return result;\n    \n    long\
    \ a = lst.min();\n    long b = lst.max();\n    \n    if (a < 0)\n        return\
    \ result;\n    \n    if (b > 0)\n        return result;\n    \n    result.0 =\
    \ a;\n    result.1 = b;\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        if (i < 0) \n        {\n       \
    \     result.a = i;\n            result.b = null;\n        }\n        else if\
    \ (i > 0) \n        {\n            result.a = null;\n            result.b = i;\n\
    \        }\n        else \n        {\n            result.a = null;\n         \
    \   result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n     \
    \   if (i < 0) \n        {\n            result.a = i;\n            result.b =\
    \ null;\n        }\n        else if (i > 0) \n        {\n            result.a\
    \ = null;\n            result.b = i;\n        }\n        else \n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t : Tuple!(Nullable!(long), Nullable!(long))) \n    {\n        if (t.a == null\
    \ || t.b == null) \n        {\n            result = t;\n        }\n        else\
    \ if (t.a > t.b) \n        {\n            result = t;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    if (lst.is_empty())\n        return result;\n    \n    long a = lst.min();\n\
    \    long b = lst.max();\n    \n    if (a < 0)\n        return result;\n    \n\
    \    if (b < 0)\n        return result;\n    \n    if (a > b)\n        return\
    \ result;\n    \n    result.0 = a;\n    result.1 = b;\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n           {\n               if (i < 0) \n                   {\n  \
    \                     result.a = i;\n                       result.b = null;\n\
    \                   }\n               else \n                   {\n          \
    \             result.a = null;\n                       result.b = i;\n       \
    \            }\n           });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst)\n    {\n        if(x\
    \ < 0)\n        {\n            result.a = x;\n        }\n        else\n      \
    \  {\n            result.b = x;\n        }\n    }\n    \n    return result;\n}",
  "{\n    var max: Nullable!(long);\n    var min: Nullable!(long);\n    var i: long;\n\
    \    var j: long;\n    var k: long;\n    var l: long;\n    var m: long;\n    var\
    \ n: long;\n    var o: long;\n    var p: long;\n    var q: long;\n    var r: long;\n\
    \    var s: long;\n    var t: long;\n    var u: long;\n    var v: long;\n    var\
    \ w: long;\n    var x: long;\n    var y: long;\n    var z: long;\n    var a: long;\n\
    \    var b: long;\n    var c: long;\n    var d: long;\n    var e: long;\n    var\
    \ f: long;\n    var g: long;\n    var h: long;\n    var i: long;\n    var j: long;\n\
    \    var k: long;\n    var l: long;\n    var m: long;\n    var n: long;\n    var\
    \ o: long;\n    var p: long;\n    var q: long;\n    var r: long;\n    var s: long;\n\
    \    var t: long;\n    var u: long;\n    var v: long;\n    var w: long;\n    var\
    \ x: long;\n    var y: long;\n    var z: long;\n    var a: long;\n    var b: long;\n\
    \    var c: long;\n    var d: long;\n    var e: long;\n    var f: long;\n    var\
    \ g: long;\n    var h: long;\n    var i: long;\n    var j: long;\n    var k: long;\n\
    \    var l: long;\n    var m: long;\n    var n: long;\n    var o: long;\n    var\
    \ p: long;\n    var q: long;\n    var r: long;\n    var s: long;\n    var t: long;\n\
    \    var u: long;\n    var v: long;\n    var w: long;\n    var x: long;\n    var\
    \ y: long;\n    var z: long;\n    var a: long;\n    var b: long;\n    var c: long;\n\
    \    var d: long;\n    var e: long;\n    var f: long;\n    var g: long;\n    var\
    \ h: long;\n    var i: long;\n    var j: long;\n    var k: long;\n    var l: long;\n\
    \    var m: long;\n    var n: long;\n    var o: long;\n    var p: long;\n    var\
    \ q: long;\n    var r: long;\n    var s: long;\n    var t: long;\n    var u: long;\n\
    \    var v: long;\n    var w: long;\n", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    if (lst.is_empty())\n    {\n        result.a = result.b =\
    \ null;\n        return result;\n    }\n    \n    long a = lst.max_by(|x|x.negate());\n\
    \    long b = lst.min_by(|x|x.negate());\n    \n    if (a.is_none())\n    {\n\
    \        result.a = result.b = null;\n        return result;\n    }\n    \n  \
    \  if (b.is_none())\n    {\n        result.a = result.b = a;\n        return result;\n\
    \    }\n    \n    result.a = a;\n    result.b = b;\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) t : Tuple!(Nullable!(long),\
    \ Nullable!(long))) \n    {\n        if (t.f0.isNull)\n        {\n           \
    \ t.f0 = i;\n            t.f1 = i;\n        }\n        else if (t.f1.isNull)\n\
    \        {\n            t.f1 = i;\n        }\n        else\n        {\n      \
    \      if (t.f0.f0 < t.f1.f0)\n            {\n                t.f0 = i;\n    \
    \        }\n            else\n            {\n                t.f1 = i;\n     \
    \       }\n        }\n    }\n    \n    result.f0 = result.f1;\n    result.f1 =\
    \ Nullable!(long);\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = Tuple!(i, i);\n        \n        if (tuple.a < tuple.b && tuple.a !=\
    \ null)\n        {\n            result.a = tuple.a;\n        }\n        else if\
    \ (tuple.a > tuple.b && tuple.a != null)\n        {\n            result.b = tuple.a;\n\
    \        }\n        else\n        {\n            result.a = null;\n          \
    \  result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst) {\n        if (x <\
    \ 0) result.a = x;\n        if (x > 0) result.b = x;\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : result)\
    \ \n    {\n        if (i < 0) \n        {\n            result.a = i;\n       \
    \     result.b = null;\n        }\n        else if (i > 0) \n        {\n     \
    \       result.a = null;\n            result.b = i;\n        }\n        else \n\
    \        {\n            result.a = null;\n            result.b = null;\n     \
    \   }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n            if(i == null || i >= 0) \n\
    \            {\n                result.a = i;\n                result.b = i;\n\
    \            }\n            else\n            {\n                result.a = null;\n\
    \                result.b = i;\n            }\n        );\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n           if(i<0) then\n               result.0 = i;\n           else\n\
    \               result.1 = i;\n           end);\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    \n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        ", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = \n            Tuple!(i, std.math.to.long(i))\n    \
    \    )\n    {\n        if (tuple.a > tuple.b && tuple.a > 0)\n        {\n    \
    \        result.a = tuple.a;\n            result.b = tuple.b;\n        }\n   \
    \     else if (tuple.a < tuple.b && tuple.a < 0)\n        {\n            result.a\
    \ = tuple.b;\n            result.b = tuple.a;\n        }\n        else\n     \
    \   {\n            result.a = null;\n            result.b = null;\n        }\n\
    \    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i<0) then\n            \
    \   result.a = i;\n           else\n               result.b = i;\n           end);\n\
    \    \n    return result;\n}", "{\n    \n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    bool negative = false;\n    long largest = 0;\n    long smallest\
    \ = Long.max;\n    \n    for (long i : lst)\n    {\n        if (i < 0)\n     \
    \   {\n            negative = true;\n        }\n        else if (i > 0)\n    \
    \    {\n            if (largest < i)\n            {\n                largest =\
    \ i;\n            }\n            if (smallest > i)\n            {\n          \
    \      smallest = i;\n            }\n        }\n    }\n    \n    if (negative\
    \ == false)\n    {\n        result = Tuple!(largest, smallest);\n    }\n    else\n\
    \    {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n    }\n  \
    \  \n    return result;\n}", "{\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n   \
    \ foreach(i : lst, \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        ", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n           if (i < 0) then\n               result.a = i;\n           else\n\
    \               result.b = i;\n           );\n    \n    return result;\n}", "{\n\
    \    \n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n            if(i<0) then\n                result.a = i;\n         \
    \   else\n                result.b = i;\n            );\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n           if(i<0) then\n               result.a = i;\n           else\n\
    \               result.b = i;\n           end);\n    \n    return result;\n}",
  "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if (i < 0)\
    \ result = Tuple!(Nullable!(long), Nullable!(long));\n           else result =\
    \ Tuple!(i, i));\n    \n    return result;\n}", "{\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t = \n            Tuple!(Nullable!(long), Nullable!(long)) (\n             \
    \   if(i<0) Tuple!(Nullable!(long), Nullable!(long)) (None,None) \n          \
    \      else Tuple!(Nullable!(long), Nullable!(long)) (None,i)\n            )\n\
    \    ) {\n        result = if(i<0) result else if(i>result.1) result else Tuple!(Nullable!(long),\
    \ Nullable!(long)) (result.0,i);\n    }\n    \n    return result;\n}", "{\n  \
    \  Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n            if(i<0) then\n                result.a = i;\n            else\n\
    \                result.b = i;\n            );\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n\
    \        if (i < 0) \n        {\n            result.a = i;\n            result.b\
    \ = null;\n        }\n        else if (i > 0) \n        {\n            result.a\
    \ = null;\n            result.b = i;\n        }\n        else \n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ : result)\n    {\n        if (i < 0)\n        {\n            result.a = i;\n\
    \            result.b = null;\n        }\n        else\n        {\n          \
    \  result.a = null;\n            result.b = i;\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : result)\n\
    \    {\n        if (i < 0)\n        {\n            result.a = i;\n           \
    \ result.b = null;\n        }\n        else\n        {\n            result.a =\
    \ null;\n            result.b = i;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n\
    \        if (i < 0) \n        {\n            result.a = i;\n            result.b\
    \ = null;\n        }\n        else if (i > 0) \n        {\n            result.a\
    \ = null;\n            result.b = i;\n        }\n        else \n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    \n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i<0) then\n            \
    \   result.0 = i;\n           else\n               result.1 = i;\n           end);\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ : result) \n    {\n        if (i < 0) \n        {\n            result.a = i;\n\
    \            result.b = null;\n        }\n        else if (i > 0) \n        {\n\
    \            result.a = null;\n            result.b = i;\n        }\n        else\
    \ \n        {\n            result.a = null;\n            result.b = null;\n  \
    \      }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        if (i < 0) \n        {\n       \
    \     result.a = i;\n            result.b = null;\n        }\n        else if\
    \ (i > 0) \n        {\n            result.a = null;\n            result.b = i;\n\
    \        }\n        else \n        {\n            result.a = null;\n         \
    \   result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        Tuple!(Nullable!(long), Nullable!(long)) t : Tuple!(Nullable!(long),\
    \ Nullable!(long))) \n    {\n        if (t.a == null)\n        {\n           \
    \ result.a = null;\n            result.b = null;\n        }\n        else if (t.b\
    \ == null)\n        {\n            result.a = t.a;\n            result.b = t.b;\n\
    \        }\n        else\n        {\n            if (t.a > t.b)\n            {\n\
    \                result.a = t.a;\n                result.b = t.b;\n          \
    \  }\n            else\n            {\n                result.a = t.b;\n     \
    \           result.b = t.a;\n            }\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n\
    \    foreach(i : lst, \n           if(isNull(i)) continue;\n           if(isNegative(i))\
    \ \n           {\n               if(isNull(result)) result = i;\n            \
    \   else result = max(result, i);\n           }\n           else\n           {\n\
    \               if(isNull(result)) result = i;\n               else result = min(result,\
    \ i);\n           }\n    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(long x, lst) {\n        if (x <\
    \ 0) result.a = x;\n        else if (x > 0) result.b = x;\n        else result.a\
    \ = null;\n        result.b = null;\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n     \
    \   Tuple!(Nullable!(long), Nullable!(long)) tuple = Tuple!(i, i);\n        if\
    \ (tuple.a.isNull() && tuple.b.isNull())\n        {\n            return tuple;\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    \n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n            if(i<0) then\n\
    \                result.a = i;\n            else\n                result.b = i;\n\
    \            );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        if (i < 0) \n        {\n       \
    \     result.0 = i;\n            result.1 = None;\n        }\n        else if\
    \ (i > 0) \n        {\n            result.0 = None;\n            result.1 = i;\n\
    \        }\n        else \n        {\n            result.0 = None;\n         \
    \   result.1 = None;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n           if(i < 0) result = Tuple!(Nullable!(long), Nullable!(long)) (Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long));\n           else if(i >\
    \ 0) result = Tuple!(Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long))\
    \ (Nullable!(long), Nullable!(long));\n           else result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long), Nullable!(long)) (Nullable!(long), Nullable!(long));\n\
    \           );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        if (i < 0) \n        {\n       \
    \     result.a = i;\n            result.b = null;\n        }\n        else if\
    \ (i > 0) \n        {\n            result.a = null;\n            result.b = i;\n\
    \        }\n        else \n        {\n            result.a = null;\n         \
    \   result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n           if(i < 0) result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \           else result = Tuple!(i, i));\n    \n    return result;\n}", "{\n \
    \   Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach (i, e)\
    \ in lst | \n        Tuple!(Nullable!(long), Nullable!(long)) t = largest_smallest_integers(e)\
    \ | \n            Tuple!(Nullable!(long), Nullable!(long)) result = t | \n   \
    \         Tuple!(Nullable!(long), Nullable!(long)) result = result | \n      \
    \      Tuple!(Nullable!(long), Nullable!(long)) result = result | \n         \
    \   Tuple!(Nullable!(long), Nullable!(long)) result = result | \n            Tuple!(Nullable!(long),\
    \ Nullable!(long)) result = result | \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ result = result | \n            Tuple!(Nullable!(long), Nullable!(long)) result\
    \ = result | \n            Tuple!(Nullable!(long), Nullable!(long)) result = result\
    \ | \n            Tuple!(Nullable!(long), Nullable!(long)) result = result | \n\
    \            Tuple!(Nullable!(long), Nullable!(long)) result = result | \n   \
    \         Tuple!(Nullable!(long), Nullable!(long)) result = result | \n      \
    \      Tuple!(Nullable!(long), Nullable!(long)) result = result | \n         \
    \   Tuple!(Nullable!(long), Nullable!(long)) result = result | \n            Tuple!(Nullable!(long),\
    \ Nullable!(long)) result = result | \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ result = result | \n            Tuple!(Nullable!(long), Nullable!(long)) result\
    \ = result | \n            Tuple!(Nullable!(long), Nullable!(long)) result = result\
    \ | \n            Tuple!(Nullable!(long), Nullable!(long)) result = result | \n\
    \            Tuple!(Nullable!(long), Nullable!(long)) result = result | \n   \
    \         Tuple!(Nullable!(long), Nullable!(long)) result = result | \n      \
    \      Tuple!(Nullable!(long), Nullable!(long)) result = result | \n         \
    \   Tuple!(Nullable!(long), Nullable!(long)) result = result | \n            Tuple!(Nullable!(long),\
    \ Nullable!(long)) result = result | \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ result = result | \n            Tuple!(Nullable!(long), Nullable!(long)) result\
    \ = result | \n            Tuple!(Nullable!(long), Nullable!(long)) result = result\
    \ | \n            Tuple!(Nullable!(long), Nullable!(long)) result = result | \n\
    \            Tuple", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(long x, lst) {\n        if (x < 0) {\n            result.a\
    \ = x;\n        } else {\n            result.b = x;\n        }\n    }\n    \n\
    \    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n           if (i < 0) \n           {\n         \
    \      result.a = i;\n               result.b = null;\n           }\n        \
    \   else\n           {\n               result.a = null;\n               result.b\
    \ = i;\n           });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (i, x) in lst {\n        if x <\
    \ 0 { \n            result.a = x;\n            result.b = null;\n        } else\
    \ {\n            result.a = null;\n            result.b = x;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    \n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if (i < 0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n           else if (i > 0) result = Tuple!(i, Nullable!(long));\n\
    \           else result = Tuple!(Nullable!(long), Nullable!(long));\n        \
    \   );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ : result) \n    {\n        Tuple!(Nullable!(long), Nullable!(long)) tuple =\
    \ Tuple!(i, i);\n        \n        if (tuple.a > tuple.b && tuple.a > 0)\n   \
    \     {\n            result.a = tuple.a;\n        }\n        else if (tuple.a\
    \ < tuple.b && tuple.a < 0)\n        {\n            result.b = tuple.a;\n    \
    \    }\n        else\n        {\n            result.a = null;\n            result.b\
    \ = null;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    if (lst.is_empty())\n    {\n        result.a\
    \ = result.b = null;\n        return result;\n    }\n    \n    long a = lst.min();\n\
    \    long b = lst.max();\n    \n    if (a < 0)\n    {\n        result.a = null;\n\
    \        result.b = b;\n    }\n    else\n    {\n        result.a = a;\n      \
    \  result.b = b;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) t : Tuple!(Nullable!(long), Nullable!(long))) \n    {\n   \
    \     if (t.f0.isSome() && t.f1.isSome())\n        {\n            if (t.f0.get()\
    \ > t.f1.get())\n            {\n                result = t;\n            }\n \
    \           else\n            {\n                result = t;\n            }\n\
    \        }\n        else\n        {\n            result = t;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    if (lst.is_empty())\n        return result;\n    \n    long\
    \ a = lst[0];\n    long b = lst[0];\n    \n    for (long i : lst)\n    {\n   \
    \     if (i < 0)\n        {\n            a = i;\n        }\n        else if (i\
    \ > 0)\n        {\n            b = i;\n        }\n    }\n    \n    result = Tuple!(a,\
    \ Tuple!(b, Nullable!()));\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach (i, e) in lst | \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) pair = largest_smallest_integers(e) | \n        result ~= pair\
    \ ? pair : result;\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i<0) result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n           else result = Tuple!(i,\
    \ i));\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t = largest_smallest_integers(i))\n    {\n        if(!t.a.isNull)\n        {\n\
    \            if(t.b.isNull)\n            {\n                result.a = t.a;\n\
    \                result.b = t.b;\n            }\n            else\n          \
    \  {\n                if(t.a > result.a)\n                {\n                \
    \    result.a = t.a;\n                }\n                \n                if(t.b\
    \ < result.b)\n                {\n                    result.b = t.b;\n      \
    \          }\n            }\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n            if(i<0) then\n                result.0 = i;\n            else\n\
    \                result.1 = i;\n            );\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n           {\n               if (i < 0) \n               {\n        \
    \           result = Tuple!(Nullable!(long), Nullable!(long));\n             \
    \  }\n               else\n               {\n                   result = Tuple!(i,\
    \ i);\n               }\n           });\n    \n    return result;\n}", "{\n  \
    \  Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n           if(i<0) then\n               result.a = i;\n           else\n \
    \              result.b = i;\n           end);\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n           if(i<0) then\n               result.a = i;\n           else\n\
    \               result.b = i;\n           end);\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n            if(i == null) \n                result := Nullable!(long);\n\
    \            else\n                result := (max(i), min(i));\n            );\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(long x, lst) {\n        if (x < 0) {\n          \
    \  result.a = x;\n        } else {\n            result.b = x;\n        }\n   \
    \ }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t : Tuple!(Nullable!(long), Nullable!(long))) \n    {\n        if (t.f0.isSome()\
    \ && t.f1.isSome())\n        {\n            if (t.f0.get() < t.f1.get())\n   \
    \         {\n                result = t;\n            }\n            else\n  \
    \          {\n                result = t;\n            }\n        }\n        else\n\
    \        {\n            result = t;\n        }\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if (lst.is_empty())\n\
    \    {\n        result.a = result.b = null;\n        return result;\n    }\n \
    \   \n    long a = lst[0];\n    long b = lst[0];\n    \n    for (long i : lst)\n\
    \    {\n        if (i < 0)\n        {\n            a = i;\n        }\n       \
    \ else if (i > 0)\n        {\n            b = i;\n        }\n    }\n    \n   \
    \ result.a = a;\n    result.b = b;\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        if (i < 0) \n        {\n       \
    \     result.a = i;\n            result.b = null;\n        }\n        else if\
    \ (i > 0) \n        {\n            result.a = null;\n            result.b = i;\n\
    \        }\n        else \n        {\n            result.a = null;\n         \
    \   result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n     \
    \   if (i < 0) \n        {\n            result.a = i;\n            result.b =\
    \ null;\n        }\n        else if (i > 0) \n        {\n            result.a\
    \ = null;\n            result.b = i;\n        }\n        else \n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    var max: long = Nullable!(0);\n    var\
    \ min: long = Nullable!(0);\n    var i: long = 0;\n    var j: long = 0;\n    var\
    \ n: long = 0;\n    var k: long = 0;\n    var t: long = 0;\n    var p: long =\
    \ 0;\n    var q: long = 0;\n    var r: long = 0;\n    var s: long = 0;\n    var\
    \ t: long = 0;\n    var u: long = 0;\n    var v: long = 0;\n    var w: long =\
    \ 0;\n    var x: long = 0;\n    var y: long = 0;\n    var z: long = 0;\n    var\
    \ a: long = 0;\n    var b: long = 0;\n    var c: long = 0;\n    var d: long =\
    \ 0;\n    var e: long = 0;\n    var f: long = 0;\n    var g: long = 0;\n    var\
    \ h: long = 0;\n    var i: long = 0;\n    var j: long = 0;\n    var k: long =\
    \ 0;\n    var l: long = 0;\n    var m: long = 0;\n    var n: long = 0;\n    var\
    \ o: long = 0;\n    var p: long = 0;\n    var q: long = 0;\n    var r: long =\
    \ 0;\n    var s: long = 0;\n    var t: long = 0;\n    var u: long = 0;\n    var\
    \ v: long = 0;\n    var w: long = 0;\n    var x: long = 0;\n    var y: long =\
    \ 0;\n    var z: long = 0;\n    var a: long = 0;\n    var b: long = 0;\n    var\
    \ c: long = 0;\n    var d: long = 0;\n    var e: long = 0;\n    var f: long =\
    \ 0;\n    var g: long = 0;\n    var h: long = 0;\n    var i: long = 0;\n    var\
    \ j: long = 0;\n    var k: long = 0;\n    var l: long = 0;\n    var m: long =\
    \ 0;\n    var n: long = 0;\n    var o: long = 0;\n    var p: long = 0;\n    var\
    \ q: long = 0;\n    var r: long = 0;\n    var s: long = 0;\n    var t: long =\
    \ 0;\n    var u: long = 0;\n    var v: long = 0;\n    var w: long = 0;\n    var\
    \ x: long = 0;\n    var y: long = 0;\n    var z: long = 0;\n    var a: long =\
    \ 0;\n    var b: long = 0;\n    var c: long = 0;\n    var d: long = 0;\n    var\
    \ e: long = 0;\n    var f: long = 0;\n    var g: long = 0;\n    var h: long =\
    \ 0;\n    var i: long = 0;\n    var j: long = 0;\n    var k: long = 0;\n    var\
    \ l: long = 0;\n    var m: long = 0;\n    var n: long = 0;\n    var o: long =\
    \ 0;\n    var p: long = 0;\n    var q: long = 0;\n    var r: long = 0;\n    var\
    \ s: long = 0;\n    var t: long = 0;\n    var u: long = 0;\n    var v: long =\
    \ 0;\n    var w: long = 0;\n    var x: long = 0;\n    var y: long = 0;\n", "{\n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if (lst.is_empty)\n\
    \    {\n        result.a = result.b = null;\n        return result;\n    }\n \
    \   \n    long a = lst.min();\n    long b = lst.max();\n    \n    if (a < 0)\n\
    \    {\n        result.a = null;\n        result.b = b;\n    }\n    else\n   \
    \ {\n        result.a = a;\n        result.b = b;\n    }\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) : result) \n    {\n\
    \        if (i < 0) \n        {\n            result.a = i;\n            result.b\
    \ = null;\n        }\n        else if (i > 0) \n        {\n            result.a\
    \ = null;\n            result.b = i;\n        }\n        else \n        {\n  \
    \          result.a = null;\n            result.b = null;\n        }\n    }\n\
    \    \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n           if(i < 0) result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n           else if(i > 0) result = Tuple!(i, i));\n     \
    \      else result = Tuple!(Nullable!(long), Nullable!(long)));\n    \n    return\
    \ result;\n}\n/*", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n\
    \    \n    foreach(i : lst, \n           if(i < 0) \n           {\n          \
    \     result = Tuple!(Nullable!(long), Nullable!(long));\n               break;\n\
    \           }\n           else\n           {\n               result = Tuple!(i,\
    \ i);\n           }\n    );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        if(i.x < 0) \n        {\n      \
    \      result.a = i.x;\n            result.b = i.y;\n        }\n        else if(i.y\
    \ > 0) \n        {\n            result.a = i.y;\n            result.b = i.x;\n\
    \        }\n        else \n        {\n            result.a = null;\n         \
    \   result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n            if(i<0) then\n                result.a = i;\n            else\n\
    \                result.b = i;\n            );\n    \n    return result;\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n            if(i<0) then\n                result.a = i;\n           \
    \ else\n                result.b = i;\n            );\n    \n    return result;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n           if(i<0) then (result.a = i, result.b = null) else (result.a\
    \ = null, result.b = i));\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if (i < 0)\
    \ \n               {\n                   result.a = null;\n                  \
    \ result.b = i;\n               }\n           else \n               {\n      \
    \             result.a = i;\n                   result.b = null;\n           \
    \    }\n           );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n            |x| \n  \
    \          {\n                if((x < 0) || (x > 0)) \n                {\n   \
    \                 result = Tuple!(Nullable!(long), Nullable!(long));\n       \
    \             return;\n                }\n                \n                result\
    \ = Tuple!(i, i);\n            });\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    if (lst.is_empty)\n        return result;\n\
    \    \n    long a = lst.min();\n    long b = lst.max();\n    \n    if (a < 0)\n\
    \        return result;\n    \n    if (b > 0)\n        return result;\n    \n\
    \    result.a = a;\n    result.b = b;\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n            if(i<0) \n\
    \                result.a = i;\n            else\n                result.b = i;\n\
    \            );\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        if (i < 0) \n        {\n       \
    \     result.a = i;\n            result.b = null;\n        }\n        else if\
    \ (i > 0) \n        {\n            result.a = null;\n            result.b = i;\n\
    \        }\n        else \n        {\n            result.a = null;\n         \
    \   result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n            if(i<0) result = Tuple!(Nullable!(long), Nullable!(long));\n \
    \           if(i>0) result = Tuple!(i, Nullable!(long));\n            );\n   \
    \ \n    return result;\n}", "{\n    var max: long;\n    var min: long;\n    var\
    \ i: long;\n    var j: long;\n    var k: long;\n    var t: long;\n    var result:\
    \ Tuple!(Nullable!(long), Nullable!(long));\n    \n    foreach(i <- 0 .. lst.size\
    \ - 1) {\n        foreach(j <- i + 1 .. lst.size) {\n            foreach(k <-\
    \ j + 1 .. lst.size) {\n                foreach(t <- k + 1 .. lst.size) {\n  \
    \                  if(lst[i] < lst[j] && lst[i] < lst[k] && lst[i] < lst[t]) {\n\
    \                        max = lst[i];\n                        min = lst[j];\n\
    \                    } else if(lst[j] < lst[i] && lst[j] < lst[k] && lst[j] <\
    \ lst[t]) {\n                        max = lst[j];\n                        min\
    \ = lst[i];\n                    } else if(lst[k] < lst[i] && lst[k] < lst[j]\
    \ && lst[k] < lst[t]) {\n                        max = lst[k];\n             \
    \           min = lst[i];\n                    } else if(lst[t] < lst[i] && lst[t]\
    \ < lst[j] && lst[t] < lst[k]) {\n                        max = lst[t];\n    \
    \                    min = lst[i];\n                    }\n                }\n\
    \            }\n        }\n    }\n    \n    if(max < min) {\n        return Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    } else {\n        return Tuple!(max, min);\n    }\n}",
  "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i :\
    \ lst, \n            if(i<0) \n            {\n                result.a = i;\n\
    \                result.b = null;\n            }\n            else \n        \
    \    {\n                result.a = null;\n                result.b = i;\n    \
    \        }\n        );\n    \n    return result;\n}", "{\n    var max: long;\n\
    \    var min: long;\n    var i: long;\n    var j: long;\n    var k: long;\n  \
    \  var result: Tuple!(Nullable!(long), Nullable!(long));\n    \n    if (lst.Length\
    \ == 0)\n    {\n        return result;\n    }\n    \n    for (i = 0; i <= lst.Length;\
    \ i++)\n    {\n        max = lst[i];\n        min = lst[i];\n        for (j =\
    \ i; j <= lst.Length; j++)\n        {\n            if (lst[j] < min)\n       \
    \     {\n                min = lst[j];\n            }\n            if (lst[j]\
    \ > max)\n            {\n                max = lst[j];\n            }\n      \
    \  }\n        if (max < 0)\n        {\n            result.Item1 = max;\n     \
    \       result.Item2 = min;\n            return result;\n        }\n        if\
    \ (min > 0)\n        {\n            result.Item1 = max;\n            result.Item2\
    \ = min;\n            return result;\n        }\n    }\n    \n    return null;\n\
    }", "{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) t : Tuple!(Nullable!(long),\
    \ Nullable!(long))) \n    {\n        if (t.f0.isSome() && t.f1.isSome())\n   \
    \     {\n            if (t.f0.get() > t.f1.get())\n            {\n           \
    \     result = t;\n            }\n            else\n            {\n          \
    \      result = t;\n            }\n        }\n        else\n        {\n      \
    \      result = t;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) t : Tuple!(Nullable!(long), Nullable!(long))) \n    {\n   \
    \     if (t.0 == null || t.1 == null) \n        {\n            result.0 = t.0;\n\
    \            result.1 = t.1;\n        }\n        else\n        {\n           \
    \ if (t.0.1 > t.1.1) \n            {\n                result.0 = t.0;\n      \
    \          result.1 = t.1;\n            }\n            else if (t.0.1 < t.1.1)\
    \ \n            {\n                result.0 = t.1;\n                result.1 =\
    \ t.0;\n            }\n            else \n            {\n                result.0\
    \ = t.0;\n                result.1 = t.1;\n            }\n        }\n    }\n \
    \   \n    return result;\n}", "{\n    Tuple!(Nullable!(long), Nullable!(long))\
    \ result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t = largest_smallest_integers(i))\n    {\n        if (t.0 == null)\n       \
    \ {\n            result.0 = null;\n            result.1 = null;\n        }\n \
    \       else\n        {\n            if (t.1 > result.1)\n            {\n    \
    \            result.0 = t.0;\n                result.1 = t.1;\n            }\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        Tuple!(Nullable!(long), Nullable!(long))\
    \ tuple = Tuple!(i, i);\n        \n        if (tuple.a > tuple.b && tuple.a >\
    \ 0)\n        {\n            result.a = tuple.a;\n            result.b = tuple.b;\n\
    \        }\n        else if (tuple.a < tuple.b && tuple.a < 0)\n        {\n  \
    \          result.a = tuple.b;\n            result.b = tuple.a;\n        }\n \
    \       else\n        {\n            result.a = null;\n            result.b =\
    \ null;\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) tuple = \n            Tuple!(Nullable!(long), Nullable!(long))\
    \ (\n                std.math.max(std.math.min(i), std.math.max(i)), \n      \
    \          std.math.min(std.math.max(i), std.math.min(i))\n            )\n   \
    \ ) {\n        result = tuple;\n    }\n    \n    return result;\n}", "{\n    \n\
    \    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    bool isNegative\
    \ = false;\n    bool isPositive = false;\n    long max = 0;\n    long min = 0;\n\
    \    \n    foreach(long i in lst)\n    {\n        if(i < 0)\n        {\n     \
    \       isNegative = true;\n        }\n        if(i > 0)\n        {\n        \
    \    isPositive = true;\n        }\n        if(isNegative && isPositive)\n   \
    \     {\n            max = i;\n            min = i;\n        }\n        else if(isNegative)\n\
    \        {\n            max = i;\n            min = 0;\n        }\n        else\
    \ if(isPositive)\n        {\n            min = 0;\n            max = i;\n    \
    \    }\n    }\n    \n    if(isNegative)\n    {\n        result.a = max;\n    \
    \    result.b = min;\n    }\n    else\n    {\n        result.a = min;\n      \
    \  result.b = max;\n    }\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n           if(i < 0)\
    \ result = Tuple!(Nullable!(long), Nullable!(long));\n           else result =\
    \ Tuple!(i, i));\n    \n    return result;\n}", "{\n    Tuple!(Nullable!(long),\
    \ Nullable!(long)) result;\n    \n    foreach(i : lst, \n        Tuple!(Nullable!(long),\
    \ Nullable!(long)) : result) \n    {\n        if (i < 0) \n        {\n       \
    \     result.a = i;\n            result.b = null;\n        }\n        else if\
    \ (i > 0) \n        {\n            result.a = null;\n            result.b = i;\n\
    \        }\n        else \n        {\n            result.a = null;\n         \
    \   result.b = null;\n        }\n    }\n    \n    return result;\n}", "{\n   \
    \ Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i : lst,\
    \ \n        Tuple!(Nullable!(long), Nullable!(long)) t = largest_smallest_integers(i))\n\
    \    {\n        if (t.0 == null)\n        {\n            result.0 = null;\n  \
    \          result.1 = t.1;\n        }\n        else\n        {\n            if\
    \ (t.1 > result.0)\n            {\n                result.0 = t.0;\n         \
    \       result.1 = t.1;\n            }\n        }\n    }\n    \n    return result;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
