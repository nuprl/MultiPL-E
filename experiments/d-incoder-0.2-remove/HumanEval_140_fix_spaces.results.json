{
  "language": "d",
  "name": "HumanEval_140_fix_spaces",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpax_lp0c7.d(15): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpax_lp0c7.d(23): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(28): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax_lp0c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == \" \")\n            {\n                result += result[i+1];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6oatji6r.d(15): Error: no property `length` for type `string`\n/tmp/tmp6oatji6r.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp6oatji6r.d(19): Error: slice `result` is not mutable\n/tmp/tmp6oatji6r.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp6oatji6r.d(27): Error: no property `length` for type `string`\n/tmp/tmp6oatji6r.d(29): Error: no property `length` for type `string`\n/tmp/tmp6oatji6r.d(31): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp6oatji6r.d(33): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6oatji6r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '_';\n                }\n            }\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '-';\n                }\n            }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8ijkr0xx.d(14): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(19): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(24): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp8ijkr0xx.d(30): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(35): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(40): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ijkr0xx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp401qtzli.d(14): Error: no property `length` for type `string`\n/tmp/tmp401qtzli.d(18): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmp401qtzli.d(21): Error: no property `length` for type `string`\n/tmp/tmp401qtzli.d(26): Error: no property `length` for type `string`\n/tmp/tmp401qtzli.d(28): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp401qtzli.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnrozsc6s.d(269): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrozsc6s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        result = result.substr(0, result.length() - 2);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa4o1xd3t.d(15): Error: no property `length` for type `string`\n/tmp/tmpa4o1xd3t.d(19): Error: slice `result` is not mutable\n/tmp/tmpa4o1xd3t.d(23): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpa4o1xd3t.d(27): Error: no property `length` for type `string`\n/tmp/tmpa4o1xd3t.d(29): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4o1xd3t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string new_text = text;\n            new_text[i] = '_';\n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    new_text = new_text + '_';\n                }\n                else\n                {\n                    new_text = new_text + text[j];\n                }\n            }\n            text = new_text;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmsb2gj2m.d(13): Error: no property `length` for type `string`\n/tmp/tmpmsb2gj2m.d(18): Error: cannot modify `immutable` expression `new_text[cast(ulong)i]`\n/tmp/tmpmsb2gj2m.d(19): Error: no property `length` for type `string`\n/tmp/tmpmsb2gj2m.d(23): Error: incompatible types for `(new_text) + ('_')`: `string` and `char`\n/tmp/tmpmsb2gj2m.d(27): Error: incompatible types for `(new_text) + (text[cast(ulong)j])`: `string` and `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmsb2gj2m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += \"_\";\n        }\n        else if(text[i] == \" \")\n        {\n            result += \"-\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyg9bptnr.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpyg9bptnr.d(19): Error: slice `result` is not mutable\n/tmp/tmpyg9bptnr.d(21): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpyg9bptnr.d(23): Error: slice `result` is not mutable\n/tmp/tmpyg9bptnr.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyg9bptnr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < text.length() && text[j] == ' ')\n            {\n                j++;\n            }\n            string new_text = text.substr(0, i) + \"_\" + text.substr(i, j - i);\n            text = new_text;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < text.length() && text[j] == ' ')\n            {\n                j++;\n            }\n            string new_text = text.substr(0, i) + \"-\" + text.substr(i, j - i);\n            text = new_text;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp329dtv4_.d(14): Error: no property `length` for type `string`\n/tmp/tmp329dtv4_.d(19): Error: no property `length` for type `string`\n/tmp/tmp329dtv4_.d(23): Error: no property `substr` for type `string`\n/tmp/tmp329dtv4_.d(23): Error: no property `substr` for type `string`\n/tmp/tmp329dtv4_.d(28): Error: no property `length` for type `string`\n/tmp/tmp329dtv4_.d(33): Error: no property `length` for type `string`\n/tmp/tmp329dtv4_.d(37): Error: no property `substr` for type `string`\n/tmp/tmp329dtv4_.d(37): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp329dtv4_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result += '-';\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyzek5gjr.d(14): Error: no property `length` for type `string`\n/tmp/tmpyzek5gjr.d(18): Error: slice `result` is not mutable\n/tmp/tmpyzek5gjr.d(22): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpyzek5gjr.d(26): Error: no property `length` for type `string`\n/tmp/tmpyzek5gjr.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyzek5gjr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == \" \")\n            {\n                result += \"-\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpajoxdqu3.d(14): Error: no property `length` for type `string`\n/tmp/tmpajoxdqu3.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpajoxdqu3.d(18): Error: slice `result` is not mutable\n/tmp/tmpajoxdqu3.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpajoxdqu3.d(26): Error: no property `length` for type `string`\n/tmp/tmpajoxdqu3.d(28): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpajoxdqu3.d(30): Error: slice `result` is not mutable\n/tmp/tmpajoxdqu3.d(34): Error: no property `length` for type `string`\n/tmp/tmpajoxdqu3.d(36): Error: no property `length` for type `string`\n/tmp/tmpajoxdqu3.d(38): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpajoxdqu3.d(40): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpajoxdqu3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            for(int j = i + 1; j < result.length(); j++)\n            {\n                if(result[j] == ' ')\n                {\n                    result[j] = '-';\n                }\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works fine for single spaces. But it fails for multiple spaces. For example: \" abc \" becomes \"abc-\". And \" abc \" becomes \"abc-\" when \" abc \" is inputted. Can you please help me fix this?\n<|/ c |>\n<| c |>\nI updated my answer with a new function that should do what you want.\n<|/ c |>\n<| a tags=c++,string,replace |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcyx7thai.d(36): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyx7thai.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxaxx6q4r.d(73): Error: found `unittest` instead of statement\n/tmp/tmpxaxx6q4r.d(83): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxaxx6q4r.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxaxx6q4r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            string temp = text;\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp.replace(text[j], '_');\n                }\n            }\n            \n            text = temp;\n            \n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            string temp = text;\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp.replace(text[j], '-');\n                }\n            }\n            \n            text = temp;\n            \n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1c13eu0g.d(14): Error: no property `length` for type `string`\n/tmp/tmp1c13eu0g.d(21): Error: no property `length` for type `string`\n/tmp/tmp1c13eu0g.d(25): Error: no property `replace` for type `string`\n/tmp/tmp1c13eu0g.d(34): Error: no property `length` for type `string`\n/tmp/tmp1c13eu0g.d(41): Error: no property `length` for type `string`\n/tmp/tmp1c13eu0g.d(45): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1c13eu0g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '_';\n                    \n                }\n            }\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '-';\n                    \n                }\n            }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzfvofjp_.d(14): Error: no property `length` for type `string`\n/tmp/tmpzfvofjp_.d(19): Error: no property `length` for type `string`\n/tmp/tmpzfvofjp_.d(24): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpzfvofjp_.d(31): Error: no property `length` for type `string`\n/tmp/tmpzfvofjp_.d(36): Error: no property `length` for type `string`\n/tmp/tmpzfvofjp_.d(41): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzfvofjp_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n    {\n        char c = text[i];\n        if(c == ' ')\n        {\n            result += \"_\";\n        }\n        else if(c == '\\t')\n        {\n            result += \"-\";\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmgme6nhi.d(15): Error: no property `size` for type `string`\n/tmp/tmpmgme6nhi.d(20): Error: slice `result` is not mutable\n/tmp/tmpmgme6nhi.d(24): Error: slice `result` is not mutable\n/tmp/tmpmgme6nhi.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmgme6nhi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpax_lp0c7.d(15): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpax_lp0c7.d(23): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(28): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax_lp0c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int i = 0; i < text.length(); i++)\n    {\n        if (text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else if (text[i] == \" \" && text[i + 1] == \" \")\n        {\n            result += text[i];\n        }\n        else if (text[i] == \" \" && text[i + 1] != \" \")\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\n/*\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2rgmk8t0.d(33): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2rgmk8t0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi541chm2.d(14): Error: no property `length` for type `string`\n/tmp/tmpi541chm2.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpi541chm2.d(18): Error: slice `result` is not mutable\n/tmp/tmpi541chm2.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpi541chm2.d(26): Error: no property `length` for type `string`\n/tmp/tmpi541chm2.d(28): Error: no property `length` for type `string`\n/tmp/tmpi541chm2.d(30): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi541chm2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i = 0; i < result.size() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpty29mvb6.d(15): Error: no property `size` for type `string`\n/tmp/tmpty29mvb6.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpty29mvb6.d(19): Error: slice `result` is not mutable\n/tmp/tmpty29mvb6.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpty29mvb6.d(27): Error: no property `size` for type `string`\n/tmp/tmpty29mvb6.d(29): Error: no property `size` for type `string`\n/tmp/tmpty29mvb6.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpty29mvb6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            string temp = text;\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    temp = temp.replace(text[j], '_');\n                    \n                    i = j;\n                    break;\n                }\n            }\n            \n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            string temp = text;\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    temp = temp.replace(text[j], '-');\n                    \n                    i = j;\n                    break;\n                }\n            }\n            \n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvtho2zfs.d(14): Error: no property `length` for type `string`\n/tmp/tmpvtho2zfs.d(21): Error: no property `length` for type `string`\n/tmp/tmpvtho2zfs.d(26): Error: no property `replace` for type `string`\n/tmp/tmpvtho2zfs.d(37): Error: no property `length` for type `string`\n/tmp/tmpvtho2zfs.d(44): Error: no property `length` for type `string`\n/tmp/tmpvtho2zfs.d(49): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvtho2zfs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxaxx6q4r.d(73): Error: found `unittest` instead of statement\n/tmp/tmpxaxx6q4r.d(83): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxaxx6q4r.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxaxx6q4r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            result = result.substr(0, i) + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqcvu9_zs.d(15): Error: no property `length` for type `string`\n/tmp/tmpqcvu9_zs.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpqcvu9_zs.d(19): Error: slice `result` is not mutable\n/tmp/tmpqcvu9_zs.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpqcvu9_zs.d(27): Error: no property `length` for type `string`\n/tmp/tmpqcvu9_zs.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpqcvu9_zs.d(31): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcvu9_zs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '_';\n                    \n                }\n            }\n            \n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '-';\n                    \n                }\n            }\n            \n        }\n    }\n    \n    return text;\n    \n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8yc6o2na.d(14): Error: no property `length` for type `string`\n/tmp/tmp8yc6o2na.d(19): Error: no property `length` for type `string`\n/tmp/tmp8yc6o2na.d(24): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp8yc6o2na.d(32): Error: no property `length` for type `string`\n/tmp/tmp8yc6o2na.d(37): Error: no property `length` for type `string`\n/tmp/tmp8yc6o2na.d(42): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8yc6o2na.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += \"_\";\n        }\n        else if(text[i] == \" \")\n        {\n            result += \"-\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp83tm0msq.d(18): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp83tm0msq.d(20): Error: slice `result` is not mutable\n/tmp/tmp83tm0msq.d(22): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp83tm0msq.d(24): Error: slice `result` is not mutable\n/tmp/tmp83tm0msq.d(28): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp83tm0msq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm9ey1n2x.d(14): Error: no property `size` for type `string`\n/tmp/tmpm9ey1n2x.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpm9ey1n2x.d(18): Error: slice `result` is not mutable\n/tmp/tmpm9ey1n2x.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpm9ey1n2x.d(26): Error: no property `size` for type `string`\n/tmp/tmpm9ey1n2x.d(28): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpm9ey1n2x.d(30): Error: slice `result` is not mutable\n/tmp/tmpm9ey1n2x.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9ey1n2x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,string,replace |>\n<| a tags=c++,string,replace |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvsm6_vy1.d(38): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvsm6_vy1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1r2bem08.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp1r2bem08.d(19): Error: slice `result` is not mutable\n/tmp/tmp1r2bem08.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp1r2bem08.d(29): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp1r2bem08.d(31): Error: slice `result` is not mutable\n/tmp/tmp1r2bem08.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1r2bem08.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            for(int j = i + 1; j < result.length(); j++)\n            {\n                if(result[j] == ' ')\n                {\n                    result[j] = '-';\n                }\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string,replace,algorithm |>\n<| c |>\nThis doesn't work if the string has more than 2 consecutive spaces.\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you give an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work if there are more than 2 consecutive spaces in the string. Try this: \"a b c d e f g h i j k l m n o p q r s t u v w x y z\".\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you give an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work if there are more than 2 consecutive spaces in the string. Try this: \"a b c d e f g h i j k l m n o p q r s t u v w x y z\".\n<|/ c |>\n<| a tags=c++,string,replace,algorithm |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzy1aj9c7.d(36): Error: declaration expected, not `<`\n/tmp/tmpzy1aj9c7.d(39): Error: unterminated character constant\n/tmp/tmpzy1aj9c7.d(42): Error: unterminated character constant\n/tmp/tmpzy1aj9c7.d(45): Error: unterminated character constant\n/tmp/tmpzy1aj9c7.d(48): Error: unterminated character constant\n/tmp/tmpzy1aj9c7.d(51): Error: unterminated character constant\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzy1aj9c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text[i];\n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp + text[j];\n                    i = j;\n                    break;\n                }\n                else\n                {\n                    temp = temp + text[j];\n                }\n            }\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text[i];\n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp + text[j];\n                    i = j;\n                    break;\n                }\n                else\n                {\n                    temp = temp + text[j];\n                }\n            }\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text[i];\n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp + text[j];\n                    i = j;\n                    break;\n                }\n                else\n                {\n                    temp = temp + text[j];\n                }\n            }\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text[i];\n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp + text[j];\n                    i = j;\n                    break;\n                }\n                else\n                {\n                    temp = temp + text[j];\n                }\n            }\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text[i];\n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp + text[j];\n                    i = j;\n                    break;\n                }\n                else\n                {\n                    temp = temp + text[j];\n                }\n            }\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text[i];\n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp + text[j];\n                    i = j;\n                    break;\n                }\n                \nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2cztderz.d(138): Error: found `unittest` instead of statement\n/tmp/tmp2cztderz.d(148): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2cztderz.d(148): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp2cztderz.d(148): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2cztderz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvr1mzgz8.d(15): Error: no property `length` for type `string`\n/tmp/tmpvr1mzgz8.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpvr1mzgz8.d(19): Error: slice `result` is not mutable\n/tmp/tmpvr1mzgz8.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpvr1mzgz8.d(27): Error: no property `length` for type `string`\n/tmp/tmpvr1mzgz8.d(29): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpvr1mzgz8.d(31): Error: slice `result` is not mutable\n/tmp/tmpvr1mzgz8.d(35): Error: incompatible types for `(text[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvr1mzgz8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxaxx6q4r.d(73): Error: found `unittest` instead of statement\n/tmp/tmpxaxx6q4r.d(83): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxaxx6q4r.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxaxx6q4r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        \n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0wzb0rys.d(16): Error: no property `length` for type `string`\n/tmp/tmp0wzb0rys.d(19): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp0wzb0rys.d(21): Error: slice `result` is not mutable\n/tmp/tmp0wzb0rys.d(23): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp0wzb0rys.d(25): Error: slice `result` is not mutable\n/tmp/tmp0wzb0rys.d(29): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wzb0rys.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string s = \"\";\n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    s += \"-\";\n                }\n                else\n                {\n                    s += text[j];\n                }\n            }\n            text = s;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu7h_cuvp.d(14): Error: no property `length` for type `string`\n/tmp/tmpu7h_cuvp.d(19): Error: no property `length` for type `string`\n/tmp/tmpu7h_cuvp.d(23): Error: slice `s` is not mutable\n/tmp/tmpu7h_cuvp.d(27): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu7h_cuvp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == \" \")\n            {\n                result[i] = \"-\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1pw96hdt.d(15): Error: no property `length` for type `string`\n/tmp/tmp1pw96hdt.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp1pw96hdt.d(19): Error: slice `result` is not mutable\n/tmp/tmp1pw96hdt.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp1pw96hdt.d(27): Error: no property `length` for type `string`\n/tmp/tmp1pw96hdt.d(29): Error: no property `length` for type `string`\n/tmp/tmp1pw96hdt.d(31): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp1pw96hdt.d(33): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1pw96hdt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,string,replace,algorithm |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp114moy9o.d(35): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp114moy9o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfp5cch81.d(16): Error: no property `length` for type `string`\n/tmp/tmpfp5cch81.d(18): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpfp5cch81.d(20): Error: slice `result` is not mutable\n/tmp/tmpfp5cch81.d(24): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpfp5cch81.d(28): Error: no property `length` for type `string`\n/tmp/tmpfp5cch81.d(30): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpfp5cch81.d(32): Error: slice `result` is not mutable\n/tmp/tmpfp5cch81.d(36): Error: incompatible types for `(text[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfp5cch81.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size() > 2)\n    {\n        result = result.substr(0, result.size() - 2);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8e5pax6t.d(14): Error: no property `size` for type `string`\n/tmp/tmp8e5pax6t.d(18): Error: slice `result` is not mutable\n/tmp/tmp8e5pax6t.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp8e5pax6t.d(26): Error: no property `size` for type `string`\n/tmp/tmp8e5pax6t.d(28): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8e5pax6t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    int spaces = 0;\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            spaces++;\n        }\n        else\n        {\n            if(spaces > 2)\n            {\n                result += \"-\";\n            }\n            else\n            {\n                result += result[i];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4mvp_p44.d(14): Error: no property `length` for type `string`\n/tmp/tmp4mvp_p44.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp4mvp_p44.d(18): Error: slice `result` is not mutable\n/tmp/tmp4mvp_p44.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp4mvp_p44.d(27): Error: no property `length` for type `string`\n/tmp/tmp4mvp_p44.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp4mvp_p44.d(37): Error: slice `result` is not mutable\n/tmp/tmp4mvp_p44.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4mvp_p44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp90ki3qje.d(14): Error: no property `length` for type `string`\n/tmp/tmp90ki3qje.d(19): Error: no property `replace` for type `string`\n/tmp/tmp90ki3qje.d(24): Error: no property `length` for type `string`\n/tmp/tmp90ki3qje.d(29): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90ki3qje.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpeg0jkef8.d(14): Error: no property `length` for type `string`\n/tmp/tmpeg0jkef8.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpeg0jkef8.d(18): Error: slice `result` is not mutable\n/tmp/tmpeg0jkef8.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpeg0jkef8.d(26): Error: no property `length` for type `string`\n/tmp/tmpeg0jkef8.d(28): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpeg0jkef8.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeg0jkef8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '_';\n                }\n            }\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '-';\n                }\n            }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8ijkr0xx.d(14): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(19): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(24): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp8ijkr0xx.d(30): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(35): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(40): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ijkr0xx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result += result[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == ' ')\n            {\n                result += result[i];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvfjdtrj0.d(15): Error: no property `length` for type `string`\n/tmp/tmpvfjdtrj0.d(19): Error: slice `result` is not mutable\n/tmp/tmpvfjdtrj0.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpvfjdtrj0.d(27): Error: no property `length` for type `string`\n/tmp/tmpvfjdtrj0.d(31): Error: slice `result` is not mutable\n/tmp/tmpvfjdtrj0.d(35): Error: no property `length` for type `string`\n/tmp/tmpvfjdtrj0.d(37): Error: no property `length` for type `string`\n/tmp/tmpvfjdtrj0.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvfjdtrj0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    \n    if(text.find(\"  \")!=string::npos)\n    {\n        string temp = text;\n        temp = temp.replace(\"  \", \"_\");\n        text = temp;\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc4itbewp.d(24): Error: found `:` when expecting `)`\n/tmp/tmpc4itbewp.d(24): Error: found `:` instead of statement\n/tmp/tmpc4itbewp.d(30): Error: declaration expected, not `return`\n/tmp/tmpc4itbewp.d(31): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc4itbewp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '-';\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgqcj6z3d.d(15): Error: no property `length` for type `string`\n/tmp/tmpgqcj6z3d.d(19): Error: slice `result` is not mutable\n/tmp/tmpgqcj6z3d.d(23): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpgqcj6z3d.d(27): Error: no property `length` for type `string`\n/tmp/tmpgqcj6z3d.d(31): Error: slice `result` is not mutable\n/tmp/tmpgqcj6z3d.d(35): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 45)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgqcj6z3d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpocv68d5y.d(15): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(19): Error: slice `result` is not mutable\n/tmp/tmpocv68d5y.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(27): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(29): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocv68d5y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    return text;\n}\n/*\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpueehey_7.d(25): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpueehey_7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i < result.size(); ++i)\n    {\n        if(result[i] == ' ')\n        {\n            result += '-';\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp712we5dz.d(15): Error: no property `size` for type `string`\n/tmp/tmp712we5dz.d(19): Error: slice `result` is not mutable\n/tmp/tmp712we5dz.d(23): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmp712we5dz.d(27): Error: no property `size` for type `string`\n/tmp/tmp712we5dz.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp712we5dz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '_';\n                }\n            }\n            \n            i = j;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '-';\n                }\n            }\n            \n            i = j;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvnbcd5bu.d(14): Error: no property `length` for type `string`\n/tmp/tmpvnbcd5bu.d(19): Error: no property `length` for type `string`\n/tmp/tmpvnbcd5bu.d(24): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpvnbcd5bu.d(28): Error: undefined identifier `j`\n/tmp/tmpvnbcd5bu.d(32): Error: no property `length` for type `string`\n/tmp/tmpvnbcd5bu.d(37): Error: no property `length` for type `string`\n/tmp/tmpvnbcd5bu.d(42): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpvnbcd5bu.d(46): Error: undefined identifier `j`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvnbcd5bu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        string temp = result;\n        result = \"\";\n        for(int i = 0; i < temp.length(); i++)\n        {\n            if(temp[i] == ' ')\n            {\n                result += \"-\";\n            }\n            else\n            {\n                result += temp[i];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3ur9k0ad.d(14): Error: no property `length` for type `string`\n/tmp/tmp3ur9k0ad.d(18): Error: slice `result` is not mutable\n/tmp/tmp3ur9k0ad.d(22): Error: slice `result` is not mutable\n/tmp/tmp3ur9k0ad.d(26): Error: no property `length` for type `string`\n/tmp/tmp3ur9k0ad.d(30): Error: no property `length` for type `string`\n/tmp/tmp3ur9k0ad.d(34): Error: slice `result` is not mutable\n/tmp/tmp3ur9k0ad.d(38): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ur9k0ad.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0vu2h5nz.d(16): Error: no property `length` for type `string`\n/tmp/tmp0vu2h5nz.d(18): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp0vu2h5nz.d(20): Error: slice `result` is not mutable\n/tmp/tmp0vu2h5nz.d(24): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp0vu2h5nz.d(28): Error: no property `length` for type `string`\n/tmp/tmp0vu2h5nz.d(30): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp0vu2h5nz.d(32): Error: slice `result` is not mutable\n/tmp/tmp0vu2h5nz.d(36): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vu2h5nz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi541chm2.d(14): Error: no property `length` for type `string`\n/tmp/tmpi541chm2.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpi541chm2.d(18): Error: slice `result` is not mutable\n/tmp/tmpi541chm2.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpi541chm2.d(26): Error: no property `length` for type `string`\n/tmp/tmpi541chm2.d(28): Error: no property `length` for type `string`\n/tmp/tmpi541chm2.d(30): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi541chm2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpocv68d5y.d(15): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(19): Error: slice `result` is not mutable\n/tmp/tmpocv68d5y.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(27): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(29): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocv68d5y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            text = temp;\n        }\n    }\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            text = temp;\n        }\n    }\n    return text;\n}\n/*\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph0hia_87.d(33): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph0hia_87.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa1xgfaf0.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpa1xgfaf0.d(19): Error: slice `result` is not mutable\n/tmp/tmpa1xgfaf0.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpa1xgfaf0.d(27): Error: no property `length` for type `string`\n/tmp/tmpa1xgfaf0.d(29): Error: no property `length` for type `string`\n/tmp/tmpa1xgfaf0.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1xgfaf0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpocv68d5y.d(15): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(19): Error: slice `result` is not mutable\n/tmp/tmpocv68d5y.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(27): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(29): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocv68d5y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpax_lp0c7.d(15): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpax_lp0c7.d(23): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(28): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax_lp0c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string s = \"\";\n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    s += \"_\";\n                }\n                else\n                {\n                    s += text[j];\n                }\n            }\n            text = s;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string s = \"\";\n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    s += \"-\";\n                }\n                else\n                {\n                    s += text[j];\n                }\n            }\n            text = s;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbslti73d.d(14): Error: no property `length` for type `string`\n/tmp/tmpbslti73d.d(19): Error: no property `length` for type `string`\n/tmp/tmpbslti73d.d(23): Error: slice `s` is not mutable\n/tmp/tmpbslti73d.d(27): Error: slice `s` is not mutable\n/tmp/tmpbslti73d.d(34): Error: no property `length` for type `string`\n/tmp/tmpbslti73d.d(39): Error: no property `length` for type `string`\n/tmp/tmpbslti73d.d(43): Error: slice `s` is not mutable\n/tmp/tmpbslti73d.d(47): Error: slice `s` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbslti73d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpax_lp0c7.d(15): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpax_lp0c7.d(23): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(28): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax_lp0c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == \" \")\n            {\n                result[i] = \"-\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp17_xe08p.d(14): Error: no property `length` for type `string`\n/tmp/tmp17_xe08p.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp17_xe08p.d(18): Error: slice `result` is not mutable\n/tmp/tmp17_xe08p.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp17_xe08p.d(26): Error: no property `length` for type `string`\n/tmp/tmp17_xe08p.d(28): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp17_xe08p.d(30): Error: slice `result` is not mutable\n/tmp/tmp17_xe08p.d(34): Error: no property `length` for type `string`\n/tmp/tmp17_xe08p.d(36): Error: no property `length` for type `string`\n/tmp/tmp17_xe08p.d(38): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp17_xe08p.d(40): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp17_xe08",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n            result[i] = result[i] + '-';\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp43ovy7cw.d(19): Error: slice `result` is not mutable\n/tmp/tmp43ovy7cw.d(23): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmp43ovy7cw.d(27): Error: no property `length` for type `string`\n/tmp/tmp43ovy7cw.d(29): Error: no property `length` for type `string`\n/tmp/tmp43ovy7cw.d(31): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43ovy7cw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    int spaces = 0;\n    for(int i = 0; i < result.size(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            spaces++;\n        }\n        else\n        {\n            if(spaces > 1)\n            {\n                result += \"-\";\n            }\n            spaces = 0;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzhe8z1ot.d(14): Error: no property `size` for type `string`\n/tmp/tmpzhe8z1ot.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpzhe8z1ot.d(18): Error: slice `result` is not mutable\n/tmp/tmpzhe8z1ot.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpzhe8z1ot.d(27): Error: no property `size` for type `string`\n/tmp/tmpzhe8z1ot.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpzhe8z1ot.d(37): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzhe8z1ot.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpocv68d5y.d(15): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(19): Error: slice `result` is not mutable\n/tmp/tmpocv68d5y.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(27): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(29): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocv68d5y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += \"_\";\n        }\n        else if(text[i] == \" \")\n        {\n            result += \"-\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpks9_dwwm.d(15): Error: no property `length` for type `string`\n/tmp/tmpks9_dwwm.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpks9_dwwm.d(19): Error: slice `result` is not mutable\n/tmp/tmpks9_dwwm.d(21): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpks9_dwwm.d(23): Error: slice `result` is not mutable\n/tmp/tmpks9_dwwm.d(27): Error: slice `result` is not mutable\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    int len = text.length();\n    \n    for (int i = 0; i < len; i++)\n    {\n        if (text[i] == ' ')\n        {\n            result += \"_\";\n        }\n        else if (text[i] == ' ')\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++,replace |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1phdaefr.d(31): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1phdaefr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw57u879x.d(15): Error: no property `length` for type `string`\n/tmp/tmpw57u879x.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(19): Error: slice `result` is not mutable\n/tmp/tmpw57u879x.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(27): Error: no property `length` for type `string`\n/tmp/tmpw57u879x.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw57u879x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpax_lp0c7.d(15): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpax_lp0c7.d(23): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(28): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax_lp0c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy61u7r8l.d(13): Error: no property `length` for type `string`\n/tmp/tmpy61u7r8l.d(18): Error: no property `replace` for type `string`\n/tmp/tmpy61u7r8l.d(19): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy61u7r8l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa1xgfaf0.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpa1xgfaf0.d(19): Error: slice `result` is not mutable\n/tmp/tmpa1xgfaf0.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpa1xgfaf0.d(27): Error: no property `length` for type `string`\n/tmp/tmpa1xgfaf0.d(29): Error: no property `length` for type `string`\n/tmp/tmpa1xgfaf0.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1xgfaf0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n        else if(result.length() > 2 && result[i] == ' ' && result[i+1] == ' ')\n        {\n            result[i] = '-';\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpod75085g.d(15): Error: no property `length` for type `string`\n/tmp/tmpod75085g.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpod75085g.d(21): Error: no property `length` for type `string`\n/tmp/tmpod75085g.d(23): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpod75085g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            int j = i;\n            while(j < text.length() && text[j] == ' ')\n            {\n                j++;\n            }\n            \n            string sub = text.substr(i, j - i);\n            \n            string sub2 = \"\";\n            \n            for(int k = 0; k < sub.length(); k++)\n            {\n                if(sub[k] == ' ')\n                {\n                    sub2 += \"-\";\n                }\n                else\n                {\n                    sub2 += sub[k];\n                }\n            }\n            \n            text = text.substr(0, i) + sub2 + text.substr(j + 1);\n            \n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw0llhon3.d(14): Error: no property `length` for type `string`\n/tmp/tmpw0llhon3.d(20): Error: no property `length` for type `string`\n/tmp/tmpw0llhon3.d(25): Error: no property `substr` for type `string`\n/tmp/tmpw0llhon3.d(29): Error: no property `length` for type `string`\n/tmp/tmpw0llhon3.d(33): Error: slice `sub2` is not mutable\n/tmp/tmpw0llhon3.d(37): Error: slice `sub2` is not mutable\n/tmp/tmpw0llhon3.d(41): Error: no property `substr` for type `string`\n/tmp/tmpw0llhon3.d(41): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0llhon3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    int len = text.length();\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            string temp = text;\n            \n            int j = i;\n            \n            while(j > 0 && text[j - 1] == ' ')\n            {\n                j--;\n            }\n            \n            int k = j;\n            \n            while(k < (len - 1) && text[k + 1] == ' ')\n            {\n                k++;\n            }\n            \n            string temp2 = text.substr(j, k - j);\n            \n            text = temp + temp2;\n            \n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy_tz9eqh.d(14): Error: no property `length` for type `string`\n/tmp/tmpy_tz9eqh.d(37): Error: no property `substr` for type `string`\n/tmp/tmpy_tz9eqh.d(39): Error: invalid array operation `temp + temp2` (possible missing [])\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_tz9eqh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == \" \")\n            {\n                result += \"-\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjobko22x.d(15): Error: no property `length` for type `string`\n/tmp/tmpjobko22x.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpjobko22x.d(19): Error: slice `result` is not mutable\n/tmp/tmpjobko22x.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpjobko22x.d(27): Error: no property `length` for type `string`\n/tmp/tmpjobko22x.d(29): Error: no property `length` for type `string`\n/tmp/tmpjobko22x.d(31): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpjobko22x.d(33): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjobko22x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpax_lp0c7.d(15): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpax_lp0c7.d(23): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(28): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax_lp0c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            temp = temp.replace(\" \", \"-\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmrzyblad.d(14): Error: no property `length` for type `string`\n/tmp/tmpmrzyblad.d(19): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(20): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(25): Error: no property `length` for type `string`\n/tmp/tmpmrzyblad.d(30): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrzyblad.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy61u7r8l.d(13): Error: no property `length` for type `string`\n/tmp/tmpy61u7r8l.d(18): Error: no property `replace` for type `string`\n/tmp/tmpy61u7r8l.d(19): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy61u7r8l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == ' ')\n        {\n            string new_text = \"\";\n            for(int j = i; j < text.size(); ++j)\n            {\n                if(text[j] == ' ')\n                {\n                    new_text += \"_\";\n                }\n                else\n                {\n                    new_text += text[j];\n                }\n            }\n            text = new_text;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0t_obyve.d(13): Error: no property `size` for type `string`\n/tmp/tmp0t_obyve.d(18): Error: no property `size` for type `string`\n/tmp/tmp0t_obyve.d(22): Error: slice `new_text` is not mutable\n/tmp/tmp0t_obyve.d(26): Error: slice `new_text` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0t_obyve.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpld2cy53n.d(16): Error: no property `length` for type `string`\n/tmp/tmpld2cy53n.d(18): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpld2cy53n.d(20): Error: slice `result` is not mutable\n/tmp/tmpld2cy53n.d(24): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpld2cy53n.d(28): Error: no property `length` for type `string`\n/tmp/tmpld2cy53n.d(30): Error: no property `length` for type `string`\n/tmp/tmpld2cy53n.d(32): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpld2cy53n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy61u7r8l.d(13): Error: no property `length` for type `string`\n/tmp/tmpy61u7r8l.d(18): Error: no property `replace` for type `string`\n/tmp/tmpy61u7r8l.d(19): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy61u7r8l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result.at(i) == \" \")\n        {\n            result += result.at(i + 1);\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            if(result.at(i) == \" \" && result.at(i + 1) == \" \")\n            {\n                result += result.at(i + 2);\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxyp4aps5.d(15): Error: no property `length` for type `string`\n/tmp/tmpxyp4aps5.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpxyp4aps5.d(19): Error: slice `result` is not mutable\n/tmp/tmpxyp4aps5.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpxyp4aps5.d(27): Error: no property `length` for type `string`\n/tmp/tmpxyp4aps5.d(29): Error: no property `at` for type `string`\n/tmp/tmpxyp4aps5.d(31): Error: no property `at` for type `string`\n/tmp/tmpxyp4aps5.d(35): Error: no property `length` for type `string`\n/tmp/tmpxyp4aps5.d(37): Error: no property `length` for type `string`\n/tmp/tmpxyp4aps5.d(39): Error: no property `at` for type `string`\n/tmp/tmpxyp4aps5.d(39): Error: no property `at` for type `string`\n/tmp/tmpxyp4aps5.d(41): Error: no property `at` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxyp4aps5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy61u7r8l.d(13): Error: no property `length` for type `string`\n/tmp/tmpy61u7r8l.d(18): Error: no property `replace` for type `string`\n/tmp/tmpy61u7r8l.d(19): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy61u7r8l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy61u7r8l.d(13): Error: no property `length` for type `string`\n/tmp/tmpy61u7r8l.d(18): Error: no property `replace` for type `string`\n/tmp/tmpy61u7r8l.d(19): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy61u7r8l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length() - 1; i++)\n    {\n        if(text[i] == \" \" && text[i + 1] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ish7ofb.d(15): Error: no property `length` for type `string`\n/tmp/tmp7ish7ofb.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp7ish7ofb.d(19): Error: slice `result` is not mutable\n/tmp/tmp7ish7ofb.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp7ish7ofb.d(27): Error: no property `length` for type `string`\n/tmp/tmp7ish7ofb.d(29): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp7ish7ofb.d(29): Error: incompatible types for `(text[cast(ulong)(i + 1)]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp7ish7ofb.d(31): Error: slice `result` is not mutable\n/tmp/tmp7ish7ofb.d(35): Error: incompatible types for `(text[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ish7ofb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += \"_\";\n        }\n        else if(text[i] == \" \" && text[i+1] == \" \")\n        {\n            result += \"-\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi9vca0pb.d(14): Error: no property `length` for type `string`\n/tmp/tmpi9vca0pb.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpi9vca0pb.d(18): Error: slice `result` is not mutable\n/tmp/tmpi9vca0pb.d(20): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpi9vca0pb.d(20): Error: incompatible types for `(text[cast(ulong)(i + 1)]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpi9vca0pb.d(22): Error: slice `result` is not mutable\n/tmp/tmpi9vca0pb.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9vca0pb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpepz4mwvd.d(19): Error: slice `result` is not mutable\n/tmp/tmpepz4mwvd.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpepz4mwvd.d(31): Error: slice `result` is not mutable\n/tmp/tmpepz4mwvd.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpepz4mwvd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpax_lp0c7.d(15): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpax_lp0c7.d(23): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(28): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax_lp0c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    for(int i = 0; i < result.size(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n        if(result[i] == ' ' && result[i+1] == ' ')\n        {\n            result[i] = '-';\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprhwb1kfu.d(14): Error: no property `size` for type `string`\n/tmp/tmprhwb1kfu.d(18): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmprhwb1kfu.d(22): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhwb1kfu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpln7rzsxl.d(19): Error: slice `result` is not mutable\n/tmp/tmpln7rzsxl.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpln7rzsxl.d(31): Error: slice `result` is not mutable\n/tmp/tmpln7rzsxl.d(35): Error: incompatible types for `(text[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpln7rzsxl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            string temp = text;\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    temp = temp + text[j];\n                    \n                    for(int k = j; k < text.length(); k++)\n                    {\n                        if(text[k] == ' ')\n                        {\n                            temp = temp + text[k];\n                        }\n                    }\n                    \n                    temp = temp + \" \";\n                    \n                    i = j;\n                }\n            }\n            \n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4gr7wi1h.d(14): Error: no property `length` for type `string`\n/tmp/tmp4gr7wi1h.d(21): Error: no property `length` for type `string`\n/tmp/tmp4gr7wi1h.d(26): Error: incompatible types for `(temp) + (text[cast(ulong)j])`: `string` and `immutable(char)`\n/tmp/tmp4gr7wi1h.d(28): Error: no property `length` for type `string`\n/tmp/tmp4gr7wi1h.d(32): Error: incompatible types for `(temp) + (text[cast(ulong)k])`: `string` and `immutable(char)`\n/tmp/tmp4gr7wi1h.d(36): Error: invalid array operation `temp + \" \"` (possible missing [])\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4gr7wi1h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps5i0jfuk.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmps5i0jfuk.d(19): Error: slice `result` is not mutable\n/tmp/tmps5i0jfuk.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmps5i0jfuk.d(29): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmps5i0jfuk.d(31): Error: slice `result` is not mutable\n/tmp/tmps5i0jfuk.d(35): Error: incompatible types for `(text[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps5i0jfuk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result += '-';\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppfls0gfw.d(15): Error: no property `length` for type `string`\n/tmp/tmppfls0gfw.d(19): Error: slice `result` is not mutable\n/tmp/tmppfls0gfw.d(23): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmppfls0gfw.d(27): Error: no property `length` for type `string`\n/tmp/tmppfls0gfw.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfls0gfw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpax_lp0c7.d(15): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpax_lp0c7.d(23): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(28): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax_lp0c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp06w6k53i.d(18): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp06w6k53i.d(20): Error: slice `result` is not mutable\n/tmp/tmp06w6k53i.d(24): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp06w6k53i.d(30): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp06w6k53i.d(32): Error: slice `result` is not mutable\n/tmp/tmp06w6k53i.d(36): Error: incompatible types for `(text[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06w6k53i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '_';\n                }\n            }\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '-';\n                }\n            }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8ijkr0xx.d(14): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(19): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(24): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp8ijkr0xx.d(30): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(35): Error: no property `length` for type `string`\n/tmp/tmp8ijkr0xx.d(40): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ijkr0xx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    int count = 0;\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            count++;\n        }\n        else\n        {\n            if(count > 1)\n            {\n                result += '-';\n            }\n            result += text[i];\n            count = 0;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpybnbimm7.d(15): Error: no property `length` for type `string`\n/tmp/tmpybnbimm7.d(19): Error: slice `result` is not mutable\n/tmp/tmpybnbimm7.d(23): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmpybnbimm7.d(28): Error: no property `length` for type `string`\n/tmp/tmpybnbimm7.d(38): Error: slice `result` is not mutable\n/tmp/tmpybnbimm7.d(40): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybnbimm7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp581je5g1.d(14): Error: no property `length` for type `string`\n/tmp/tmp581je5g1.d(18): Error: slice `result` is not mutable\n/tmp/tmp581je5g1.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp581je5g1.d(26): Error: no property `length` for type `string`\n/tmp/tmp581je5g1.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp581je5g1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"-\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqsjgr834.d(14): Error: no property `length` for type `string`\n/tmp/tmpqsjgr834.d(19): Error: no property `replace` for type `string`\n/tmp/tmpqsjgr834.d(20): Error: no property `replace` for type `string`\n/tmp/tmpqsjgr834.d(25): Error: no property `length` for type `string`\n/tmp/tmpqsjgr834.d(30): Error: no property `replace` for type `string`\n/tmp/tmpqsjgr834.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqsjgr834.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"-\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqsjgr834.d(14): Error: no property `length` for type `string`\n/tmp/tmpqsjgr834.d(19): Error: no property `replace` for type `string`\n/tmp/tmpqsjgr834.d(20): Error: no property `replace` for type `string`\n/tmp/tmpqsjgr834.d(25): Error: no property `length` for type `string`\n/tmp/tmpqsjgr834.d(30): Error: no property `replace` for type `string`\n/tmp/tmpqsjgr834.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqsjgr834.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    int len = text.length();\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < len; j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '_';\n                    \n                    for(int k = j + 1; k < len; k++)\n                    {\n                        if(text[k] == ' ')\n                        {\n                            \n                            text[k] = '-';\n                            \n                        }\n                    }\n                    \n                }\n            }\n            \n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdyr9dhpo.d(14): Error: no property `length` for type `string`\n/tmp/tmpdyr9dhpo.d(26): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpdyr9dhpo.d(33): Error: cannot modify `immutable` expression `text[cast(ulong)k]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdyr9dhpo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpocv68d5y.d(15): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(19): Error: slice `result` is not mutable\n/tmp/tmpocv68d5y.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(27): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(29): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocv68d5y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxaxx6q4r.d(73): Error: found `unittest` instead of statement\n/tmp/tmpxaxx6q4r.d(83): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpxaxx6q4r.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxaxx6q4r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwmsx1t0i.d(14): Error: no property `length` for type `string`\n/tmp/tmpwmsx1t0i.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpwmsx1t0i.d(18): Error: slice `result` is not mutable\n/tmp/tmpwmsx1t0i.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpwmsx1t0i.d(25): Error: no property `length` for type `string`\n/tmp/tmpwmsx1t0i.d(27): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpwmsx1t0i.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwmsx1t0i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result.at(i) == \" \")\n            {\n                result.at(i) = \"-\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprhgx6492.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmprhgx6492.d(19): Error: slice `result` is not mutable\n/tmp/tmprhgx6492.d(23): Error: slice `result` is not mutable\n/tmp/tmprhgx6492.d(27): Error: no property `length` for type `string`\n/tmp/tmprhgx6492.d(29): Error: no property `length` for type `string`\n/tmp/tmprhgx6492.d(31): Error: no property `at` for type `string`\n/tmp/tmprhgx6492.d(33): Error: no property `at` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhgx6492.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length() - 1; i++)\n    {\n        if(text[i] == \" \" && text[i + 1] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu6rcjq_2.d(14): Error: no property `length` for type `string`\n/tmp/tmpu6rcjq_2.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpu6rcjq_2.d(18): Error: slice `result` is not mutable\n/tmp/tmpu6rcjq_2.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpu6rcjq_2.d(26): Error: no property `length` for type `string`\n/tmp/tmpu6rcjq_2.d(28): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpu6rcjq_2.d(28): Error: incompatible types for `(text[cast(ulong)(i + 1)]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpu6rcjq_2.d(30): Error: slice `result` is not mutable\n/tmp/tmpu6rcjq_2.d(34): Error: incompatible types for `(text[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu6rcjq_2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1r2bem08.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp1r2bem08.d(19): Error: slice `result` is not mutable\n/tmp/tmp1r2bem08.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp1r2bem08.d(29): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp1r2bem08.d(31): Error: slice `result` is not mutable\n/tmp/tmp1r2bem08.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1r2bem08.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length; i++)\n    {\n        if(result[i] == '_')\n        {\n            result += '-';\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8w5611i3.d(19): Error: slice `result` is not mutable\n/tmp/tmp8w5611i3.d(23): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmp8w5611i3.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8w5611i3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int i = 0; i < text.length; ++i)\n    {\n        char c = text[i];\n        \n        if (c == ' ')\n        {\n            result += \"_\";\n        }\n        else if (c != ' ')\n        {\n            result += c;\n        }\n    }\n    \n    if (result.length() > 2)\n    {\n        result = result.substr(0, result.length() - 2);\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2l4qrctt.d(21): Error: slice `result` is not mutable\n/tmp/tmp2l4qrctt.d(25): Error: slice `result` is not mutable\n/tmp/tmp2l4qrctt.d(29): Error: no property `length` for type `string`\n/tmp/tmp2l4qrctt.d(31): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2l4qrctt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); ++i)\n    {\n        if(result.at(i) == \" \")\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqc1i6pb8.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpqc1i6pb8.d(19): Error: slice `result` is not mutable\n/tmp/tmpqc1i6pb8.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpqc1i6pb8.d(27): Error: no property `length` for type `string`\n/tmp/tmpqc1i6pb8.d(29): Error: no property `at` for type `string`\n/tmp/tmpqc1i6pb8.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqc1i6pb8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == \" \")\n            {\n                result += \"-\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmf40dvyq.d(14): Error: no property `length` for type `string`\n/tmp/tmpmf40dvyq.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpmf40dvyq.d(18): Error: slice `result` is not mutable\n/tmp/tmpmf40dvyq.d(22): Error: slice `result` is not mutable\n/tmp/tmpmf40dvyq.d(26): Error: no property `length` for type `string`\n/tmp/tmpmf40dvyq.d(28): Error: no property `length` for type `string`\n/tmp/tmpmf40dvyq.d(30): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpmf40dvyq.d(32): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmf40dvyq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            \nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpha89q20t.d(73): Error: found `unittest` instead of statement\n/tmp/tmpha89q20t.d(83): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpha89q20t.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha89q20t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy61u7r8l.d(13): Error: no property `length` for type `string`\n/tmp/tmpy61u7r8l.d(18): Error: no property `replace` for type `string`\n/tmp/tmpy61u7r8l.d(19): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy61u7r8l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp90ki3qje.d(14): Error: no property `length` for type `string`\n/tmp/tmp90ki3qje.d(19): Error: no property `replace` for type `string`\n/tmp/tmp90ki3qje.d(24): Error: no property `length` for type `string`\n/tmp/tmp90ki3qje.d(29): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90ki3qje.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = text;\n    \n    int spaces = text.find_first_of(' ');\n    \n    while(spaces != -1)\n    {\n        \n        string temp = text.substr(0, spaces);\n        \n        result += temp;\n        \n        temp = text.substr(spaces, text.find_first_of(' ', spaces + 1));\n        \n        if(temp != \"\")\n        {\n            result += temp;\n        }\n        \n        spaces = text.find_first_of(' ', spaces + 1);\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsoz6rf7r.d(240): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsoz6rf7r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6zohp9_y.d(16): Error: no property `length` for type `string`\n/tmp/tmp6zohp9_y.d(18): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp6zohp9_y.d(20): Error: slice `result` is not mutable\n/tmp/tmp6zohp9_y.d(24): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp6zohp9_y.d(28): Error: no property `length` for type `string`\n/tmp/tmp6zohp9_y.d(30): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp6zohp9_y.d(32): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zohp9_y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            for(int j = i + 1; j < result.length(); j++)\n            {\n                if(result[j] == ' ')\n                {\n                    result[j] = '-';\n                }\n            }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring fix_spaces(string text) \n{\n    string result = text;\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            for(int j = i + 1; j < result.length(); j++)\n            {\n                if(result[j] == ' ')\n                {\n                    result[j] = '-';\n                }\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx0ighi4g.d(40): Error: declaration expected, not `<`\n/tmp/tmpx0ighi4g.d(47): Error: declaration expected, not `for`\n/tmp/tmpx0ighi4g.d(47): Error: no identifier for declarator `i`\n/tmp/tmpx0ighi4g.d(47): Error: declaration expected, not `<`\n/tmp/tmpx0ighi4g.d(47): Error: no identifier for declarator `i`\n/tmp/tmpx0ighi4g.d(47): Error: declaration expected, not `++`\n/tmp/tmpx0ighi4g.d(52): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0ighi4g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.size(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.size(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.size() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmzegqmo6.d(15): Error: no property `size` for type `string`\n/tmp/tmpmzegqmo6.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpmzegqmo6.d(23): Error: no property `size` for type `string`\n/tmp/tmpmzegqmo6.d(28): Error: no property `size` for type `string`\n/tmp/tmpmzegqmo6.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmzegqmo6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == \" \")\n            {\n                result += \"-\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjobko22x.d(15): Error: no property `length` for type `string`\n/tmp/tmpjobko22x.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpjobko22x.d(19): Error: slice `result` is not mutable\n/tmp/tmpjobko22x.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpjobko22x.d(27): Error: no property `length` for type `string`\n/tmp/tmpjobko22x.d(29): Error: no property `length` for type `string`\n/tmp/tmpjobko22x.d(31): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpjobko22x.d(33): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjobko22x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int i = 0; i < text.length(); i++) {\n        char c = text[i];\n        \n        if (c == ' ') {\n            result += \"_\";\n        }\n        else if (c == ' ' && i > 0 && text[i-1] == ' ') {\n            result += \"-\";\n        }\n        else {\n            result += c;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnrfsuupi.d(15): Error: no property `length` for type `string`\n/tmp/tmpnrfsuupi.d(19): Error: slice `result` is not mutable\n/tmp/tmpnrfsuupi.d(22): Error: slice `result` is not mutable\n/tmp/tmpnrfsuupi.d(25): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrfsuupi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\"_\", \"_\");\n            text = temp;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppq_n4rpk.d(13): Error: no property `length` for type `string`\n/tmp/tmppq_n4rpk.d(18): Error: no property `replace` for type `string`\n/tmp/tmppq_n4rpk.d(19): Error: no property `replace` for type `string`\n/tmp/tmppq_n4rpk.d(20): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppq_n4rpk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    text[j] = '_';\n                }\n            }\n        }\n    }\n    \n    if(text.find_first_not_of(' ') != string::npos)\n    {\n        string temp = text;\n        for(int i = 0; i < temp.length(); i++)\n        {\n            if(temp[i] == ' ')\n            {\n                temp[i] = '-';\n            }\n        }\n        text = temp;\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmz6llouk.d(27): Error: found `:` when expecting `)`\n/tmp/tmpmz6llouk.d(27): Error: found `:` instead of statement\n/tmp/tmpmz6llouk.d(40): Error: declaration expected, not `return`\n/tmp/tmpmz6llouk.d(41): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmz6llouk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpocv68d5y.d(15): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(19): Error: slice `result` is not mutable\n/tmp/tmpocv68d5y.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(27): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(29): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocv68d5y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == ' ')\n            {\n                result += \"-\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyklhrbzk.d(14): Error: no property `length` for type `string`\n/tmp/tmpyklhrbzk.d(18): Error: slice `result` is not mutable\n/tmp/tmpyklhrbzk.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpyklhrbzk.d(26): Error: no property `length` for type `string`\n/tmp/tmpyklhrbzk.d(28): Error: no property `length` for type `string`\n/tmp/tmpyklhrbzk.d(32): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyklhrbzk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += \"_\";\n        }\n        else if(text[i] == \" \")\n        {\n            result += \"-\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp769h0mna.d(14): Error: no property `length` for type `string`\n/tmp/tmp769h0mna.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp769h0mna.d(18): Error: slice `result` is not mutable\n/tmp/tmp769h0mna.d(20): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp769h0mna.d(22): Error: slice `result` is not mutable\n/tmp/tmp769h0mna.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp769h0mna.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == ' ')\n        {\n            int j = i;\n            while(j < text.length && text[j] == ' ')\n            {\n                j++;\n            }\n            string t = text.substr(0, i);\n            string u = text.substr(i, j - i);\n            string v = text.substr(j);\n            \n            string s = \"\";\n            for(int k = 0; k < u.length(); k++)\n            {\n                s += u[k];\n            }\n            \n            for(int k = 0; k < v.length(); k++)\n            {\n                s += v[k];\n            }\n            \n            text += s;\n        }\n    }\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == ' ')\n        {\n            int j = i;\n            while(j < text.length && text[j] == ' ')\n            {\n                j++;\n            }\n            string t = text.substr(0, i);\n            string u = text.substr(i, j - i);\n            string v = text.substr(j);\n            \n            string s = \"\";\n            for(int k = 0; k < u.length(); k++)\n            {\n                s += u[k];\n            }\n            \n            for(int k = 0; k < v.length(); k++)\n            {\n                s += v[k];\n            }\n            \n            text += s;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb_p37zh4.d(23): Error: no property `substr` for type `string`\n/tmp/tmpb_p37zh4.d(24): Error: no property `substr` for type `string`\n/tmp/tmpb_p37zh4.d(25): Error: no property `substr` for type `string`\n/tmp/tmpb_p37zh4.d(28): Error: no property `length` for type `string`\n/tmp/tmpb_p37zh4.d(30): Error: slice `s` is not mutable\n/tmp/tmpb_p37zh4.d(33): Error: no property `length` for type `string`\n/tmp/tmpb_p37zh4.d(35): Error: slice `s` is not mutable\n/tmp/tmpb_p37zh4.d(38): Error: slice `text` is not mutable\n/tmp/tmpb_p37zh4.d(51): Error: no property `substr` for type `string`\n/tmp/tmpb_p37zh4.d(52): Error: no property `substr` for type `string`\n/tmp/tmpb_p37zh4.d(53): Error: no property `substr` for type `string`\n/tmp/tmpb_p37zh4.d(56): Error: no property `length` for type `string`\n/tmp/tmpb_p37zh4.d(58): Error: slice `s` is not mutable\n/tmp/tmpb_p37zh4.d(61): Error: no property `length` for type `string`\n/tmp/tmpb_p37zh4.d(63): Error: slice `s` is not mutable\n/tmp/tmpb_p37zh4.d(66): Error: slice `tex",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == ' ')\n        {\n            text += \"_\";\n        }\n        else if(text[i] == ' ')\n        {\n            text += \"-\";\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphgx7c1ep.d(17): Error: slice `text` is not mutable\n/tmp/tmphgx7c1ep.d(21): Error: slice `text` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgx7c1ep.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1hm5_to0.d(14): Error: no property `length` for type `string`\n/tmp/tmp1hm5_to0.d(19): Error: no property `replace` for type `string`\n/tmp/tmp1hm5_to0.d(20): Error: no property `replace` for type `string`\n/tmp/tmp1hm5_to0.d(25): Error: no property `length` for type `string`\n/tmp/tmp1hm5_to0.d(30): Error: no property `replace` for type `string`\n/tmp/tmp1hm5_to0.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hm5_to0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    int len = text.length();\n    \n    for(int i = 0; i < len; i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            int j = i;\n            \n            while(j < len && text[j] == ' ')\n            {\n                j++;\n            }\n            \n            if(j - i > 2)\n            {\n                \n                string temp = \"\";\n                \n                for(int k = i; k < j; k++)\n                {\n                    temp += text[k];\n                }\n                \n                for(int k = j; k < len; k++)\n                {\n                    temp += text[k];\n                }\n                \n                text = temp;\n                \n                i = j;\n            }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpocq381bu.d(14): Error: no property `length` for type `string`\n/tmp/tmpocq381bu.d(35): Error: slice `temp` is not mutable\n/tmp/tmpocq381bu.d(40): Error: slice `temp` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocq381bu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            if(result.length() - i > 1)\n            {\n                result[result.length() - i - 1] = '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphqjtfaq2.d(15): Error: no property `length` for type `string`\n/tmp/tmphqjtfaq2.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmphqjtfaq2.d(23): Error: no property `length` for type `string`\n/tmp/tmphqjtfaq2.d(27): Error: no property `length` for type `string`\n/tmp/tmphqjtfaq2.d(29): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphqjtfaq2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            temp = temp.replace(\" \", \"-\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmrzyblad.d(14): Error: no property `length` for type `string`\n/tmp/tmpmrzyblad.d(19): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(20): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(25): Error: no property `length` for type `string`\n/tmp/tmpmrzyblad.d(30): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrzyblad.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw57u879x.d(15): Error: no property `length` for type `string`\n/tmp/tmpw57u879x.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(19): Error: slice `result` is not mutable\n/tmp/tmpw57u879x.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(27): Error: no property `length` for type `string`\n/tmp/tmpw57u879x.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw57u879x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvjvfanti.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpvjvfanti.d(19): Error: slice `result` is not mutable\n/tmp/tmpvjvfanti.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpvjvfanti.d(29): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpvjvfanti.d(31): Error: slice `result` is not mutable\n/tmp/tmpvjvfanti.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvjvfanti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '_';\n                    \n                }\n            }\n            \n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '-';\n                    \n                }\n            }\n            \n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprsttcmui.d(14): Error: no property `length` for type `string`\n/tmp/tmprsttcmui.d(19): Error: no property `length` for type `string`\n/tmp/tmprsttcmui.d(24): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmprsttcmui.d(32): Error: no property `length` for type `string`\n/tmp/tmprsttcmui.d(37): Error: no property `length` for type `string`\n/tmp/tmprsttcmui.d(42): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprsttcmui.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            result = result.substr(0, i) + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqcvu9_zs.d(15): Error: no property `length` for type `string`\n/tmp/tmpqcvu9_zs.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpqcvu9_zs.d(19): Error: slice `result` is not mutable\n/tmp/tmpqcvu9_zs.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpqcvu9_zs.d(27): Error: no property `length` for type `string`\n/tmp/tmpqcvu9_zs.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpqcvu9_zs.d(31): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqcvu9_zs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    size_t pos = 0;\n    size_t len = result.size();\n    while(pos < len)\n    {\n        char c = result[pos];\n        if(c == ' ')\n        {\n            result[pos] = '_';\n            pos++;\n        }\n        else\n        {\n            pos++;\n        }\n    }\n    \n    pos = 0;\n    len = result.size();\n    while(pos < len)\n    {\n        char c = result[pos];\n        if(c == ' ')\n        {\n            result[pos] = '-';\n            pos++;\n        }\n        else\n        {\n            pos++;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5ef839c8.d(15): Error: no property `size` for type `string`\n/tmp/tmp5ef839c8.d(21): Error: cannot modify `immutable` expression `result[pos]`\n/tmp/tmp5ef839c8.d(31): Error: no property `size` for type `string`\n/tmp/tmp5ef839c8.d(37): Error: cannot modify `immutable` expression `result[pos]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ef839c8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    \n    if(text.find(\"  \")!=string::npos)\n    {\n        string temp = text;\n        temp = temp.replace(\"  \", \"_\");\n        text = temp;\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp15at02ss.d(24): Error: found `:` when expecting `)`\n/tmp/tmp15at02ss.d(24): Error: found `:` instead of statement\n/tmp/tmp15at02ss.d(31): Error: declaration expected, not `return`\n/tmp/tmp15at02ss.d(32): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15at02ss.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            temp = temp.replace(\" \", \"-\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmrzyblad.d(14): Error: no property `length` for type `string`\n/tmp/tmpmrzyblad.d(19): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(20): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(25): Error: no property `length` for type `string`\n/tmp/tmpmrzyblad.d(30): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrzyblad.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpax_lp0c7.d(15): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpax_lp0c7.d(23): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(28): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax_lp0c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_5fpd9nh.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp_5fpd9nh.d(19): Error: slice `result` is not mutable\n/tmp/tmp_5fpd9nh.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp_5fpd9nh.d(27): Error: no property `length` for type `string`\n/tmp/tmp_5fpd9nh.d(29): Error: no property `length` for type `string`\n/tmp/tmp_5fpd9nh.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_5fpd9nh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjfwwihzx.d(13): Error: no property `length` for type `string`\n/tmp/tmpjfwwihzx.d(18): Error: no property `replace` for type `string`\n/tmp/tmpjfwwihzx.d(19): Error: no property `replace` for type `string`\n/tmp/tmpjfwwihzx.d(23): Error: no property `length` for type `string`\n/tmp/tmpjfwwihzx.d(28): Error: no property `replace` for type `string`\n/tmp/tmpjfwwihzx.d(29): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjfwwihzx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '-';\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nThis doesn't work if there are more than 2 consecutive spaces.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\n<|/ c |>\n<| c |>\nIt doesn't work if there are more than 2 consecutive spaces.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. What do you mean by \"doesn't work\"?\n<|/ c |>\n<| c |>\nIt doesn't work if there are more than 2 consecutive spaces.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd3hshii3.d(41): Error: declaration expected, not `<`\n/tmp/tmpd3hshii3.d(44): Error: unterminated character constant\n/tmp/tmpd3hshii3.d(50): Error: unterminated character constant\n/tmp/tmpd3hshii3.d(56): Error: unterminated character constant\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd3hshii3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    text[j] = '_';\n                }\n            }\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    text[j] = '-';\n                }\n            }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8ep7sivs.d(14): Error: no property `length` for type `string`\n/tmp/tmp8ep7sivs.d(18): Error: no property `length` for type `string`\n/tmp/tmp8ep7sivs.d(22): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmp8ep7sivs.d(28): Error: no property `length` for type `string`\n/tmp/tmp8ep7sivs.d(32): Error: no property `length` for type `string`\n/tmp/tmp8ep7sivs.d(36): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ep7sivs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp06w6k53i.d(18): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp06w6k53i.d(20): Error: slice `result` is not mutable\n/tmp/tmp06w6k53i.d(24): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp06w6k53i.d(30): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp06w6k53i.d(32): Error: slice `result` is not mutable\n/tmp/tmp06w6k53i.d(36): Error: incompatible types for `(text[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06w6k53i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8nu7h3n2.d(18): Error: slice `result` is not mutable\n/tmp/tmp8nu7h3n2.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp8nu7h3n2.d(26): Error: no property `length` for type `string`\n/tmp/tmp8nu7h3n2.d(28): Error: no property `length` for type `string`\n/tmp/tmp8nu7h3n2.d(30): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8nu7h3n2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            temp = temp.replace(\" \", \"-\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmrzyblad.d(14): Error: no property `length` for type `string`\n/tmp/tmpmrzyblad.d(19): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(20): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(25): Error: no property `length` for type `string`\n/tmp/tmpmrzyblad.d(30): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrzyblad.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += \"_\";\n        }\n        else if(text[i] == \" \")\n        {\n            result += \"-\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyg9bptnr.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpyg9bptnr.d(19): Error: slice `result` is not mutable\n/tmp/tmpyg9bptnr.d(21): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpyg9bptnr.d(23): Error: slice `result` is not mutable\n/tmp/tmpyg9bptnr.d(27): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyg9bptnr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.size(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.size(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvcyc0320.d(15): Error: no property `size` for type `string`\n/tmp/tmpvcyc0320.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpvcyc0320.d(19): Error: slice `result` is not mutable\n/tmp/tmpvcyc0320.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpvcyc0320.d(27): Error: no property `size` for type `string`\n/tmp/tmpvcyc0320.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpvcyc0320.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcyc0320.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int i = 0; i < text.length(); i++)\n    {\n        char c = text[i];\n        \n        if (c != ' ' && c != '\\t' && c != '\\n')\n        {\n            result += c;\n        }\n    }\n    \n    string replaced = result;\n    \n    size_t spaces = 0;\n    size_t consecutiveSpaces = 0;\n    \n    for (int i = 0; i < text.length(); i++)\n    {\n        char c = text[i];\n        \n        if (c != ' ' && c != '\\t' && c != '\\n')\n        {\n            consecutiveSpaces++;\n        }\n        else\n        {\n            consecutiveSpaces = 0;\n            spaces++;\n        }\n    }\n    \n    if (spaces > 2)\n    {\n        replaced = replaced.replace(\" \", \"-\");\n    }\n    \n    return replaced;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplzubaep1.d(15): Error: no property `length` for type `string`\n/tmp/tmplzubaep1.d(21): Error: slice `result` is not mutable\n/tmp/tmplzubaep1.d(30): Error: no property `length` for type `string`\n/tmp/tmplzubaep1.d(47): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplzubaep1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text[i];\n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp + text[j];\n                }\n                else\n                {\n                    break;\n                }\n            }\n            text = text.replace(temp, \"_\");\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text[i];\n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp + text[j];\n                }\n                else\n                {\n                    break;\n                }\n            }\n            text = text.replace(temp, \"-\");\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpce2e3gqm.d(14): Error: no property `length` for type `string`\n/tmp/tmpce2e3gqm.d(18): Error: cannot implicitly convert expression `text[cast(ulong)i]` of type `immutable(char)` to `string`\n/tmp/tmpce2e3gqm.d(19): Error: no property `length` for type `string`\n/tmp/tmpce2e3gqm.d(23): Error: incompatible types for `(temp) + (text[cast(ulong)j])`: `string` and `immutable(char)`\n/tmp/tmpce2e3gqm.d(30): Error: no property `replace` for type `string`\n/tmp/tmpce2e3gqm.d(34): Error: no property `length` for type `string`\n/tmp/tmpce2e3gqm.d(38): Error: cannot implicitly convert expression `text[cast(ulong)i]` of type `immutable(char)` to `string`\n/tmp/tmpce2e3gqm.d(39): Error: no property `length` for type `string`\n/tmp/tmpce2e3gqm.d(43): Error: incompatible types for `(temp) + (text[cast(ulong)j])`: `string` and `immutable(char)`\n/tmp/tmpce2e3gqm.d(50): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpce2e3gqm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            if(result.length() > i + 1)\n            {\n                if(result[i + 1] == ' ')\n                {\n                    result[i] = '-';\n                }\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy8hvdk88.d(15): Error: no property `length` for type `string`\n/tmp/tmpy8hvdk88.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpy8hvdk88.d(23): Error: no property `length` for type `string`\n/tmp/tmpy8hvdk88.d(27): Error: no property `length` for type `string`\n/tmp/tmpy8hvdk88.d(31): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8hvdk88.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpeg0jkef8.d(14): Error: no property `length` for type `string`\n/tmp/tmpeg0jkef8.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpeg0jkef8.d(18): Error: slice `result` is not mutable\n/tmp/tmpeg0jkef8.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpeg0jkef8.d(26): Error: no property `length` for type `string`\n/tmp/tmpeg0jkef8.d(28): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpeg0jkef8.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeg0jkef8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += \"_\";\n        }\n        else if(text[i] == \" \")\n        {\n            result += \"-\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo4gm_nzf.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpo4gm_nzf.d(18): Error: slice `result` is not mutable\n/tmp/tmpo4gm_nzf.d(20): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpo4gm_nzf.d(22): Error: slice `result` is not mutable\n/tmp/tmpo4gm_nzf.d(26): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4gm_nzf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            string temp = text;\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp + text[j];\n                    \n                    for(int k = j + 1; k < text.length(); k++)\n                    {\n                        if(text[k] == ' ')\n                        {\n                            temp = temp + text[k];\n                            \n                            for(int l = k + 1; l < text.length(); l++)\n                            {\n                                if(text[l] == ' ')\n                                {\n                                    temp = temp + text[l];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            text = temp;\n            \n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1zivv7vj.d(14): Error: no property `length` for type `string`\n/tmp/tmp1zivv7vj.d(21): Error: no property `length` for type `string`\n/tmp/tmp1zivv7vj.d(25): Error: incompatible types for `(temp) + (text[cast(ulong)j])`: `string` and `immutable(char)`\n/tmp/tmp1zivv7vj.d(27): Error: no property `length` for type `string`\n/tmp/tmp1zivv7vj.d(31): Error: incompatible types for `(temp) + (text[cast(ulong)k])`: `string` and `immutable(char)`\n/tmp/tmp1zivv7vj.d(33): Error: no property `length` for type `string`\n/tmp/tmp1zivv7vj.d(37): Error: incompatible types for `(temp) + (text[cast(ulong)l])`: `string` and `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1zivv7vj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int i = 0; i < text.size(); i++)\n    {\n        if (text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else if (text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4orbsa2v.d(15): Error: no property `size` for type `string`\n/tmp/tmp4orbsa2v.d(19): Error: slice `result` is not mutable\n/tmp/tmp4orbsa2v.d(23): Error: slice `result` is not mutable\n/tmp/tmp4orbsa2v.d(27): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4orbsa2v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjqwlw7od.d(35): Error: declaration expected, not `<`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqwlw7od.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp06w6k53i.d(18): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp06w6k53i.d(20): Error: slice `result` is not mutable\n/tmp/tmp06w6k53i.d(24): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp06w6k53i.d(30): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp06w6k53i.d(32): Error: slice `result` is not mutable\n/tmp/tmp06w6k53i.d(36): Error: incompatible types for `(text[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06w6k53i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw89wwpyn.d(15): Error: no property `length` for type `string`\n/tmp/tmpw89wwpyn.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpw89wwpyn.d(19): Error: slice `result` is not mutable\n/tmp/tmpw89wwpyn.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpw89wwpyn.d(27): Error: no property `length` for type `string`\n/tmp/tmpw89wwpyn.d(29): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpw89wwpyn.d(31): Error: slice `result` is not mutable\n/tmp/tmpw89wwpyn.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw89wwpyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            temp = temp.replace(\" \", \"-\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmrzyblad.d(14): Error: no property `length` for type `string`\n/tmp/tmpmrzyblad.d(19): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(20): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(25): Error: no property `length` for type `string`\n/tmp/tmpmrzyblad.d(30): Error: no property `replace` for type `string`\n/tmp/tmpmrzyblad.d(31): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmrzyblad.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            result += result[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == \" \")\n            {\n                result += result[i];\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpckejxwbi.d(15): Error: no property `length` for type `string`\n/tmp/tmpckejxwbi.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpckejxwbi.d(19): Error: slice `result` is not mutable\n/tmp/tmpckejxwbi.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpckejxwbi.d(27): Error: no property `length` for type `string`\n/tmp/tmpckejxwbi.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpckejxwbi.d(31): Error: slice `result` is not mutable\n/tmp/tmpckejxwbi.d(35): Error: no property `length` for type `string`\n/tmp/tmpckejxwbi.d(37): Error: no property `length` for type `string`\n/tmp/tmpckejxwbi.d(39): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpckejxwbi.d(41): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpckejxwbi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw57u879x.d(15): Error: no property `length` for type `string`\n/tmp/tmpw57u879x.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(19): Error: slice `result` is not mutable\n/tmp/tmpw57u879x.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(27): Error: no property `length` for type `string`\n/tmp/tmpw57u879x.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw57u879x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int i = 0; i < text.length; ++i)\n    {\n        if (text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if (result.length() > 2)\n    {\n        string temp = \"\";\n        \n        for (int i = 0; i < result.length(); ++i)\n        {\n            if (result.at(i) == ' ')\n            {\n                temp += result.at(i);\n            }\n            else\n            {\n                temp += \"-\";\n            }\n        }\n        \n        result = temp;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpl1p8395o.d(19): Error: slice `result` is not mutable\n/tmp/tmpl1p8395o.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpl1p8395o.d(27): Error: no property `length` for type `string`\n/tmp/tmpl1p8395o.d(31): Error: no property `length` for type `string`\n/tmp/tmpl1p8395o.d(33): Error: no property `at` for type `string`\n/tmp/tmpl1p8395o.d(35): Error: no property `at` for type `string`\n/tmp/tmpl1p8395o.d(39): Error: slice `temp` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl1p8395o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw57u879x.d(15): Error: no property `length` for type `string`\n/tmp/tmpw57u879x.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(19): Error: slice `result` is not mutable\n/tmp/tmpw57u879x.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(27): Error: no property `length` for type `string`\n/tmp/tmpw57u879x.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpw57u879x.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw57u879x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpocv68d5y.d(15): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(19): Error: slice `result` is not mutable\n/tmp/tmpocv68d5y.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpocv68d5y.d(27): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(29): Error: no property `length` for type `string`\n/tmp/tmpocv68d5y.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocv68d5y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvyt3un1.d(18): Error: slice `result` is not mutable\n/tmp/tmpqvyt3un1.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpqvyt3un1.d(30): Error: slice `result` is not mutable\n/tmp/tmpqvyt3un1.d(34): Error: slice `result` is not mutable\n/tmp/tmpqvyt3un1.d(42): Error: slice `result` is not mutable\n/tmp/tmpqvyt3un1.d(46): Error: incompatible types for `(text[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvyt3un1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[i] = '_';\n                    \n                    for(int k = j + 1; k < text.length(); k++)\n                    {\n                        if(text[k] == ' ')\n                        {\n                            \n                            text[i] = '_';\n                            \n                            text[k] = '-';\n                            \n                            break;\n                        }\n                    }\n                    \n                    break;\n                }\n            }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmdetdn1n.d(14): Error: no property `length` for type `string`\n/tmp/tmpmdetdn1n.d(19): Error: no property `length` for type `string`\n/tmp/tmpmdetdn1n.d(24): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpmdetdn1n.d(26): Error: no property `length` for type `string`\n/tmp/tmpmdetdn1n.d(31): Error: cannot modify `immutable` expression `text[cast(ulong)i]`\n/tmp/tmpmdetdn1n.d(33): Error: cannot modify `immutable` expression `text[cast(ulong)k]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmdetdn1n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpax_lp0c7.d(15): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpax_lp0c7.d(23): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(28): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax_lp0c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    int count = 0;\n    for(int i = 0; i < result.length(); ++i)\n    {\n        if(result[i] == \" \")\n        {\n            ++count;\n        }\n        else\n        {\n            if(count > 1)\n            {\n                result += \"-\";\n            }\n            count = 0;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu30yr6_7.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpu30yr6_7.d(19): Error: slice `result` is not mutable\n/tmp/tmpu30yr6_7.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpu30yr6_7.d(28): Error: no property `length` for type `string`\n/tmp/tmpu30yr6_7.d(30): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpu30yr6_7.d(38): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu30yr6_7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == \" \")\n        {\n            result += result[i];\n        }\n        else\n        {\n            result += result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwx_0x239.d(15): Error: no property `length` for type `string`\n/tmp/tmpwx_0x239.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpwx_0x239.d(19): Error: slice `result` is not mutable\n/tmp/tmpwx_0x239.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpwx_0x239.d(27): Error: no property `length` for type `string`\n/tmp/tmpwx_0x239.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpwx_0x239.d(31): Error: slice `result` is not mutable\n/tmp/tmpwx_0x239.d(35): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwx_0x239.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp90ki3qje.d(14): Error: no property `length` for type `string`\n/tmp/tmp90ki3qje.d(19): Error: no property `replace` for type `string`\n/tmp/tmp90ki3qje.d(24): Error: no property `length` for type `string`\n/tmp/tmp90ki3qje.d(29): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90ki3qje.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length; i++)\n    {\n        if(result[i] == \" \")\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphsaqearn.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmphsaqearn.d(19): Error: slice `result` is not mutable\n/tmp/tmphsaqearn.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmphsaqearn.d(29): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmphsaqearn.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphsaqearn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text[i];\n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp + text[j];\n                    i = j;\n                }\n                else\n                {\n                    break;\n                }\n            }\n            text = text.substr(0, i) + temp + text.substr(i + 1);\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text[i];\n            for(int j = i + 1; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    temp = temp + text[j];\n                    i = j;\n                }\n                else\n                {\n                    break;\n                }\n            }\n            text = text.substr(0, i) + temp + text.substr(i + 1);\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjbft9sfo.d(14): Error: no property `length` for type `string`\n/tmp/tmpjbft9sfo.d(18): Error: cannot implicitly convert expression `text[cast(ulong)i]` of type `immutable(char)` to `string`\n/tmp/tmpjbft9sfo.d(19): Error: no property `length` for type `string`\n/tmp/tmpjbft9sfo.d(23): Error: incompatible types for `(temp) + (text[cast(ulong)j])`: `string` and `immutable(char)`\n/tmp/tmpjbft9sfo.d(31): Error: no property `substr` for type `string`\n/tmp/tmpjbft9sfo.d(31): Error: no property `substr` for type `string`\n/tmp/tmpjbft9sfo.d(35): Error: no property `length` for type `string`\n/tmp/tmpjbft9sfo.d(39): Error: cannot implicitly convert expression `text[cast(ulong)i]` of type `immutable(char)` to `string`\n/tmp/tmpjbft9sfo.d(40): Error: no property `length` for type `string`\n/tmp/tmpjbft9sfo.d(44): Error: incompatible types for `(temp) + (text[cast(ulong)j])`: `string` and `immutable(char)`\n/tmp/tmpjbft9sfo.d(52): Error: no property `substr` for type `string`\n/tmp/tmpjbft9sfo.d(52): Error: no property `",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    int consecutive_spaces = 0;\n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            consecutive_spaces++;\n        }\n        else\n        {\n            if(consecutive_spaces > 1)\n            {\n                result += \"-\";\n            }\n            consecutive_spaces = 0;\n            result += result[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp67p68o54.d(14): Error: no property `length` for type `string`\n/tmp/tmp67p68o54.d(18): Error: slice `result` is not mutable\n/tmp/tmp67p68o54.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp67p68o54.d(27): Error: no property `length` for type `string`\n/tmp/tmp67p68o54.d(37): Error: slice `result` is not mutable\n/tmp/tmp67p68o54.d(40): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp67p68o54.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i = 0; i < result.size() - 2; ++i)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjh_v8u8a.d(15): Error: no property `size` for type `string`\n/tmp/tmpjh_v8u8a.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpjh_v8u8a.d(19): Error: slice `result` is not mutable\n/tmp/tmpjh_v8u8a.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpjh_v8u8a.d(27): Error: no property `size` for type `string`\n/tmp/tmpjh_v8u8a.d(29): Error: no property `size` for type `string`\n/tmp/tmpjh_v8u8a.d(31): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjh_v8u8a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpax_lp0c7.d(15): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(19): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpax_lp0c7.d(23): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(28): Error: no property `length` for type `string`\n/tmp/tmpax_lp0c7.d(30): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax_lp0c7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164428
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvjvfanti.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpvjvfanti.d(19): Error: slice `result` is not mutable\n/tmp/tmpvjvfanti.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpvjvfanti.d(29): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpvjvfanti.d(31): Error: slice `result` is not mutable\n/tmp/tmpvjvfanti.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvjvfanti.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); ++i)\n    {\n        if(result[i] == \" \")\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa1i_nsua.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpa1i_nsua.d(18): Error: slice `result` is not mutable\n/tmp/tmpa1i_nsua.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpa1i_nsua.d(26): Error: no property `length` for type `string`\n/tmp/tmpa1i_nsua.d(28): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpa1i_nsua.d(30): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1i_nsua.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpeqk8w11x.d(18): Error: slice `result` is not mutable\n/tmp/tmpeqk8w11x.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpeqk8w11x.d(30): Error: slice `result` is not mutable\n/tmp/tmpeqk8w11x.d(34): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeqk8w11x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; ++i)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpob61qf5g.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpob61qf5g.d(18): Error: slice `result` is not mutable\n/tmp/tmpob61qf5g.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpob61qf5g.d(26): Error: no property `length` for type `string`\n/tmp/tmpob61qf5g.d(28): Error: no property `length` for type `string`\n/tmp/tmpob61qf5g.d(30): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpob61qf5g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            text = temp;\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"-\");\n            text = temp;\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp90ki3qje.d(14): Error: no property `length` for type `string`\n/tmp/tmp90ki3qje.d(19): Error: no property `replace` for type `string`\n/tmp/tmp90ki3qje.d(24): Error: no property `length` for type `string`\n/tmp/tmp90ki3qje.d(29): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90ki3qje.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    for(int i = 0; i < result.size(); ++i)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.size(); ++i)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.size() && result[j] == ' ')\n            {\n                result[j] = '-';\n                ++j;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgeu4cwjs.d(14): Error: no property `size` for type `string`\n/tmp/tmpgeu4cwjs.d(18): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpgeu4cwjs.d(22): Error: no property `size` for type `string`\n/tmp/tmpgeu4cwjs.d(27): Error: no property `size` for type `string`\n/tmp/tmpgeu4cwjs.d(29): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgeu4cwjs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '-';\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8rev5tl2.d(19): Error: slice `result` is not mutable\n/tmp/tmp8rev5tl2.d(23): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmp8rev5tl2.d(31): Error: slice `result` is not mutable\n/tmp/tmp8rev5tl2.d(35): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 45)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8rev5tl2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            int j = i;\n            while(j < text.length() && text[j] == ' ')\n            {\n                j++;\n            }\n            string sub = text.substr(i, j - i);\n            text = text.substr(0, i) + sub + text.substr(j + 1);\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            int j = i;\n            while(j < text.length() && text[j] == ' ')\n            {\n                j++;\n            }\n            string sub = text.substr(i, j - i);\n            text = text.substr(0, i) + sub + text.substr(j + 1);\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpe0de6ywi.d(14): Error: no property `length` for type `string`\n/tmp/tmpe0de6ywi.d(19): Error: no property `length` for type `string`\n/tmp/tmpe0de6ywi.d(23): Error: no property `substr` for type `string`\n/tmp/tmpe0de6ywi.d(24): Error: no property `substr` for type `string`\n/tmp/tmpe0de6ywi.d(24): Error: no property `substr` for type `string`\n/tmp/tmpe0de6ywi.d(28): Error: no property `length` for type `string`\n/tmp/tmpe0de6ywi.d(33): Error: no property `length` for type `string`\n/tmp/tmpe0de6ywi.d(37): Error: no property `substr` for type `string`\n/tmp/tmpe0de6ywi.d(38): Error: no property `substr` for type `string`\n/tmp/tmpe0de6ywi.d(38): Error: no property `substr` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe0de6ywi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            \nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpha89q20t.d(73): Error: found `unittest` instead of statement\n/tmp/tmpha89q20t.d(83): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpha89q20t.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha89q20t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += \"_\";\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i + 1];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8yzwki00.d(15): Error: no property `length` for type `string`\n/tmp/tmp8yzwki00.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp8yzwki00.d(19): Error: slice `result` is not mutable\n/tmp/tmp8yzwki00.d(23): Error: slice `result` is not mutable\n/tmp/tmp8yzwki00.d(27): Error: no property `length` for type `string`\n/tmp/tmp8yzwki00.d(29): Error: no property `length` for type `string`\n/tmp/tmp8yzwki00.d(31): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8yzwki00.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    size_t pos = 0;\n    size_t len = result.size();\n    \n    while (pos < len) {\n        char c = result[pos];\n        \n        if (c != ' ') {\n            result[pos] = c;\n        }\n        \n        pos++;\n    }\n    \n    pos = 0;\n    len = result.size();\n    \n    while (pos < len) {\n        char c = result[pos];\n        \n        if (c == ' ') {\n            \n            if (pos == 0) {\n                result[pos] = '-';\n            }\n            \n            pos++;\n        }\n        \n        pos++;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9zmxqi62.d(15): Error: no property `size` for type `string`\n/tmp/tmp9zmxqi62.d(21): Error: cannot modify `immutable` expression `result[pos]`\n/tmp/tmp9zmxqi62.d(28): Error: no property `size` for type `string`\n/tmp/tmp9zmxqi62.d(36): Error: cannot modify `immutable` expression `result[pos]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9zmxqi62.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '_';\n                    \n                    i = j;\n                    \n                    break;\n                }\n            }\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            \n            for(int j = i; j < text.length(); j++)\n            {\n                if(text[j] == ' ')\n                {\n                    \n                    text[j] = '-';\n                    \n                    i = j;\n                    \n                    break;\n                }\n            }\n        }\n    }\n    \n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpewwfb2_1.d(14): Error: no property `length` for type `string`\n/tmp/tmpewwfb2_1.d(19): Error: no property `length` for type `string`\n/tmp/tmpewwfb2_1.d(24): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\n/tmp/tmpewwfb2_1.d(34): Error: no property `length` for type `string`\n/tmp/tmpewwfb2_1.d(39): Error: no property `length` for type `string`\n/tmp/tmpewwfb2_1.d(44): Error: cannot modify `immutable` expression `text[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewwfb2_1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.size(); ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.size() > 2)\n    {\n        for(int i = 0; i < result.size(); ++i)\n        {\n            if(result[i] == \" \")\n            {\n                result[i] = \"-\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpym81v_f7.d(14): Error: no property `size` for type `string`\n/tmp/tmpym81v_f7.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpym81v_f7.d(18): Error: slice `result` is not mutable\n/tmp/tmpym81v_f7.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpym81v_f7.d(26): Error: no property `size` for type `string`\n/tmp/tmpym81v_f7.d(28): Error: no property `size` for type `string`\n/tmp/tmpym81v_f7.d(30): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpym81v_f7.d(32): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpym81v_f7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            for(int j = i + 1; j < result.length(); j++)\n            {\n                if(result[j] == ' ')\n                {\n                    result[j] = '-';\n                }\n            }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string,replace,algorithm |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb672o81o.d(39): Error: declaration expected, not `<`\n/tmp/tmpb672o81o.d(50): Error: declaration expected, not `assert`\n/tmp/tmpb672o81o.d(51): Error: declaration expected, not `assert`\n/tmp/tmpb672o81o.d(52): Error: declaration expected, not `assert`\n/tmp/tmpb672o81o.d(53): Error: declaration expected, not `assert`\n/tmp/tmpb672o81o.d(54): Error: declaration expected, not `assert`\n/tmp/tmpb672o81o.d(55): Error: unrecognized declaration\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb672o81o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length(); i++)\n        {\n            if(result[i] == \" \")\n            {\n                result += \"-\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjobko22x.d(15): Error: no property `length` for type `string`\n/tmp/tmpjobko22x.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpjobko22x.d(19): Error: slice `result` is not mutable\n/tmp/tmpjobko22x.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpjobko22x.d(27): Error: no property `length` for type `string`\n/tmp/tmpjobko22x.d(29): Error: no property `length` for type `string`\n/tmp/tmpjobko22x.d(31): Error: incompatible types for `(result[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpjobko22x.d(33): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjobko22x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwc9hi98g.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpwc9hi98g.d(19): Error: slice `result` is not mutable\n/tmp/tmpwc9hi98g.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpwc9hi98g.d(29): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpwc9hi98g.d(31): Error: slice `result` is not mutable\n/tmp/tmpwc9hi98g.d(35): Error: incompatible types for `(text[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwc9hi98g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(text[i + 1], \"_\");\n            temp = temp.replace(text[i + 2], \"-\");\n            text = temp;\n        }\n    }\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpex23s2h8.d(14): Error: no property `length` for type `string`\n/tmp/tmpex23s2h8.d(19): Error: no property `replace` for type `string`\n/tmp/tmpex23s2h8.d(20): Error: no property `replace` for type `string`\n/tmp/tmpex23s2h8.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpex23s2h8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + '_';\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        string temp = result;\n        result = \"\";\n        for(int i = 0; i < temp.length(); i++)\n        {\n            if(temp[i] == ' ')\n            {\n                result += temp[i];\n            }\n            else\n            {\n                result += temp[i] + '-';\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp27ldwid7.d(14): Error: no property `length` for type `string`\n/tmp/tmp27ldwid7.d(18): Error: slice `result` is not mutable\n/tmp/tmp27ldwid7.d(22): Error: incompatible types for `(result) += (cast(int)text[cast(ulong)i] + 95)`: `string` and `int`\n/tmp/tmp27ldwid7.d(26): Error: no property `length` for type `string`\n/tmp/tmp27ldwid7.d(30): Error: no property `length` for type `string`\n/tmp/tmp27ldwid7.d(34): Error: slice `result` is not mutable\n/tmp/tmp27ldwid7.d(38): Error: incompatible types for `(result) += (cast(int)temp[cast(ulong)i] + 45)`: `string` and `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27ldwid7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length; i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1r2bem08.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp1r2bem08.d(19): Error: slice `result` is not mutable\n/tmp/tmp1r2bem08.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmp1r2bem08.d(29): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmp1r2bem08.d(31): Error: slice `result` is not mutable\n/tmp/tmp1r2bem08.d(35): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1r2bem08.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            string temp = text;\n            temp = temp.replace(text[i], \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            temp = temp.replace(\" \", \"_\");\n            \nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpha89q20t.d(73): Error: found `unittest` instead of statement\n/tmp/tmpha89q20t.d(83): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpha89q20t.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha89q20t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164429
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result += \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgu06jd6z.d(15): Error: no property `length` for type `string`\n/tmp/tmpgu06jd6z.d(19): Error: slice `result` is not mutable\n/tmp/tmpgu06jd6z.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpgu06jd6z.d(27): Error: no property `length` for type `string`\n/tmp/tmpgu06jd6z.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgu06jd6z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for (int i = 0; i < text.size(); i++)\n    {\n        char c = text[i];\n        \n        if (c == ' ')\n        {\n            result += \"_\";\n        }\n        else if (c == ' ' && i > 0 && text[i-1] == ' ')\n        {\n            result += \"-\";\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpg7tpj_td.d(15): Error: no property `size` for type `string`\n/tmp/tmpg7tpj_td.d(21): Error: slice `result` is not mutable\n/tmp/tmpg7tpj_td.d(25): Error: slice `result` is not mutable\n/tmp/tmpg7tpj_td.d(29): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg7tpj_td.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length; ++i)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        string temp = result;\n        result = \"\";\n        for(int i = 0; i < temp.length(); ++i)\n        {\n            if(temp[i] == \" \")\n            {\n                result += temp[i];\n            }\n            else\n            {\n                result += temp[i] + \"-\";\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiv7b4h6t.d(16): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpiv7b4h6t.d(18): Error: slice `result` is not mutable\n/tmp/tmpiv7b4h6t.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpiv7b4h6t.d(26): Error: no property `length` for type `string`\n/tmp/tmpiv7b4h6t.d(30): Error: no property `length` for type `string`\n/tmp/tmpiv7b4h6t.d(32): Error: incompatible types for `(temp[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpiv7b4h6t.d(34): Error: slice `result` is not mutable\n/tmp/tmpiv7b4h6t.d(38): Error: incompatible types for `(temp[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiv7b4h6t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    \n    string result = text;\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            result[i] = '_';\n        }\n    }\n    \n    for(int i = 0; i < result.length(); i++)\n    {\n        if(result[i] == ' ')\n        {\n            int j = i + 1;\n            while(j < result.length() && result[j] == ' ')\n            {\n                result[j] = '-';\n                j++;\n            }\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjncdpd7p.d(16): Error: no property `length` for type `string`\n/tmp/tmpjncdpd7p.d(20): Error: cannot modify `immutable` expression `result[cast(ulong)i]`\n/tmp/tmpjncdpd7p.d(24): Error: no property `length` for type `string`\n/tmp/tmpjncdpd7p.d(29): Error: no property `length` for type `string`\n/tmp/tmpjncdpd7p.d(31): Error: cannot modify `immutable` expression `result[cast(ulong)j]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjncdpd7p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.size(); ++i)\n    {\n        char c = text[i];\n        if(c == ' ' || c == '\\t' || c == '\\n')\n        {\n            result += '_';\n        }\n        else if(c == '\\t')\n        {\n            result += '\\t';\n        }\n        else\n        {\n            result += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwzhrb0g_.d(14): Error: no property `size` for type `string`\n/tmp/tmpwzhrb0g_.d(19): Error: slice `result` is not mutable\n/tmp/tmpwzhrb0g_.d(23): Error: slice `result` is not mutable\n/tmp/tmpwzhrb0g_.d(27): Error: slice `result` is not mutable\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == ' ')\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    if(result.length() > 2)\n    {\n        for(int i = 0; i < result.length() - 2; i++)\n        {\n            result[i] = result[i] + \"-\";\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbyf4dpte.d(14): Error: no property `length` for type `string`\n/tmp/tmpbyf4dpte.d(18): Error: slice `result` is not mutable\n/tmp/tmpbyf4dpte.d(22): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpbyf4dpte.d(26): Error: no property `length` for type `string`\n/tmp/tmpbyf4dpte.d(28): Error: no property `length` for type `string`\n/tmp/tmpbyf4dpte.d(30): Error: incompatible types for `(result[cast(ulong)i]) + (\"-\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbyf4dpte.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    },
    {
      "exit_code": 1,
      "program": "import std.math;\nimport std.typecons;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n                    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n        else\n        {\n            result += text[i] + \"_\";\n        }\n    }\n    \n    for(int i = 0; i < text.length(); i++)\n    {\n        if(text[i] == \" \")\n        {\n            result += text[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpihm97ksz.d(15): Error: no property `length` for type `string`\n/tmp/tmpihm97ksz.d(17): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpihm97ksz.d(19): Error: slice `result` is not mutable\n/tmp/tmpihm97ksz.d(23): Error: incompatible types for `(text[cast(ulong)i]) + (\"_\")`: `immutable(char)` and `string`\n/tmp/tmpihm97ksz.d(27): Error: no property `length` for type `string`\n/tmp/tmpihm97ksz.d(29): Error: incompatible types for `(text[cast(ulong)i]) == (\" \")`: `immutable(char)` and `string`\n/tmp/tmpihm97ksz.d(31): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihm97ksz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164430
    }
  ]
}