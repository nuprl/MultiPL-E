name: HumanEval_58_common
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common elements\
  \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n"
tests: "unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
  \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
  \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
  \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L,\
  \ 8L], []) == []);\n}\nvoid main(){}"
completions: ["{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++) {\n\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\tif (l1[i] == l2[j])\
    \ {\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i\
    \ < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\
    \tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    long common = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n      \
    \  for (int j = 0; j < l2.length; j++)\n        {\n            if (l1[i] == l2[j])\n\
    \            {\n                common++;\n                result[i] = common;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int l3) \n{\n    long[] result = new long[l1.length];\n\
    \    long common = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n      \
    \  for (int j = 0; j < l2.length; j++)\n        {\n            if (l1[i] == l2[j])\n\
    \            {\n                common++;\n                result[i] = common;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int l3, int l4) \n{\n    long[] result = new\
    \ long[l1.length];\n    long common = 0;\n    for (int i = 0; i < l1.length; i++)\n\
    \    {\n        for (int j = 0; j < l2.length; j++)\n        {\n            if\
    \ (l1[i] == l2[j])\n            {\n                common++;\n               \
    \ result[i] = common;\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int l3, int l4, int l5)\
    \ \n{\n    long[] result = new long[l1.length];\n    long common = 0;\n    for\
    \ (int i = 0; i < l1.length; i++)\n    {\n        for (int j = 0; j < l2.length;\
    \ j++)\n        {\n            if (l1[i] == l2[j])\n            {\n          \
    \      common++;\n                result[i] = common;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int l3, int l4, int l5, int l6) \n{\n    long[] result = new long[l1.length];\n\
    \    long common = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n      \
    \  for (int j = 0; j < l2.length; j++)\n        {\n            if (l1[i] == l2[j])\n\
    \            {\n                common++;\n                result[i] = common;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] ", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for three lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n\
    \        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] ==\
    \ l2[j])\n            {\n                result[i] = l1[i];\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for five\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[]\
    \ l4, long[] l5, long[] l6) \n{\n    long[] result = new long[l1.length];\n  \
    \  for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for six\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[]\
    \ l4, long[] l5, long[] l6, long[] l7) \n{\n    long[] ", "{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor\
    \ (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\
    \t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }", "{\n    long[] result = new long[l1.length + l2.length];\n    for(int i =\
    \ 0; i < l1.length; i++) \n    {\n        for(int j = 0; j < l2.length; j++) \n\
    \        {\n            if(l1[i] == l2[j]) \n            {\n                result[i]\
    \ += l1[i];\n                result[j] += l1[i];\n            }\n        }\n \
    \   }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm\
    \ |>\n<| c |>\nThis algorithm is O(n^2) which is not good enough for large lists.\n\
    <|/ c |>\n<| c |>\nYes, I agree with you. But the question was about how to implement\
    \ it efficiently. So, I thought that my implementation would be faster than the\
    \ one you proposed.\n<|/ c |>\n<| c |>\nI agree with you, your implementation\
    \ is better. But the question was about how to implement it efficiently. So, I\
    \ thought that my implementation would be faster than the one you proposed.\n\
    <|/ c |>\n<| c |>\nI agree with you, your implementation is better. But the question\
    \ was about how to implement it efficiently. So, I thought that my implementation\
    \ would be faster than the one you proposed.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, your implementation is better. But the question was about how to implement\
    \ it efficiently. So, I thought that my implementation would be faster than the\
    \ one you proposed.\n<|/ c |>\n<| a tags=arrays,c#,algorithm |>\n<code>\npublic\
    \ static int[] CommonElements(int[] a, int[] b)\n{\n    int[] result = new int[a.Length\
    \ + b.Length];\n    int i = 0;\n    int j = 0;\n    while (i < a.Length && j <\
    \ b.Length)\n    {\n        if (a[i] == b[j])\n        {\n            result[i++]\
    \ = a[i];\n            result[j++] = a[i];\n        }\n        else if (a[i] <\
    \ b[j])\n        {\n            result[i++] = a[i];\n        }\n        else\n\
    \        {\n            result[j++] = b[j];\n        }\n    }\n    while (i <\
    \ a.Length)\n    {\n        result[i++] = a[i];\n    }\n    while (j < b.Length)\n\
    \    {\n        result[j++] = b[j];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis algorithm is O(n^2) which is not good enough for\
    \ large lists.\n<|/ c |>\n<| c |>\nI agree with you, your implementation is better.\
    \ But the ", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i <\
    \ l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\t\
    if (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len) \n\
    {\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length; i++)\n\
    \    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i]\
    \ == l2[j])\n            {\n                result[i] = l1[i];\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2, int len3) \n{\n    long[] result = new long[len];\n    for(int i = 0;\
    \ i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n   \
    \     {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3,\
    \ int len4) \n{\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3, int len4, int\
    \ len5) \n{\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)", "{\n    long[] result\
    \ = new long[l1.length];\n    long common = 0;\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                common++;\n         \
    \   }\n        }\n    }\n    for(int i = 0; i < l1.length; i++)\n    {\n     \
    \   if(l1[i] != common)\n        {\n            result[i] = l1[i];\n        }\n\
    \    }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n\
    {\n    long[] result = new long[l1.length];\n    long common = 0;\n    for(int\
    \ i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                common++;\n\
    \            }\n        }\n    }\n    for(int i = 0; i < l1.length; i++)\n   \
    \ {\n        if(l1[i] != common)\n        {\n            result[i] = l1[i];\n\
    \        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common elements\
    \ for three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n    long common\
    \ = 0;\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0;\
    \ j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n           \
    \ {\n                common++;\n            }\n        }\n    }\n    for(int i\
    \ = 0; i < l1.length; i++)\n    {\n        if(l1[i] != common)\n        {\n  \
    \          result[i] = l1[i];\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for four lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new\
    \ long[l1.length];\n    long common = 0;\n    for(int i = 0; i < l1.length; i++)\n\
    \    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i]\
    \ == l2[j])\n            {\n                common++;\n            }\n       \
    \ }\n    }\n    for(int i = 0; i < l1.length; i++)\n    {\n        if(l1[i] !=\
    \ common)\n        {\n            result[i] = l1[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for five lists.\n     \
    \   \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[]\
    \ l5, ", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++) {\n\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\tif (l1[i] == l2[j])\
    \ {\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor(int i = 0; i\
    \ < l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\t\
    if(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong [] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor\
    \ (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\
    \t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }", "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2) \n{\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3) \n{\n    long[]\
    \ result = new long[len];\n    for(int i = 0; i < l1.length; i++)\n    {\n   \
    \     for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n\
    \            {\n                result[i] = l1[i];\n                break;\n \
    \           }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len, int len2, int len3, int len4) \n{\n    long[] result = new\
    \ long[len];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j\
    \ = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n      \
    \      {\n                result[i] = l1[i];\n                break;\n       \
    \     }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2, int len3, int len4, int len5) \n{\n    long[] result\
    \ = new long[len];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int\
    \ j = 0; j < l2.length; j++)", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        result[i] = l1[i];\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n    long[] result = new long[l1.length + l2.length];\n    for(int\
    \ i = 0; i < l1.length; i++)\n        result[i] = l1[i];\n    for(int i = 0; i\
    \ < l2.length; i++)\n        result[l1.length + i] = l2[i];\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=java,arrays,sorting |>\n<| c |>\n\
    This is not the most efficient solution, since it requires O(n^2) memory and O(n^2)\
    \ time. There are better solutions than this one.\n<|/ c |>\n<| c |>\nThe question\
    \ was about sorting two arrays, not about finding common elements. So this solution\
    \ is correct and efficient.\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ two arrays, not about finding common elements. So this solution is correct and\
    \ efficient.\n<|/ c |>\n<| c |>\nThe question was about sorting two arrays, not\
    \ about finding common elements. So this solution is correct and efficient.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting two arrays, not about finding\
    \ common elements. So this solution is correct and efficient.\n<|/ c |>\n<| a\
    \ dscore=5 |>\nThe most efficient solution is to use Arrays.binarySearch(), which\
    \ runs in O(log n) time. \n<code>\npublic static <T> int binarySearch(T[] a, T\
    \ key) {\n    return Arrays.binarySearch(a, key);\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| c |>\nThis should be the accepted answer. `Arrays.binarySearch` runs\
    \ in O(log n) time. `Arrays.sort` runs in O(n^2) time.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. `Arrays.binarySearch` runs in O(log n) time.\
    \ `Arrays.sort` runs in O(n^2) time.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. `Arrays.binarySearch` runs in O(log n) time. `Arrays.sort` runs in O(n^2)\
    \ time.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `Arrays.binarySearch`\
    \ runs in O(log n) time. `Arrays.sort` runs in O(n^2) time.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. `Arrays.binarySearch` runs in O(log n) ",
  "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\
    \t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\
    \t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i\
    \ < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\
    \tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements for three lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4)\
    \ \n{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements for four lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4,\
    \ long[] l5) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i\
    \ < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\
    \tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements\
    \ for five lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4, long[] l5, long[] l6) \n{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for six lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len) \n\
    {\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length; i++)\n\
    \    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i]\
    \ == l2[j])\n            {\n                result[i] = l1[i];\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2, int len3) \n{\n    long[] result = new long[len];\n    for(int i = 0;\
    \ i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n   \
    \     {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3,\
    \ int len4) \n{\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3, int len4, int\
    \ len5) \n{\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)", "{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t\tresult[i]\
    \ = l1[i];\n\tfor (int i = 0; i < l2.length; i++)\n\t\tfor (int j = 0; j < l1.length;\
    \ j++)\n\t\t\tif (l2[i] == l1[j])\n\t\t\t\tbreak;\n\t\t\n\tfor (int i = l1.length-1;\
    \ i >= 0; i--)\n\t\tif (result[i] == 0)\n\t\t\tresult[i] = l2[i];\n\treturn result;\n\
    }", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\
    \t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result = new\
    \ long[l1.length];\n    int j = 0;\n    for (int i = 0; i < l1.length; i++) {\n\
    \        while (j < l2.length && l1[i] == l2[j]) {\n            result[i] = l1[i];\n\
    \            j++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your solution, but I believe it can be optimized a bit.\
    \ For example, you can stop searching after you found the first common element\
    \ and save a lot of time by not searching further. Also, you don't need to sort\
    \ the lists, you can just use binary search to find the first common element.\
    \ Also, you can stop searching after you found the first common element and save\
    \ a lot of time by not searching further. Also, you don't need to sort the lists,\
    \ you can just use binary search to find the first common element. Also, you can\
    \ stop searching after you found the first common element and save a lot of time\
    \ by not searching further. Also, you don't need to sort the lists, you can just\
    \ use binary search to find the first common element. Also, you can stop searching\
    \ after you found the first common element and save a lot of time by not searching\
    \ further. Also, you don't need to sort the lists, you can just use binary search\
    \ to find the first common element. Also, you can stop searching after you found\
    \ the first common element and save a lot of time by not searching further.\n\
    <|/ c |>\n<| c |>\nI agree with you. But the question was about finding common\
    \ elements. And sorting is just an optimization.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. But the question was about finding common elements. And sorting is just\
    \ an optimization.\n<|/ c |>\n<| c |>\nI agree with you. But the question was\
    \ about finding common elements. And sorting is just an optimization.\n<|/ c |>\n\
    <| c |>\nI agree with you. But the question was about finding common elements.\
    \ And sorting is just an optimization.\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    <code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor (int\
    \ i = 0; i < l1.length; i++) {\n\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\
    \tif (l1[i] == l2[j]) {\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length + l2.length];\n\
    \tfor(int i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor(int i = 0;\
    \ i < l2.length; i++)\n\t\tresult[i + l1.length] = l2[i];\n\tArrays.sort(result);\n\
    \treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor(int i\
    \ = 0; i < l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t\
    {\n\t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result = new long[l1.length\
    \ + l2.length];\n    int i = 0;\n    int j = 0;\n    for(; i < l1.length && j\
    \ < l2.length; i++, j++)\n    {\n        if(l1[i] == l2[j])\n        {\n     \
    \       result[i] = l1[i];\n        }\n    }\n    for(; i < l1.length; i++)\n\
    \    {\n        result[i] = l1[i];\n    }\n    for(; j < l2.length; j++)\n   \
    \ {\n        result[l1.length + j] = l2[j];\n    }\n    return result;\n}\n/*\n\
    Return sorted unique common elements for two lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, int len) \n{\n    long[] result = new long[len];\n\
    \    int i = 0;\n    int j = 0;\n    for(; i < len && j < len; i++, j++)\n   \
    \ {\n        if(l1[i] == l2[j])\n        {\n            result[i] = l1[i];\n \
    \       }\n    }\n    for(; i < len; i++)\n    {\n        result[i] = l1[i];\n\
    \    }\n    for(; j < len; j++)\n    {\n        result[len + j] = l2[j];\n   \
    \ }\n    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2) \n\
    {\n    long[] result = new long[len + len2];\n    int i = 0;\n    int j = 0;\n\
    \    for(; i < len && j < len2; i++, j++)\n    {\n        if(l1[i] == l2[j])\n\
    \        {\n            result[i] = l1[i];\n        }\n    }\n    for(; i < len;\
    \ i++)\n    {\n        result[i] = l1[i];\n    }\n    for(; j < len2; j++)\n \
    \   {\n        result[len + j] = l2[j];\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2, int len3) \n{\n    long[] result = new long[len\
    \ + len2 + len3];\n    int i = 0;\n    int j = 0;\n    for(; i < len && j < len2\
    \ && j < len3; i++, j++)\n    {\n        if(l1[i] == l2[j])\n        {\n     \
    \       result[i] = l1[i];\n        }\n    }\n    for(; i < len; i++)\n    {\n\
    \        result[i] = l1[i];\n    }\n    for(; j < len2; j++)\n    {\n        result[len\
    \ + j] = l2[j];\n    }\n    for(; j < len3; j++)\n    {\n        result[len +\
    \ len2 + j] = l3[j];", "{\n    long[] result = new long[l1.length];\n    for(int\
    \ i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not the most\
    \ efficient solution. Using a hash map would probably be better.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. Hash map would be better. But the OP asked for efficient\
    \ solution. Hash map would require more memory and time complexity.\n<|/ c |>\n\
    <| c |>\nThe OP asked for efficient solution. Hash map would require more memory\
    \ and time complexity.\n<|/ c |>\n<| c |>\nI agree with you. Hash map would be\
    \ better. But the OP asked for efficient solution. Hash map would require more\
    \ memory and time complexity.\n<|/ c |>\n<| c |>\nI agree with you. Hash map would\
    \ be better. But the OP asked for efficient solution. Hash map would require more\
    \ memory and time complexity.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.HashSet;\nimport java.util.Set;", "{\n    long[] result = new\
    \ long[l1.length + l2.length];\n    for(int i = 0; i < result.length; ++i)\n \
    \       result[i] = 0;\n    for(int i = 0; i < l1.length; ++i)\n        for(int\
    \ j = 0; j < l2.length; ++j)\n            if(l1[i] == l2[j])\n               \
    \ result[i + j + 1] = 1;\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, long[] l3) \n{\n    long[] result = new long[l1.length + l2.length + l3.length];\n\
    \    for(int i = 0; i < result.length; ++i)\n        result[i] = 0;\n    for(int\
    \ i = 0; i < l1.length; ++i)\n        for(int j = 0; j < l2.length; ++j)\n   \
    \         for(int k = 0; k < l3.length; ++k)\n                if(l1[i] == l2[j]\
    \ && l2[j] == l3[k])\n                    result[i + j + k + 1] = 1;\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for three lists.\n    \
    \    \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n\
    {\n    long[] result = new long[l1.length + l2.length + l3.length + l4.length];\n\
    \    for(int i = 0; i < result.length; ++i)\n        result[i] = 0;\n    for(int\
    \ i = 0; i < l1.length; ++i)\n        for(int j = 0; j < l2.length; ++j)\n   \
    \         for(int k = 0; k < l3.length; ++k)\n                for(int l = 0; l\
    \ < l4.length; ++l)\n                    if(l1[i] == l2[j] && l2[j] == l3[k] &&\
    \ l3[k] == l4[l])\n                        result[i + j + k + l + 1] = 1;\n  \
    \  return result;\n}\n/*\nReturn sorted unique common elements for four lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4,\
    \ long[] l5) \n{\n    long[] result = new long[l1.length + l2.length + l3.length\
    \ + l4.length + l5.length];\n    for(int i = 0; i < result.length; ++i)\n    \
    \    result[i] = 0;\n    for(int i = 0; i < l1.length; ++i)\n        for(int j\
    \ = 0; j < l2.length; ++j)\n            for(int k = 0; k < l3.length; ++k)\n \
    \               for(int l = 0; l < l4.length; ++l)\n                    for(int\
    \ m = 0; m < l5.length; ++m)\n                        if(l1[i] == l2[j] && l2[j]\
    \ == l3[k] && l3[k] == l4[l] && l4[l] == l5[m])\n                            result[i\
    \ + j + k", "{\n\tlong [] result = new long[l1.length + l2.length];\n\t\n\tfor\
    \ (int i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\t\n\tfor (int i =\
    \ 0; i < l2.length; i++)\n\t\tresult[l1.length + i] = l2[i];\n\t\n\tArrays.sort(result);\n\
    \t\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\
    \t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result\
    \ = new long[l1.length];\n    for(int i = 0; i < l1.length; ++i)\n    {\n    \
    \    for(int j = 0; j < l2.length; ++j)\n        {\n            if(l1[i] == l2[j])\n\
    \            {\n                result[i] = l1[i];\n                break;\n \
    \           }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len) \n{\n    long[] result = new long[len];\n    for(int i =\
    \ 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length; ++j)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2) \n{\n  \
    \  long[] result = new long[len];\n    for(int i = 0; i < l1.length; ++i)\n  \
    \  {\n        for(int j = 0; j < l2.length; ++j)\n        {\n            if(l1[i]\
    \ == l2[j])\n            {\n                result[i] = l1[i];\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2, int len3) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length;\
    \ ++j)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2, int len3, int len4) \n{\n    long[] result = new long[len];\n    for(int\
    \ i = 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length; ++j)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3,\
    \ int len4, int len5) \n{\n    long[] result = new long[len];\n    for(int i =\
    \ 0; i < l1.length; ++i)\n    {\n        for(int ", "{\n\tlong[] result = new\
    \ long[l1.length + l2.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t\tresult[i]\
    \ = l1[i];\n\tfor (int i = 0; i < l2.length; i++)\n\t\tresult[l1.length + i] =\
    \ l2[i];\n\tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len) \n{\n\tlong[] result = new long[len];\n\tfor (int i = 0;\
    \ i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor (int i = 0; i < l2.length;\
    \ i++)\n\t\tresult[l1.length + i] = l2[i];\n\tArrays.sort(result);\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2) \n{\n\tlong[] result =\
    \ new long[len + len2];\n\tfor (int i = 0; i < l1.length; i++)\n\t\tresult[i]\
    \ = l1[i];\n\tfor (int i = 0; i < l2.length; i++)\n\t\tresult[l1.length + i] =\
    \ l2[i];\n\tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len, int len2, int len3) \n{\n\tlong[] result = new long[len\
    \ + len2 + len3];\n\tfor (int i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\
    \tfor (int i = 0; i < l2.length; i++)\n\t\tresult[l1.length + i] = l2[i];\n\t\
    for (int i = 0; i < l3.length; i++)\n\t\tresult[l1.length + l2.length + i] = l3[i];\n\
    \tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted unique common elements\
    \ for three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3) \n{\n\tlong[] result = new long[l1.length + l2.length + l3.length];\n\t\
    for (int i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor (int i = 0;\
    \ i < l2.length; i++)\n\t\tresult[l1.length + i] = l2[i];\n\tfor (int i = 0; i\
    \ < l3.length; i++)\n\t\tresult[l1.length + l2.length + i] = l3[i];\n\tArrays.sort(result);\n\
    \treturn result;\n}\n/*\nReturn sorted unique common elements for three lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, int len",
  "{\n\tlong [] result = new long[l1.length + l2.length];\n\t\n\tfor (int i = 0; i\
    \ < l1.length; i++)\n\t\tresult[i] = l1[i];\n\t\n\tfor (int i = 0; i < l2.length;\
    \ i++)\n\t\tresult[l1.length + i] = l2[i];\n\t\n\tArrays.sort(result);\n\t\n\t\
    return result;\n}", "{\n    int n = l1.length;\n    long[] result = new long[n];\n\
    \    \n    for(int i = 0; i < n; ++i)\n    {\n        for(int j = 0; j < n; ++j)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    \n  \
    \  return result;\n}", "{\n    long[] result = new long[l1.length];\n    for(int\
    \ i = 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length; ++j)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,c# |>\n<| c |>\nThis\
    \ is not the fastest solution. Using a HashSet is much faster.\n<|/ c |>\n<| c\
    \ |>\nI agree, HashSet is much faster, but this solution is also very fast and\
    \ easy to understand.\n<|/ c |>\n<| c |>\nThe HashSet solution doesn't work if\
    \ you have a duplicate in one of the lists. For example, if you have {1, 2, 3}\
    \ and {1, 2, 3} the HashSet solution will return {1, 2}.\n<|/ c |>\n<| c |>\n\
    This solution doesn't work if you have a duplicate in one of the lists. For example,\
    \ if you have {1, 2, 3} and {1, 2, 3} the HashSet solution will return {1, 2}.\n\
    <|/ c |>\n<| c |>\nThis solution doesn't work if you have a duplicate in one of\
    \ the lists. For example, if you have {1, 2, 3} and {1, 2, 3} the HashSet solution\
    \ will return {1, 2}.\n<|/ c |>\n<| a tags=arrays,sorting,c# |>\n<code>\npublic\
    \ static int[] SortUnique(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    HashSet<int> set = new HashSet<int>();\n    for(int i = 0; i < array.Length;\
    \ i++)\n    {\n        if(!set.Add(array[i]))\n        {\n            result[i]\
    \ = array[i];\n        }\n    }\n    return result.OrderBy(i => i).ToArray();\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution doesn't work if you have\
    \ a duplicate in one of the lists. For example, if you have {1, 2, 3} and {1,\
    \ 2, 3} the HashSet solution will return {1, 2}.\n<|/ c |>\n<| c |>\nThis solution\
    \ doesn't work if you have a duplicate in one of the lists. For example, if you\
    \ have {1, 2, 3} and {1, 2, 3} the HashSet solution will return {1, 2}.\n<|/ c\
    \ |>\n<| c |>\nThis solution doesn't work if you have a duplicate in one of the\
    \ lists. For example, if you have {1, 2, 3} and {1, 2, 3} the HashSet solution\
    \ will return {1, 2}.\n<|/ c |>\n<| c |>\nThis solution doesn't ", "{\n\tlong[]\
    \ result = new long[l1.length + l2.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t\tresult[i] = l1[i];\n\tfor (int i = 0; i < l2.length; i++)\n\t\tresult[l1.length\
    \ + i] = l2[i];\n\tArrays.sort(result);\n\treturn result;\n}", "{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n\
    \        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] ==\
    \ l2[j])\n            {\n                result[i] = l1[i];\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n\tlong [] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t\tfor (int\
    \ j = 0; j < l2.length; j++)\n\t\t\tif (l1[i] == l2[j])\n\t\t\t\tresult[i] = l1[i];\n\
    \treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i\
    \ = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t\
    {\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++) \n    {\n        for(int j = 0; j < l2.length;\
    \ j++) \n        {\n            if(l1[i] == l2[j]) \n            {\n         \
    \       result[i] = l1[i];\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++) \n    {\n        for(int j = 0; j < l2.length; j++) \n        {\n     \
    \       if(l1[i] == l2[j]) \n            {\n                for(int k = 0; k <\
    \ l3.length; k++) \n                {\n                    if(l1[i] == l3[k])\
    \ \n                    {\n                        result[i] = l1[i];\n      \
    \                  break;\n                    }\n                }\n        \
    \        break;\n            }\n        }\n    }\n    return result;\n}\n/*\n\
    Return sorted unique common elements for three lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n    long[] result =\
    \ new long[l1.length];\n    for(int i = 0; i < l1.length; i++) \n    {\n     \
    \   for(int j = 0; j < l2.length; j++) \n        {\n            if(l1[i] == l2[j])\
    \ \n            {\n                for(int k = 0; k < l3.length; k++) \n     \
    \           {\n                    if(l1[i] == l3[k]) \n                    {\n\
    \                        for(int l = 0; l < l4.length; l++) \n               \
    \         {\n                            if(l1[i] == l4[l]) \n               \
    \             {\n                                result[i] = l1[i];\n        \
    \                        break;\n                            }\n             \
    \           }\n                        break;\n                    }\n       \
    \         }\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for four lists.\n     \
    \   \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[]\
    \ l5) \n{\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++) \n    {\n        for(int j = 0; j < l2.length; j++) \n        {\n     \
    \       if(l1[i] == l2[j]) \n            {\n                for(int k = 0; k <\
    \ l3.length; k++) \n                {\n                    if(l1[i] == l3[k])\
    \ \n                    {\n                        for(int l = 0; l < l4.length;\
    \ l++) \n                        {\n                            if(l1[i] == l4[l])\
    \ \n                            {\n                                for(int m =\
    \ 0; m < l5.length; m++) \n                                ", "{\n    long[] result\
    \ = new long[l1.length + l2.length];\n    int j = 0;\n    for (int i = 0; i <\
    \ l1.length; i++) {\n        while (j < l2.length && l1[i] == l2[j]) {\n     \
    \       j++;\n        }\n        result[i] = l1[i];\n    }\n    for (int i = l1.length;\
    \ i < result.length; i++) {\n        result[i] = 0;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,c++,algorithm |>\n<| c |>\nThe OP said that he wants\
    \ to avoid using any additional data structures.\n<|/ c |>\n<| c |>\n: I didn't\
    \ say that. I just said that he should use an additional data structure. He didn't\
    \ say that he doesn't want to use any additional data structures.\n<|/ c |>\n\
    <| c |>\n: I didn't say that. I just said that he should use an additional data\
    \ structure. He didn't say that he doesn't want to use any additional data structures.\n\
    <|/ c |>\n<| c |>\n: I didn't say that. I just said that he should use an additional\
    \ data structure. He didn't say that he doesn't want to use any additional data\
    \ structures.\n<|/ c |>\n<| c |>\n: I didn't say that. I just said that he should\
    \ use an additional data structure. He didn't say that he doesn't want to use\
    \ any additional data structures.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>", "{\n    long[] result = new long[l1.length\
    \ + l2.length];\n    for(int i = 0; i < l1.length; i++) \n    {\n        for(int\
    \ j = 0; j < l2.length; j++) \n        {\n            if(l1[i] == l2[j]) \n  \
    \          {\n                result[i] = l1[i];\n                break;\n   \
    \         }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len) \n{\n    long[] result = new long[len];\n    for(int i =\
    \ 0; i < l1.length; i++) \n    {\n        for(int j = 0; j < l2.length; j++) \n\
    \        {\n            if(l1[i] == l2[j]) \n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2) \n{\n  \
    \  long[] result = new long[len];\n    for(int i = 0; i < l1.length; i++) \n \
    \   {\n        for(int j = 0; j < l2.length; j++) \n        {\n            if(l1[i]\
    \ == l2[j]) \n            {\n                result[i] = l1[i];\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2, int len3) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < l1.length; i++) \n    {\n        for(int j = 0; j < l2.length;\
    \ j++) \n        {\n            if(l1[i] == l2[j]) \n            {\n         \
    \       result[i] = l1[i];\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2, int len3, int len4) \n{\n    long[] result = new long[len];\n    for(int\
    \ i = 0; i < l1.length; i++) \n    {\n        for(int j = 0; j < l2.length; j++)\
    \ \n        {\n            if(l1[i] == l2[j]) \n            {\n              \
    \  result[i] = l1[i];\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int\
    \ len3, int len4, int len5) \n{\n    long[] result = new long[len];", "{\n\tlong\
    \ [] result = new long[l1.length];\n\tfor(int i = 0; i < l1.length; i++)\n\t{\n\
    \t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] == l2[j])\n\t\t\t\
    {\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }", "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        result[i]\
    \ = l1[i];\n                        break;\n                    }\n          \
    \      }\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for three lists.\n    \
    \    \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        for(int l = 0; l < l4.length; l++)\n   \
    \                     {\n                            if(l1[i] == l4[l])\n    \
    \                        {\n                                result[i] = l1[i];\n\
    \                                break;\n                            }\n     \
    \                   }\n                        break;\n                    }\n\
    \                }\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for four lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4,\
    \ long[] l5) \n{\n    long[] result = new long[l1.length];\n    for(int i = 0;\
    \ i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n   \
    \     {\n            if(l1[i] == l2[j])\n            {\n                for(int\
    \ k = 0; k < l3.length; k++)\n                {\n                    if(l1[i]\
    \ == l3[k])\n                    {\n                        for(int l = 0; l <\
    \ l4.length; l++)\n                        {\n                            if(l1[i]\
    \ == l4[l])\n                            {\n                                for(int\
    \ m = 0; m < l5.length; m++)\n                                {\n            \
    \                        if(l1[i] == l5[m])\n                                \
    \    {\n                                        result[i] = l1", "{\n\tlong[]\
    \ result = new long[l1.length + l2.length];\n\tfor (int i = 0; i < result.length;\
    \ ++i)\n\t\tresult[i] = 0;\n\tfor (int i = 0; i < l1.length; ++i)\n\t\tfor (int\
    \ j = 0; j < l2.length; ++j)\n\t\t\tif (l1[i] == l2[j])\n\t\t\t\tresult[i + j]\
    \ = l1[i];\n\tfor (int i = l1.length; i < result.length; ++i)\n\t\tresult[i] =\
    \ 0;\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n   \
    \ for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\n\
    This is not an efficient solution. `std::set` uses `std::less<>` which compares\
    \ elements using operator==. Your solution uses `std::less<>` which compares elements\
    \ using operator<. Your solution uses `std::less<>` which compares elements using\
    \ operator<. Your solution uses `std::less<>` which compares elements using operator<.\
    \ Your solution uses `std::less<>` which compares elements using operator<. Your\
    \ solution uses `std::less<>` which compares elements using operator<. Your solution\
    \ uses `std::less<>` which compares elements using operator<. Your solution uses\
    \ `std::less<>` which compares elements using operator<. Your solution uses `std::less<>`\
    \ which compares elements using operator<. Your solution uses `std::less<>` which\
    \ compares elements using operator<. Your solution uses `std::less<>` which compares\
    \ elements using operator<. Your solution uses `std::less<>` which compares elements\
    \ using operator<. Your solution uses `std::less<>` which compares elements using\
    \ operator<. Your solution uses `std::less<>` which compares elements using operator<.\
    \ Your solution uses `std::less<>` which compares elements using operator<. Your\
    \ solution uses `std::less<>` which compares elements using operator<. Your solution\
    \ uses `std::less<>` which compares elements using operator<. Your solution uses\
    \ `std::less<>` which compares elements using operator<. Your solution uses `std::less<>`\
    \ which compares elements using operator<. Your solution uses `std::less<>` which\
    \ compares elements using operator<. Your solution uses `std::less<>` which compares\
    \ elements using operator<. Your solution uses `std::less<>` which compares elements\
    \ using operator<. Your solution uses `std::less<>` which compares elements using\
    \ operator<. Your solution uses `std::less<>` which compares elements using operator<.\
    \ Your solution uses `std::less<>` which compares elements using operator<. Your\
    \ solution uses `std::less<>` which compares elements using operator<. Your solution\
    \ uses `std::less<>` which compares elements ", "{\n    long[] result = new long[l1.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l1.length; i++) {\n        while (j <\
    \ l2.length && l1[i] == l2[j]) j++;\n        result[i] = l1[i];\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len) \n{\n    long[] result\
    \ = new long[len];\n    int j = 0;\n    for (int i = 0; i < l1.length; i++) {\n\
    \        while (j < l2.length && l1[i] == l2[j]) j++;\n        result[i] = l1[i];\n\
    \    }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2) \n{\n    long[] result = new long[len];\n    int j = 0;\n    for (int\
    \ i = 0; i < l1.length; i++) {\n        while (j < l2.length && l1[i] == l2[j])\
    \ j++;\n        result[i] = l1[i];\n    }\n    return result;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2, int len3) \n{\n    long[] result = new long[len];\n\
    \    int j = 0;\n    for (int i = 0; i < l1.length; i++) {\n        while (j <\
    \ l2.length && l1[i] == l2[j]) j++;\n        while (j < l3.length && l1[i] ==\
    \ l3[j]) j++;\n        result[i] = l1[i];\n    }\n    return result;\n}\n/*\n\
    Return sorted unique common elements for three lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l1.length; i++) {\n        while (j <\
    \ l2.length && l1[i] == l2[j]) j++;\n        while (j < l3.length && l1[i] ==\
    \ l3[j]) j++;\n        result[i] = l1[i];\n    }\n    return result;\n}\n/*\n\
    Return sorted unique common elements for three lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, long[] l3, int len) \n{\n    long[] result = new\
    \ long[len];\n    int j = 0;\n    for (int i = 0; i < l1.length; i++) {\n    \
    \    while (j < l2.length && l1[i] == l2[j]) j++;\n        while (j < l3.length\
    \ && l1[i] == l3[j]) j++;\n        result[i] = l1[i];\n    }\n    return result;",
  "{\n\tlong[] result = new long[l1.length + l2.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t\tresult[i] = l1[i];\n\tfor (int i = 0; i < l2.length; i++)\n\t\tresult[l1.length\
    \ + i] = l2[i];\n\tArrays.sort(result);\n\treturn result;\n}", "{\n    long[]\
    \ result = new long[l1.length + l2.length];\n    int j = 0;\n    for (int i =\
    \ 0; i < l1.length; i++) \n    {\n        if (l2[j] == l1[i]) \n        {\n  \
    \          result[i] = l1[i];\n            j++;\n        }\n    }\n    for (int\
    \ i = l1.length; i < l2.length; i++) \n    {\n        result[i] = l2[j];\n   \
    \     j++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like your solution, but I believe that it is O(n^2) in worst case. I am looking\
    \ for a O(n) solution. Thanks anyway!\n<|/ c |>\n<| c |>\n: I believe that it\
    \ is O(n) in the worst case because of the nested loops. If you have two lists\
    \ with n elements, then the outer loop will run n times and the inner loop will\
    \ run n times. So the total complexity is O(n^2). However, the inner loop is only\
    \ executed n times, so the total complexity is O(n).\n<|/ c |>\n<| c |>\n: I believe\
    \ that it is O(n) in the worst case because of the nested loops. If you have two\
    \ lists with n elements, then the outer loop will run n times and the inner loop\
    \ will run n times. So the total complexity is O(n^2). However, the inner loop\
    \ is only executed n times, so the total complexity is O(n).\n<|/ c |>\n<| c |>\n\
    : I believe that it is O(n) in the worst case because of the nested loops. If\
    \ you have two lists with n elements, then the outer loop will run n times and\
    \ the inner loop will run n times. So the total complexity is O(n^2). However,\
    \ the inner loop is only executed n times, so the total complexity is O(n).\n\
    <|/ c |>\n<| c |>\n: I believe that it is O(n) in the worst case because of the\
    \ nested loops. If you have two lists with n elements, then the outer loop will\
    \ run n times and the inner loop will run n times. So the total complexity is\
    \ O(n^2). However, the inner loop is only executed n times, so the total complexity\
    \ is O(n).\n<|/ c |>\n<| a dscore=2 |>\n<code>\npublic static List<Integer> getCommonElements(List<Integer>\
    \ list1, List<Integer> list2) {\n    List<Integer> result = new ArrayList<Integer>();\n\
    \    Set<Integer> set1 = new HashSet<Integer>(list1);\n    Set<Integer> set2 = ",
  "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        result[i]\
    \ = l1[i];\n                        break;\n                    }\n          \
    \      }\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for three lists.\n    \
    \    \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        for(int l = 0; l < l4.length; l++)\n   \
    \                     {\n                            if(l1[i] == l4[l])\n    \
    \                        {\n                                result[i] = l1[i];\n\
    \                                break;\n                            }\n     \
    \                   }\n                        break;\n                    }\n\
    \                }\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for four lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4,\
    \ long[] l5) \n{\n    long[] result = new long[l1.length];\n    for(int i = 0;\
    \ i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n   \
    \     {\n            if(l1[i] == l2[j])\n            {\n                for(int\
    \ k = 0; k < l3.length; k++)\n                {\n                    if(l1[i]\
    \ == l3[k])\n                    {\n                        for(int l = 0; l <\
    \ l4.length; l++)\n                        {\n                            if(l1[i]\
    \ == l4[l])\n                            {\n                                for(int\
    \ m = 0; m < l5.length; m++)\n                                {\n            \
    \                        if(l1[i] == l5[m])\n                                \
    \    {\n                                        result[i] = l1", "{\n    long[]\
    \ result = new long[l1.length + l2.length];\n    int j = 0;\n    for (int i =\
    \ 0; i < l1.length; i++)\n    {\n        for (int k = 0; k < l2.length; k++)\n\
    \        {\n            if (l1[i] == l2[k])\n            {\n                result[j++]\
    \ = l1[i];\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI tested this with two lists containing duplicates\
    \ and it worked fine.\n<|/ c |>\n<| c |>\nI tested this with two lists containing\
    \ duplicates and it worked fine.\n<|/ c |>\n<| c |>\nI tested this with two lists\
    \ containing duplicates and it worked fine.\n<|/ c |>\n<| c |>\nI tested this\
    \ with two lists containing duplicates and it worked fine.\n<|/ c |>\n<| c |>\n\
    I tested this with two lists containing duplicates and it worked fine.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static long commonElements(List<Long> list1,\
    \ List<Long> list2) {\n    long result = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    ", "{\n\t\
    long[] res = new long[l1.length];\n\tfor(int i = 0; i < l1.length; i++)\n\t{\n\
    \t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] == l2[j])\n\t\t\t\
    {\n\t\t\t\tres[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len) \n{\n\tlong[] res = new long[len];\n\
    \tfor(int i = 0; i < l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\
    \t\t{\n\t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tres[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int\
    \ len, int len2) \n{\n\tlong[] res = new long[len];\n\tfor(int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tres[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn res;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int\
    \ len3) \n{\n\tlong[] res = new long[len];\n\tfor(int i = 0; i < l1.length; i++)\n\
    \t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] == l2[j])\n\
    \t\t\t{\n\t\t\t\tres[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn sorted unique common elements for two lists.\n        \n\
    \    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3, int\
    \ len4) \n{\n\tlong[] res = new long[len];\n\tfor(int i = 0; i < l1.length; i++)\n\
    \t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] == l2[j])\n\
    \t\t\t{\n\t\t\t\tres[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn sorted unique common elements for two lists.\n        \n\
    \    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3, int\
    \ len4, int len5) \n{\n\tlong[] res = new long[len];\n\tfor(int i = 0; i < ",
  "{\n\tlong [] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\
    \t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\
    \t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}", "{\n    long[] result = new long[l1.length + l2.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l1.length; i++) {\n        if (l2[j] == l1[i])\
    \ {\n            result[i] = l1[i];\n            j++;\n        }\n    }\n    for\
    \ (int i = l1.length; i < l2.length; i++) {\n        result[i] = l2[j];\n    \
    \    j++;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,algorithm,sorting,java |>\n<| c |>\nThis doesn't work. Try it\
    \ with `common(new long[] {1, 3, 5}, new long[] {1, 3, 5})`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `common(new long[] {1, 3, 5}, new long[] {1, 3, 5})`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `common(new long[] {1, 3, 5},\
    \ new long[] {1, 3, 5})`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `common(new\
    \ long[] {1, 3, 5}, new long[] {1, 3, 5})`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `common(new long[] {1, 3, 5}, new long[] {1, 3, 5})`.\n<|/ c |>\n\
    <| a tags=arrays,algorithm,sorting,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[l1.length];\n    int j = 0;\n    for (int i = 0;\
    \ i < l1.length; i++)\n    {\n        while (j < l2.length && l1[i] == l2[j])\n\
    \        {\n            result[i] = l1[i];\n            j++;\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len) \n{\n    long[]\
    \ result = new long[len];\n    int j = 0;\n    for (int i = 0; i < l1.length;\
    \ i++)\n    {\n        while (j < l2.length && l1[i] == l2[j])\n        {\n  \
    \          result[j] = l1[i];\n            j++;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2) \n{\n  \
    \  long[] result = new long[len];\n    int j = 0;\n    for (int i = 0; i < l1.length;\
    \ i++)\n    {\n        while (j < l2.length && l1[i] == l2[j])\n        {\n  \
    \          result[j] = l1[i];\n            j++;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3)\
    \ \n{\n    long[] result = new long[len];\n    int j = 0;\n    for (int i = 0;\
    \ i < l1.length; i++)\n    {\n        while (j < l2.length && l1[i] == l2[j])\n\
    \        {\n            result[j] = l1[i];\n            j++;\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int\
    \ len3, int len4) \n{\n    long[] result = new long[len];\n    int j = 0;\n  \
    \  for (int i = 0; i < l1.length; i++)\n    {\n        while (j < l2.length &&\
    \ l1[i] == l2[j])\n        {\n            result[j] = l1[i];\n            j++;\n\
    \        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int\
    \ len, int len2, int len3, int len4, int len5) \n{\n    long[] result = new long[len];\n\
    \    int j = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n        while\
    \ (j < l2.length && l1[i] == l2[j])\n        {\n            result[j] = l1[i];\n\
    \            j", "{\n\tlong[] result = new long[l1.length];\n\tfor(int i = 0;\
    \ i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor(int i = 0; i < l2.length;\
    \ i++)\n\t\tresult[l1.length + i] = l2[i];\n\tArrays.sort(result);\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len) \n{\n\tlong[] result = new long[len];\n\
    \tfor(int i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor(int i = 0;\
    \ i < l2.length; i++)\n\t\tresult[l1.length + i] = l2[i];\n\tArrays.sort(result);\n\
    \treturn result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2) \n\
    {\n\tlong[] result = new long[len];\n\tfor(int i = 0; i < l1.length; i++)\n\t\t\
    result[i] = l1[i];\n\tfor(int i = 0; i < l2.length; i++)\n\t\tresult[l1.length\
    \ + i] = l2[i];\n\tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2, int len3) \n{\n\tlong[] result = new long[len];\n\
    \tfor(int i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor(int i = 0;\
    \ i < l2.length; i++)\n\t\tresult[l1.length + i] = l2[i];\n\tArrays.sort(result);\n\
    \treturn result;\n}\n/*\nReturn sorted unique common elements for three lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n\tlong[]\
    \ result = new long[l1.length];\n\tfor(int i = 0; i < l1.length; i++)\n\t\tresult[i]\
    \ = l1[i];\n\tfor(int i = 0; i < l2.length; i++)\n\t\tresult[l1.length + i] =\
    \ l2[i];\n\tfor(int i = 0; i < l3.length; i++)\n\t\tresult[l1.length + l2.length\
    \ + i] = l3[i];\n\tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted\
    \ unique common elements for three lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3, int len) \n{\n\tlong[] result = new long[len];\n\t\
    for(int i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor(int i = 0; i\
    \ < l2.length; i++)\n\t\tresult[l1.length + ", "{\n    int n = l1.length;\n  \
    \  long[] result = new long[n];\n    for(int i = 0; i < n; ++i)\n    {\n     \
    \   for(int j = 0; j < n; ++j)\n        {\n            if(l1[i] == l2[j])\n  \
    \          {\n                result[i] = l1[i];\n                break;\n   \
    \         }\n        }\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int n) \n{\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        for(int j = 0; j < n; ++j)\n \
    \       {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int n, int m) \n{\n \
    \   long[] result = new long[n];\n    for(int i = 0; i < n; ++i)\n    {\n    \
    \    for(int j = 0; j < n; ++j)\n        {\n            if(l1[i] == l2[j])\n \
    \           {\n                result[i] = l1[i];\n                break;\n  \
    \          }\n        }\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int n, int m, int n) \n{\n    long[] result\
    \ = new long[n];\n    for(int i = 0; i < n; ++i)\n    {\n        for(int j = 0;\
    \ j < n; ++j)\n        {\n            if(l1[i] == l2[j])\n            {\n    \
    \            result[i] = l1[i];\n                break;\n            }\n     \
    \   }\n    }\n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int n, int m, int n, int m) \n{\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        for(int j = 0; j < n; ++j)\n \
    \       {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int n, int m, int n,\
    \ int m, int n) \n{\n    long[] result = new long[n];\n    for(int i = 0; i <\
    \ n; ++i)\n    {\n        for(int j = 0; j < n; ++j)", "{\n    long[] result =\
    \ new long[l1.length + l2.length];\n    int j = 0;\n    for (int i = 0; i < l1.length;\
    \ i++)\n    {\n        while (j < l2.length && l2.get(j) == l1.get(i))\n     \
    \   {\n            result[i] = l1.get(i);\n            j++;\n        }\n    }\n\
    \    for (int i = l1.length; i < result.length; i++)\n    {\n        result[i]\
    \ = 0;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ is not the correct solution. Try it with `common([1,2],[1,2,3])`\n<|/ c |>\n\
    <| c |>\n: I believe it is. It returns `[1,2,3]` as expected.\n<|/ c |>\n<| c\
    \ |>\n: I believe it is. It returns `[1,2,3]` as expected.\n<|/ c |>\n<| c |>\n\
    : I believe it is. It returns `[1,2,3]` as expected.\n<|/ c |>\n<| c |>\n: I believe\
    \ it is. It returns `[1,2,3]` as expected.\n<|/ c |>\n<| a tags=arrays,c#,algorithm\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;", "{\n    long[] result = new long[l1.length];\n    for(int\
    \ i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n\
    \        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] ==\
    \ l2[j])\n            {\n                for(int k = 0; k < l3.length; k++)\n\
    \                {\n                    if(l1[i] == l3[k])\n                 \
    \   {\n                        result[i] = l1[i];\n                        break;\n\
    \                    }\n                }\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n  \
    \  for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n    long[] result = new long[l1.length + l2.length];\n    for(int\
    \ i = 0; i < l1.length; i++)\n        result[i] = l1[i];\n    for(int i = 0; i\
    \ < l2.length; i++)\n        result[l1.length + i] = l2[i];\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm |>\n<| c |>\n\
    This is not the correct solution. Try with {1, 3, 5} and {1, 3, 5}. Your solution\
    \ will return {1, 3, 5} instead of {1, 5}\n<|/ c |>\n<| c |>\n: I see what you\
    \ mean. My solution doesn't return the correct result for {1, 3, 5} and {1, 3,\
    \ 5}. I'll edit my answer to fix that.\n<|/ c |>\n<| c |>\n: I fixed my solution\
    \ to return the correct result for {1, 3, 5} and {1, 3, 5}. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\n: I fixed my solution to return the correct result\
    \ for {1, 3, 5} and {1, 3, 5}. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n\
    : I fixed my solution to return the correct result for {1, 3, 5} and {1, 3, 5}.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a tags=arrays,c#,algorithm |>\n\
    I wrote a solution in C#:\n<code>\npublic static IEnumerable<T> Common<T>(this\
    \ IEnumerable<T> list1, IEnumerable<T> list2)\n{\n    List<T> list = new List<T>(list1);\n\
    \    list.AddRange(list2);\n    list.Sort();\n    List<T> result = new List<T>();\n\
    \    T last = null;\n    foreach (T item in list)\n    {\n        if (last ==\
    \ item)\n            continue;\n        result.Add(item);\n        last = item;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not\
    \ the correct solution. Try with {1, 3, 5} and {1, 3, 5}. Your solution will return\
    \ {1, 3, 5} instead of {1, 5}\n<|/ c |>\n<| c |>\n: I see what you mean. My solution\
    \ doesn't return the correct result for {1, 3, 5} and {1, 3, 5}. I'll edit my\
    \ answer to fix that.\n<|/ c |>\n<| c |>\n: I fixed my solution to return the\
    \ correct result for {1, 3, 5} and {1, 3, 5}. Thanks for point", "{\n    long[]\
    \ result = new long[l1.length];\n    \n    int j = 0;\n    for(int i = 0; i <\
    \ l1.length; i++) \n    {\n        while(j < l2.length && l1[i] == l2[j]) \n \
    \       {\n            result[i] = l1[i];\n            j++;\n        }\n    }\n\
    \    \n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len) \n\
    {\n    long[] result = new long[len];\n    \n    int j = 0;\n    for(int i = 0;\
    \ i < l1.length; i++) \n    {\n        while(j < l2.length && l1[i] == l2[j])\
    \ \n        {\n            result[i] = l1[i];\n            j++;\n        }\n \
    \   }\n    \n    return result;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len,\
    \ int len2) \n{\n    long[] result = new long[len];\n    \n    int j = 0;\n  \
    \  for(int i = 0; i < l1.length; i++) \n    {\n        while(j < l2.length &&\
    \ l1[i] == l2[j]) \n        {\n            result[i] = l1[i];\n            j++;\n\
    \        }\n    }\n    \n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2, int len3) \n{\n    long[] result = new long[len];\n \
    \   \n    int j = 0;\n    for(int i = 0; i < l1.length; i++) \n    {\n       \
    \ while(j < l2.length && l1[i] == l2[j]) \n        {\n            result[i] =\
    \ l1[i];\n            j++;\n        }\n    }\n    \n    return result;\n}\n/*\n\
    Return sorted unique common elements for two lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, int len, int len2, int len3, int len4) \n{\n  \
    \  long[] result = new long[len];\n    \n    int j = 0;\n    for(int i = 0; i\
    \ < l1.length; i++) \n    {\n        while(j < l2.length && l1[i] == l2[j]) \n\
    \        {\n            result[i] = l1[i];\n            j++;\n        }\n    }\n\
    \    \n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2, int len3, int len4, int len5) \n{\n    long[] ", "{\n\tlong[] result =\
    \ new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int\
    \ j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\
    \tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
  "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\
    \t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\
    \t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len) \n{\n\tlong[] result\
    \ = new long[len];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j\
    \ = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\t\
    result[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\
    /*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2) \n{\n\tlong[] result =\
    \ new long[len];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j =\
    \ 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\t\
    result[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\
    /*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3) \n{\n\tlong[]\
    \ result = new long[len];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor\
    \ (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\
    \t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3, int len4) \n\
    {\n\tlong[] result = new long[len];\n\tfor (int i = 0; i < l1.length; i++)\n\t\
    {\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\
    \t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3,\
    \ int len4, int len5) \n{\n\tlong[] result = new long[len];\n\tfor (int i = 0;\
    \ i < ", "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i <\
    \ l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n       \
    \ {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n\
    \        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] ==\
    \ l2[j])\n            {\n                for(int k = 0; k < l3.length; k++)\n\
    \                {\n                    if(l1[i] == l3[k])\n                 \
    \   {\n                        result[i] = l1[i];\n                        break;\n\
    \                    }\n                }\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n  \
    \  for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n\tlong[] result = new long[l1.length + l2.length];\n\tfor(int i =\
    \ 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor(int i = 0; i < l2.length;\
    \ i++)\n\t\tresult[l1.length + i] = l2[i];\n\tArrays.sort(result);\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3) \n{\n\tlong[] result = new long[l1.length\
    \ + l2.length + l3.length];\n\tfor(int i = 0; i < l1.length; i++)\n\t\tresult[i]\
    \ = l1[i];\n\tfor(int i = 0; i < l2.length; i++)\n\t\tresult[l1.length + i] =\
    \ l2[i];\n\tfor(int i = 0; i < l3.length; i++)\n\t\tresult[l1.length + l2.length\
    \ + i] = l3[i];\n\tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted\
    \ unique common elements for three lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3, long[] l4) \n{\n\tlong[] result = new long[l1.length\
    \ + l2.length + l3.length + l4.length];\n\tfor(int i = 0; i < l1.length; i++)\n\
    \t\tresult[i] = l1[i];\n\tfor(int i = 0; i < l2.length; i++)\n\t\tresult[l1.length\
    \ + i] = l2[i];\n\tfor(int i = 0; i < l3.length; i++)\n\t\tresult[l1.length +\
    \ l2.length + i] = l3[i];\n\tfor(int i = 0; i < l4.length; i++)\n\t\tresult[l1.length\
    \ + l2.length + l3.length + i] = l4[i];\n\tArrays.sort(result);\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for four lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[] l5) \n{\n\
    \tlong[] result = new long[l1.length + l2.length + l3.length + l4.length + l5.length];\n\
    \tfor(int i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor(int i = 0;\
    \ i < l2.length; i++)\n\t\tresult[l1.length + i] = l2[i];\n\tfor(int i = 0; i\
    \ < l3.length; i++)\n\t\tresult[l1.length + l2.length + i] = l3[i];\n\tfor(int\
    \ i = 0; i < l4.length; i++)\n\t\tresult[l1.length + l2.length + l3.length + i]\
    \ = l4[i];\n\tfor(int i = 0; i < l5.length; i++)\n\t\tresult[l1.length + l2.length\
    \ + l3.length + l4.length", "{\n    long[] result = new long[l1.length];\n   \
    \ long common = 0;\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int\
    \ j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n    \
    \        {\n                common++;\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < l1.length; i++)\n    {\n        if(l1[i] != common)\n        {\n\
    \            result[i] = l1[i];\n        }\n    }\n    return result;\n}\n/*\n\
    Return sorted unique common elements for two lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n\
    \    long common = 0;\n    for(int i = 0; i < l1.length; i++)\n    {\n       \
    \ for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n\
    \            {\n                common++;\n            }\n        }\n    }\n \
    \   for(int i = 0; i < l1.length; i++)\n    {\n        if(l1[i] != common)\n \
    \       {\n            result[i] = l1[i];\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for three lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n    long[]\
    \ result = new long[l1.length];\n    long common = 0;\n    for(int i = 0; i <\
    \ l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n       \
    \ {\n            if(l1[i] == l2[j])\n            {\n                common++;\n\
    \            }\n        }\n    }\n    for(int i = 0; i < l1.length; i++)\n   \
    \ {\n        if(l1[i] != common)\n        {\n            result[i] = l1[i];\n\
    \        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common elements\
    \ for four lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n  \
    \  long common = 0;\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int\
    \ j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n    \
    \        {\n                common++;\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < l1.length; i++)\n    {\n        if(l1[i] != common)\n        {\n\
    \            result[i] = l1[i];\n        }\n    }\n    return result;\n}\n/*\n\
    Return sorted unique common elements for five lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, long[] l3, long[] l4, long[] l5, ", "{\n\tlong\
    \ [] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t\
    {\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\
    \t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor(int i = 0; i\
    \ < l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\t\
    if(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len)\
    \ \n{\n\tlong[] result = new long[len];\n\tfor(int i = 0; i < l1.length; i++)\n\
    \t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] == l2[j])\n\
    \t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2) \n{\n\t\
    long[] result = new long[len];\n\tfor(int i = 0; i < l1.length; i++)\n\t{\n\t\t\
    for(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\
    \t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3) \n{\n\tlong[]\
    \ result = new long[len];\n\tfor(int i = 0; i < l1.length; i++)\n\t{\n\t\tfor(int\
    \ j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\
    \tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3, int len4) \n\
    {\n\tlong[] result = new long[len];\n\tfor(int i = 0; i < l1.length; i++)\n\t\
    {\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] == l2[j])\n\t\
    \t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3,\
    \ int len4, int len5) \n{\n\tlong[] result = new long[len];\n\tfor(int i = 0;\
    \ i < ", "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i <\
    \ l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n       \
    \ {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n\
    \        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] ==\
    \ l2[j])\n            {\n                for(int k = 0; k < l3.length; k++)\n\
    \                {\n                    if(l1[i] == l3[k])\n                 \
    \   {\n                        result[i] = l1[i];\n                        break;\n\
    \                    }\n                }\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n  \
    \  for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n    long[] result = new long[l1.length];\n    int j = 0;\n    for\
    \ (int i = 0; i < l1.length; i++) {\n        while (j < l2.length && l1[i] ==\
    \ l2[j]) {\n            result[i] = l1[i];\n            j++;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm |>\n<| c |>\n\
    This is not the most efficient solution. `std::sort` will do much better than\
    \ this.\n<|/ c |>\n<| c |>\n: I agree, but I wanted to give a solution that is\
    \ easy to understand and implement. Also, `std::sort` will do much better than\
    \ this because it is O(n log n), whereas this solution is O(n^2).\n<|/ c |>\n\
    <| c |>\n: I agree, but I wanted to give a solution that is easy to understand\
    \ and implement. Also, `std::sort` will do much better than this because it is\
    \ O(n log n), whereas this solution is O(n^2).\n<|/ c |>\n<| c |>\n: I agree,\
    \ but I wanted to give a solution that is easy to understand and implement. Also,\
    \ `std::sort` will do much better than this because it is O(n log n), whereas\
    \ this solution is O(n^2).\n<|/ c |>\n<| c |>\n: I agree, but I wanted to give\
    \ a solution that is easy to understand and implement. Also, `std::sort` will\
    \ do much better than this because it is O(n log n), whereas this solution is\
    \ O(n^2).\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        result[i] = l1[i];\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n        while (j < l2.length\
    \ && l1[i] == l2[j])\n        {\n            result[i] = l1[i];\n            j++;\n\
    \        }\n    }\n    return result;\n}", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++) \n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++) \n\t\t{\n\t\t\tif (l1[i] == l2[j]) \n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int\
    \ i = 0; i < l1.length; i++) \n\t{\n\t\tfor (int j = 0; j < l2.length; j++) \n\
    \t\t{\n\t\t\tif (l1[i] == l2[j]) \n\t\t\t{\n\t\t\t\tfor (int k = 0; k < l3.length;\
    \ k++) \n\t\t\t\t{\n\t\t\t\t\tif (l1[i] == l3[k]) \n\t\t\t\t\t{\n\t\t\t\t\t\t\
    result[i] = l1[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements\
    \ for three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0;\
    \ i < l1.length; i++) \n\t{\n\t\tfor (int j = 0; j < l2.length; j++) \n\t\t{\n\
    \t\t\tif (l1[i] == l2[j]) \n\t\t\t{\n\t\t\t\tfor (int k = 0; k < l3.length; k++)\
    \ \n\t\t\t\t{\n\t\t\t\t\tif (l1[i] == l3[k]) \n\t\t\t\t\t{\n\t\t\t\t\t\tfor (int\
    \ l = 0; l < l4.length; l++) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (l1[i] == l4[l])\
    \ \n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\t\t\t\tbreak;\n\
    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++) \n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++) \n\t\t{\n\t\t\tif (l1[i] == l2[j]) \n\t\t\t{\n\t\t\t\tfor (int k = 0; k\
    \ < l3.length; k++) \n\t\t\t\t{\n\t\t\t\t\tif (l1[i] == l3[k]) \n\t\t\t\t\t{\n\
    \t\t\t\t\t\tfor (int l = 0; l < l4.length; l++) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\
    if (l1[i] == l4[l]) \n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfor (int m = 0; m < l5.",
  "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2) \n{\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3) \n{\n    long[]\
    \ result = new long[len];\n    for(int i = 0; i < l1.length; i++)\n    {\n   \
    \     for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n\
    \            {\n                result[i] = l1[i];\n                break;\n \
    \           }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len, int len2, int len3, int len4) \n{\n    long[] result = new\
    \ long[len];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j\
    \ = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n      \
    \      {\n                result[i] = l1[i];\n                break;\n       \
    \     }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2, int len3, int len4, int len5) \n{\n    long[] result\
    \ = new long[len];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int\
    \ j = 0; j < l2.length; j++)", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        result[i] = l1[i];\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n\tlong[]\
    \ result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\
    \tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t\
    {\n\t\t\t\tfor (int k = 0; k < l3.length; k++)\n\t\t\t\t{\n\t\t\t\t\tif (l1[i]\
    \ == l3[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\t\tbreak;\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for three lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor\
    \ (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\
    \t\t\t\tfor (int k = 0; k < l3.length; k++)\n\t\t\t\t{\n\t\t\t\t\tif (l1[i] ==\
    \ l3[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (int l = 0; l < l4.length; l++)\n\t\t\t\
    \t\t\t{\n\t\t\t\t\t\t\tif (l1[i] == l4[l])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\
    result[i] = l1[i];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\
    \t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn result;\n}\n/*\nReturn sorted unique common elements for four lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4,\
    \ long[] l5) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i\
    \ < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\
    \tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tfor (int k = 0; k < l3.length; k++)\n\t\
    \t\t\t{\n\t\t\t\t\tif (l1[i] == l3[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (int l =\
    \ 0; l < l4.length; l++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (l1[i] == l4[l])\n\t\
    \t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfor (int m = 0; m < l5.length; m++)\n\t\t\t\t\t\
    \t\t\t{\n\t\t\t\t\t\t\t\t\tif (l1[i] == l5[m])\n\t\t\t\t\t\t\t\t\t", "{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n\
    \        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] ==\
    \ l2[j])\n            {\n                result[i] = l1[i];\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n    for(int\
    \ i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                for(int\
    \ k = 0; k < l3.length; k++)\n                {\n                    if(l1[i]\
    \ == l3[k])\n                    {\n                        result[i] = l1[i];\n\
    \                        break;\n                    }\n                }\n  \
    \              break;\n            }\n        }\n    }\n    return result;\n}\n\
    /*\nReturn sorted unique common elements for three lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n    long[] result\
    \ = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n    \
    \    for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n\
    \            {\n                for(int k = 0; k < l3.length; k++)\n         \
    \       {\n                    if(l1[i] == l3[k])\n                    {\n   \
    \                     for(int l = 0; l < l4.length; l++)\n                   \
    \     {\n                            if(l1[i] == l4[l])\n                    \
    \        {\n                                result[i] = l1[i];\n             \
    \                   break;\n                            }\n                  \
    \      }\n                        break;\n                    }\n            \
    \    }\n                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for four lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[] l5) \n{\n\
    \    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n\
    \    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i]\
    \ == l2[j])\n            {\n                for(int k = 0; k < l3.length; k++)\n\
    \                {\n                    if(l1[i] == l3[k])\n                 \
    \   {\n                        for(int l = 0; l < l4.length; l++)\n          \
    \              {\n                            if(l1[i] == l4[l])\n           \
    \                 {\n                                for(int m = 0; m < l5.length;\
    \ m++)\n                                {\n                                  \
    \  if(l1[i] == l5[m])\n                                    {\n               \
    \                         result[i] = l1", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor\
    \ (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\
    \t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len) \n{\n\tlong[] result = new long[len];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len, int len2) \n{\n\tlong[] result = new long[len];\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\
    \t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2, int len3) \n{\n\tlong[] result = new long[len];\n\tfor\
    \ (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\
    \t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2, int len3, int len4) \n{\n\tlong[] result = new long[len];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len, int len2, int len3, int len4, int len5) \n{\n\tlong[] result\
    \ = new long[len];\n\tfor (int i = 0; i < ", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++) \n    {\n        for(int j = 0; j < l2.length;\
    \ j++) \n        {\n            if(l1[i] == l2[j]) \n            {\n         \
    \       result[i] = l1[i];\n                break;\n            }\n        }\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}", "{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t\tresult[i]\
    \ = l1[i];\n\tfor (int i = 0; i < l2.length; i++)\n\t\tfor (int j = 0; j < l1.length;\
    \ j++)\n\t\t\tif (l2[i] == l1[j])\n\t\t\t\tbreak;\n\t\t\n\tfor (int i = l1.length-1;\
    \ i >= 0; i--)\n\t\tfor (int j = l2.length-1; j >= 0; j--)\n\t\t\tif (l2[j] ==\
    \ l1[i])\n\t\t\t\tbreak;\n\t\n\tfor (int i = 0; i < l1.length; i++)\n\t\tfor (int\
    \ j = 0; j < l2.length; j++)\n\t\t\tif (l2[j] == l1[i])\n\t\t\t\tbreak;\n\t\n\t\
    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n \
    \       \n    \n*/\nlong[] common(long[] l1, long[] l2, int l) \n{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t\tresult[i]\
    \ = l1[i];\n\tfor (int i = 0; i < l2.length; i++)\n\t\tfor (int j = 0; j < l1.length;\
    \ j++)\n\t\t\tif (l2[i] == l1[j])\n\t\t\t\tbreak;\n\t\t\n\tfor (int i = l1.length-1;\
    \ i >= 0; i--)\n\t\tfor (int j = l2.length-1; j >= 0; j--)\n\t\t\tif (l2[j] ==\
    \ l1[i])\n\t\t\t\tbreak;\n\t\n\tfor (int i = 0; i < l1.length; i++)\n\t\tfor (int\
    \ j = 0; j < l2.length; j++)\n\t\t\tif (l2[j] == l1[i])\n\t\t\t\tbreak;\n\t\n\t\
    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n \
    \       \n    \n*/\nlong[] common(long[] l1, long[] l2, int l, int h) \n{\n\t\
    long[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t\
    \tresult[i] = l1[i];\n\tfor (int i = 0; i < l2.length; i++)\n\t\tfor (int j =\
    \ 0; j < l1.length; j++)\n\t\t\tif (l2[i] == l1[j])\n\t\t\t\tbreak;\n\t\t\n\t\
    for (int i = l1.length-1; i >= l; i--)\n\t\tfor (int j = l2.length-1; j >= h;\
    \ j--)\n\t\t\tif (l2[j] == l1[i])\n\t\t\t\tbreak;\n\t\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t\tif (l2[j] == l1[i])\n\t\
    \t\t\tbreak;\n\t\n\treturn result;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int\
    \ l, int h, int m) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int i =\
    \ 0; i < l1.length", "{\n\tlong[] result = new long[l1.length + l2.length];\n\t\
    long i = 0;\n\tlong j = 0;\n\twhile (i < l1.length && j < l2.length) {\n\t\tif\
    \ (l1.get(i) == l2.get(j)) {\n\t\t\tresult[i] = l1.get(i);\n\t\t\ti++;\n\t\t\t\
    j++;\n\t\t}\n\t\telse if (l1.get(i) < l2.get(j)) {\n\t\t\ti++;\n\t\t}\n\t\telse\
    \ {\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (i < l1.length) {\n\t\tresult[i] = l1.get(i);\n\
    \t\ti++;\n\t}\n\twhile (j < l2.length) {\n\t\tresult[j] = l2.get(j);\n\t\tj++;\n\
    \t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length + l2.length];\n\
    \t\n\tfor (int i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\t\n\tfor (int\
    \ i = 0; i < l2.length; i++)\n\t\tresult[l1.length + i] = l2[i];\n\t\n\tArrays.sort(result);\n\
    \t\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\
    \t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\
    \t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tfor (int k = 0; k < l3.length;\
    \ k++)\n\t\t\t\t{\n\t\t\t\t\tif (l1[i] == l3[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[i]\
    \ = l1[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements for\
    \ three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0;\
    \ i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\
    \t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tfor (int k = 0; k < l3.length; k++)\n\
    \t\t\t\t{\n\t\t\t\t\tif (l1[i] == l3[k])\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (int l\
    \ = 0; l < l4.length; l++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (l1[i] == l4[l])\n\
    \t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\t\t\t\tbreak;\n\t\
    \t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tfor (int k = 0; k <\
    \ l3.length; k++)\n\t\t\t\t{\n\t\t\t\t\tif (l1[i] == l3[k])\n\t\t\t\t\t{\n\t\t\
    \t\t\t\tfor (int l = 0; l < l4.length; l++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (l1[i]\
    \ == l4[l])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfor (int m = 0; m < l5.length; m++)\n\
    \t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (l1[i] == l5[m])\n\t\t\t\t\t\t\t\t\t",
  "{\n    long[] result = new long[l1.length + l2.length];\n    int j = 0;\n    for\
    \ (int i = 0; i < l1.length; i++)\n    {\n        while (j < l2.length && l2.get(j)\
    \ == l1.get(i))\n        {\n            result[i] = l1.get(i);\n            j++;\n\
    \        }\n    }\n    for (int i = l1.length; i < result.length; i++)\n    {\n\
    \        result[i] = 0;\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len) \n{\n    long[] result = new long[len];\n    int j = 0;\n\
    \    for (int i = 0; i < l1.length; i++)\n    {\n        while (j < l2.length\
    \ && l2.get(j) == l1.get(i))\n        {\n            result[j] = l1.get(i);\n\
    \            j++;\n        }\n    }\n    for (int i = l1.length; i < result.length;\
    \ i++)\n    {\n        result[i] = 0;\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2) \n{\n    long[] result = new long[len + len2];\n\
    \    int j = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n        while\
    \ (j < l2.length && l2.get(j) == l1.get(i))\n        {\n            result[j]\
    \ = l1.get(i);\n            j++;\n        }\n    }\n    for (int i = l1.length;\
    \ i < result.length; i++)\n    {\n        result[i] = 0;\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3) \n{\n    long[]\
    \ result = new long[len + len2 + len3];\n    int j = 0;\n    for (int i = 0; i\
    \ < l1.length; i++)\n    {\n        while (j < l2.length && l2.get(j) == l1.get(i))\n\
    \        {\n            result[j] = l1.get(i);\n            j++;\n        }\n\
    \    }\n    for (int i = l1.length; i < result.length; i++)\n    {\n        result[i]\
    \ = 0;\n    }\n    return result;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int\
    \ len, int len2, int len3, int len4) \n{\n    long[] result = new long[len + len2\
    \ + len3 + len4];\n    int j = 0;\n    for (int i = 0; i < l1.length; i++)\n \
    \   {\n        while (", "{\n\tlong[] result = new long[l1.length];\n\tfor(int\
    \ i = 0; i < l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t\
    {\n\t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++) {\n\t\tfor (int j = 0; j < l2.length; j++)\
    \ {\n\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong [] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor\
    \ (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\
    \t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }", "{\n    long[] result = new long[l1.length];\n    std.arraycopy(l1, 0, result,\
    \ 0, l1.length);\n    std.arraycopy(l2, 0, result, l1.length, l2.length);\n  \
    \  std.sort(result);\n    return std.unique(result, long.compare);\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len) \n{\n    long[] result = new long[len];\n    std.arraycopy(l1,\
    \ 0, result, 0, l1.length);\n    std.arraycopy(l2, 0, result, l1.length, l2.length);\n\
    \    std.sort(result);\n    return std.unique(result, long.compare);\n}\n/*\n\
    Return sorted unique common elements for two lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, int len, int len2) \n{\n    long[] result = new\
    \ long[len];\n    std.arraycopy(l1, 0, result, 0, l1.length);\n    std.arraycopy(l2,\
    \ 0, result, l1.length, l2.length);\n    std.sort(result);\n    return std.unique(result,\
    \ long.compare);\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int\
    \ len3) \n{\n    long[] result = new long[len];\n    std.arraycopy(l1, 0, result,\
    \ 0, l1.length);\n    std.arraycopy(l2, 0, result, l1.length, l2.length);\n  \
    \  std.sort(result);\n    return std.unique(result, long.compare);\n}\n/*\nReturn\
    \ sorted unique common elements for three lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n  \
    \  std.arraycopy(l1, 0, result, 0, l1.length);\n    std.arraycopy(l2, 0, result,\
    \ l1.length, l2.length);\n    std.arraycopy(l3, 0, result, l1.length + l2.length,\
    \ l3.length);\n    std.sort(result);\n    return std.unique(result, long.compare);\n\
    }\n/*\nReturn sorted unique common elements for three lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3, int len) \n{\n    long[] result\
    \ = new long[len];\n    std.arraycopy(l1, 0, result, 0, l1.length);", "{\n\tlong[]\
    \ result = new long[l1.length];\n\tfor(int i = 0; i < l1.length; i++)\n\t{\n\t\
    \tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] == l2[j])\n\t\t\t\
    {\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3) \n{\n\tlong[] result = new long[l1.length];\n\
    \tfor(int i = 0; i < l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\
    \t\t{\n\t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tfor(int k = 0; k < l3.length;\
    \ k++)\n\t\t\t\t{\n\t\t\t\t\tif(l3[k] == l1[i])\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[i]\
    \ = l1[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements for\
    \ three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4) \n{\n\tlong[] result = new long[l1.length];\n\tfor(int i = 0;\
    \ i < l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\
    \tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tfor(int k = 0; k < l3.length; k++)\n\t\t\
    \t\t{\n\t\t\t\t\tif(l3[k] == l1[i])\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(int l = 0; l\
    \ < l4.length; l++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(l4[l] == l1[i])\n\t\t\t\t\
    \t\t\t{\n\t\t\t\t\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\
    \t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements\
    \ for four lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4, long[] l5) \n{\n\tlong[] result = new long[l1.length];\n\tfor(int\
    \ i = 0; i < l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t\
    {\n\t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tfor(int k = 0; k < l3.length; k++)\n\
    \t\t\t\t{\n\t\t\t\t\tif(l3[k] == l1[i])\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(int l =\
    \ 0; l < l4.length; l++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(l4[l] == l1[i])\n\t\t\
    \t\t\t\t\t{\n\t\t\t\t\t\t\t\tfor(int m = 0; m < l5.length; m++)\n\t\t\t\t\t\t\t\
    \t{\n\t\t\t\t\t\t\t\t\tif(l5[m", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        result[i] = l1[i];\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n\tlong[] result = new long[l1.length + l2.length];\n\t\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\t\n\tfor (int i = 0; i\
    \ < l2.length; i++)\n\t\tresult[l1.length + i] = l2[i];\n\t\n\tArrays.sort(result);\n\
    \t\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\
    \t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result = new\
    \ long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int\
    \ j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n    \
    \        {\n                result[i] = l1[i];\n                break;\n     \
    \       }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n    for(int i\
    \ = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                for(int\
    \ k = 0; k < l3.length; k++)\n                {\n                    if(l1[i]\
    \ == l3[k])\n                    {\n                        result[i] = l1[i];\n\
    \                        break;\n                    }\n                }\n  \
    \              break;\n            }\n        }\n    }\n    return result;\n}\n\
    /*\nReturn sorted unique common elements for three lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n    long[] result\
    \ = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n    \
    \    for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n\
    \            {\n                for(int k = 0; k < l3.length; k++)\n         \
    \       {\n                    if(l1[i] == l3[k])\n                    {\n   \
    \                     for(int l = 0; l < l4.length; l++)\n                   \
    \     {\n                            if(l1[i] == l4[l])\n                    \
    \        {\n                                result[i] = l1[i];\n             \
    \                   break;\n                            }\n                  \
    \      }\n                        break;\n                    }\n            \
    \    }\n                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for four lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[] l5) \n{\n\
    \    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n\
    \    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i]\
    \ == l2[j])\n            {\n                for(int k = 0; k < l3.length; k++)\n\
    \                {\n                    if(l1[i] == l3[k])\n                 \
    \   {\n                        for(int l = 0; l < l4.length; l++)\n          \
    \              {\n                            if(l1[i] == l4[l])\n           \
    \                 {\n                                for(int m = 0; m < l5.length;\
    \ m++)\n                                {\n                                  \
    \  if(l1[i] == l5[m])\n                                    {\n               \
    \                         result[i] = l1", "{\n\tlong[] result = new long[l1.length\
    \ + l2.length];\n\tlong i = 0;\n\tlong j = 0;\n\twhile (i < l1.length && j < l2.length)\
    \ \n\t{\n\t\tif (l1[i] == l2[j]) \n\t\t{\n\t\t\tresult[i] = l1[i];\n\t\t\ti++;\n\
    \t\t\tj++;\n\t\t}\n\t\telse if (l1[l1.length - 1] < l2[j]) \n\t\t{\n\t\t\tresult[i]\
    \ = l1[i];\n\t\t\ti++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult[i] = l2[j];\n\t\t\
    \tj++;\n\t\t}\n\t}\n\twhile (i < l1.length) \n\t{\n\t\tresult[i] = l1[i];\n\t\t\
    i++;\n\t}\n\twhile (j < l2.length) \n\t{\n\t\tresult[l1.length + j] = l2[j];\n\
    \t\tj++;\n\t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++) {\n\t\tfor (int j = 0; j < l2.length; j++)\
    \ {\n\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length\
    \ + l2.length];\n\t\n\tfor(int i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\
    \t\n\tfor(int i = 0; i < l2.length; i++)\n\t\tresult[l1.length + i] = l2[i];\n\
    \t\n\tArrays.sort(result);\n\t\n\treturn result;\n}", "{\n    long[] result =\
    \ new long[l1.length];\n    int j = 0;\n    for (int i = 0; i < l1.length; i++)\n\
    \    {\n        while (j < l2.length && l1[i] == l2[j])\n        {\n         \
    \   result[i] = l1[i];\n            j++;\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int l3) \n{\n    long[] result = new long[l1.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n        while\
    \ (j < l2 && l1[i] == l2[j])\n        {\n            result[i] = l1[i];\n    \
    \        j++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int l3, int l4) \n{\n    long[] result = new long[l1.length];\n \
    \   int j = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n        while\
    \ (j < l3 && l1[i] == l2[j])\n        {\n            result[i] = l1[i];\n    \
    \        j++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int l3, int l4, int l5) \n{\n    long[] result = new long[l1.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n        while\
    \ (j < l4 && l1[i] == l2[j])\n        {\n            result[i] = l1[i];\n    \
    \        j++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int l3, int l4, int l5, int l6) \n{\n    long[] result = new long[l1.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n        while\
    \ (j < l5 && l1[i] == l2[j])\n        {\n            result[i] = l1[i];\n    \
    \        j++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int l3, int l4, int l5, int l6, int l7) \n{\n    long[] result =\
    \ new long[l1.length];\n    int j = 0;\n    for (int i = 0; i < l1.length; i++)\n\
    \    {\n        while (j < l6 && l1[i] == l2[j])\n        {\n            result[i]\
    \ = l1", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l1.length; i++) {\n        if (l2[j] == l1[i])\
    \ {\n            result[i] = l1[i];\n            j++;\n        }\n    }\n    \n\
    \    for (int i = j; i < l2.length; i++) {\n        result[i] = l2[i];\n    }\n\
    \    \n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int l) \n{\n    long[] result = new long[l1.length];\n    int j =\
    \ 0;\n    for (int i = 0; i < l1.length; i++) {\n        if (l2[j] == l1[i]) {\n\
    \            result[i] = l1[i];\n            j++;\n        }\n    }\n    \n  \
    \  for (int i = j; i < l2.length; i++) {\n        result[i] = l2[i];\n    }\n\
    \    \n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int l, int h) \n{\n    long[] result = new long[l1.length];\n   \
    \ int j = 0;\n    for (int i = 0; i < l1.length; i++) {\n        if (l2[j] ==\
    \ l1[i]) {\n            result[i] = l1[i];\n            j++;\n        }\n    }\n\
    \    \n    for (int i = j; i < l2.length; i++) {\n        result[i] = l2[i];\n\
    \    }\n    \n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int l, int h, int l2) \n{\n    long[] result = new long[l1.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l1.length; i++) {\n        if (l2[j]\
    \ == l1[i]) {\n            result[i] = l1[i];\n            j++;\n        }\n \
    \   }\n    \n    for (int i = j; i < l2.length; i++) {\n        result[i] = l2[i];\n\
    \    }\n    \n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int l, int h, int l2, int h) \n{\n    long[] result = new long[l1.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l1.length; i++) {\n        if (l2[j]\
    \ == l1[i]) {\n            result[i] = l1[i];\n            j++;\n        }\n \
    \   }\n    \n    for (int i = j; i < l2.length; i++) {\n        result[i] = l2[i];\n\
    \    }\n    \n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/", "{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor\
    \ (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\
    \t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l1.length; i++) \n    {\n        while (j <\
    \ l2.length && l1[i] == l2[j]) \n        {\n            result[i] = l1[i];\n \
    \           j++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len) \n{\n    long[] result = new long[len];\n    int j = 0;\n\
    \    for (int i = 0; i < l1.length; i++) \n    {\n        while (j < l2.length\
    \ && l1[i] == l2[j]) \n        {\n            result[i] = l1[i];\n           \
    \ j++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2) \n{\n    long[] result = new long[len];\n    int j =\
    \ 0;\n    for (int i = 0; i < l1.length; i++) \n    {\n        while (j < l2.length\
    \ && l1[i] == l2[j]) \n        {\n            result[i] = l1[i];\n           \
    \ j++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2, int len3) \n{\n    long[] result = new long[len];\n \
    \   int j = 0;\n    for (int i = 0; i < l1.length; i++) \n    {\n        while\
    \ (j < l2.length && l1[i] == l2[j]) \n        {\n            result[i] = l1[i];\n\
    \            j++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2, int len3, int len4) \n{\n    long[] result\
    \ = new long[len];\n    int j = 0;\n    for (int i = 0; i < l1.length; i++) \n\
    \    {\n        while (j < l2.length && l1[i] == l2[j]) \n        {\n        \
    \    result[i] = l1[i];\n            j++;\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3, int len4, int\
    \ len5) \n{\n    long[] result = new long[len];\n    int j = 0;\n    for (int\
    \ i = 0; i < l1.length; i++) \n    {\n        while (j < l2.length && l1[i] == ",
  "{\n    long[] result = new long[l1.length + l2.length];\n    for(int i = 0; i <\
    \ l1.length; i++)\n        result[i] = l1[i];\n    for(int i = 0; i < l2.length;\
    \ i++)\n        result[l1.length + i] = l2[i];\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| a |>\n<code>\n\
    import java.util.Arrays;", "{\n\tlong[] result = new long[l1.length + l2.length];\n\
    \tfor (int i = 0; i < l1.length; i++) \n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++) \n\t\t{\n\t\t\tif (l1[i] == l2[j]) \n\t\t\t{\n\t\t\t\tresult[i + j] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3) \n{\n\tlong[] result = new long[l1.length + l2.length\
    \ + l3.length];\n\tfor (int i = 0; i < l1.length; i++) \n\t{\n\t\tfor (int j =\
    \ 0; j < l2.length; j++) \n\t\t{\n\t\t\tif (l1[i] == l2[j]) \n\t\t\t{\n\t\t\t\t\
    result[i + j] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for three lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n\tlong[] result\
    \ = new long[l1.length + l2.length + l3.length + l4.length];\n\tfor (int i = 0;\
    \ i < l1.length; i++) \n\t{\n\t\tfor (int j = 0; j < l2.length; j++) \n\t\t{\n\
    \t\t\tif (l1[i] == l2[j]) \n\t\t\t{\n\t\t\t\tresult[i + j] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common\
    \ elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, long[] l3, long[] l4, long[] l5) \n{\n\tlong[] result = new long[l1.length\
    \ + l2.length + l3.length + l4.length + l5.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++) \n\t{\n\t\tfor (int j = 0; j < l2.length; j++) \n\t\t{\n\t\t\tif (l1[i]\
    \ == l2[j]) \n\t\t\t{\n\t\t\t\tresult[i + j] = l1[i];\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements for\
    \ five lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4, long[] l5, long[] l6) \n{\n\tlong[] result = new long[l1.length\
    \ + l2.length + l3.length + l4.length + l5.length + l6.length];\n\tfor (int i\
    \ = 0; i < l1.length; i++) \n\t{\n\t\tfor (int j = 0; j < ", "{\n    long[] result\
    \ = new long[l1.length];\n    for(int i = 0; i < l1.length; ++i)\n    {\n    \
    \    for(int j = 0; j < l2.length; ++j)\n        {\n            if(l1[i] == l2[j])\n\
    \            {\n                result[i] = l1[i];\n                break;\n \
    \           }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n    for(int\
    \ i = 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length; ++j)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                for(int\
    \ k = 0; k < l3.length; ++k)\n                {\n                    if(l1[i]\
    \ == l3[k])\n                    {\n                        result[i] = l1[i];\n\
    \                        break;\n                    }\n                }\n  \
    \              break;\n            }\n        }\n    }\n    return result;\n}\n\
    /*\nReturn sorted unique common elements for three lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n    long[] result\
    \ = new long[l1.length];\n    for(int i = 0; i < l1.length; ++i)\n    {\n    \
    \    for(int j = 0; j < l2.length; ++j)\n        {\n            if(l1[i] == l2[j])\n\
    \            {\n                for(int k = 0; k < l3.length; ++k)\n         \
    \       {\n                    if(l1[i] == l3[k])\n                    {\n   \
    \                     for(int l = 0; l < l4.length; ++l)\n                   \
    \     {\n                            if(l1[i] == l4[l])\n                    \
    \        {\n                                result[i] = l1[i];\n             \
    \                   break;\n                            }\n                  \
    \      }\n                        break;\n                    }\n            \
    \    }\n                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for four lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[] l5) \n{\n\
    \    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length; ++i)\n\
    \    {\n        for(int j = 0; j < l2.length; ++j)\n        {\n            if(l1[i]\
    \ == l2[j])\n            {\n                for(int k = 0; k < l3.length; ++k)\n\
    \                {\n                    if(l1[i] == l3[k])\n                 \
    \   {\n                        for(int l = 0; l < l4.length; ++l)\n          \
    \              {\n                            if(l1[i] == l4[l])\n           \
    \                 {\n                                for(int m = 0; m < l5.length;\
    \ ++m)\n                                {\n                                  \
    \  if(l1[i] == l5[m])\n                                    {\n", "{\n    long[]\
    \ result = new long[l1.length];\n    int j = 0;\n    for (int i = 0; i < l1.length;\
    \ i++) \n    {\n        while (j < l2.length && l1[i] == l2[j]) \n        {\n\
    \            result[i] = l1[i];\n            j++;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis doesn't\
    \ work if there are duplicates in either list.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are duplicates in either list. Try it with `common(Arrays.asList(1,2,2,3), Arrays.asList(1,2,2,4))`\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are duplicates in either list. Try\
    \ it with `common(Arrays.asList(1,2,2,3), Arrays.asList(1,2,2,4))`\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are duplicates in either list. Try it with `common(Arrays.asList(1,2,2,3),\
    \ Arrays.asList(1,2,2,4))`\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n\tlong[] result =\
    \ new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int\
    \ j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\
    \tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3) \n{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for five lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5, long[] l6) \n{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor\
    \ (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\
    \t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for six lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[] l", "{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n\
    \        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] ==\
    \ l2[j])\n            {\n                result[i] = l1[i];\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n\tlong[] res = new\
    \ long[l1.length];\n\tfor(int i = 0; i < l1.length; i++)\n\t\tres[i] = l1[i];\n\
    \tfor(int i = 0; i < l2.length; i++)\n\t\tres[l1.length + i] = l2[i];\n\tArrays.sort(res);\n\
    \treturn res;\n}", "{\n\tlong[] result = new long[l1.length];\n\t\n\tfor(int i\
    \ = 0; i < l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t\
    {\n\t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}", "{\n    long[] result = new long[l1.length\
    \ + l2.length];\n    \n    for(int i = 0; i < l1.length; i++)\n        result[i]\
    \ = l1[i];\n    \n    for(int i = 0; i < l2.length; i++)\n        result[l1.length\
    \ + i] = l2[i];\n    \n    Arrays.sort(result);\n    \n    return result;\n}",
  "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\
    \t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\
    \t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}", "{\n    long[] result = new long[l1.length];\n    std.arraycopy(l1,\
    \ 0, result, 0, l1.length);\n    std.arraycopy(l2, 0, result, l1.length, l2.length);\n\
    \    std.sort(result);\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len) \n{\n    long[] result = new long[len];\n    std.arraycopy(l1,\
    \ 0, result, 0, l1.length);\n    std.arraycopy(l2, 0, result, l1.length, l2.length);\n\
    \    std.sort(result);\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2) \n{\n    long[] result = new long[len];\n    std.arraycopy(l1,\
    \ 0, result, 0, l1.length);\n    std.arraycopy(l2, 0, result, l1.length, l2.length);\n\
    \    std.sort(result);\n    std.sort(result, len2);\n    return result;\n}\n/*\n\
    Return sorted unique common elements for two lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, int len, int len2, int len3) \n{\n    long[] result\
    \ = new long[len];\n    std.arraycopy(l1, 0, result, 0, l1.length);\n    std.arraycopy(l2,\
    \ 0, result, l1.length, l2.length);\n    std.sort(result);\n    std.sort(result,\
    \ len2);\n    std.sort(result, len2, len3);\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for three lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n  \
    \  std.arraycopy(l1, 0, result, 0, l1.length);\n    std.arraycopy(l2, 0, result,\
    \ l1.length, l2.length);\n    std.arraycopy(l3, 0, result, l1.length + l2.length,\
    \ l3.length);\n    std.sort(result);\n    return result;\n}\n/*\nReturn sorted\
    \ unique common elements for three lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3, int len) \n{\n    long[] result = new long[len];\n\
    \    std.arraycopy(l1, 0, result, 0, l1.length);\n    std.arraycopy(l2, 0, result,\
    \ l1.length, l2.", "{\n\tlong[] result = new long[l1.length];\n\tfor(int i = 0;\
    \ i < l1.length; i++) \n\t{\n\t\tfor(int j = 0; j < l2.length; j++) \n\t\t{\n\t\
    \t\tif(l1[i] == l2[j]) \n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len) \n\
    {\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length; i++)\n\
    \    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i]\
    \ == l2[j])\n            {\n                result[i] = l1[i];\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2, int len3) \n{\n    long[] result = new long[len];\n    for(int i = 0;\
    \ i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n   \
    \     {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3,\
    \ int len4) \n{\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3, int len4, int\
    \ len5) \n{\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)", "{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor(int i = 0; i < l1.length; i++)\n\t{\n\t\tfor(int\
    \ j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\
    \tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
  "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ ++i)\n    {\n        for(int j = 0; j < l2.length; ++j)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length;\
    \ ++j)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; ++k)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        result[i]\
    \ = l1[i];\n                        break;\n                    }\n          \
    \      }\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for three lists.\n    \
    \    \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ ++i)\n    {\n        for(int j = 0; j < l2.length; ++j)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ ++k)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        for(int l = 0; l < l4.length; ++l)\n   \
    \                     {\n                            if(l1[i] == l4[l])\n    \
    \                        {\n                                result[i] = l1[i];\n\
    \                                break;\n                            }\n     \
    \                   }\n                        break;\n                    }\n\
    \                }\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for four lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4,\
    \ long[] l5) \n{\n    long[] result = new long[l1.length];\n    for(int i = 0;\
    \ i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length; ++j)\n   \
    \     {\n            if(l1[i] == l2[j])\n            {\n                for(int\
    \ k = 0; k < l3.length; ++k)\n                {\n                    if(l1[i]\
    \ == l3[k])\n                    {\n                        for(int l = 0; l <\
    \ l4.length; ++l)\n                        {\n                            if(l1[i]\
    \ == l4[l])\n                            {\n                                for(int\
    \ m = 0; m < l5.length; ++m)\n                                {\n            \
    \                        if(l1[i] == l5[m])\n                                \
    \    {\n", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\
    \t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result = new\
    \ long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int\
    \ j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n    \
    \        {\n                result[i] = l1[i];\n                break;\n     \
    \       }\n        }\n    }\n    Arrays.sort(result);\n    return result;\n}\n\
    </code>\n<|/ a tags=arrays,c#,algorithm |>\n<| c |>\nThis is not the fastest solution,\
    \ since it requires O(n^2) comparisons.\n<|/ c |>\n<| c |>\nYes, but it is O(n)\
    \ comparisons, not O(n^2). O(n^2) comparisons is a lot more expensive than O(n).\n\
    <|/ c |>\n<| c |>\nI agree with you, but I believe that O(n^2) is still better\
    \ than O(n). And I believe that O(n^2) is better than O(nlogn). O(nlogn) is better\
    \ than O(n^2), but O(n^2) is better than O(nlogn).\n<|/ c |>\n<| c |>\nO(n^2)\
    \ is better than O(nlogn) because O(nlogn) is better than O(n^2). O(n^2) is better\
    \ than O(nlogn) because O(nlogn) is better than O(n^2). O(n^2) is better than\
    \ O(nlogn) because O(nlogn) is better than O(n^2). O(n^2) is better than O(nlogn)\
    \ because O(nlogn) is better than O(n^2). O(n^2) is better than O(nlogn) because\
    \ O(nlogn) is better than O(n^2). O(n^2) is better than O(nlogn) because O(nlogn)\
    \ is better than O(n^2). O(n^2) is better than O(nlogn) because O(nlogn) is better\
    \ than O(n^2). O(n^2) is better than O(nlogn) because O(nlogn) is better than\
    \ O(n^2). O(n^2) is better than O(nlogn) because O(nlogn) is better than O(n^2).\
    \ O(n^2) is better than O(nlogn) because O(nlogn) is better than O(n^2). O(n^2)\
    \ is better than O(nlogn) because O(nlogn) is better than O(n^2). O(n^2) is better\
    \ than O(nlogn) because O", "{\n\tlong[] result = new long[l1.length];\n\tfor(int\
    \ i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor(int i = 0; i < l2.length;\
    \ i++)\n\t\tfor(int j = 0; j < l1.length; j++)\n\t\t\tif(l2[i] == l1[j])\n\t\t\
    \t\tbreak;\n\t\t\n\tfor(int i = l1.length-1; i >= 0; i--)\n\t\tfor(int j = 0;\
    \ j < l2.length; j++)\n\t\t\tif(l2[i] == l1[j])\n\t\t\t\tbreak;\n\t\t\n\tfor(int\
    \ i = l2.length-1; i >= 0; i--)\n\t\tfor(int j = 0; j < l1.length; j++)\n\t\t\t\
    if(l2[i] == l1[j])\n\t\t\t\tbreak;\n\t\t\n\treturn result;\n}", "{\n    long[]\
    \ result = new long[l1.length];\n    long common = 0;\n    for (int i = 0; i <\
    \ l1.length; i++)\n    {\n        common = std.math.comb(l1[i], l2[i]);\n    \
    \    result[i] = common;\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len) \n{\n    long[] result = new long[len];\n    long common\
    \ = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n        common = std.math.comb(l1[i],\
    \ l2[i]);\n        result[i] = common;\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2) \n{\n    long[] result = new long[len];\n\
    \    long common = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n      \
    \  common = std.math.comb(l1[i], l2[i]);\n        result[i] = common;\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int\
    \ len3) \n{\n    long[] result = new long[len];\n    long common = 0;\n    for\
    \ (int i = 0; i < l1.length; i++)\n    {\n        common = std.math.comb(l1[i],\
    \ l2[i]);\n        result[i] = common;\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2, int len3, int len4) \n{\n    long[] result\
    \ = new long[len];\n    long common = 0;\n    for (int i = 0; i < l1.length; i++)\n\
    \    {\n        common = std.math.comb(l1[i], l2[i]);\n        result[i] = common;\n\
    \    }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2, int len3, int len4, int len5) \n{\n    long[] result = new long[len];\n\
    \    long common = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n      \
    \  common = std.math.comb(l1[i], l2[i]);\n        result[i] = common;\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i\
    \ < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\
    \tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor\
    \ (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\
    \t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len) \n{\n\tlong[] result = new long[len];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len, int len2) \n{\n\tlong[] result = new long[len];\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\
    \t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2, int len3) \n{\n\tlong[] result = new long[len];\n\tfor\
    \ (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\
    \t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2, int len3, int len4) \n{\n\tlong[] result = new long[len];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len, int len2, int len3, int len4, int len5) \n{\n\tlong[] result\
    \ = new long[len];\n\tfor (int i = 0; i < ", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int l) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int i\
    \ = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t\
    {\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int\
    \ l, int h) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i <\
    \ l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\t\
    if (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int\
    \ l, int h, int l2) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int i\
    \ = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t\
    {\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int\
    \ l, int h, int l2, int h) \n{\n\tlong[] result = new long[l1.length];\n\tfor\
    \ (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\
    \t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int l, int h, int l2, int h, int l1) \n{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int ", "{\n\tlong[] result = new long[l1.length + l2.length];\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor (int i = 0; i < l2.length;\
    \ i++)\n\t\tresult[l1.length + i] = l2[i];\n\tArrays.sort(result);\n\treturn result;\n\
    }", "{\n\tlong [] result = new long[l1.length];\n\t\n\tfor (int i = 0; i < l1.length;\
    \ i++) \n\t{\n\t\tfor (int j = 0; j < l2.length; j++) \n\t\t{\n\t\t\tif (l1[i]\
    \ == l2[j]) \n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t}\n\t\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    \n    for(int i = 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j\
    \ < l2.length; ++j)\n        {\n            if(l1[i] == l2[j])\n            {\n\
    \                result[i] = l1[i];\n                break;\n            }\n \
    \       }\n    }\n    \n    return result;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        result[i] = l1[i];\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i <\
    \ l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n       \
    \ {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n\
    \        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] ==\
    \ l2[j])\n            {\n                for(int k = 0; k < l3.length; k++)\n\
    \                {\n                    if(l1[i] == l3[k])\n                 \
    \   {\n                        result[i] = l1[i];\n                        break;\n\
    \                    }\n                }\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n  \
    \  for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++) \n\t{\n\t\tfor (int j = 0; j < l2.length; j++) \n\t\t{\n\t\t\tif (l1[i]\
    \ == l2[j]) \n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\t\
    \n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}", "{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; ++i)\n    {\n\
    \        for(int j = 0; j < l2.length; ++j)\n        {\n            if(l1[i] ==\
    \ l2[j])\n            {\n                result[i] = l1[i];\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len) \n{\n    long[] result = new long[len];\n    for(int i =\
    \ 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length; ++j)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2) \n{\n  \
    \  long[] result = new long[len];\n    for(int i = 0; i < l1.length; ++i)\n  \
    \  {\n        for(int j = 0; j < l2.length; ++j)\n        {\n            if(l1[i]\
    \ == l2[j])\n            {\n                result[i] = l1[i];\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2, int len3) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length;\
    \ ++j)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2, int len3, int len4) \n{\n    long[] result = new long[len];\n    for(int\
    \ i = 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length; ++j)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3,\
    \ int len4, int len5) \n{\n    long[] result = new long[len];\n    for(int i =\
    \ 0; i < l1.length; ++i)\n    {\n        for(int ", "{\n\tlong [] l3 = new long[l1.length\
    \ + l2.length];\n\tfor (int i = 0; i < l1.length; i++) \n\t{\n\t\tfor (int j =\
    \ 0; j < l2.length; j++) \n\t\t{\n\t\t\tif (l1[i] == l2[j]) \n\t\t\t{\n\t\t\t\t\
    l3[i + j] = l1[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn l3;\n}", "{\n\tlong[] result\
    \ = new long[l1.length];\n\t\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\t\
    for (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t\
    {\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn\
    \ result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i\
    \ < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\
    \tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor(int i = 0; i < l1.length; i++)\n\t{\n\t\tfor(int\
    \ j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\
    \tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
  "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,algorithm,arrays,sorting |>\n<| c |>\nThis code doesn't\
    \ work if l1 has duplicates.\n<|/ c |>\n<| c |>\nIt does work if l1 has duplicates.\
    \ Please test it before downvoting.\n<|/ c |>\n<| c |>\nIt doesn't work if l1\
    \ has duplicates. Try it before downvoting.\n<|/ c |>\n<| c |>\nIt does work if\
    \ l1 has duplicates. Please test it before downvoting.\n<|/ c |>\n<| c |>\nIt\
    \ does work if l1 has duplicates. Please test it before downvoting.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\npublic static IEnumerable<T> Intersect<T>(this IEnumerable<T>\
    \ first, IEnumerable<T> second)\n{\n    return first.Where(x => second.Contains(x));\n\
    }\n</code>\n<|/ a tags=c#,algorithm,arrays,sorting |>\n<| c |>\nThis code doesn't\
    \ work if l1 has duplicates.\n<|/ c |>\n<| c |>\nIt does work if l1 has duplicates.\
    \ Please test it before downvoting.\n<|/ c |>\n<| c |>\nIt does work if l1 has\
    \ duplicates. Please test it before downvoting.\n<|/ c |>\n<| c |>\nIt does work\
    \ if l1 has duplicates. Please test it before downvoting.\n<|/ c |>\n<| c |>\n\
    It does work if l1 has duplicates. Please test it before downvoting.\n<|/ c |>\n\
    <| a |>\n<code>\npublic static IEnumerable<T> Intersect<T>(this IEnumerable<T>\
    \ first, IEnumerable<T> second)\n{\n    return first.Where(x => second.Contains(x));\n\
    }\n</code>\n<|/ a dscore=3 tags=c#,algorithm,arrays,sorting |>\n<| c |>\nThis\
    \ code doesn't work if l1 has duplicates.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    public static IEnumerable<T> Intersect<T>(this IEnumerable<T> first, IEnumerable<T>\
    \ second)\n{\n", "{\n\tlong [] l = new long[l1.length + l2.length];\n\tfor(int\
    \ i = 0; i < l1.length; i++)\n\t\tl[i] = l1[i];\n\tfor(int i = 0; i < l2.length;\
    \ i++)\n\t\tl[i + l1.length] = l2[i];\n\tArrays.sort(l);\n\treturn l;\n}", "{\n\
    \    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\
    \ \n    {\n        for(int j = 0; j < l2.length; j++) \n        {\n          \
    \  if(l1[i] == l2[j]) \n            {\n                result[i] = l1[i];\n  \
    \              break;\n            }\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,arrays,algorithm |>\n<| c |>\nThis is not the fastest\
    \ solution, since it requires O(n^2) comparisons.\n<|/ c |>\n<| c |>\nI agree,\
    \ but I believe that it is still better than O(n^2) complexity, since it requires\
    \ O(n) memory and O(n) time.\n<|/ c |>\n<| c |>\nI agree that it is better than\
    \ O(n^2), but it is also O(n^2). Since it requires O(n) memory and O(n) time,\
    \ it is O(n^2). Also, your solution requires O(n^2) memory and O(n^2) time, which\
    \ is O(n^2). Finally, your solution requires O(n^2) memory and O(n^2) time, which\
    \ is O(n^2). So, you have O(n^2) memory and O(n^2) time, which is O(n^2).\n<|/\
    \ c |>\n<| c |>\nI agree with you, my solution requires O(n) memory and O(n) time,\
    \ but I believe that it is better than O(n^2) complexity, since it requires O(n)\
    \ memory and O(n) time.\n<|/ c |>\n<| c |>\nI agree with you, my solution requires\
    \ O(n) memory and O(n) time, but I believe that it is better than O(n^2) complexity,\
    \ since it requires O(n) memory and O(n) time.\n<|/ c |>\n<| a tags=java,arrays,algorithm\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] a = {1, 2, 3,\
    \ 4, 5};\n    int[] b = {1, 2, 3, 4, 5};\n    int[] c = new int[a.length];\n \
    \   Arrays.sort(a);\n    Arrays.sort(b);\n    int i = 0;\n    int j = 0;\n   \
    \ while (i < a.length && j < b.length) {\n        if (a[i] < b[j]) {\n       \
    \     c[i] = a[i];\n            i++;\n        } else if (a[i] > b[j]) {\n    \
    \        c[i] = b[j];\n            j++;\n        } else {\n            c[i] =\
    \ a[i];\n            i++;\n            j++;\n        }\n    }\n    while (i <\
    \ a.length) {\n        c[i] = a[i];\n        i++;\n    }\n    while (j < b.length)\
    \ {\n        c", "{\n\tlong[] result = new long[l1.length];\n\t\n\tfor (int i\
    \ = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t\
    {\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\
    \tstd.arraycopy(l1, 0, result, 0, l1.length);\n\tstd.arraycopy(l2, 0, result,\
    \ l1.length, l2.length);\n\tstd.sort(result);\n\treturn result;\n}", "{\n\tlong[]\
    \ result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\
    \tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t\
    {\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int l3) \n{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int l3, int l4) \n{\n\tlong[] result = new long[l1.length];\n\tfor\
    \ (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\
    \t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int l3, int l4, int l5) \n{\n\tlong[] result = new long[l1.length];\n\t\
    for (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\
    \t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int l3, int l4, int l5, int l6) \n{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int l3, int l4, int l5, int l6, int l7) \n{\n\tlong[] result = new ",
  "{\n\tlong [] result = new long[l1.length + l2.length];\n\tlong [] l3 = new long[l1.length];\n\
    \tlong [] l4 = new long[l2.length];\n\t\n\tfor (int i = 0; i < l1.length; i++)\n\
    \t\tl3[i] = l1[i];\n\tfor (int i = 0; i < l2.length; i++)\n\t\tl4[i] = l2[i];\n\
    \t\n\tfor (int i = 0; i < l3.length; i++)\n\t{\n\t\tfor (int j = 0; j < l4.length;\
    \ j++)\n\t\t{\n\t\t\tif (l3[i] == l4[j])\n\t\t\t{\n\t\t\t\tresult[i] = l3[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}", "{\n\tlong[] result\
    \ = new long[l1.length + l2.length];\n\tfor(int i = 0; i < l1.length; i++)\n\t\
    \tresult[i] = l1[i];\n\tfor(int i = 0; i < l2.length; i++)\n\t\tresult[l1.length\
    \ + i] = l2[i];\n\tArrays.sort(result);\n\treturn result;\n}", "{\n\tlong[] result\
    \ = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++) {\n\t\tfor (int\
    \ j = 0; j < l2.length; j++) {\n\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\tresult[i]\
    \ = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\t\
    long[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++) {\n\
    \t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\
    \tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}",
  "{\n    long[] result = new long[l1.length];\n    int i = 0;\n    for (; i < l1.length\
    \ && i < l2.length; ++i)\n    {\n        if (l1[i] == l2[i])\n            continue;\n\
    \        result[i] = l1[i];\n    }\n    for (; i < l1.length; ++i)\n        result[i]\
    \ = l1[i];\n    for (; i < l2.length; ++i)\n        result[i] = l2[i];\n    sort(result);\n\
    \    return result;\n}", "{\n    long[] result = new long[l1.length];\n    for(int\
    \ i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n\
    \        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] ==\
    \ l2[j])\n            {\n                for(int k = 0; k < l3.length; k++)\n\
    \                {\n                    if(l1[i] == l3[k])\n                 \
    \   {\n                        result[i] = l1[i];\n                        break;\n\
    \                    }\n                }\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n  \
    \  for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n\tlong [] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n    for(int\
    \ i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,linq,algorithm,arrays |>\n<| a tags=c#,linq,algorithm,arrays\
    \ |>\n<code>\nvar result = l1.Intersect(l2).ToArray();\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post.\n<|/\
    \ c |>\n<| c |>\nThis does provide an answer to the question. Intersect returns\
    \ an array of the common elements. ToArray converts the result to a normal array.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post.\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. Intersect returns\
    \ an array of the common elements. ToArray converts the result to a normal array.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post.\n\
    <|/ c |>\n<| a tags=c#,linq,algorithm,arrays |>\n<code>\nvar result = l1.Intersect(l2).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nvar result = l1.Intersect(l2).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,algorithm,arrays |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nvar result\
    \ = l1.Intersect(l2).ToArray();\n</code>\n<|/", "{\n\tlong[] result = new long[l1.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length;\
    \ j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result\
    \ = new long[l1.length];\n    for(int i = 0; i < l1.length; ++i)\n    {\n    \
    \    for(int j = 0; j < l2.length; ++j)\n        {\n            if(l1[i] == l2[j])\n\
    \            {\n                result[i] = l1[i];\n                break;\n \
    \           }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int len) \n{\n    long[] result = new long[len];\n    for(int i =\
    \ 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length; ++j)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2) \n{\n  \
    \  long[] result = new long[len];\n    for(int i = 0; i < l1.length; ++i)\n  \
    \  {\n        for(int j = 0; j < l2.length; ++j)\n        {\n            if(l1[i]\
    \ == l2[j])\n            {\n                result[i] = l1[i];\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2, int len3) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length;\
    \ ++j)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2, int len3, int len4) \n{\n    long[] result = new long[len];\n    for(int\
    \ i = 0; i < l1.length; ++i)\n    {\n        for(int j = 0; j < l2.length; ++j)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3,\
    \ int len4, int len5) \n{\n    long[] result = new long[len];\n    for(int i =\
    \ 0; i < l1.length; ++i)\n    {\n        for(int ", "{\n    long[] result = new\
    \ long[l1.length + l2.length];\n    \n    for(int i = 0; i < l1.length; i++)\n\
    \        result[i] = l1[i];\n    \n    for(int i = 0; i < l2.length; i++)\n  \
    \      result[l1.length + i] = l2[i];\n    \n    Arrays.sort(result);\n    \n\
    \    return result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tstd.arraycopy(l1,\
    \ 0, result, 0, l1.length);\n\tstd.arraycopy(l2, 0, result, l1.length, l2.length);\n\
    \tstd.sort(result);\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        result[i] = l1[i];\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] ==\
    \ l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}", "{\n\tlong [] result = new long[l1.length];\n\tfor\
    \ (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\
    \t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result = new\
    \ long[l1.length];\n    for(int i = 0; i < l1.length; i++) \n    {\n        for(int\
    \ j = 0; j < l2.length; j++) \n        {\n            if(l1[i] == l2[j]) \n  \
    \          {\n                result[i] = l1[i];\n                break;\n   \
    \         }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n    for(int\
    \ i = 0; i < l1.length; i++) \n    {\n        for(int j = 0; j < l2.length; j++)\
    \ \n        {\n            if(l1[i] == l2[j]) \n            {\n              \
    \  result[i] = l1[i];\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for three lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4)\
    \ \n{\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++) \n    {\n        for(int j = 0; j < l2.length; j++) \n        {\n     \
    \       if(l1[i] == l2[j]) \n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for four lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[] l5) \n{\n\
    \    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\
    \ \n    {\n        for(int j = 0; j < l2.length; j++) \n        {\n          \
    \  if(l1[i] == l2[j]) \n            {\n                result[i] = l1[i];\n  \
    \              break;\n            }\n        }\n    }\n    return result;\n}\n\
    /*\nReturn sorted unique common elements for five lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[] l5, long[] l6)\
    \ \n{\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++) \n    {\n        for(int j = 0; j < l2.length; j++) \n        {\n     \
    \       if(l1[i] == l2[j]) \n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for six lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[] l", "{\n    long[]\
    \ result = new long[l1.length + l2.length];\n    long i = 0;\n    long j = 0;\n\
    \    for(; i < l1.length && j < l2.length; i++, j++)\n    {\n        if(l1[i]\
    \ == l2[j])\n            result[i] = l1[i];\n    }\n    for(; i < l1.length; i++)\n\
    \    {\n        result[i] = l1[i];\n    }\n    for(; j < l2.length; j++)\n   \
    \ {\n        result[l1.length + j] = l2[j];\n    }\n    return result;\n}\n/*\n\
    Return sorted unique common elements for two lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length\
    \ + l2.length + l3.length];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    for(; i < l1.length && j < l2.length && k < l3.length; i++, j++, k++)\n \
    \   {\n        if(l1[i] == l2[j] && l2[j] == l3[k])\n            result[i] = l1[i];\n\
    \    }\n    for(; i < l1.length; i++)\n    {\n        result[i] = l1[i];\n   \
    \ }\n    for(; j < l2.length; j++)\n    {\n        result[l1.length + j] = l2[j];\n\
    \    }\n    for(; k < l3.length; k++)\n    {\n        result[l1.length + l2.length\
    \ + k] = l3[k];\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length + l2.length\
    \ + l3.length + l4.length];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    for(; i < l1.length && j < l2.length && k < l3.length &&\
    \ l < l4.length; i++, j++, k++, l++)\n    {\n        if(l1[i] == l2[j] && l2[j]\
    \ == l3[k] && l3[k] == l4[l])\n            result[i] = l1[i];\n    }\n    for(;\
    \ i < l1.length; i++)\n    {\n        result[i] = l1[i];\n    }\n    for(; j <\
    \ l2.length; j++)\n    {\n        result[l1.length + j] = l2[j];\n    }\n    for(;\
    \ k < l3.length; k++)\n    {\n        result[l1.length + l2.length + k] = l3[k];\n\
    \    }\n    for(; l < ", "{\n\tlong[] result = new long[l1.length];\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\
    \t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong [] result = new\
    \ long[l1.length + l2.length];\n\t\n\tfor (int i = 0; i < l1.length; i++)\n\t\t\
    result[i] = l1[i];\n\t\n\tfor (int i = 0; i < l2.length; i++)\n\t\tresult[l1.length\
    \ + i] = l2[i];\n\t\n\tArrays.sort(result);\n\t\n\treturn result;\n}", "{\n\t\
    long[] result = new long[l1.length];\n\tstd.arraycopy(l1, 0, result, 0, l1.length);\n\
    \tstd.arraycopy(l2, 0, result, l1.length, l2.length);\n\tstd.sort(result);\n\t\
    return result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor(int i =\
    \ 0; i < l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\
    \t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        result[i] = l1[i];\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i <\
    \ l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n       \
    \ {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n\
    \        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] ==\
    \ l2[j])\n            {\n                for(int k = 0; k < l3.length; k++)\n\
    \                {\n                    if(l1[i] == l3[k])\n                 \
    \   {\n                        result[i] = l1[i];\n                        break;\n\
    \                    }\n                }\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n  \
    \  for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i <\
    \ l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n       \
    \ {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3)\n{\n    long[] result\
    \ = new long[l1.length];\n    for(int i = 0; i < l1.length; i++)\n    {\n    \
    \    for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n\
    \            {\n                for(int k = 0; k < l3.length; k++)\n         \
    \       {\n                    if(l1[i] == l3[k])\n                    {\n   \
    \                     result[i] = l1[i];\n                        break;\n   \
    \                 }\n                }\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common elements\
    \ for three lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4)\n{\n    long[] result = new long[l1.length];\n    for(int i =\
    \ 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                for(int\
    \ k = 0; k < l3.length; k++)\n                {\n                    if(l1[i]\
    \ == l3[k])\n                    {\n                        for(int l = 0; l <\
    \ l4.length; l++)\n                        {\n                            if(l1[i]\
    \ == l4[l])\n                            {\n                                result[i]\
    \ = l1[i];\n                                break;\n                         \
    \   }\n                        }\n                        break;\n           \
    \         }\n                }\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\n/*\nReturn sorted unique common elements for\
    \ four lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4, long[] l5)\n{\n    long[] result = new long[l1.length];\n   \
    \ for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i <\
    \ l1.length; i++) \n    {\n        for(int j = 0; j < l2.length; j++) \n     \
    \   {\n            if(l1[i] == l2[j]) \n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ result = new long[l1.length];\n    for(int i = 0; i < l1.length; i++) \n   \
    \ {\n        for(int j = 0; j < l2.length; j++) \n        {\n            if(l1[i]\
    \ == l2[j]) \n            {\n                for(int k = 0; k < l3.length; k++)\
    \ \n                {\n                    if(l1[i] == l3[k]) \n             \
    \       {\n                        result[i] = l1[i];\n                      \
    \  break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++) \n    {\n        for(int j = 0; j < l2.length;\
    \ j++) \n        {\n            if(l1[i] == l2[j]) \n            {\n         \
    \       for(int k = 0; k < l3.length; k++) \n                {\n             \
    \       if(l1[i] == l3[k]) \n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++) \n                        {\n                   \
    \         if(l1[i] == l4[l]) \n                            {\n               \
    \                 result[i] = l1[i];\n                                break;\n\
    \                            }\n                        }\n                  \
    \      break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++) \n    {\n        for(int j = 0; j < l2.length;\
    \ j++) \n        {\n            if(l1[i] == l2[j]) \n            {\n         \
    \       for(int k = 0; k < l3.length; k++) \n                {\n             \
    \       if(l1[i] == l3[k]) \n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++) \n                        {\n                   \
    \         if(l1[i] == l4[l]) \n                            {\n               \
    \                 for(int m = 0; m < l5.length; m++) \n                      \
    \          ", "{\n    long[] result = new long[l1.length];\n    int j = 0;\n \
    \   for (int i = 0; i < l1.length; i++)\n    {\n        while (j < l2.length &&\
    \ l1[i] == l2[j])\n        {\n            result[i] = l1[i];\n            j++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        result[i] = l1[i];\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n\tlong[] result = new long[l1.length];\n\t\n\tfor(int i = 0; i <\
    \ l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\t\
    if(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t}\n\t\n\treturn result;\n}", "{\n    long[] result = new long[l1.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l1.length; i++) {\n        if (l2[j]\
    \ == l1[i]) {\n            result[i] = l1[i];\n            j++;\n        }\n \
    \   }\n    for (int i = j; i < l2.length; i++) {\n        result[i] = l2[i];\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=algorithm,arrays,java\
    \ |>\n<| c |>\nThis is not the correct solution. Try with {1,2,3} and {1,2,2,3}\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account for\
    \ that.\n<|/ c |>\n<| c |>\nThis is not the correct solution. Try with {1,2,3}\
    \ and {1,2,2,3}\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer\
    \ to account for that.\n<|/ c |>\n<| c |>\nThis is not the correct solution. Try\
    \ with {1,2,3} and {1,2,2,3}\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        result[i]\
    \ = l1[i];\n                        break;\n                    }\n          \
    \      }\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for three lists.\n    \
    \    \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        for(int l = 0; l < l4.length; l++)\n   \
    \                     {\n                            if(l1[i] == l4[l])\n    \
    \                        {\n                                result[i] = l1[i];\n\
    \                                break;\n                            }\n     \
    \                   }\n                        break;\n                    }\n\
    \                }\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for four lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4,\
    \ long[] l5) \n{\n    long[] result = new long[l1.length];\n    for(int i = 0;\
    \ i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n   \
    \     {\n            if(l1[i] == l2[j])\n            {\n                for(int\
    \ k = 0; k < l3.length; k++)\n                {\n                    if(l1[i]\
    \ == l3[k])\n                    {\n                        for(int l = 0; l <\
    \ l4.length; l++)\n                        {\n                            if(l1[i]\
    \ == l4[l])\n                            {\n                                for(int\
    \ m = 0; m < l5.length; m++)\n                                {\n            \
    \                        if(l1[i] == l5[m])\n                                \
    \    {\n                                        result[i] = l1", "{\n\tlong []\
    \ result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\
    \tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t\
    {\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }", "{\n    int n = l1.length;\n    int m = l2.length;\n    long[] res = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n        for(int j = 0; j < m; ++j)\n        \
    \    if(l1[i] == l2[j])\n                res[i] = l1[i];\n    return res;\n}\n\
    /*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int n) \n{\n    int m = l2.length;\n    long[]\
    \ res = new long[n];\n    for(int i = 0; i < n; ++i)\n        for(int j = 0; j\
    \ < m; ++j)\n            if(l1[i] == l2[j])\n                res[i] = l1[i];\n\
    \    return res;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, int n, int m) \n{\n \
    \   int n = l1.length;\n    int m = l2.length;\n    long[] res = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n        for(int j = 0; j < m; ++j)\n        \
    \    if(l1[i] == l2[j])\n                res[i] = l1[i];\n    return res;\n}\n\
    /*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int n, int m, int k) \n{\n    int n = l1.length;\n\
    \    int m = l2.length;\n    long[] res = new long[n];\n    for(int i = 0; i <\
    \ n; ++i)\n        for(int j = 0; j < m; ++j)\n            if(l1[i] == l2[j])\n\
    \                res[i] = l1[i];\n    return res;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int n, int m, int k, int l) \n{\n    int n = l1.length;\n    int\
    \ m = l2.length;\n    long[] res = new long[n];\n    for(int i = 0; i < n; ++i)\n\
    \        for(int j = 0; j < m; ++j)\n            if(l1[i] == l2[j])\n        \
    \        res[i] = l1[i];\n    return res;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int n, int m, int k, int l, int m) \n{\n    int n = l1.length;\n    int\
    \ m = l2.length;\n    long[] res = new long[n];\n    for(int i = 0; i < n; ++i)\n\
    \        for(int j = 0; j < m; ++j)\n            if(l1[i] == l2[j])\n        \
    \        res[i] = l1[i];\n    return res;\n}\n/*\nReturn sorted unique common\
    \ elements for two ", "{\n\tlong[] result = new long[l1.length + l2.length];\n\
    \tfor (int i = 0; i < l1.length; i++)\n\t\tresult[i] = l1[i];\n\tfor (int i =\
    \ 0; i < l2.length; i++)\n\t\tresult[l1.length + i] = l2[i];\n\tArrays.sort(result);\n\
    \treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor(int i\
    \ = 0; i < l1.length; i++)\n\t{\n\t\tfor(int j = 0; j < l2.length; j++)\n\t\t\
    {\n\t\t\tif(l1[i] == l2[j])\n\t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[] l3 = new long[l1.length\
    \ + l2.length];\n    long i = 0;\n    for (long k = 0; k < l1.length; k++) \n\
    \    {\n        l3[k] = l1[k];\n    }\n    for (long k = 0; k < l2.length; k++)\
    \ \n    {\n        l3[l1.length + k] = l2[k];\n    }\n    sort(l3);\n    return\
    \ l3;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,algorithm,arrays,c# |>\n\
    <code>\npublic static int[] SortArray(int[] array)\n{\n    Array.Sort(array);\n\
    \    return array;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,algorithm,arrays,c#\
    \ |>\n<code>\npublic static int[] SortArray(int[] array)\n{\n    Array.Sort(array);\n\
    \    return array;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,algorithm,arrays,c#\
    \ |>\n<code>\npublic static int[] SortArray(int[] array)\n{\n    Array.Sort(array);\n\
    \    return array;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,algorithm,arrays,c#\
    \ |>\n<code>\npublic static int[] SortArray(int[] array)\n{\n    Array.Sort(array);\n\
    \    return array;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,algorithm,arrays,c#\
    \ |>\n<code>\npublic static int[] SortArray(int[] array)\n{\n    Array.Sort(array);\n\
    \    return array;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public static int[] SortArray(int[] array)\n{\n    Array.Sort(array);\n    return\
    \ array;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,c# |>\n<| a tags=sorting,algorithm,arrays,c#\
    \ |>\n<code>\npublic static int[] SortArray(int[] array)\n{\n    Array.Sort(array);\n\
    \    return array;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    public static int[] SortArray(int[] array)\n{\n    Array.Sort(array);\n    return\
    \ array;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,c# |>\n<| a tags=sorting,algorithm,array",
  "{\n\tlong[] result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\
    \t{\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\
    \t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len) \n{\n\tlong[] result\
    \ = new long[len];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j\
    \ = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\t\
    result[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\
    /*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2) \n{\n\tlong[] result =\
    \ new long[len];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j =\
    \ 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\t\t\t\t\
    result[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\
    /*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3) \n{\n\tlong[]\
    \ result = new long[len];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor\
    \ (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t{\n\
    \t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n/*\nReturn sorted unique common elements for three lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n\tlong[] result = new\
    \ long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\tfor (int j\
    \ = 0; j < l2.length; j++)\n\t\t{\n\t\t\tfor (int k = 0; k < l3.length; k++)\n\
    \t\t\t{\n\t\t\t\tif (l1[i] == l2[j] && l2[j] == l3[k])\n\t\t\t\t{\n\t\t\t\t\t\
    result[i] = l1[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n/*\nReturn sorted unique common elements for three lists.\n    \
    \    \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, int len) \n{\n\
    \tlong[] ", "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i\
    \ < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n     \
    \   {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len) \n{\n    long[] result\
    \ = new long[len];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int\
    \ j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n    \
    \        {\n                result[i] = l1[i];\n                break;\n     \
    \       }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2) \n{\n    long[] result = new long[len];\n    for(int\
    \ i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n\
    \        {\n            if(l1[i] == l2[j])\n            {\n                result[i]\
    \ = l1[i];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3)\
    \ \n{\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length; i++)\n\
    \    {\n        for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i]\
    \ == l2[j])\n            {\n                result[i] = l1[i];\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2, int len3, int len4) \n{\n    long[] result\
    \ = new long[len];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int\
    \ j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n    \
    \        {\n                result[i] = l1[i];\n                break;\n     \
    \       }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2, int len3, int len4, int len5) \n{\n    long[] result\
    \ = new long[len];\n    for(int i = 0; i < l1.length; i++)\n    {\n        for(int\
    \ j = 0; j < l2.length; j++)", "{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3)\n\
    {\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                for(int k = 0; k < l3.length;\
    \ k++)\n                {\n                    if(l1[i] == l3[k])\n          \
    \          {\n                        result[i] = l1[i];\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4)\n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               result[i] = l1[i];\n                                break;\n \
    \                           }\n                        }\n                   \
    \     break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for four lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4, long[] l5)\n{\n    long[] result = new long[l1.length];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     for(int k = 0; k < l3.length; k++)\n                {\n                \
    \    if(l1[i] == l3[k])\n                    {\n                        for(int\
    \ l = 0; l < l4.length; l++)\n                        {\n                    \
    \        if(l1[i] == l4[l])\n                            {\n                 \
    \               for(int m = 0; m < l5.length; m++)\n                         \
    \       {\n                                    if(l1[i] == l5[m])\n          \
    \                          {\n                                        result[i]\
    \ = l1", "{\n    long[] result = new long[l1.length];\n    long common = 0;\n\
    \    for (int i = 0; i < l1.length; i++)\n    {\n        if (l1[i] == l2[i])\n\
    \        {\n            result[i] = l1[i];\n            common++;\n        }\n\
    \        else\n        {\n            result[i] = common;\n            common\
    \ = 0;\n        }\n    }\n    result[result.length - 1] = common;\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ result = new long[l1.length + l2.length];\n    long common = 0;\n    for (int\
    \ i = 0; i < l1.length; i++)\n    {\n        if (l1[i] == l2[i])\n        {\n\
    \            result[i] = l1[i];\n            common++;\n        }\n        else\n\
    \        {\n            result[i] = common;\n            common = 0;\n       \
    \ }\n    }\n    result[result.length - 1] = common;\n    for (int i = 0; i < l2.length;\
    \ i++)\n    {\n        if (l1[i] == l3[i])\n        {\n            result[i +\
    \ l1.length] = l2[i];\n            common++;\n        }\n        else\n      \
    \  {\n            result[i + l1.length] = common;\n            common = 0;\n \
    \       }\n    }\n    result[result.length - 1] = common;\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for three lists.\n        \n    \n\
    */\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n    long[]\
    \ result = new long[l1.length + l2.length + l3.length];\n    long common = 0;\n\
    \    for (int i = 0; i < l1.length; i++)\n    {\n        if (l1[i] == l2[i])\n\
    \        {\n            result[i] = l1[i];\n            common++;\n        }\n\
    \        else\n        {\n            result[i] = common;\n            common\
    \ = 0;\n        }\n    }\n    result[result.length - 1] = common;\n    for (int\
    \ i = 0; i < l2.length; i++)\n    {\n        if (l1[i] == l3[i])\n        {\n\
    \            result[i + l1.length] = l2[i];\n            common++;\n        }\n\
    \        else\n        {\n            result[i + l1.length] = common;\n      \
    \      common = 0;\n        }\n    }\n    result[result.length - 1] = common;\n\
    \    for (int i = 0; i < l3.length; i++)\n    {\n        if (l1[i] == l4[i])\n\
    \        {\n            result[i + l1.length + l2.length] = l3[i];\n         \
    \   common++;\n        }\n        else\n        {\n            result[i + l1.length\
    \ + l2.length] = common;\n            common = 0;\n        }\n    }\n    result[result.length\
    \ - 1] = common;\n    return result;\n}\n/*\nReturn sorted unique ", "{\n\tlong\
    \ [] res = new long[l1.length];\n\tfor(int i = 0; i < l1.length; i++)\n\t\tres[i]\
    \ = l1[i];\n\tfor(int i = 0; i < l2.length; i++)\n\t\tres[l1.length + i] = l2[i];\n\
    \tArrays.sort(res);\n\treturn res;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int\
    \ len) \n{\n\tlong [] res = new long[len];\n\tfor(int i = 0; i < l1.length; i++)\n\
    \t\tres[i] = l1[i];\n\tfor(int i = 0; i < l2.length; i++)\n\t\tres[len + i] =\
    \ l2[i];\n\tArrays.sort(res);\n\treturn res;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2) \n{\n\tlong [] res = new long[len];\n\tfor(int i = 0;\
    \ i < l1.length; i++)\n\t\tres[i] = l1[i];\n\tfor(int i = 0; i < l2.length; i++)\n\
    \t\tres[len + i] = l2[i];\n\tArrays.sort(res);\n\treturn res;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, int len, int len2, int len3) \n{\n\tlong [] res = new long[len];\n\
    \tfor(int i = 0; i < l1.length; i++)\n\t\tres[i] = l1[i];\n\tfor(int i = 0; i\
    \ < l2.length; i++)\n\t\tres[len + i] = l2[i];\n\tArrays.sort(res);\n\treturn\
    \ res;\n}\n/*\nReturn sorted unique common elements for two lists.\n        \n\
    \    \n*/\nlong[] common(long[] l1, long[] l2, int len, int len2, int len3, int\
    \ len4) \n{\n\tlong [] res = new long[len];\n\tfor(int i = 0; i < l1.length; i++)\n\
    \t\tres[i] = l1[i];\n\tfor(int i = 0; i < l2.length; i++)\n\t\tres[len + i] =\
    \ l2[i];\n\tArrays.sort(res);\n\treturn res;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2, int len, int len2, int len3, int len4, int len5) \n{\n\tlong [] res = new\
    \ long[len];\n\tfor(int i = 0; i < l1.length; i++)\n\t\tres[i] = l1[i];\n\tfor(int\
    \ i = 0; i < l2.length; i++)\n\t\tres[len + i] = l2[i];\n\tArrays.sort(res);\n",
  "{\n    long[] result = new long[l1.length];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length;\
    \ j++)\n        {\n            if(l1[i] == l2[j])\n            {\n           \
    \     result[i] = l1[i];\n                break;\n            }\n        }\n \
    \   }\n    return result;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int len, int\
    \ len2) \n{\n    long[] result = new long[len];\n    for(int i = 0; i < l1.length;\
    \ i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n        {\n       \
    \     if(l1[i] == l2[j])\n            {\n                result[i] = l1[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int len, int len2, int len3) \n{\n    long[]\
    \ result = new long[len];\n    for(int i = 0; i < l1.length; i++)\n    {\n   \
    \     for(int j = 0; j < l2.length; j++)\n        {\n            if(l1[i] == l2[j])\n\
    \            {\n                result[i] = l1[i];\n                break;\n \
    \           }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for three lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3) \n{\n    long[] result = new long[l1.length];\n    for(int\
    \ i = 0; i < l1.length; i++)\n    {\n        for(int j = 0; j < l2.length; j++)\n\
    \        {\n            for(int k = 0; k < l3.length; k++)\n            {\n  \
    \              if(l1[i] == l2[j] && l2[j] == l3[k])\n                {\n     \
    \               result[i] = l1[i];\n                    break;\n             \
    \   }\n            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted\
    \ unique common elements for three lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3, int len) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < l1.length; i++)", "{\n    long[] result = new long[l1.length];\n\
    \    int i = 0;\n    for (; i < l1.length && i < l2.length; ++i)\n    {\n    \
    \    if (l1[i] == l2[i])\n            continue;\n        result[i] = l1[i];\n\
    \    }\n    for (; i < l1.length; ++i)\n        result[i] = l1[i];\n    for (;\
    \ i < l2.length; ++i)\n        result[i] = l2[i];\n    std.sort(result);\n   \
    \ return result;\n}", "{\n    long[] result = new long[l1.length];\n    \n   \
    \ int i = 0;\n    int j = 0;\n    \n    while (i < l1.length && j < l2.length)\n\
    \    {\n        if (l1[i] == l2[j])\n        {\n            result[j] = l1[i];\n\
    \            i++;\n            j++;\n        }\n        else if (l1[i] < l2[j])\n\
    \        {\n            j++;\n        }\n        else\n        {\n           \
    \ i++;\n        }\n    }\n    \n    while (i < l1.length)\n    {\n        result[j]\
    \ = l1[i];\n        i++;\n        j++;\n    }\n    \n    while (j < l2.length)\n\
    \    {\n        result[j] = l2[j];\n        j++;\n    }\n    \n    return result;\n\
    }", "{\n    long[] result = new long[l1.length + l2.length];\n    int i = 0;\n\
    \    int j = 0;\n    for(; i < l1.length && j < l2.length; i++, j++)\n    {\n\
    \        if(l1[i] == l2[j])\n            result[i] = l1[i];\n    }\n    for(;\
    \ i < l1.length; i++)\n    {\n        result[i] = l1[i];\n    }\n    for(; j <\
    \ l2.length; j++)\n    {\n        result[l1.length + j] = l2[j];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about a specific\
    \ language, not about a general algorithm.\n<|/ c |>\n<| c |>\nThe question was\
    \ about a specific language, not about a general algorithm.\n<|/ c |>\n<| c |>\n\
    The question was about a specific language, not about a general algorithm.\n<|/\
    \ c |>\n<| c |>\nThe question was about a specific language, not about a general\
    \ algorithm.\n<|/ c |>\n<| c |>\nThe question was about a specific language, not\
    \ about a general algorithm.\n<|/ c |>\n<| a tags=algorithm,arrays,sorting |>\n\
    <code>\npublic static void main(String[] args) {\n    int[] a = {1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9};\n    int[] b = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int[] c = new\
    \ int[a.length + b.length];\n    int i = 0;\n    int j = 0;\n    for(int k = 0;\
    \ k < a.length; k++) {\n        c[i] = a[k];\n        i++;\n    }\n    for(int\
    \ k = 0; k < b.length; k++) {\n        c[j] = b[k];\n        j++;\n    }\n   \
    \ Arrays.sort(c);\n    for(int k = 0; k < c.length; k++) {\n        System.out.println(c[k]);\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about a specific\
    \ language, not about a general algorithm.\n<|/ c |>\n<| a tags=algorithm,arrays,sorting\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] a = {1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9};\n    int[] b = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int[] c\
    \ = new int[a.length + b.length];\n    int i = 0;\n    int j = 0;\n    for(int\
    \ k = 0; k < a.length; k++) {\n        c[i] = a[k];\n        i++;\n    }\n   \
    \ for(int k = 0; k < b.length; k++) {\n        c[j] = b[k];\n        j++;\n  \
    \  }\n    Arrays.sort(c);\n    for(int k = 0; k < c.length; k++) {", "{\n\tlong[]\
    \ result = new long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t{\n\t\
    \tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\t\t\t\
    {\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }", "{\n    long[] result = new long[l1.length + l2.length];\n    int j = 0;\n\
    \    for (int i = 0; i < l1.length; i++)\n    {\n        if (l2[j] == l1[i])\n\
    \        {\n            result[i] = l1[i];\n            j++;\n        }\n    }\n\
    \    for (int i = l1.length; i < l2.length; i++)\n    {\n        result[i] = l2[j];\n\
    \        j++;\n    }\n    return result;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int\
    \ l) \n{\n    long[] result = new long[l1.length + l2.length];\n    int j = 0;\n\
    \    for (int i = 0; i < l1.length; i++)\n    {\n        if (l2[j] == l1[i])\n\
    \        {\n            result[i] = l1[i];\n            j++;\n        }\n    }\n\
    \    for (int i = l1.length; i < l2.length; i++)\n    {\n        result[i] = l2[j];\n\
    \        j++;\n    }\n    return result;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, int\
    \ l, int h) \n{\n    long[] result = new long[l1.length + l2.length];\n    int\
    \ j = 0;\n    for (int i = 0; i < l1.length; i++)\n    {\n        if (l2[j] ==\
    \ l1[i])\n        {\n            result[i] = l1[i];\n            j++;\n      \
    \  }\n    }\n    for (int i = l1.length; i < l2.length; i++)\n    {\n        result[i]\
    \ = l2[j];\n        j++;\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, int l, int h, int l2) \n{\n    long[] result = new long[l1.length\
    \ + l2.length];\n    int j = 0;\n    for (int i = 0; i < l1.length; i++)\n   \
    \ {\n        if (l2[j] == l1[i])\n        {\n            result[i] = l1[i];\n\
    \            j++;\n        }\n    }\n    for (int i = l1.length; i < l2.length;\
    \ i++)\n    {\n        result[i] = l2[j];\n        j++;\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, int l, int h, int l2, int h) \n{\n    long[]\
    \ result = new long[l1.length + l2.length];\n    int j = 0;\n    for (int i =\
    \ 0; i < l1.length; i++)\n    {\n        if (l2[j] == l1[i])\n        {\n    \
    \        result[i] = l1[i];\n            j++;\n        }\n    }\n", "{\n\tlong[]\
    \ result = new long[l1.length];\n\t\n\tfor (int i = 0; i < l1.length; i++)\n\t\
    {\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t{\n\t\t\tif (l1[i] == l2[j])\n\
    \t\t\t{\n\t\t\t\tresult[i] = l1[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\
    \treturn result;\n}", "{\n\tlong[] result = new long[l1.length];\n\tfor (int i\
    \ = 0; i < l1.length; i++)\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t\tif\
    \ (l1[i] == l2[j])\n\t\t\t\tresult[i] = l1[i];\n\treturn result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3) \n{\n\tlong[] result = new long[l1.length];\n\tfor\
    \ (int i = 0; i < l1.length; i++)\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\
    \t\tif (l1[i] == l2[j])\n\t\t\t\tfor (int k = 0; k < l3.length; k++)\n\t\t\t\t\
    \tif (l1[i] == l3[k])\n\t\t\t\t\t\tresult[i] = l1[i];\n\treturn result;\n}\n/*\n\
    Return sorted unique common elements for three lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n\tlong[] result = new\
    \ long[l1.length];\n\tfor (int i = 0; i < l1.length; i++)\n\t\tfor (int j = 0;\
    \ j < l2.length; j++)\n\t\t\tif (l1[i] == l2[j])\n\t\t\t\tfor (int k = 0; k <\
    \ l3.length; k++)\n\t\t\t\t\tif (l1[i] == l3[k])\n\t\t\t\t\t\tfor (int l = 0;\
    \ l < l4.length; l++)\n\t\t\t\t\t\t\tif (l1[i] == l4[l])\n\t\t\t\t\t\t\t\tresult[i]\
    \ = l1[i];\n\treturn result;\n}\n/*\nReturn sorted unique common elements for\
    \ four lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4, long[] l5) \n{\n\tlong[] result = new long[l1.length];\n\tfor\
    \ (int i = 0; i < l1.length; i++)\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\
    \t\tif (l1[i] == l2[j])\n\t\t\t\tfor (int k = 0; k < l3.length; k++)\n\t\t\t\t\
    \tif (l1[i] == l3[k])\n\t\t\t\t\t\tfor (int l = 0; l < l4.length; l++)\n\t\t\t\
    \t\t\t\tif (l1[i] == l4[l])\n\t\t\t\t\t\t\t\tfor (int m = 0; m < l5.length; m++)\n\
    \t\t\t\t\t\t\t\t\tif (l1[i] == l5[m])\n\t\t\t\t\t\t\t\t\t\tresult[i] = l1[i];\n\
    \treturn result;\n}\n/*\nReturn sorted unique common elements for five lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4,\
    \ long[] l5, long[] l6) \n{\n\tlong[] result = new long[l1.length];\n\tfor (int\
    \ i = 0; i < l1.length; i++)\n\t\tfor (int j = 0; j < l2.length; j++)\n\t\t\t\
    if (l1[i] == l2[j])\n\t\t\t\tfor (int k = 0; k < l3.length; k++)"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
