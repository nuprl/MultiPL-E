language: d
name: HumanEval_2_truncate_number
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    \n    integer_part\
    \ = trunc(number);\n    remainder = number - integer_part;\n    \n    return remainder;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptegsa42c.d(16): Error: cannot implicitly convert expression `trunc(cast(real)number)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptegsa42c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number;\n    float integerPart = number;\n\
    \    float remainder = 0;\n    \n    while(integerPart > 0)\n    {\n        remainder\
    \ = integerPart % 10;\n        integerPart = integerPart / 10;\n        decimals\
    \ = decimals * 10 + remainder;\n    }\n    \n    return decimals;\n}\n/*\n Given\
    \ a positive floating point number, it can be decomposed into\n    and integer\
    \ part (largest integer smaller than given number) and decimals\n    (leftover\
    \ part always smaller than 1).\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo3by59jg.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo3by59jg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float fractionalPart;\n    float integerPart;\n    \n    fractionalPart\
    \ = number - trunc(number);\n    integerPart = trunc(number);\n    \n    return\
    \ fractionalPart + integerPart;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpps5a0b7c.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e4d]

    ??:? void tmpps5a0b7c.__unittest_L21_C1() [0x427b62]

    ??:? void tmpps5a0b7c.__modtest() [0x427bd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42829c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    \n \
    \   while(number > 0.0)\n    {\n        remainder = number % 10.0;\n        number\
    \ = number / 10.0;\n        decimals = decimals + remainder;\n    }\n    return\
    \ decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyquyf8pz.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpyquyf8pz.__unittest_L24_C1() [0x427ade]

    ??:? void tmpyquyf8pz.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float quotient;\n    float decimals;\n\
    \    float result;\n    float temp;\n    int exponent;\n    int decimal_point;\n\
    \    int decimal_point_position;\n    int decimal_point_position2;\n    int decimal_point_position3;\n\
    \    int decimal_point_position4;\n    int decimal_point_position5;\n    int decimal_point_position6;\n\
    \    int decimal_point_position7;\n    int decimal_point_position8;\n    int decimal_point_position9;\n\
    \    int decimal_point_position10;\n    int decimal_point_position11;\n    int\
    \ decimal_point_position12;\n    int decimal_point_position13;\n    int decimal_point_position14;\n\
    \    int decimal_point_position15;\n    int decimal_point_position16;\n    int\
    \ decimal_point_position17;\n    int decimal_point_position18;\n    int decimal_point_position19;\n\
    \    int decimal_point_position20;\n    int decimal_point_position21;\n    int\
    \ decimal_point_position22;\n    int decimal_point_position23;\n    int decimal_point_position24;\n\
    \    int decimal_point_position25;\n    int decimal_point_position26;\n    int\
    \ decimal_point_position27;\n    int decimal_point_position28;\n    int decimal_point_position29;\n\
    \    int decimal_point_position30;\n    int decimal_point_position31;\n    int\
    \ decimal_point_position32;\n    int decimal_point_position33;\n    int decimal_point_position34;\n\
    \    int decimal_point_position35;\n    int decimal_point_position36;\n    int\
    \ decimal_point_position37;\n    int decimal_point_position38;\n    int decimal_point_position39;\n\
    \    int decimal_point_position40;\n    int decimal_point_position41;\n    int\
    \ decimal_point_position42;\n    int decimal_point_position43;\n    int decimal_point_position44;\n\
    \    int decimal_point_position45;\n    int decimal_point_position46;\n    int\
    \ decimal_point_position47;\n    int decimal_point_position48;\n    int decimal_point_position49;\n\
    \    int decimal_point_position50;\n    int decimal_point_position51;\n    int\
    \ decimal_point_position52;\n    int decimal_point_position53;\n    int decimal_point_position54;\n\
    \    int decimal_point_position55;\n    int decimal_point_position56;\n    int\
    \ decimal_point_position57;\n    int decimal_point_position58;\n    int decimal_point_position59;\n\
    \    int decimal_point_position60;\n    int decimal_point_position61;\n    int\
    \ decimal_point_position62;\n    int decimal_point_position63;\n    int decimal_point_position64;\n\
    \    int decimal_point_position65;\n    int decimal_point_position66;\n    int\
    \ decimal_point_position67;\n    int decimal_point_position68;\n    int decimal_point_position69;\n\
    \    int decimal_point_position70;\n    int decimal_point_position7\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd5k3hxli.d(91): Error: semicolon expected, not `unittest`

    /tmp/tmpd5k3hxli.d(91): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5k3hxli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float trunc_number = number;\n    int int_part = 0;\n    float\
    \ decimal_part = 0.0;\n    \n    while(trunc_number >= 1)\n    {\n        trunc_number\
    \ = trunc_number / 10.0;\n        int_part++;\n    }\n    \n    decimal_part =\
    \ trunc_number - int_part;\n    \n    return decimal_part;\n}\nunittest\n{\n \
    \   alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi91t4ism.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpi91t4ism.__unittest_L27_C1() [0x427ab2]

    ??:? void tmpi91t4ism.__modtest() [0x427b20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float integerPart = 0.0;\n    \n\
    \    while(number > 0.0)\n    {\n        float remainder = number % 1.0f;\n  \
    \      \n        decimals += remainder;\n        integerPart += remainder;\n \
    \       \n        number = number / 1.0f;\n    }\n    \n    return decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164458
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = number / float.pow(2, 32);\n    decimalPart = number\
    \ - integerPart * float.pow(2, 32);\n    \n    return decimalPart;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1ik4u33.d(17): Error: cannot pass type `float` as a function argument

    /tmp/tmpc1ik4u33.d(18): Error: cannot pass type `float` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc1ik4u33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    \n    quotient = number / 10.0;\n    remainder = number\
    \ % 10.0;\n    \n    decimals = remainder;\n    \n    return quotient + decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9a8m025m.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmp9a8m025m.__unittest_L24_C1() [0x427aca]

    ??:? void tmp9a8m025m.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    \n \
    \   while(number > 0.0)\n    {\n        remainder = number % 10.0;\n        number\
    \ = number / 10.0;\n        decimals = decimals + remainder;\n    }\n    \n  \
    \  return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n\
    \    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n  \
    \  assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt0w64gaw.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpt0w64gaw.__unittest_L25_C1() [0x427ade]

    ??:? void tmpt0w64gaw.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float decimals;\n    int integerPart;\n\
    \    \n    integerPart = int(number);\n    \n    remainder = number - integerPart;\n\
    \    \n    decimals = remainder * pow(10.0, -integerPart);\n    \n    return decimals;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,floating-point,truncate |>\n<code>\n\
    float truncate_number(float number) \n{\n    float remainder;\n    float decimals;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    \n    remainder\
    \ = number - integerPart;\n    \n    decimals = remainder * pow(10.0, -integerPart);\n\
    \    \n    return decimals;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,floating-point,truncate\
    \ |>\n<code>\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimals;\n    int integerPart;\n    \n    integerPart = int(number);\n\
    \    \n    remainder = number - integerPart;\n    \n    decimals = remainder *\
    \ pow(10.0, -integerPart);\n    \n    return decimals;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimals;\n    int integerPart;\n    \n    integerPart = int(number);\n\
    \    \n    remainder = number - integerPart;\n    \n    decimals = remainder *\
    \ pow(10.0, -integerPart);\n    \n    return decimals;\n}\n</code>\n<|/ a tags=c++,floating-point,truncate\
    \ |>\n<| a tags=c++,floating-point,truncate |>\n<code>\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float decimals;\n    int integerPart;\n\
    \    \n    integerPart = int(number);\n    \n    remainder = number - integerPart;\n\
    \    \n    decimals = remainder * pow(10.0, -integerPart);\n    \n    return decimals;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nfloat truncate_number(float number)\
    \ \n{\n    float remainder;\n    float decimals;\n    int integerPart;\n    \n\
    \    integerPart = \nunittest\n{\n    alias candidate = truncate_number;\n\n \
    \   assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n   \
    \ assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxb9kd1_.d(25): Error: declaration expected, not `<`

    /tmp/tmpaxb9kd1_.d(35): Error: no identifier for declarator `integerPart`

    /tmp/tmpaxb9kd1_.d(35): Error: declaration expected, not `=`

    /tmp/tmpaxb9kd1_.d(37): Error: no identifier for declarator `remainder`

    /tmp/tmpaxb9kd1_.d(37): Error: declaration expected, not `=`

    /tmp/tmpaxb9kd1_.d(39): Error: no identifier for declarator `decimals`

    /tmp/tmpaxb9kd1_.d(39): Error: declaration expected, not `=`

    /tmp/tmpaxb9kd1_.d(41): Error: declaration expected, not `return`

    /tmp/tmpaxb9kd1_.d(42): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxb9kd1_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float quotient;\n    float decimals;\n\
    \    float result;\n    \n    quotient = number;\n    decimals = 1;\n    \n  \
    \  while(quotient > 1) {\n        remainder = quotient % 10;\n        quotient\
    \ = quotient / 10;\n        decimals = decimals * 10 + remainder;\n    }\n   \
    \ \n    result = number - decimals;\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq8ps6z6b.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e0d]

    ??:? void tmpq8ps6z6b.__unittest_L31_C1() [0x427b1e]

    ??:? void tmpq8ps6z6b.__modtest() [0x427b8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430008]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fae5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]

    ??:? runModuleUnitTests [0x42b909]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42825c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    \n \
    \   while(number > 0.0)\n    {\n        remainder = number % 10.0;\n        number\
    \ = number / 10.0;\n        decimals = decimals + remainder;\n    }\n    \n  \
    \  return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n\
    \    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n  \
    \  assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt0w64gaw.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpt0w64gaw.__unittest_L25_C1() [0x427ade]

    ??:? void tmpt0w64gaw.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float fraction = number - trunc(number);\n    float decimal\
    \ = fraction % 1;\n    return decimal;\n}\nunittest\n{\n    alias candidate =\
    \ truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = floorf(number);\n    decimalPart = number-integerPart;\n\
    \    \n    remainder = number-integerPart;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0fgl_e4o.d(17): Error: undefined identifier `floorf`, did you mean
    function `floor`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fgl_e4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    \n \
    \   while(number > 0.0) {\n        float remainder = number % 10.0;\n        number\
    \ = number / 10.0;\n        decimals = decimals + remainder;\n    }\n    \n  \
    \  return result + decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptw5we8mr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmptw5we8mr.__unittest_L24_C1() [0x427ade]

    ??:? void tmptw5we8mr.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    \n  \
    \  while(number > 0.0)\n    {\n        float remainder = number % 1.0;\n     \
    \   \n        if(remainder > 0.0)\n        {\n            int_part += remainder;\n\
    \            \n            number /= 1.0;\n        }\n        else\n        {\n\
    \            decimals += remainder;\n            \n            number /= 1.0;\n\
    \        }\n    }\n    \n    return int_part + decimals;\n}\nunittest\n{\n   \
    \ alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n \
    \   assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\n\
    void main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164458
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    \n \
    \   while(number > 0.0)\n    {\n        float remainder = number % 1.0;\n    \
    \    number = number;\n        decimals += remainder;\n    }\n    \n    return\
    \ result + decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164458
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimalPart;\n    float integerPart;\n    \n    integerPart\
    \ = number;\n    decimalPart = number - integerPart;\n    \n    return decimalPart;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprcltbr6x.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmprcltbr6x.__unittest_L21_C1() [0x427a72]

    ??:? void tmprcltbr6x.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = number - (int)number;\n    decimalPart = number - integerPart;\n\
    \    \n    remainder = decimalPart % 1;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjmle33ma.d(17): Error: C style cast illegal, use `cast(int)number`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjmle33ma.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int int_part;\n    float frac_part;\n    int_part = int(number);\n\
    \    frac_part = number - int_part;\n    return frac_part;\n}\nunittest\n{\n \
    \   alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_sc5snk.d(15): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_sc5snk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    \n \
    \   while(number > 0.0)\n    {\n        remainder = number % 1;\n        number\
    \ = number / 1;\n        decimals = decimals + remainder;\n    }\n    \n    return\
    \ decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164458
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = int(number);\n    \n    decimal_part = number - integer_part;\n    \n    return\
    \ decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp49pvpzx9.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49pvpzx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    int_part = floor(number);\n    \n    if (int_part\
    \ == number)\n    {\n        decimals = 0.0;\n    }\n    else\n    {\n       \
    \ remainder = number - int_part;\n        decimals = remainder * pow(10.0, floor(log10(remainder)));\n\
    \    }\n    \n    return int_part + decimals;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaz_md2jg.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428bf5]

    ??:? void tmpaz_md2jg.__unittest_L31_C1() [0x42800e]

    ??:? void tmpaz_md2jg.__modtest() [0x428978]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430be5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba9d]

    ??:? runModuleUnitTests [0x42ca09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429044]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number - floor(number);\n    return floor(number)\
    \ + decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5f05lq37.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ec5]

    ??:? void tmp5f05lq37.__unittest_L16_C1() [0x427bda]

    ??:? void tmp5f05lq37.__modtest() [0x427c48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd2f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abc2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd55]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430204]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fce1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab99]

    ??:? runModuleUnitTests [0x42bb05]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428314]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float remainder = 0;\n    \n  \
    \  while(result > 0)\n    {\n        remainder = result % 10;\n        result\
    \ = result / 10;\n    }\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph91epn2v.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmph91epn2v.__unittest_L24_C1() [0x427aaa]

    ??:? void tmph91epn2v.__modtest() [0x427b18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    while(result > 1)\n    {\n\
    \        result /= 10;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdjl8wl32.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpdjl8wl32.__unittest_L22_C1() [0x427a7e]

    ??:? void tmpdjl8wl32.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integerPart;\n    float decimalPart;\n    \n    integerPart\
    \ = int(number);\n    decimalPart = number - integerPart;\n    \n    return decimalPart;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpicl9ttp2.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpicl9ttp2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = number;\n    decimalPart = number - integerPart;\n  \
    \  \n    remainder = decimalPart % 1;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpidxwn9pf.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpidxwn9pf.__unittest_L24_C1() [0x427a9e]

    ??:? void tmpidxwn9pf.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    int_part = floor(number);\n    \n    if (int_part\
    \ == number) {\n        decimals = 0.0;\n    } else {\n        decimals = number\
    \ - int_part;\n    }\n    \n    remainder = number - int_part;\n    \n    return\
    \ remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = int(number);\n    decimal_part = number - integer_part;\n    \n    return\
    \ decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfvf0ldul.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvf0ldul.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float quotient;\n    float decimals;\n\
    \    float temp;\n    float temp2;\n    float temp3;\n    float temp4;\n    float\
    \ temp5;\n    float temp6;\n    float temp7;\n    float temp8;\n    float temp9;\n\
    \    float temp10;\n    float temp11;\n    float temp12;\n    float temp13;\n\
    \    float temp14;\n    float temp15;\n    float temp16;\n    float temp17;\n\
    \    float temp18;\n    float temp19;\n    float temp20;\n    float temp21;\n\
    \    float temp22;\n    float temp23;\n    float temp24;\n    float temp25;\n\
    \    float temp26;\n    float temp27;\n    float temp28;\n    float temp29;\n\
    \    float temp30;\n    float temp31;\n    float temp32;\n    float temp33;\n\
    \    float temp34;\n    float temp35;\n    float temp36;\n    float temp37;\n\
    \    float temp38;\n    float temp39;\n    float temp40;\n    float temp41;\n\
    \    float temp42;\n    float temp43;\n    float temp44;\n    float temp45;\n\
    \    float temp46;\n    float temp47;\n    float temp48;\n    float temp49;\n\
    \    float temp50;\n    float temp51;\n    float temp52;\n    float temp53;\n\
    \    float temp54;\n    float temp55;\n    float temp56;\n    float temp57;\n\
    \    float temp58;\n    float temp59;\n    float temp60;\n    float temp61;\n\
    \    float temp62;\n    float temp63;\n    float temp64;\n    float temp65;\n\
    \    float temp66;\n    float temp67;\n    float temp68;\n    float temp69;\n\
    \    float temp70;\n    float temp71;\n    float temp72;\n    float temp73;\n\
    \    float temp74;\n    float temp75;\n    float temp76;\n    float temp77;\n\
    \    float temp78;\n    float temp79;\n    float temp80;\n    float temp81;\n\
    \    float temp82;\n    float temp83;\n    float temp84;\n    float temp85;\n\
    \    float temp\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkgu28iox.d(102): Error: semicolon expected, not `unittest`

    /tmp/tmpkgu28iox.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkgu28iox.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = int(number);\n    decimal_part = number - integer_part;\n    \n    return\
    \ decimal_part;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,floating-point,c\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include\
    \ <math.h>\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvckpnls5.d(21): Error: declaration expected, not `<`

    /tmp/tmpvckpnls5.d(33): Error: declaration expected, not `assert`

    /tmp/tmpvckpnls5.d(34): Error: declaration expected, not `assert`

    /tmp/tmpvckpnls5.d(35): Error: declaration expected, not `assert`

    /tmp/tmpvckpnls5.d(36): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvckpnls5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int int_part;\n    float frac_part;\n    \n    int_part = int(number);\n\
    \    frac_part = number - int_part;\n    \n    return frac_part;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprqasze4k.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprqasze4k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = number;\n    decimalPart = number - integerPart;\n  \
    \  \n    remainder = decimalPart % 1;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpidxwn9pf.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpidxwn9pf.__unittest_L24_C1() [0x427a9e]

    ??:? void tmpidxwn9pf.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number - trunc(number);\n    return trunc(number);\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvo6wg_fb.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e1d]

    ??:? void tmpvo6wg_fb.__unittest_L16_C1() [0x427b2e]

    ??:? void tmpvo6wg_fb.__modtest() [0x427b9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float decimal;\n    int integer;\n  \
    \  \n    integer = int(number);\n    remainder = number - integer;\n    decimal\
    \ = remainder * pow(10.0, floor(log10(remainder)));\n    \n    return decimal;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnpwm478e.d(17): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnpwm478e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimal = number - int(number);\n    return decimal;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpugtl2wjk.d(13): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugtl2wjk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimalPart;\n    float integerPart;\n    \n    integerPart\
    \ = number;\n    decimalPart = number - integerPart;\n    \n    return decimalPart;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprcltbr6x.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmprcltbr6x.__unittest_L21_C1() [0x427a72]

    ??:? void tmprcltbr6x.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    \n \
    \   while(number > 0.0)\n    {\n        remainder = number % 10.0;\n        number\
    \ = number / 10.0;\n        decimals = decimals + remainder;\n    }\n    \n  \
    \  return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n\
    \    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n  \
    \  assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt0w64gaw.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpt0w64gaw.__unittest_L25_C1() [0x427ade]

    ??:? void tmpt0w64gaw.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float remainder;\n    \n    while(result\
    \ > 1) {\n        remainder = result % 10;\n        result = result / 10;\n  \
    \      result = result + remainder;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164459
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number;\n    float int_part = 0;\n    float\
    \ remainder = 0;\n    \n    while(number > 0)\n    {\n        remainder = number\
    \ % 10;\n        int_part = int_part * 10 + remainder;\n        number = number\
    \ / 10;\n    }\n    \n    return decimals;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzol80pwq.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpzol80pwq.__unittest_L26_C1() [0x427ade]

    ??:? void tmpzol80pwq.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    float\
    \ fraction = number;\n    \n    while(fraction > 0.0) {\n        fraction = fraction\
    \ / 10.0;\n        decimals++;\n    }\n    \n    return result + decimals;\n}\n\
    unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpux8bevbx.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dad]

    ??:? void tmpux8bevbx.__unittest_L24_C1() [0x427ac2]

    ??:? void tmpux8bevbx.__modtest() [0x427b30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]

    ??:? runModuleUnitTests [0x42b8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    int decimal_part;\n\
    \    \n    integer_part = trunc(number);\n    \n    decimal_part = number - integer_part;\n\
    \    \n    remainder = number - integer_part - decimal_part;\n    \n    return\
    \ remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxcpcq5mb.d(17): Error: cannot implicitly convert expression `trunc(cast(real)number)`
    of type `real` to `int`

    /tmp/tmpxcpcq5mb.d(19): Error: cannot implicitly convert expression `number -
    cast(float)integer_part` of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcpcq5mb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float remainder;\n    int decimal_point;\n\
    \    \n    while(number > 0)\n    {\n        remainder = number % 10;\n      \
    \  number = number / 10;\n        decimal_point = (int)remainder;\n        result\
    \ = result + remainder * pow(10.0, decimal_point);\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq1yp7zdr.d(21): Error: C style cast illegal, use `cast(int)remainder`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1yp7zdr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    while(result > 1)\n    {\n\
    \        result /= 10;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdjl8wl32.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpdjl8wl32.__unittest_L22_C1() [0x427a7e]

    ??:? void tmpdjl8wl32.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float integerPart = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    integerPart = number;\n    \n    while(integerPart\
    \ > 0.0)\n    {\n        remainder = integerPart % 10.0;\n        integerPart\
    \ = integerPart / 10.0;\n        decimals = decimals + remainder;\n    }\n   \
    \ \n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpglb5nrwp.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpglb5nrwp.__unittest_L28_C1() [0x427aea]

    ??:? void tmpglb5nrwp.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = trunc(number);\n    \n    decimal_part = number - integer_part;\n    \n  \
    \  return decimal_part;\n}\n/*\n Given a positive floating point number, it can\
    \ be decomposed into\n    and integer part (largest integer smaller than given\
    \ number) and decimals\n    (leftover part always smaller than 1).\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp51cxzk5q.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp51cxzk5q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float remainder;\n    \n    while(result\
    \ > 1) {\n        remainder = result % 1;\n        result = result / 1;\n    \
    \    result = remainder;\n    }\n    \n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float fraction = number - truncate_number(floorf(number));\n\
    \    return fraction;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmb83it3d.d(13): Error: undefined identifier `floorf`, did you mean
    function `floor`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmb83it3d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    \n    integer_part\
    \ = int(number);\n    remainder = number - integer_part;\n    \n    return remainder;\n\
    }\n/*\n Given a positive floating point number, it can be decomposed into\n  \
    \  and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx780arfn.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx780arfn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = 0;\n    float remainder = 0;\n    float temp\
    \ = 0;\n    float temp2 = 0;\n    float temp3 = 0;\n    float temp4 = 0;\n   \
    \ float temp5 = 0;\n    float temp6 = 0;\n    float temp7 = 0;\n    float temp8\
    \ = 0;\n    float temp9 = 0;\n    float temp10 = 0;\n    float temp11 = 0;\n \
    \   float temp12 = 0;\n    float temp13 = 0;\n    float temp14 = 0;\n    float\
    \ temp15 = 0;\n    float temp16 = 0;\n    float temp17 = 0;\n    float temp18\
    \ = 0;\n    float temp19 = 0;\n    float temp20 = 0;\n    float temp21 = 0;\n\
    \    float temp22 = 0;\n    float temp23 = 0;\n    float temp24 = 0;\n    float\
    \ temp25 = 0;\n    float temp26 = 0;\n    float temp27 = 0;\n    float temp28\
    \ = 0;\n    float temp29 = 0;\n    float temp30 = 0;\n    float temp31 = 0;\n\
    \    float temp32 = 0;\n    float temp33 = 0;\n    float temp34 = 0;\n    float\
    \ temp35 = 0;\n    float temp36 = 0;\n    float temp37 = 0;\n    float temp38\
    \ = 0;\n    float temp39 = 0;\n    float temp40 = 0;\n    float temp41 = 0;\n\
    \    float temp42 = 0;\n    float temp43 = 0;\n    float temp44 = 0;\n    float\
    \ temp45 = 0;\n    float temp46 = 0;\n    float temp47 = 0;\n    float temp48\
    \ = 0;\n    float temp49 = 0;\n    float temp50 = 0;\n    float temp51 = 0;\n\
    \    float temp52 = 0;\n    float temp53 = 0;\n    float temp54 = 0;\n    float\
    \ temp55 = 0;\n    float temp56 = 0;\n    float temp57 = 0;\n    float temp58\
    \ = 0;\n    float temp59 = 0;\n    float temp60 = 0;\n    float temp61 = 0;\n\
    \    float temp62 = 0;\n    float temp63 = 0;\n    float temp64 = 0;\n    float\
    \ temp65 = 0;\n    float temp66 = 0;\n    float temp67 = 0;\n    float temp68\
    \ = 0;\n    float temp69 = 0;\n    float temp70 = 0;\n    float temp71 = 0;\n\
    \    float temp72 = 0;\n    float temp73 = 0;\n    float temp74 = 0;\n    float\
    \ temp75 = 0;\n    float temp76 = 0;\n    float temp77 = 0;\n    float temp78\
    \ = 0;\n    float temp79 = 0;\n    float temp80 = 0;\n    float temp81 = 0;\n\
    \    float temp82 = 0;\n    float temp83 = 0;\n    float temp84 = 0;\n\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprh8ap_2v.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprh8ap_2v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = int(number);\n    decimal_part = number - integer_part;\n    \n    return\
    \ decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfvf0ldul.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvf0ldul.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    float quotient_remainder = 0.0;\n    float quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_remainder_remainder = 0.0;\n  \
    \  float quotient_quotient_quotient_quotient_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_remainder\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder_remainder = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder_remainder =\
    \ 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder_quotient = 0.0;\n\
    \    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder_quotient = 0.0;\n\
    \    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remainder_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_remainder_quotient = 0.0;\n\
    \    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float quotient_quotient_quotient_quotient_remainder_quotient\
    \ = 0.0;\n    float quotient_quotient_quotient_quotient_quotient = 0.0;\n    float\
    \ quotient_quotient_quotient_quotient_remain\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb0pd3u7x.d(49): Error: semicolon expected, not `unittest`

    /tmp/tmpb0pd3u7x.d(49): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0pd3u7x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    while(number > 0.0) {\n        remainder = number\
    \ % 1;\n        number = number / 1;\n        decimals = decimals + remainder;\n\
    \    }\n    \n    result = result - decimals;\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164459
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float quotient;\n    float decimals;\n\
    \    \n    quotient = number;\n    decimals = 1;\n    \n    while(quotient > 1)\n\
    \    {\n        remainder = quotient % 10;\n        quotient = quotient / 10;\n\
    \        decimals = decimals * 10 + remainder;\n    }\n    \n    return number\
    \ - decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl99ssczj.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpl99ssczj.__unittest_L29_C1() [0x427b06]

    ??:? void tmpl99ssczj.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float remainder;\n    float decimals;\n\
    \    float temp;\n    int exponent;\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuae49fx3.d(18): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuae49fx3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 1;\n    float\
    \ remainder = 0;\n    \n    while(result > 0)\n    {\n        remainder = result\
    \ % 10;\n        result = result / 10;\n        decimals = decimals * 10 + remainder;\n\
    \    }\n    \n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprb5bcohy.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmprb5bcohy.__unittest_L26_C1() [0x427ade]

    ??:? void tmprb5bcohy.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    while(number > 0.0)\n    {\n        remainder =\
    \ number % 10.0;\n        number = number / 10.0;\n        decimals = decimals\
    \ + remainder;\n        int_part = int_part + remainder;\n    }\n    \n    return\
    \ decimals;\n}\n/*\n Given a positive floating point number, it can be decomposed\
    \ into\n    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7rx_sng.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7rx_sng.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 1;\n    float\
    \ integer = 0;\n    \n    while(result > 0)\n    {\n        integer += result\
    \ % 10;\n        result /= 10;\n        decimals++;\n    }\n    \n    return integer\
    \ + decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1r6i6zid.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmp1r6i6zid.__unittest_L26_C1() [0x427aea]

    ??:? void tmp1r6i6zid.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    float quotient2 = 0.0;\n    float quotient3 = 0.0;\n  \
    \  float quotient4 = 0.0;\n    float quotient5 = 0.0;\n    float quotient6 = 0.0;\n\
    \    float quotient7 = 0.0;\n    float quotient8 = 0.0;\n    float quotient9 =\
    \ 0.0;\n    float quotient10 = 0.0;\n    float quotient11 = 0.0;\n    float quotient12\
    \ = 0.0;\n    float quotient13 = 0.0;\n    float quotient14 = 0.0;\n    float\
    \ quotient15 = 0.0;\n    float quotient16 = 0.0;\n    float quotient17 = 0.0;\n\
    \    float quotient18 = 0.0;\n    float quotient19 = 0.0;\n    float quotient20\
    \ = 0.0;\n    float quotient21 = 0.0;\n    float quotient22 = 0.0;\n    float\
    \ quotient23 = 0.0;\n    float quotient24 = 0.0;\n    float quotient25 = 0.0;\n\
    \    float quotient26 = 0.0;\n    float quotient27 = 0.0;\n    float quotient28\
    \ = 0.0;\n    float quotient29 = 0.0;\n    float quotient30 = 0.0;\n    float\
    \ quotient31 = 0.0;\n    float quotient32 = 0.0;\n    float quotient33 = 0.0;\n\
    \    float quotient34 = 0.0;\n    float quotient35 = 0.0;\n    float quotient36\
    \ = 0.0;\n    float quotient37 = 0.0;\n    float quotient38 = 0.0;\n    float\
    \ quotient39 = 0.0;\n    float quotient40 = 0.0;\n    float quotient41 = 0.0;\n\
    \    float quotient42 = 0.0;\n    float quotient43 = 0.0;\n    float quotient44\
    \ = 0.0;\n    float quotient45 = 0.0;\n    float quotient46 = 0.0;\n    float\
    \ quotient47 = 0.0;\n    float quotient48 = 0.0;\n    float quotient49 = 0.0;\n\
    \    float quotient50 = 0.0;\n    float quotient51 = 0.0;\n    float quotient52\
    \ = 0.0;\n    float quotient53 = 0.0;\n    float quotient54 = 0.0;\n    float\
    \ quotient55 = 0.0;\n    float quotient56 = 0.0;\n    float quotient57 = 0.0;\n\
    \    float quotient58 = 0.0;\n    float quotient59 = 0.0;\n    float quotient60\
    \ = 0.0;\n    float quotient61 = 0.\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplraxz7x1.d(76): Error: semicolon expected, not `unittest`

    /tmp/tmplraxz7x1.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplraxz7x1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    float quotient2 = 0.0;\n    float quotient3 = 0.0;\n  \
    \  float quotient4 = 0.0;\n    float quotient5 = 0.0;\n    float quotient6 = 0.0;\n\
    \    float quotient7 = 0.0;\n    float quotient8 = 0.0;\n    float quotient9 =\
    \ 0.0;\n    float quotient10 = 0.0;\n    float quotient11 = 0.0;\n    float quotient12\
    \ = 0.0;\n    float quotient13 = 0.0;\n    float quotient14 = 0.0;\n    float\
    \ quotient15 = 0.0;\n    float quotient16 = 0.0;\n    float quotient17 = 0.0;\n\
    \    float quotient18 = 0.0;\n    float quotient19 = 0.0;\n    float quotient20\
    \ = 0.0;\n    float quotient21 = 0.0;\n    float quotient22 = 0.0;\n    float\
    \ quotient23 = 0.0;\n    float quotient24 = 0.0;\n    float quotient25 = 0.0;\n\
    \    float quotient26 = 0.0;\n    float quotient27 = 0.0;\n    float quotient28\
    \ = 0.0;\n    float quotient29 = 0.0;\n    float quotient30 = 0.0;\n    float\
    \ quotient31 = 0.0;\n    float quotient32 = 0.0;\n    float quotient33 = 0.0;\n\
    \    float quotient34 = 0.0;\n    float quotient35 = 0.0;\n    float quotient36\
    \ = 0.0;\n    float quotient37 = 0.0;\n    float quotient38 = 0.0;\n    float\
    \ quotient39 = 0.0;\n    float quotient40 = 0.0;\n    float quotient41 = 0.0;\n\
    \    float quotient42 = 0.0;\n    float quotient43 = 0.0;\n    float quotient44\
    \ = 0.0;\n    float quotient45 = 0.0;\n    float quotient46 = 0.0;\n    float\
    \ quotient47 = 0.0;\n    float quotient48 = 0.0;\n    float quotient49 = 0.0;\n\
    \    float quotient50 = 0.0;\n    float quotient51 = 0.0;\n    float quotient52\
    \ = 0.0;\n    float quotient53 = 0.0;\n    float quotient54 = 0.0;\n    float\
    \ quotient55 = 0.0;\n    float quotient56 = 0.0;\n    float quotient57 = 0.0;\n\
    \    float quotient58 = 0.0;\n    float quotient59 = 0.0;\n    float quotient60\
    \ = 0.0;\n    float quotient61 = 0.\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplraxz7x1.d(76): Error: semicolon expected, not `unittest`

    /tmp/tmplraxz7x1.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplraxz7x1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = number;\n    decimalPart = number - integerPart;\n  \
    \  \n    if (decimalPart > 0.0f)\n    {\n        remainder = decimalPart;\n  \
    \  }\n    else\n    {\n        remainder = 0.0f;\n    }\n    \n    return remainder;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wyz3v1z.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmp5wyz3v1z.__unittest_L31_C1() [0x427aae]

    ??:? void tmp5wyz3v1z.__modtest() [0x427b1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimalPart;\n    int integerPart;\n    \n    integerPart\
    \ = int(number);\n    decimalPart = number - integerPart;\n    \n    return decimalPart;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk3pvxwxr.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk3pvxwxr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = floor(number);\n    decimalPart = number - integerPart;\n\
    \    \n    remainder = number-integerPart;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    \n    integer_part\
    \ = int(number);\n    remainder = number - integer_part;\n    \n    return remainder;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1c_s96li.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1c_s96li.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number - truncate_number(number);\n    return\
    \ decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164459
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float integerPart = 0.0;\n    \n\
    \    integerPart = floor(number);\n    \n    if (number - integerPart > FLT_EPSILON)\n\
    \    {\n        decimals = number - integerPart;\n    }\n    \n    return decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj_ec4q9u.d(18): Error: undefined identifier `FLT_EPSILON`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_ec4q9u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float quotient;\n    float decimals;\n\
    \    float integer_part;\n    \n    integer_part = floor(number);\n    \n    decimals\
    \ = number - integer_part;\n    \n    quotient = integer_part * pow(10.0, decimals);\n\
    \    \n    remainder = number - quotient;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk3096w1c.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428abd]

    ??:? void tmpk3096w1c.__unittest_L28_C1() [0x427ec2]

    ??:? void tmpk3096w1c.__modtest() [0x428840]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c9cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b862]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4309f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ea4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430981]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b839]

    ??:? runModuleUnitTests [0x42c7a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f0c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ intPart;\n    \n    intPart = floor(number);\n    \n    while(number > intPart)\
    \ {\n        decimals += 1;\n        number -= intPart;\n    }\n    \n    remainder\
    \ = number - intPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp013fgydz.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmp013fgydz.__unittest_L28_C1() [0x427c32]

    ??:? void tmp013fgydz.__modtest() [0x427ca0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd87]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac1a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fdad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43025c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fd39]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abf1]

    ??:? runModuleUnitTests [0x42bb5d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    while(number > 0.0)\n    {\n        remainder =\
    \ number % 10.0;\n        number = number / 10.0;\n        decimals = decimals\
    \ + remainder;\n        int_part = int_part + remainder;\n    }\n    \n    return\
    \ decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_1orzr5c.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmp_1orzr5c.__unittest_L27_C1() [0x427b02]

    ??:? void tmp_1orzr5c.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number - trunc(number);\n    return decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integerPart;\n    \n    integerPart\
    \ = int(number);\n    remainder = number - integerPart;\n    \n    return remainder;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpubw5_u0k.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubw5_u0k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = trunc(number);\n    \n    decimal_part = number - integer_part;\n    \n  \
    \  return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqipcay8.d(16): Error: cannot implicitly convert expression `trunc(cast(real)number)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqipcay8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ result = 0.0;\n    \n    while(number > 0.0)\n    {\n        remainder = number\
    \ % 10.0;\n        number = number / 10.0;\n        decimals = decimals + remainder;\n\
    \    }\n    \n    result = number + decimals;\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyvhrlweg.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpyvhrlweg.__unittest_L28_C1() [0x427afe]

    ??:? void tmpyvhrlweg.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float fractionalPart = number - trunc(number);\n    float decimalPart\
    \ = fractionalPart * (float)(pow(10, floor(log10(fractionalPart))));\n    return\
    \ decimalPart;\n}\n</code>\n<|/ a tags=c++,floating-point,truncate |>\n<| c |>\n\
    This doesn't work if the number is negative.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for negative numbers. Try it with `truncate_number(-10.5)`.\n<|/ c |>\n<| c\
    \ |>\n: It works for negative numbers. Try it with `truncate_number(-10.5)`.\n\
    <|/ c |>\n<| c |>\n: It works for negative numbers. Try it with `truncate_number(-10.5)`.\n\
    <|/ c |>\n<| c |>\n: It works for negative numbers. Try it with `truncate_number(-10.5)`.\n\
    <|/ c |>\n<| a tags=c++,floating-point,truncate |>\n<code>\nfloat truncate_number(float\
    \ number) \n{\n    float fractionalPart = number - trunc(number);\n    float decimalPart\
    \ = fractionalPart * (float)(pow(10, floor(log10(fractionalPart))));\n    return\
    \ decimalPart;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work if the\
    \ number is negative.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers.\
    \ Try it with `truncate_number(-10.5)`.\n<|/ c |>\n<| c |>\nIt works for negative\
    \ numbers. Try it with `truncate_number(-10.5)`.\n<|/ c |>\n<| a tags=c++,floating-point,truncate\
    \ |>\n<code>\nfloat truncate_number(float number) \n{\n    float fractionalPart\
    \ = number - trunc(number);\n    float decimalPart = fractionalPart * (float)(pow(10,\
    \ floor(log10(fractionalPart))));\n    return decimalPart;\n}\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nThis doesn't work if the number is negative.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for negative numbers. Try it with `truncate_number(-10.5)`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try it with `truncate_number(-10.5)`.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nfloat truncate_number(float number) \n{\n\
    \    float fractionalPart = number - \nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiz_kbghm.d(14): Error: C style cast illegal, use `cast(float)pow(10,
    floor(log10(fractionalPart)))`

    /tmp/tmpiz_kbghm.d(17): Error: declaration expected, not `<`

    /tmp/tmpiz_kbghm.d(20): Error: unterminated character constant

    /tmp/tmpiz_kbghm.d(23): Error: unterminated character constant

    /tmp/tmpiz_kbghm.d(39): Error: C style cast illegal, use `cast(float)pow(10, floor(log10(fractionalPart)))`

    /tmp/tmpiz_kbghm.d(40): Error: declaration expected, not `return`

    /tmp/tmpiz_kbghm.d(41): Error: unrecognized declaration

    /tmp/tmpiz_kbghm.d(45): Error: unterminated character constant

    /tmp/tmpiz_kbghm.d(48): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiz_kbghm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float trunc_number = number;\n    float decimals = 0.0;\n \
    \   float remainder = 0.0;\n    \n    while(trunc_number > 0.0)\n    {\n     \
    \   remainder = trunc_number % 10.0;\n        trunc_number = trunc_number / 10.0;\n\
    \        decimals = decimals + remainder;\n    }\n    \n    return decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7jxnk3se.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmp7jxnk3se.__unittest_L26_C1() [0x427ade]

    ??:? void tmp7jxnk3se.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    \n    integer_part\
    \ = int(number);\n    remainder = number - integer_part;\n    \n    return remainder;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1c_s96li.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1c_s96li.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int int_part;\n    float frac_part;\n    \n    int_part = int(number);\n\
    \    frac_part = number - int_part;\n    \n    return frac_part;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprqasze4k.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprqasze4k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimal = number - floor(number);\n    return decimal;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float integer_part = 0.0;\n    \n\
    \    while(number > 0.0)\n    {\n        float remainder = number % 1.0;\n   \
    \     \n        if(remainder > 0.0)\n        {\n            decimals += remainder;\n\
    \        }\n        \n        number /= 1.0;\n        integer_part += number;\n\
    \    }\n    \n    return integer_part + decimals;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164460
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    while(result > 1)\n    {\n\
    \        result /= 10;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdjl8wl32.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpdjl8wl32.__unittest_L22_C1() [0x427a7e]

    ??:? void tmpdjl8wl32.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int int_part;\n    float frac_part;\n    \n    int_part = int(number);\n\
    \    frac_part = number - int_part;\n    \n    return frac_part;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprqasze4k.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprqasze4k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float trunc_number = number;\n    float decimals = 0.0;\n \
    \   float remainder = 0.0;\n    \n    while(trunc_number > 0.0)\n    {\n     \
    \   remainder = trunc_number % 10.0;\n        trunc_number = trunc_number / 10.0;\n\
    \        decimals = decimals + remainder;\n    }\n    \n    return decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7jxnk3se.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmp7jxnk3se.__unittest_L26_C1() [0x427ade]

    ??:? void tmp7jxnk3se.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number - trunc(number);\n    float result\
    \ = trunc(number);\n    \n    return result + decimals;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1l5mue9q.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmp1l5mue9q.__unittest_L18_C1() [0x427b46]

    ??:? void tmp1l5mue9q.__modtest() [0x427bb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9dd]

    ??:? runModuleUnitTests [0x42b949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float quotient;\n    float decimals;\n\
    \    float temp;\n    float temp2;\n    float temp3;\n    float temp4;\n    float\
    \ temp5;\n    float temp6;\n    float temp7;\n    float temp8;\n    float temp9;\n\
    \    float temp10;\n    float temp11;\n    float temp12;\n    float temp13;\n\
    \    float temp14;\n    float temp15;\n    float temp16;\n    float temp17;\n\
    \    float temp18;\n    float temp19;\n    float temp20;\n    float temp21;\n\
    \    float temp22;\n    float temp23;\n    float temp24;\n    float temp25;\n\
    \    float temp26;\n    float temp27;\n    float temp28;\n    float temp29;\n\
    \    float temp30;\n    float temp31;\n    float temp32;\n    float temp33;\n\
    \    float temp34;\n    float temp35;\n    float temp36;\n    float temp37;\n\
    \    float temp38;\n    float temp39;\n    float temp40;\n    float temp41;\n\
    \    float temp42;\n    float temp43;\n    float temp44;\n    float temp45;\n\
    \    float temp46;\n    float temp47;\n    float temp48;\n    float temp49;\n\
    \    float temp50;\n    float temp51;\n    float temp52;\n    float temp53;\n\
    \    float temp54;\n    float temp55;\n    float temp56;\n    float temp57;\n\
    \    float temp58;\n    float temp59;\n    float temp60;\n    float temp61;\n\
    \    float temp62;\n    float temp63;\n    float temp64;\n    float temp65;\n\
    \    float temp66;\n    float temp67;\n    float temp68;\n    float temp69;\n\
    \    float temp70;\n    float temp71;\n    float temp72;\n    float temp73;\n\
    \    float temp74;\n    float temp75;\n    float temp76;\n    float temp77;\n\
    \    float temp78;\n    float temp79;\n    float temp80;\n    float temp81;\n\
    \    float temp82;\n    float temp83;\n    float temp84;\n    float temp85;\n\
    \    float temp\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkgu28iox.d(102): Error: semicolon expected, not `unittest`

    /tmp/tmpkgu28iox.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkgu28iox.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimalPart;\n    float integerPart;\n    \n    integerPart\
    \ = number;\n    decimalPart = number - integerPart;\n    \n    return decimalPart;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprcltbr6x.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmprcltbr6x.__unittest_L21_C1() [0x427a72]

    ??:? void tmprcltbr6x.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    while(result > 1)\n    {\n\
    \        result /= 10;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdjl8wl32.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpdjl8wl32.__unittest_L22_C1() [0x427a7e]

    ??:? void tmpdjl8wl32.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = trunc(number);\n    \n    decimal_part = number - integer_part;\n    \n  \
    \  return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqipcay8.d(16): Error: cannot implicitly convert expression `trunc(cast(real)number)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqipcay8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float remainder;\n    \n    while(result\
    \ > 1)\n    {\n        remainder = result % 10;\n        result = result / 10;\n\
    \        result = result + remainder;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164460
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float trunc_number = number;\n    float remainder;\n    float\
    \ decimals;\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp47f0b9qc.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47f0b9qc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = floorf(number);\n    decimalPart = number-integerPart;\n\
    \    \n    remainder = number-integerPart;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0fgl_e4o.d(17): Error: undefined identifier `floorf`, did you mean
    function `floor`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fgl_e4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    while(number > 0.0)\n    {\n        remainder =\
    \ number % 10.0;\n        decimals = decimals + remainder;\n        number = number\
    \ / 10.0;\n    }\n    \n    result = result + decimals;\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3crilub_.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp3crilub_.__unittest_L28_C1() [0x427af6]

    ??:? void tmp3crilub_.__modtest() [0x427b64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float fraction = number - trunc(number);\n    return fraction;\n\
    }\n/*\n Given a positive floating point number, it can be decomposed into\n  \
    \  and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmq1895c.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmq1895c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integerPart;\n    \n    integerPart\
    \ = int(number);\n    remainder = number - integerPart;\n    \n    return remainder;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpubw5_u0k.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubw5_u0k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    float quotient2 = 0.0;\n    float quotient3 = 0.0;\n  \
    \  float quotient4 = 0.0;\n    float quotient5 = 0.0;\n    float quotient6 = 0.0;\n\
    \    float quotient7 = 0.0;\n    float quotient8 = 0.0;\n    float quotient9 =\
    \ 0.0;\n    float quotient10 = 0.0;\n    float quotient11 = 0.0;\n    float quotient12\
    \ = 0.0;\n    float quotient13 = 0.0;\n    float quotient14 = 0.0;\n    float\
    \ quotient15 = 0.0;\n    float quotient16 = 0.0;\n    float quotient17 = 0.0;\n\
    \    float quotient18 = 0.0;\n    float quotient19 = 0.0;\n    float quotient20\
    \ = 0.0;\n    float quotient21 = 0.0;\n    float quotient22 = 0.0;\n    float\
    \ quotient23 = 0.0;\n    float quotient24 = 0.0;\n    float quotient25 = 0.0;\n\
    \    float quotient26 = 0.0;\n    float quotient27 = 0.0;\n    float quotient28\
    \ = 0.0;\n    float quotient29 = 0.0;\n    float quotient30 = 0.0;\n    float\
    \ quotient31 = 0.0;\n    float quotient32 = 0.0;\n    float quotient33 = 0.0;\n\
    \    float quotient34 = 0.0;\n    float quotient35 = 0.0;\n    float quotient36\
    \ = 0.0;\n    float quotient37 = 0.0;\n    float quotient38 = 0.0;\n    float\
    \ quotient39 = 0.0;\n    float quotient40 = 0.0;\n    float quotient41 = 0.0;\n\
    \    float quotient42 = 0.0;\n    float quotient43 = 0.0;\n    float quotient44\
    \ = 0.0;\n    float quotient45 = 0.0;\n    float quotient46 = 0.0;\n    float\
    \ quotient47 = 0.0;\n    float quotient48 = 0.0;\n    float quotient49 = 0.0;\n\
    \    float quotient50 = 0.0;\n    float quotient51 = 0.0;\n    float quotient52\
    \ = 0.0;\n    float quotient53 = 0.0;\n    float quotient54 = 0.0;\n    float\
    \ quotient55 = 0.0;\n    float quotient56 = 0.0;\n    float quotient57 = 0.0;\n\
    \    float quotient58 = 0.0;\n    float quotient59 = 0.0;\n    float quotient60\
    \ = 0.0;\n    float quotient61 = 0.\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplraxz7x1.d(76): Error: semicolon expected, not `unittest`

    /tmp/tmplraxz7x1.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplraxz7x1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    while(result > 1)\n    {\n\
    \        result /= 10;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdjl8wl32.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpdjl8wl32.__unittest_L22_C1() [0x427a7e]

    ??:? void tmpdjl8wl32.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    \n    integer_part\
    \ = int(number);\n    remainder = number - integer_part;\n    \n    return remainder;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1c_s96li.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1c_s96li.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    \n  \
    \  int_part = floor(number);\n    \n    if (int_part == number) {\n        decimals\
    \ = 0.0;\n    } else {\n        decimals = number - int_part;\n    }\n    \n \
    \   return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float trunc_number = number;\n    float remainder = 0;\n  \
    \  float decimal = 0;\n    float int_part = 0;\n    float decimal_part = 0;\n\
    \    int decimal_count = 0;\n    \n    while(trunc_number > 0)\n    {\n      \
    \  remainder = trunc_number % 10;\n        trunc_number = trunc_number / 10;\n\
    \        decimal = remainder;\n        \n        int_part = trunc_number;\n  \
    \      decimal_part = decimal + int_part;\n        \n        if(decimal_part >\
    \ 1)\n        {\n            decimal_count++;\n        }\n    }\n    \n    return\
    \ decimal_part * pow(10, decimal_count);\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwjfbcyuc.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ef5]

    ??:? void tmpwjfbcyuc.__unittest_L37_C1() [0x427b82]

    ??:? void tmpwjfbcyuc.__modtest() [0x427c78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbcd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa85]

    ??:? runModuleUnitTests [0x42b9f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428344]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgki_lvbi.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgki_lvbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float intPart = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    intPart = number;\n    \n    while(number > 0.0)\n\
    \    {\n        remainder = number % 10.0;\n        number = number / 10.0;\n\
    \        decimals = decimals + remainder;\n    }\n    \n    return decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd22uvenk.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpd22uvenk.__unittest_L28_C1() [0x427ae6]

    ??:? void tmpd22uvenk.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = number;\n    decimalPart = number - integerPart;\n  \
    \  \n    while(decimalPart > 1)\n    {\n        decimalPart /= 10;\n        integerPart\
    \ *= 10;\n    }\n    \n    remainder = decimalPart;\n    \n    return remainder;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu_4z2rl_.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpu_4z2rl_.__unittest_L30_C1() [0x427ad2]

    ??:? void tmpu_4z2rl_.__modtest() [0x427b40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimalPart;\n    float integerPart;\n    float remainder;\n\
    \    \n    integerPart = number;\n    decimalPart = number - integerPart;\n  \
    \  \n    remainder = number - integerPart - decimalPart;\n    \n    return remainder;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkkz_xwes.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpkkz_xwes.__unittest_L24_C1() [0x427aa2]

    ??:? void tmpkkz_xwes.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float quotient;\n    float decimals;\n\
    \    \n    quotient = number;\n    \n    while(quotient > 1)\n    {\n        remainder\
    \ = quotient % 1;\n        quotient = quotient / 1;\n        decimals = remainder;\n\
    \    }\n    \n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164460
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    int_part = number;\n    \n    while(int_part > 0.0)\n\
    \    {\n        remainder = int_part % 10.0;\n        int_part = int_part / 10.0;\n\
    \        decimals = decimals + remainder;\n    }\n    \n    return decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp60u7o2vd.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmp60u7o2vd.__unittest_L28_C1() [0x427aea]

    ??:? void tmp60u7o2vd.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number % 1;\n    float int_part = number /\
    \ 1;\n    float result = int_part;\n    \n    if(decimals > 0)\n    {\n      \
    \  result = result + decimals;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc_c105aw.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpc_c105aw.__unittest_L24_C1() [0x427aa6]

    ??:? void tmpc_c105aw.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = number - truncate_number(number);\n\
    \    \n    if (number > 0)\n    {\n        float power = 1;\n        \n      \
    \  while (power < decimals)\n        {\n            power *= 10;\n        }\n\
    \        \n        result = truncate_number(number/power) * power;\n    }\n  \
    \  \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164460
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int int_part;\n    float frac_part;\n    int_part = trunc(number);\n\
    \    frac_part = number - int_part;\n    return frac_part;\n}\n/*\n Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgmbbzyvt.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmbbzyvt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = int(number);\n    \n    decimal_part = number - integer_part;\n    \n    return\
    \ decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp49pvpzx9.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49pvpzx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimalPart;\n    int integerPart;\n    \n    decimalPart\
    \ = number - floor(number);\n    integerPart = floor(number);\n    \n    return\
    \ decimalPart;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n   \
    \ assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9g1ny14l.d(17): Error: cannot implicitly convert expression `floor(number)`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9g1ny14l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    float decimal_part;\n\
    \    \n    integer_part = trunc(number);\n    \n    remainder = number - integer_part;\n\
    \    \n    decimal_part = remainder;\n    \n    return decimal_part;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6yzbnst7.d(17): Error: cannot implicitly convert expression `trunc(cast(real)number)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6yzbnst7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    while(result > 1)\n    {\n\
    \        result /= 10;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdjl8wl32.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpdjl8wl32.__unittest_L22_C1() [0x427a7e]

    ??:? void tmpdjl8wl32.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = trunc(number);\n    \n    decimal_part = number - integer_part;\n    \n  \
    \  return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqipcay8.d(16): Error: cannot implicitly convert expression `trunc(cast(real)number)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqipcay8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number - trunc(number);\n    return trunc(number);\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvo6wg_fb.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e1d]

    ??:? void tmpvo6wg_fb.__unittest_L16_C1() [0x427b2e]

    ??:? void tmpvo6wg_fb.__modtest() [0x427b9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42826c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number - trunc(number);\n    return decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    float quotient2 = 0.0;\n    float quotient3 = 0.0;\n  \
    \  float quotient4 = 0.0;\n    float quotient5 = 0.0;\n    float quotient6 = 0.0;\n\
    \    float quotient7 = 0.0;\n    float quotient8 = 0.0;\n    float quotient9 =\
    \ 0.0;\n    float quotient10 = 0.0;\n    float quotient11 = 0.0;\n    float quotient12\
    \ = 0.0;\n    float quotient13 = 0.0;\n    float quotient14 = 0.0;\n    float\
    \ quotient15 = 0.0;\n    float quotient16 = 0.0;\n    float quotient17 = 0.0;\n\
    \    float quotient18 = 0.0;\n    float quotient19 = 0.0;\n    float quotient20\
    \ = 0.0;\n    float quotient21 = 0.0;\n    float quotient22 = 0.0;\n    float\
    \ quotient23 = 0.0;\n    float quotient24 = 0.0;\n    float quotient25 = 0.0;\n\
    \    float quotient26 = 0.0;\n    float quotient27 = 0.0;\n    float quotient28\
    \ = 0.0;\n    float quotient29 = 0.0;\n    float quotient30 = 0.0;\n    float\
    \ quotient31 = 0.0;\n    float quotient32 = 0.0;\n    float quotient33 = 0.0;\n\
    \    float quotient34 = 0.0;\n    float quotient35 = 0.0;\n    float quotient36\
    \ = 0.0;\n    float quotient37 = 0.0;\n    float quotient38 = 0.0;\n    float\
    \ quotient39 = 0.0;\n    float quotient40 = 0.0;\n    float quotient41 = 0.0;\n\
    \    float quotient42 = 0.0;\n    float quotient43 = 0.0;\n    float quotient44\
    \ = 0.0;\n    float quotient45 = 0.0;\n    float quotient46 = 0.0;\n    float\
    \ quotient47 = 0.0;\n    float quotient48 = 0.0;\n    float quotient49 = 0.0;\n\
    \    float quotient50 = 0.0;\n    float quotient51 = 0.0;\n    float quotient52\
    \ = 0.0;\n    float quotient53 = 0.0;\n    float quotient54 = 0.0;\n    float\
    \ quotient55 = 0.0;\n    float quotient56 = 0.0;\n    float quotient57 = 0.0;\n\
    \    float quotient58 = 0.0;\n    float quotient59 = 0.0;\n    float quotient60\
    \ = 0.0;\n    float quotient61 = 0.\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplraxz7x1.d(76): Error: semicolon expected, not `unittest`

    /tmp/tmplraxz7x1.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplraxz7x1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    float temp = 0.0;\n    float temp2 = 0.0;\n    float temp3\
    \ = 0.0;\n    float temp4 = 0.0;\n    float temp5 = 0.0;\n    float temp6 = 0.0;\n\
    \    float temp7 = 0.0;\n    float temp8 = 0.0;\n    float temp9 = 0.0;\n    float\
    \ temp10 = 0.0;\n    float temp11 = 0.0;\n    float temp12 = 0.0;\n    float temp13\
    \ = 0.0;\n    float temp14 = 0.0;\n    float temp15 = 0.0;\n    float temp16 =\
    \ 0.0;\n    float temp17 = 0.0;\n    float temp18 = 0.0;\n    float temp19 = 0.0;\n\
    \    float temp20 = 0.0;\n    float temp21 = 0.0;\n    float temp22 = 0.0;\n \
    \   float temp23 = 0.0;\n    float temp24 = 0.0;\n    float temp25 = 0.0;\n  \
    \  float temp26 = 0.0;\n    float temp27 = 0.0;\n    float temp28 = 0.0;\n   \
    \ float temp29 = 0.0;\n    float temp30 = 0.0;\n    float temp31 = 0.0;\n    float\
    \ temp32 = 0.0;\n    float temp33 = 0.0;\n    float temp34 = 0.0;\n    float temp35\
    \ = 0.0;\n    float temp36 = 0.0;\n    float temp37 = 0.0;\n    float temp38 =\
    \ 0.0;\n    float temp39 = 0.0;\n    float temp40 = 0.0;\n    float temp41 = 0.0;\n\
    \    float temp42 = 0.0;\n    float temp43 = 0.0;\n    float temp44 = 0.0;\n \
    \   float temp45 = 0.0;\n    float temp46 = 0.0;\n    float temp47 = 0.0;\n  \
    \  float temp48 = 0.0;\n    float temp49 = 0.0;\n    float temp50 = 0.0;\n   \
    \ float temp51 = 0.0;\n    float temp52 = 0.0;\n    float temp53 = 0.0;\n    float\
    \ temp54 = 0.0;\n    float temp55 = 0.0;\n    float temp56 = 0.0;\n    float temp57\
    \ = 0.0;\n    float temp58 = 0.0;\n    float temp59 = 0.0;\n    float temp60 =\
    \ 0.0;\n    float temp61 = 0.0;\n    float temp62 = 0.0;\n    float temp63 = 0.0;\n\
    \    float temp64 = 0.0;\n    float temp65 = 0.0;\n    float temp66 = 0.0;\n \
    \   float temp67 = 0.0;\n    float temp68 = 0.0;\n    \nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppg07vpp8.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppg07vpp8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    \n    quotient = number;\n    \n    while(quotient > 1.0)\n\
    \    {\n        remainder = quotient - 1.0;\n        quotient = remainder / 10.0;\n\
    \        decimals += remainder;\n    }\n    \n    return decimals;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk49nr2_n.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpk49nr2_n.__unittest_L28_C1() [0x427aea]

    ??:? void tmpk49nr2_n.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float decimal;\n    int integer;\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvk4f4ug.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvk4f4ug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integerPart;\n    \n    integerPart\
    \ = int(number);\n    remainder = number - integerPart;\n    \n    return remainder;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpubw5_u0k.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubw5_u0k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float quotient;\n    int exponent;\n\
    \    \n    exponent = float_to_int(number);\n    quotient = number / float(pow(10.0,\
    \ exponent));\n    remainder = number % float(pow(10.0, exponent));\n    \n  \
    \  return remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2384zeiz.d(17): Error: undefined identifier `float_to_int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2384zeiz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = number;\n    decimalPart = number - integerPart;\n  \
    \  \n    while(decimalPart > 1) {\n        decimalPart /= 10;\n        integerPart\
    \ *= 10;\n    }\n    \n    return integerPart;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdjn9x125.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dad]

    ??:? void tmpdjn9x125.__unittest_L27_C1() [0x427ac2]

    ??:? void tmpdjn9x125.__modtest() [0x427b30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]

    ??:? runModuleUnitTests [0x42b8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281fc]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428183]

    ??:? _d_run_main [0x4280ee]

    ??:? main [0x427b43]

    ??:? __libc_start_main [0x1bab8554]

    1/1 unittests FAILED

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float trunc_number = number;\n    float remainder = 0;\n  \
    \  float decimal_part = 0;\n    float decimal_part_remainder = 0;\n    float decimal_part_remainder_magnitude\
    \ = 0;\n    float decimal_part_remainder_magnitude2 = 0;\n    float decimal_part_remainder_magnitude3\
    \ = 0;\n    float decimal_part_remainder_magnitude4 = 0;\n    float decimal_part_remainder_magnitude5\
    \ = 0;\n    float decimal_part_remainder_magnitude6 = 0;\n    float decimal_part_remainder_magnitude7\
    \ = 0;\n    float decimal_part_remainder_magnitude8 = 0;\n    float decimal_part_remainder_magnitude9\
    \ = 0;\n    float decimal_part_remainder_magnitude10 = 0;\n    float decimal_part_remainder_magnitude11\
    \ = 0;\n    float decimal_part_remainder_magnitude12 = 0;\n    float decimal_part_remainder_magnitude13\
    \ = 0;\n    float decimal_part_remainder_magnitude14 = 0;\n    float decimal_part_remainder_magnitude15\
    \ = 0;\n    float decimal_part_remainder_magnitude16 = 0;\n    float decimal_part_remainder_magnitude17\
    \ = 0;\n    float decimal_part_remainder_magnitude18 = 0;\n    float decimal_part_remainder_magnitude19\
    \ = 0;\n    float decimal_part_remainder_magnitude20 = 0;\n    float decimal_part_remainder_magnitude21\
    \ = 0;\n    float decimal_part_remainder_magnitude22 = 0;\n    float decimal_part_remainder_magnitude23\
    \ = 0;\n    float decimal_part_remainder_magnitude24 = 0;\n    float decimal_part_remainder_magnitude25\
    \ = 0;\n    float decimal_part_remainder_magnitude26 = 0;\n    float decimal_part_remainder_magnitude27\
    \ = 0;\n    float decimal_part_remainder_magnitude28 = 0;\n    float decimal_part_remainder_magnitude29\
    \ = 0;\n    float decimal_part_remainder_magnitude30 = 0;\n    float decimal_part_remainder_magnitude31\
    \ = 0;\n    float decimal_part_remainder_magnitude32 = 0;\n    float decimal_part_remainder_magnitude33\
    \ = 0;\n    float decimal_part_remainder_magnitude34 = 0;\n    float decimal_part_remainder_magnitude35\
    \ = 0;\n    float decimal_part_remainder_magnitude36 = 0;\n    float decimal_part_remainder_magnitude37\
    \ = 0;\n    float decimal_part_remainder_magnitude38 = 0;\n    float decimal_part_remainder_magnitude39\
    \ = 0;\n    float decimal_part_remainder_magnitude40 = 0;\n    float decimal_part_remainder_magnitude41\
    \ = 0;\n    float decimal_part_remainder_magnitude42 = 0;\n    float decimal_part_remainder_magnitude43\
    \ = 0;\n    float decimal_part_remainder_magnitude44 = 0;\n    float decimal_part_remainder_magnitude45\
    \ = 0;\n    float decimal_part_remainder_magnitude46 = 0;\n    float decimal_part_remainder_magnitude47\
    \ = 0;\n    float decimal_part_remainder_magnitude48 = 0;\n    float decimal_part_remainder_magnitude49\n\
    unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqev4t31m.d(66): Error: semicolon expected, not `unittest`

    /tmp/tmpqev4t31m.d(66): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqev4t31m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    float quotient2 = 0.0;\n    float quotient3 = 0.0;\n  \
    \  float quotient4 = 0.0;\n    float quotient5 = 0.0;\n    float quotient6 = 0.0;\n\
    \    float quotient7 = 0.0;\n    float quotient8 = 0.0;\n    float quotient9 =\
    \ 0.0;\n    float quotient10 = 0.0;\n    float quotient11 = 0.0;\n    float quotient12\
    \ = 0.0;\n    float quotient13 = 0.0;\n    float quotient14 = 0.0;\n    float\
    \ quotient15 = 0.0;\n    float quotient16 = 0.0;\n    float quotient17 = 0.0;\n\
    \    float quotient18 = 0.0;\n    float quotient19 = 0.0;\n    float quotient20\
    \ = 0.0;\n    float quotient21 = 0.0;\n    float quotient22 = 0.0;\n    float\
    \ quotient23 = 0.0;\n    float quotient24 = 0.0;\n    float quotient25 = 0.0;\n\
    \    float quotient26 = 0.0;\n    float quotient27 = 0.0;\n    float quotient28\
    \ = 0.0;\n    float quotient29 = 0.0;\n    float quotient30 = 0.0;\n    float\
    \ quotient31 = 0.0;\n    float quotient32 = 0.0;\n    float quotient33 = 0.0;\n\
    \    float quotient34 = 0.0;\n    float quotient35 = 0.0;\n    float quotient36\
    \ = 0.0;\n    float quotient37 = 0.0;\n    float quotient38 = 0.0;\n    float\
    \ quotient39 = 0.0;\n    float quotient40 = 0.0;\n    float quotient41 = 0.0;\n\
    \    float quotient42 = 0.0;\n    float quotient43 = 0.0;\n    float quotient44\
    \ = 0.0;\n    float quotient45 = 0.0;\n    float quotient46 = 0.0;\n    float\
    \ quotient47 = 0.0;\n    float quotient48 = 0.0;\n    float quotient49 = 0.0;\n\
    \    float quotient50 = 0.0;\n    float quotient51 = 0.0;\n    float quotient52\
    \ = 0.0;\n    float quotient53 = 0.0;\n    float quotient54 = 0.0;\n    float\
    \ quotient55 = 0.0;\n    float quotient56 = 0.0;\n    float quotient57 = 0.0;\n\
    \    float quotient58 = 0.0;\n    float quotient59 = 0.0;\n    float quotient60\
    \ = 0.0;\n    float quotient61 = 0.\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplraxz7x1.d(76): Error: semicolon expected, not `unittest`

    /tmp/tmplraxz7x1.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplraxz7x1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = number;\n    decimalPart = number - integerPart;\n  \
    \  \n    remainder = decimalPart;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkjprimwi.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d75]

    ??:? void tmpkjprimwi.__unittest_L24_C1() [0x427a8a]

    ??:? void tmpkjprimwi.__modtest() [0x427af8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a92e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]

    ??:? runModuleUnitTests [0x42b871]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimalPart;\n    float integerPart;\n    \n    integerPart\
    \ = trunc(number);\n    decimalPart = number - integerPart;\n    \n    return\
    \ decimalPart;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n   \
    \ assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    \n \
    \   while(number > 0.0)\n    {\n        remainder = number % 10.0;\n        number\
    \ = number / 10.0;\n        decimals = decimals + remainder;\n    }\n    \n  \
    \  return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n\
    \    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n  \
    \  assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt0w64gaw.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpt0w64gaw.__unittest_L25_C1() [0x427ade]

    ??:? void tmpt0w64gaw.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float decimals;\n    float intPart;\n\
    \    \n    intPart = number;\n    \n    decimals = number - intPart;\n    \n \
    \   while(decimals > 0)\n    {\n        remainder = decimals % 10;\n        decimals\
    \ = decimals / 10;\n        intPart = intPart * 10 + remainder;\n    }\n    \n\
    \    return intPart;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg4qilvgg.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpg4qilvgg.__unittest_L30_C1() [0x427af2]

    ??:? void tmpg4qilvgg.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    while(result > 1)\n    {\n\
    \        result = result / 10;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjrnmek43.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpjrnmek43.__unittest_L22_C1() [0x427a7e]

    ??:? void tmpjrnmek43.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    \n \
    \   while(number > 0.0)\n    {\n        float remainder = number % 1;\n      \
    \  \n        if(remainder > decimals)\n        {\n            decimals = remainder;\n\
    \        }\n        \n        number = number / 1;\n    }\n    \n    return result\
    \ + decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164461
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    \n \
    \   while(result > 1.0f) {\n        result += 1.0f;\n        decimals += 1.0f;\n\
    \    }\n    \n    while(result < 0.0f) {\n        result += 1.0f;\n        decimals\
    \ -= 1.0f;\n    }\n    \n    return result - decimals;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164461
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number % 1;\n    float int_part = (number\
    \ - decimals) / 1;\n    return int_part;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc5844wbs.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpc5844wbs.__unittest_L17_C1() [0x427a7e]

    ??:? void tmpc5844wbs.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    \n \
    \   while(number > 0.0) {\n        number = number - 0.5;\n        decimals =\
    \ decimals + 0.5;\n    }\n    \n    result = result - decimals;\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0fyyysj5.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmp0fyyysj5.__unittest_L25_C1() [0x427ace]

    ??:? void tmp0fyyysj5.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float intPart = 0.0;\n    \n   \
    \ intPart = floor(number);\n    \n    if (intPart > 0.0) \n    {\n        decimals\
    \ = number - intPart;\n    }\n    \n    return decimals;\n}\nunittest\n{\n   \
    \ alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n \
    \   assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int int_part;\n    float frac_part;\n    \n    int_part = int(number);\n\
    \    frac_part = number - int_part;\n    \n    return frac_part;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprqasze4k.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprqasze4k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float integerPart = 0.0;\n    \n\
    \    while(number > 0.0)\n    {\n        float remainder = number % 1;\n     \
    \   \n        number = number / 1;\n        \n        integerPart = integerPart\
    \ + remainder;\n        decimals = decimals + remainder;\n    }\n    \n    return\
    \ decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164461
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimal = number - trunc(number);\n    return decimal;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integerPart;\n    int decimalPart;\n\
    \    \n    integerPart = int(number);\n    decimalPart = number - integerPart;\n\
    \    \n    remainder = decimalPart % 1;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmceq2asy.d(17): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    /tmp/tmpmceq2asy.d(18): Error: cannot implicitly convert expression `number -
    cast(float)integerPart` of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmceq2asy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = floor(number);\n    decimalPart = number - integerPart;\n\
    \    \n    remainder = number-integerPart;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgki_lvbi.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgki_lvbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    float\
    \ intPart = 0.0;\n    float fractionalPart = 0.0;\n    \n    while(result > 0.0)\
    \ {\n        fractionalPart = result - intPart;\n        intPart = result;\n \
    \       result = fractionalPart * 10.0;\n        decimals += result;\n    }\n\
    \    \n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppi3_tsxw.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmppi3_tsxw.__unittest_L27_C1() [0x427ae2]

    ??:? void tmppi3_tsxw.__modtest() [0x427b50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = number;\n    float\
    \ remainder = 0;\n    \n    while(decimals > 0)\n    {\n        remainder = number\
    \ % 10;\n        number = number / 10;\n        decimals--;\n    }\n    \n   \
    \ if(number > 0)\n    {\n        result = remainder;\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9udk6021.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp9udk6021.__unittest_L31_C1() [0x427aee]

    ??:? void tmp9udk6021.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281b3]

    ??:? _d_run_main [0x42811e]

    ??:? main [0x427b6f]

    ??:? __libc_start_main [0xf124f554]

    1/1 unittests FAILED

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integer_part;\n    float decimal_part;\n\
    \    \n    integer_part = floor(number);\n    \n    remainder = number - integer_part;\n\
    \    \n    decimal_part = remainder;\n    \n    return decimal_part;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float decimal;\n    float integer;\n\
    unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7n47ex76.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7n47ex76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float trunc_number = number;\n    float remainder = 0;\n  \
    \  float decimal_part = 0;\n    float decimal_part_remainder = 0;\n    float decimal_part_remainder_magnitude\
    \ = 0;\n    float decimal_part_remainder_magnitude2 = 0;\n    float decimal_part_remainder_magnitude3\
    \ = 0;\n    float decimal_part_remainder_magnitude4 = 0;\n    float decimal_part_remainder_magnitude5\
    \ = 0;\n    float decimal_part_remainder_magnitude6 = 0;\n    float decimal_part_remainder_magnitude7\
    \ = 0;\n    float decimal_part_remainder_magnitude8 = 0;\n    float decimal_part_remainder_magnitude9\
    \ = 0;\n    float decimal_part_remainder_magnitude10 = 0;\n    float decimal_part_remainder_magnitude11\
    \ = 0;\n    float decimal_part_remainder_magnitude12 = 0;\n    float decimal_part_remainder_magnitude13\
    \ = 0;\n    float decimal_part_remainder_magnitude14 = 0;\n    float decimal_part_remainder_magnitude15\
    \ = 0;\n    float decimal_part_remainder_magnitude16 = 0;\n    float decimal_part_remainder_magnitude17\
    \ = 0;\n    float decimal_part_remainder_magnitude18 = 0;\n    float decimal_part_remainder_magnitude19\
    \ = 0;\n    float decimal_part_remainder_magnitude20 = 0;\n    float decimal_part_remainder_magnitude21\
    \ = 0;\n    float decimal_part_remainder_magnitude22 = 0;\n    float decimal_part_remainder_magnitude23\
    \ = 0;\n    float decimal_part_remainder_magnitude24 = 0;\n    float decimal_part_remainder_magnitude25\
    \ = 0;\n    float decimal_part_remainder_magnitude26 = 0;\n    float decimal_part_remainder_magnitude27\
    \ = 0;\n    float decimal_part_remainder_magnitude28 = 0;\n    float decimal_part_remainder_magnitude29\
    \ = 0;\n    float decimal_part_remainder_magnitude30 = 0;\n    float decimal_part_remainder_magnitude31\
    \ = 0;\n    float decimal_part_remainder_magnitude32 = 0;\n    float decimal_part_remainder_magnitude33\
    \ = 0;\n    float decimal_part_remainder_magnitude34 = 0;\n    float decimal_part_remainder_magnitude35\
    \ = 0;\n    float decimal_part_remainder_magnitude36 = 0;\n    float decimal_part_remainder_magnitude37\
    \ = 0;\n    float decimal_part_remainder_magnitude38 = 0;\n    float decimal_part_remainder_magnitude39\
    \ = 0;\n    float decimal_part_remainder_magnitude40 = 0;\n    float decimal_part_remainder_magnitude41\
    \ = 0;\n    float decimal_part_remainder_magnitude42 = 0;\n    float decimal_part_remainder_magnitude43\
    \ = 0;\n    float decimal_part_remainder_magnitude44 = 0;\n    float decimal_part_remainder_magnitude45\
    \ = 0;\n    float decimal_part_remainder_magnitude46 = 0;\n    float decimal_part_remainder_magnitude47\
    \ = 0;\n    float decimal_part_remainder_magnitude48 = 0;\n    float decimal_part_remainder_magnitude49\n\
    unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqev4t31m.d(66): Error: semicolon expected, not `unittest`

    /tmp/tmpqev4t31m.d(66): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqev4t31m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = 0;\n    float remainder = 0;\n    float temp\
    \ = 0;\n    float temp2 = 0;\n    float temp3 = 0;\n    float temp4 = 0;\n   \
    \ float temp5 = 0;\n    float temp6 = 0;\n    float temp7 = 0;\n    float temp8\
    \ = 0;\n    float temp9 = 0;\n    float temp10 = 0;\n    float temp11 = 0;\n \
    \   float temp12 = 0;\n    float temp13 = 0;\n    float temp14 = 0;\n    float\
    \ temp15 = 0;\n    float temp16 = 0;\n    float temp17 = 0;\n    float temp18\
    \ = 0;\n    float temp19 = 0;\n    float temp20 = 0;\n    float temp21 = 0;\n\
    \    float temp22 = 0;\n    float temp23 = 0;\n    float temp24 = 0;\n    float\
    \ temp25 = 0;\n    float temp26 = 0;\n    float temp27 = 0;\n    float temp28\
    \ = 0;\n    float temp29 = 0;\n    float temp30 = 0;\n    float temp31 = 0;\n\
    \    float temp32 = 0;\n    float temp33 = 0;\n    float temp34 = 0;\n    float\
    \ temp35 = 0;\n    float temp36 = 0;\n    float temp37 = 0;\n    float temp38\
    \ = 0;\n    float temp39 = 0;\n    float temp40 = 0;\n    float temp41 = 0;\n\
    \    float temp42 = 0;\n    float temp43 = 0;\n    float temp44 = 0;\n    float\
    \ temp45 = 0;\n    float temp46 = 0;\n    float temp47 = 0;\n    float temp48\
    \ = 0;\n    float temp49 = 0;\n    float temp50 = 0;\n    float temp51 = 0;\n\
    \    float temp52 = 0;\n    float temp53 = 0;\n    float temp54 = 0;\n    float\
    \ temp55 = 0;\n    float temp56 = 0;\n    float temp57 = 0;\n    float temp58\
    \ = 0;\n    float temp59 = 0;\n    float temp60 = 0;\n    float temp61 = 0;\n\
    \    float temp62 = 0;\n    float temp63 = 0;\n    float temp64 = 0;\n    float\
    \ temp65 = 0;\n    float temp66 = 0;\n    float temp67 = 0;\n    float temp68\
    \ = 0;\n    float temp69 = 0;\n    float temp70 = 0;\n    float temp71 = 0;\n\
    \    float temp72 = 0;\n    float temp73 = 0;\n    float temp74 = 0;\n    float\
    \ temp75 = 0;\n    float temp76 = 0;\n    float temp77 = 0;\n    float temp78\
    \ = 0;\n    float temp79 = 0;\n    float temp80 = 0;\n    float temp81 = 0;\n\
    \    float temp82 = 0;\n    float temp83 = 0;\n    float temp84 = 0;\n\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprh8ap_2v.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprh8ap_2v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = int(number);\n    \n    decimal_part = number - integer_part;\n    \n    return\
    \ decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp49pvpzx9.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49pvpzx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    \n    quotient = number / pow(10.0, decimals);\n    remainder\
    \ = number - quotient * pow(10.0, decimals);\n    \n    return remainder;\n}\n\
    unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfmp4oi2w.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428965]

    ??:? void tmpfmp4oi2w.__unittest_L22_C1() [0x427d66]

    ??:? void tmpfmp4oi2w.__modtest() [0x4286e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c733]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430759]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c08]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b59d]

    ??:? runModuleUnitTests [0x42c509]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428db4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164447
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    float decimals = number -\
    \ truncate_number(number);\n    \n    while(decimals > 0)\n    {\n        result\
    \ += 1;\n        decimals -= 1;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164461
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    \n \
    \   while(number > 0.0) {\n        remainder = number % 10;\n        number =\
    \ number / 10;\n        decimals = decimals + remainder;\n    }\n    \n    return\
    \ decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp3gkk81h.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpp3gkk81h.__unittest_L24_C1() [0x427ad2]

    ??:? void tmpp3gkk81h.__modtest() [0x427b40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = trunc(number);\n    \n    decimal_part = number - integer_part;\n    \n  \
    \  return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqipcay8.d(16): Error: cannot implicitly convert expression `trunc(cast(real)number)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqipcay8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    float\
    \ remainder = 0.0;\n    float temp;\n    int exponent = 0;\n    int digits = 0;\n\
    \    bool isNegative = false;\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6b1a21ts.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6b1a21ts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number % 1;\n    float result = number - decimals;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n\
    \    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n  \
    \  assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb87g0i75.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpb87g0i75.__unittest_L17_C1() [0x427a7e]

    ??:? void tmpb87g0i75.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    while(result > 1) \n    {\n\
    \        result /= 10;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgjdd_2j7.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpgjdd_2j7.__unittest_L22_C1() [0x427a7e]

    ??:? void tmpgjdd_2j7.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    float quotient2 = 0.0;\n    float quotient3 = 0.0;\n  \
    \  float quotient4 = 0.0;\n    float quotient5 = 0.0;\n    float quotient6 = 0.0;\n\
    \    float quotient7 = 0.0;\n    float quotient8 = 0.0;\n    float quotient9 =\
    \ 0.0;\n    float quotient10 = 0.0;\n    float quotient11 = 0.0;\n    float quotient12\
    \ = 0.0;\n    float quotient13 = 0.0;\n    float quotient14 = 0.0;\n    float\
    \ quotient15 = 0.0;\n    float quotient16 = 0.0;\n    float quotient17 = 0.0;\n\
    \    float quotient18 = 0.0;\n    float quotient19 = 0.0;\n    float quotient20\
    \ = 0.0;\n    float quotient21 = 0.0;\n    float quotient22 = 0.0;\n    float\
    \ quotient23 = 0.0;\n    float quotient24 = 0.0;\n    float quotient25 = 0.0;\n\
    \    float quotient26 = 0.0;\n    float quotient27 = 0.0;\n    float quotient28\
    \ = 0.0;\n    float quotient29 = 0.0;\n    float quotient30 = 0.0;\n    float\
    \ quotient31 = 0.0;\n    float quotient32 = 0.0;\n    float quotient33 = 0.0;\n\
    \    float quotient34 = 0.0;\n    float quotient35 = 0.0;\n    float quotient36\
    \ = 0.0;\n    float quotient37 = 0.0;\n    float quotient38 = 0.0;\n    float\
    \ quotient39 = 0.0;\n    float quotient40 = 0.0;\n    float quotient41 = 0.0;\n\
    \    float quotient42 = 0.0;\n    float quotient43 = 0.0;\n    float quotient44\
    \ = 0.0;\n    float quotient45 = 0.0;\n    float quotient46 = 0.0;\n    float\
    \ quotient47 = 0.0;\n    float quotient48 = 0.0;\n    float quotient49 = 0.0;\n\
    \    float quotient50 = 0.0;\n    float quotient51 = 0.0;\n    float quotient52\
    \ = 0.0;\n    float quotient53 = 0.0;\n    float quotient54 = 0.0;\n    float\
    \ quotient55 = 0.0;\n    float quotient56 = 0.0;\n    float quotient57 = 0.0;\n\
    \    float quotient58 = 0.0;\n    float quotient59 = 0.0;\n    float quotient60\
    \ = 0.0;\n    float quotient61 = 0.\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplraxz7x1.d(76): Error: semicolon expected, not `unittest`

    /tmp/tmplraxz7x1.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplraxz7x1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float remainder;\n    float decimals;\n\
    \    float integer_part;\n    \n    integer_part = floor(result);\n    remainder\
    \ = result - integer_part;\n    decimals = remainder * pow(10, floor(log10(remainder)));\n\
    \    \n    return integer_part + decimals;\n}\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpltzxevsr.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltzxevsr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    while(number > 0.0) {\n        remainder = number\
    \ % 10.0;\n        int_part = int_part + remainder;\n        decimals = decimals\
    \ + 1.0;\n        number = number / 10.0;\n    }\n    \n    return int_part +\
    \ decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsa8k22i_.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e15]

    ??:? void tmpsa8k22i_.__unittest_L26_C1() [0x427b2a]

    ??:? void tmpsa8k22i_.__modtest() [0x427b98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb61]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430010]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9a5]

    ??:? runModuleUnitTests [0x42b911]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    \n    integer_part\
    \ = int(number);\n    remainder = number - integer_part;\n    \n    return remainder;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1c_s96li.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1c_s96li.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number - trunc(number);\n    return decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    int_part = number;\n    \n    while(int_part > 1.0)\n\
    \    {\n        int_part -= 1.0;\n        decimals += 1.0;\n    }\n    \n    remainder\
    \ = int_part - decimals;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu0dq68m_.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpu0dq68m_.__unittest_L29_C1() [0x427aea]

    ??:? void tmpu0dq68m_.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float fraction = number - trunc(number);\n    return trunc(number)\
    \ + fraction;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8b55nt0h.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e25]

    ??:? void tmp8b55nt0h.__unittest_L16_C1() [0x427b3a]

    ??:? void tmp8b55nt0h.__modtest() [0x427ba8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430038]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]

    ??:? runModuleUnitTests [0x42b939]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428274]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float decimals;\n    float intPart;\n\
    \    \n    intPart = number;\n    \n    decimals = number - intPart;\n    \n \
    \   if (decimals < 0.0) \n    {\n        intPart += 1;\n        decimals = 0.0;\n\
    \    }\n    \n    remainder = number - intPart;\n    \n    return remainder +\
    \ decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpphxjnxvs.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpphxjnxvs.__unittest_L31_C1() [0x427ae2]

    ??:? void tmpphxjnxvs.__modtest() [0x427b50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 1;\n    float\
    \ remainder = 0;\n    \n    while(number > 0)\n    {\n        remainder = number\
    \ % 10;\n        number = number / 10;\n        decimals = decimals * 10 + remainder;\n\
    \    }\n    \n    return result + decimals;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3dla0lse.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmp3dla0lse.__unittest_L26_C1() [0x427aea]

    ??:? void tmp3dla0lse.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimalPart;\n    float integerPart;\n    float decimals;\n\
    \    \n    integerPart = number;\n    decimalPart = (float)integerPart - (float)integerPart\
    \ % 1;\n    decimals = decimalPart % 1;\n    \n    return decimals;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp94xjh6v_.d(18): Error: C style cast illegal, use `cast(float)integerPart`

    /tmp/tmp94xjh6v_.d(18): Error: C style cast illegal, use `cast(float)integerPart`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp94xjh6v_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int integer_part;\n    float decimal_part;\n    \n    integer_part\
    \ = int(number);\n    \n    decimal_part = number - integer_part;\n    \n    return\
    \ decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp49pvpzx9.d(16): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49pvpzx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    float\
    \ remainder;\n    \n    while(number > 0.0) {\n        remainder = number % 1;\n\
    \        number = number / 1;\n        decimals = decimals + remainder;\n    }\n\
    \    \n    result = result + decimals;\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164462
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    while(result > 1)\n    {\n\
    \        result /= 10;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdjl8wl32.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpdjl8wl32.__unittest_L22_C1() [0x427a7e]

    ??:? void tmpdjl8wl32.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int decimal_part = int(number);\n    float trunc_number = number\
    \ - decimal_part;\n    return trunc_number;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpin0cd4ar.d(13): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpin0cd4ar.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float trunc_number = number;\n    float remainder = 0;\n  \
    \  \n    while(trunc_number >= 1)\n    {\n        remainder = trunc_number % 10;\n\
    \        trunc_number = trunc_number / 10;\n        \n        if(remainder > 0)\n\
    \        {\n            break;\n        }\n    }\n    \n    return trunc_number;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3fpp4q04.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dad]

    ??:? void tmp3fpp4q04.__unittest_L29_C1() [0x427ac2]

    ??:? void tmp3fpp4q04.__modtest() [0x427b30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]

    ??:? runModuleUnitTests [0x42b8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number;\n    float integerPart = 0;\n    float\
    \ fractionalPart = 0;\n    \n    while(number > 0)\n    {\n        fractionalPart\
    \ = number % 1;\n        integerPart = integerPart + fractionalPart;\n       \
    \ number = number / 1;\n    }\n    \n    return decimals;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-10.5)`.\n\
    <|/ c |>\n<| c |>\nI fixed the negative number issue. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=c++,math,floating-point |>\nThe best way is to use std::modf()\
    \ from <cmath>:\n<code>\n#include <cmath>\nunittest\n{\n    alias candidate =\
    \ truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph9qgkf2c.d(26): Error: declaration expected, not `<`

    /tmp/tmph9qgkf2c.d(29): Error: unterminated character constant

    /tmp/tmph9qgkf2c.d(42): Error: declaration expected, not `assert`

    /tmp/tmph9qgkf2c.d(43): Error: declaration expected, not `assert`

    /tmp/tmph9qgkf2c.d(44): Error: declaration expected, not `assert`

    /tmp/tmph9qgkf2c.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9qgkf2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    int_part = number;\n    \n    while(int_part > 0)\n\
    \    {\n        remainder = int_part % 10.0;\n        int_part = int_part / 10.0;\n\
    \        decimals = decimals + remainder;\n    }\n    \n    return decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmgsur1km.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpmgsur1km.__unittest_L28_C1() [0x427ae6]

    ??:? void tmpmgsur1km.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = number;\n    float\
    \ remainder = 0;\n    \n    while(decimals > 0)\n    {\n        remainder = number\
    \ % 10;\n        number = number / 10;\n        decimals--;\n    }\n    \n   \
    \ while(number > 0)\n    {\n        remainder = remainder * 10 + number % 10;\n\
    \        number = number / 10;\n    }\n    \n    result = remainder;\n    \n \
    \   return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n\
    \    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n  \
    \  assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg2ei_7sx.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmpg2ei_7sx.__unittest_L34_C1() [0x427b42]

    ??:? void tmpg2ei_7sx.__modtest() [0x427bb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    float decimal_part;\n\
    \    \n    integer_part = trunc(number);\n    \n    remainder = number - integer_part;\n\
    \    \n    decimal_part = remainder / pow(10.0, floor(log10(remainder)));\n  \
    \  \n    return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk0achhg2.d(17): Error: cannot implicitly convert expression `trunc(cast(real)number)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0achhg2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164447
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    float\
    \ intPart;\n    \n    intPart = floor(result);\n    \n    if (intPart > 0.0) {\n\
    \        decimals = result - intPart;\n    }\n    \n    return intPart + decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnxet0d0r.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpnxet0d0r.__unittest_L25_C1() [0x427c0e]

    ??:? void tmpnxet0d0r.__modtest() [0x427c7c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abfa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43023c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fd19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abd1]

    ??:? runModuleUnitTests [0x42bb3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float decimals;\n    \n    decimals =\
    \ number % 1;\n    number = number / 1;\n    remainder = number;\n    \n    return\
    \ remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf8zd6n51.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpf8zd6n51.__unittest_L22_C1() [0x427a8e]

    ??:? void tmpf8zd6n51.__modtest() [0x427afc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float decimal;\n    int integer;\n  \
    \  \n    integer = int(number);\n    remainder = number - integer;\n    \n   \
    \ decimal = remainder * pow(10.0, floor(log10(remainder)));\n    \n    return\
    \ decimal;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj4fglhdl.d(17): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4fglhdl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float trunc_number = number;\n    float remainder;\n    int\
    \ decimal_point;\n    \n    decimal_point = trunc_number - trunc_number;\n   \
    \ \n    if (decimal_point > 0)\n    {\n        remainder = trunc_number - trunc_number\
    \ % 1;\n        trunc_number = trunc_number % 1;\n    }\n    else\n    {\n   \
    \     remainder = 0;\n    }\n    \n    return trunc_number;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfqylzaw7.d(17): Error: cannot implicitly convert expression `trunc_number
    - trunc_number` of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfqylzaw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int decimal_part = int(number);\n    float trunc_number = number\
    \ - decimal_part;\n    return trunc_number;\n}\n</code>\n<|/ a tags=floating-point,c++,truncate\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `truncate_number(-10.0)`\
    \ returns `-10.0` instead of `-10`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers, because `int` doesn't have enough bits to represent negative numbers.\
    \ `int` has 32 bits. `float` has 24 bits. `int` can't represent negative numbers.\
    \ `float` can.\n<|/ c |>\n<| c |>\n`int` has 32 bits. `float` has 24 bits. `int`\
    \ can't represent negative numbers. `float` can.\n<|/ c |>\n<| c |>\n`int` has\
    \ 32 bits. `float` has 24 bits. `int` can't represent negative numbers. `float`\
    \ can.\n<|/ c |>\n<| c |>\n`int` has 32 bits. `float` has 24 bits. `int` can't\
    \ represent negative numbers. `float` can.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf4b6duf8.d(17): Error: declaration expected, not `<`

    /tmp/tmpf4b6duf8.d(20): Error: unterminated character constant

    /tmp/tmpf4b6duf8.d(23): Error: unterminated character constant

    /tmp/tmpf4b6duf8.d(23): Error: unterminated character constant

    /tmp/tmpf4b6duf8.d(23): Error: unterminated character constant

    /tmp/tmpf4b6duf8.d(26): Error: unterminated character constant

    /tmp/tmpf4b6duf8.d(29): Error: unterminated character constant

    /tmp/tmpf4b6duf8.d(32): Error: unterminated character constant

    /tmp/tmpf4b6duf8.d(40): Error: declaration expected, not `assert`

    /tmp/tmpf4b6duf8.d(41): Error: declaration expected, not `assert`

    /tmp/tmpf4b6duf8.d(42): Error: declaration expected, not `assert`

    /tmp/tmpf4b6duf8.d(43): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4b6duf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integerPart;\n    float decimalPart;\n\
    \    \n    integerPart = trunc(number);\n    \n    decimalPart = number - integerPart;\n\
    \    \n    remainder = number-integerPart;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float remainder = 0;\n    float\
    \ decimal = 0;\n    float tmp = 0;\n    float tmp2 = 0;\n    float tmp3 = 0;\n\
    \    float tmp4 = 0;\n    float tmp5 = 0;\n    float tmp6 = 0;\n    float tmp7\
    \ = 0;\n    float tmp8 = 0;\n    float tmp9 = 0;\n    float tmp10 = 0;\n    float\
    \ tmp11 = 0;\n    float tmp12 = 0;\n    float tmp13 = 0;\n    float tmp14 = 0;\n\
    \    float tmp15 = 0;\n    float tmp16 = 0;\n    float tmp17 = 0;\n    float tmp18\
    \ = 0;\n    float tmp19 = 0;\n    float tmp20 = 0;\n    float tmp21 = 0;\n   \
    \ float tmp22 = 0;\n    float tmp23 = 0;\n    float tmp24 = 0;\n    float tmp25\
    \ = 0;\n    float tmp26 = 0;\n    float tmp27 = 0;\n    float tmp28 = 0;\n   \
    \ float tmp29 = 0;\n    float tmp30 = 0;\n    float tmp31 = 0;\n    float tmp32\
    \ = 0;\n    float tmp33 = 0;\n    float tmp34 = 0;\n    float tmp35 = 0;\n   \
    \ float tmp36 = 0;\n    float tmp37 = 0;\n    float tmp38 = 0;\n    float tmp39\
    \ = 0;\n    float tmp40 = 0;\n    float tmp41 = 0;\n    float tmp42 = 0;\n   \
    \ float tmp43 = 0;\n    float tmp44 = 0;\n    float tmp45 = 0;\n    float tmp46\
    \ = 0;\n    float tmp47 = 0;\n    float tmp48 = 0;\n    float tmp49 = 0;\n   \
    \ float tmp50 = 0;\n    float tmp51 = 0;\n    float tmp52 = 0;\n    float tmp53\
    \ = 0;\n    float tmp54 = 0;\n    float tmp55 = 0;\n    float tmp56 = 0;\n   \
    \ float tmp57 = 0;\n    float tmp58 = 0;\n    float tmp59 = 0;\n    float tmp60\
    \ = 0;\n    float tmp61 = 0;\n    float tmp62 = 0;\n    float tmp63 = 0;\n   \
    \ float tmp64 = 0;\n    float tmp65 = 0;\n    float tmp66 = 0;\n    float tmp67\
    \ = 0;\n    float tmp68 = 0;\n    float tmp69 = 0;\n    float tmp70 = 0;\n   \
    \ float tmp71 = 0;\n    float tmp72 = 0;\n    float tmp73 = 0;\n    float tmp74\
    \ = 0;\n    float tmp75 = 0;\n    float tmp76 = 0;\n    float tmp77 = 0;\n   \
    \ float tmp78 = 0;\n    float tmp79 = 0;\n    float tmp80 = 0;\n    float tmp81\
    \ = 0;\n    float tmp82 = 0;\n    float tmp83 = 0;\n    \nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoi454mfc.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoi454mfc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float trunc_number = number;\n    float remainder;\n    \n\
    \    trunc_number = trunc_number - trunc_number % 1;\n    \n    remainder = trunc_number\
    \ % 1;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4vmtxc7t.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmp4vmtxc7t.__unittest_L22_C1() [0x427a9e]

    ??:? void tmp4vmtxc7t.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float integerPart = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    integerPart = number;\n    \n    while(integerPart\
    \ > 0.0)\n    {\n        remainder = integerPart % 10.0;\n        integerPart\
    \ = integerPart / 10.0;\n        decimals = decimals + remainder;\n    }\n   \
    \ \n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpglb5nrwp.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpglb5nrwp.__unittest_L28_C1() [0x427aea]

    ??:? void tmpglb5nrwp.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    while(result > 1) {\n   \
    \     result = result / 10;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9v7v81vm.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp9v7v81vm.__unittest_L21_C1() [0x427a7e]

    ??:? void tmp9v7v81vm.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164448
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    float\
    \ quotient = 0.0;\n    \n    quotient = number;\n    \n    while(quotient > 0.0)\n\
    \    {\n        remainder = quotient % 1.0;\n        quotient = quotient / 1.0;\n\
    \        decimals = remainder;\n    }\n    \n    return decimals;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164463
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    float integer_part;\n    float decimal_part;\n\
    \    \n    integer_part = floor(number);\n    decimal_part = number - integer_part;\n\
    \    \n    remainder = number - integer_part;\n    \n    return remainder;\n}\n\
    /*\n Given a positive floating point number, it can be decomposed into\n    and\
    \ integer part (largest integer smaller than given number) and decimals\n    (leftover\
    \ part always smaller than 1).\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbumzahja.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbumzahja.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float remainder;\n    int exponent;\n\
    \    int decimal_point;\n    \n    exponent = std.math.frexp(number, &remainder);\n\
    \    \n    decimal_point = exponent - 1;\n    \n    result = remainder * std.math.pow(10.0,\
    \ decimal_point);\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj63b3x5t.d(18): Error: template `std.math.frexp` cannot deduce
    function from argument types `!()(float, float*)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(2829):        `std.math.frexp(T)(const
    T value, out int exp) if (isFloatingPoint!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj63b3x5t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float trunc_number = number;\n    float remainder = 0;\n  \
    \  float decimal_part = 0;\n    int decimal_part_count = 0;\n    \n    while(trunc_number\
    \ > 0)\n    {\n        remainder = trunc_number % 10;\n        trunc_number =\
    \ trunc_number / 10;\n        decimal_part_count++;\n    }\n    \n    decimal_part\
    \ = trunc_number;\n    \n    while(decimal_part_count > 0)\n    {\n        trunc_number\
    \ = trunc_number * 10;\n        decimal_part_count--;\n    }\n    \n    return\
    \ decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_4fv45rf.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmp_4fv45rf.__unittest_L35_C1() [0x427ade]

    ??:? void tmp_4fv45rf.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    int int_part;\n    float frac_part;\n    \n    int_part = trunc(number);\n\
    \    frac_part = number - int_part;\n    \n    return frac_part;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvvdfre0b.d(16): Error: cannot implicitly convert expression `trunc(cast(real)number)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvvdfre0b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = number - truncate_number(number);\n    return\
    \ decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164459
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float remainder;\n    \n    while(result\
    \ > 1)\n    {\n        remainder = result % 10;\n        result = result / 10;\n\
    \        \n        if(remainder > 0)\n        {\n            result += 1;\n  \
    \      }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164464
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float remainder = 0.0;\n    \n \
    \   float remainder_float = remainder(number, 1.0);\n    float integer_part =\
    \ floor(number);\n    float decimal_part = number - integer_part;\n    \n    decimals\
    \ = decimal_part;\n    \n    return remainder_float;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi82ovcdt.d(16): Error: function expected before `()`, not `remainder`
    of type `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi82ovcdt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    float decimal_part;\n\
    \    \n    integer_part = trunc(number);\n    \n    decimal_part = number - integer_part;\n\
    \    \n    remainder = number - integer_part - decimal_part;\n    \n    return\
    \ remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo5zm_n0j.d(17): Error: cannot implicitly convert expression `trunc(cast(real)number)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo5zm_n0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164448
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimal = number % 1;\n    float integer = number / 1;\n\
    \    return decimal;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    while(result > 1)\n    {\n\
    \        result = result / 10;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjrnmek43.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpjrnmek43.__unittest_L22_C1() [0x427a7e]

    ??:? void tmpjrnmek43.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    int_part = floor(number);\n    \n    while(number\
    \ > int_part)\n    {\n        number = number - int_part;\n        decimals =\
    \ decimals + 1.0;\n    }\n    \n    remainder = number - int_part;\n    \n   \
    \ return remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n\
    \    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n  \
    \  assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0eui0tyk.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmp0eui0tyk.__unittest_L29_C1() [0x427c42]

    ??:? void tmp0eui0tyk.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd97]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac2a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fdbd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43026c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fd49]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac01]

    ??:? runModuleUnitTests [0x42bb6d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float decimals = 0.0;\n    float int_part = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    while(number > 0.0)\n    {\n        remainder =\
    \ number % 10.0;\n        number = number / 10.0;\n        decimals = decimals\
    \ + remainder;\n        int_part = int_part + remainder;\n    }\n    \n    return\
    \ decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_1orzr5c.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmp_1orzr5c.__unittest_L27_C1() [0x427b02]

    ??:? void tmp_1orzr5c.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = 0.0;\n    float\
    \ remainder = 0.0;\n    \n    while(number > 0.0)\n    {\n        remainder =\
    \ number % 10.0;\n        decimals += remainder;\n        number = number / 10.0;\n\
    \    }\n    \n    result = result + decimals;\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnwf7cztb.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpnwf7cztb.__unittest_L28_C1() [0x427af6]

    ??:? void tmpnwf7cztb.__modtest() [0x427b64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    float decimals = number - int(number);\n\
    \    \n    while(decimals > 0.0f)\n    {\n        decimals -= 1.0f;\n        result\
    \ -= 1.0f;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpinm536ql.d(14): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpinm536ql.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n        \n*/\nfloat truncate_number(float\
    \ number) \n{\n    float result = number;\n    \n    float decimals = number -\
    \ int(number);\n    \n    if(decimals > 0)\n    {\n        result -= decimals;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2qyo9dm9.d(15): Error: cannot implicitly convert expression `number`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2qyo9dm9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164449
