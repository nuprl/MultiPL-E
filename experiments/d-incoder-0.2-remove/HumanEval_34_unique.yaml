name: HumanEval_34_unique
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique elements\
  \ in a list\n        \n*/\nlong[] unique(long[] l) \n"
tests: "unittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L,\
  \ 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}"
completions: ["{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end) \n{\n\tlong[] u = new long[end - start];\n\tfor (int i = start; i <\
    \ end; ++i)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step) \n{\n\tlong[] u = new long[end - start];\n\tfor\
    \ (int i = start; i < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp) \n{\n\tlong[] u = new\
    \ long[end - start];\n\tfor (int i = start; i < end; i += step)\n\t\tu[i - start]\
    \ = l[i];\n\tArrays.sort(u, cmp);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp, long eq) \n{\n\tlong[] u = new long[end - start];\n\tfor (int i =\
    \ start; i < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp,\
    \ eq);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n\
    */\nlong[] unique(long[] l, int start, int end, int step, long cmp, long eq, int\
    \ sz) \n{\n\tlong[] u = new long[end - start];\n\tfor (int i = start; i < end;\
    \ i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp, eq, sz);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp, long eq, int sz, long ord) \n{\n\t\
    long[] u = new long[end - start];\n\tfor (int i = start; i < end; i += step)\n\
    \t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp, eq, sz, ord);\n\treturn u;\n}\n\
    /*\nReturn sorted unique elements in a list\n        ", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < l.length; j++) \n\t\t\
    {\n\t\t\tif (l[i] > l[j]) \n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\tl[i] =\
    \ l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\tArrays.sort(result);\n\treturn result;\n\
    }", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length; ++i)\n\
    \t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u;\n\tu = new\
    \ long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j\
    \ = i + 1; j < l.length; j++) \n\t\t{\n\t\t\tif (l[i] < l[j]) \n\t\t\t{\n\t\t\t\
    \tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn l;\n}\n/*\nReturn sorted unique elements in a list\n        \n\
    */\nlong[] unique(long[] l, long x) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < l.length;\
    \ j++) \n\t\t{\n\t\t\tif (l[i] < l[j] && l[i] != x) \n\t\t\t{\n\t\t\t\tlong temp\
    \ = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return l;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long x, long y) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < l.length;\
    \ j++) \n\t\t{\n\t\t\tif (l[i] < l[j] && l[i] != x && l[j] != y) \n\t\t\t{\n\t\
    \t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn l;\n}\n/*\nReturn sorted unique elements in a list\n    \
    \    \n*/\nlong[] unique(long[] l, long x, long y, long z) \n{\n\tlong[] u;\n\t\
    u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int\
    \ j = i + 1; j < l.length; j++) \n\t\t{\n\t\t\tif (l[i] < l[j] && l[i] != x &&\
    \ l[j] != y && l[j] != z) \n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] =\
    \ l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn l;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, long\
    \ x, long y, long z, long w) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < l.length;\
    \ j++) \n\t\t{\n\t\t\tif (l[i] < l[j] && l[i] != x && l[j] != y && l[j] != z &&\
    \ l[j] != ", "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i <\
    \ l.length; i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\treturn result;\n\
    }", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[]\
    \ res = new long[l.length];\n\t\n\tfor (int i = 0; i < l.length; i++)\n\t\tres[i]\
    \ = l[i];\n\t\n\tArrays.sort(res);\n\t\n\treturn res;\n}", "{\n\tlong[] u = new\
    \ long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u;\n\tu = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tfor(int j = i + 1; j < l.length;\
    \ j++)\n\t\t{\n\t\t\tif(l[i] > l[j])\n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\
    \t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0;\
    \ i < l.length; i++)\n\t{\n\t\tfor(int j = i + 1; j < l.length; j++)\n\t\t{\n\t\
    \t\tif(l[i] > l[j])\n\t\t\t{\n\t\t\t\tlong temp = u[i];\n\t\t\t\tu[i] = u[j];\n\
    \t\t\t\tu[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long[] u) \n{\n\t\
    long[] v;\n\tv = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\
    {\n\t\tfor(int j = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif(l[i] > l[j])\n\t\
    \t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tfor(int j =\
    \ i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif(l[i] > l[j])\n\t\t\t{\n\t\t\t\tlong\
    \ temp = u[i];\n\t\t\t\tu[i] = u[j];\n\t\t\t\tu[j] = temp;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn v;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, long[] u, long[] v) \n{\n\tlong[] w;\n\tw = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tfor(int j = i + 1; j < l.length;\
    \ j++)\n\t\t{\n\t\t\tif(l[i] > l[j])\n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\
    \t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0;\
    \ i < l.length; i++)\n\t{\n\t\tfor(int j = i + 1; j < l.length; j++)\n\t\t{\n\t\
    \t\tif(l[i] > l[j])\n\t\t\t{\n\t\t\t\tlong temp = u[i];\n\t\t\t\tu[i] = u[j];\n\
    \t\t\t\tu[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < l.length; i++)\n\
    \t{\n\t\tfor(int j = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif(l[i] > l[j])\n\
    \t\t\t{\n\t\t\t\tlong temp = v[i];\n\t\t\t\tv[i] = v[j];\n\t\t\t\tv[j] = temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn w;\n}\n/*\nReturn sorted unique elements in a list",
  "{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\
    \t{\n\t\tfor (int j = 0; j < u.length; j++)\n\t\t{\n\t\t\tif (l[i] == u[j])\n\t\
    \t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == u.length)\n\t\t{\n\t\t\tu[i]\
    \ = l[i];\n\t\t}\n\t}\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, int\
    \ start, int end) \n{\n\tlong[] u = new long[end - start];\n\tfor (int i = start;\
    \ i < end; i++) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step) \n{\n\tlong[] u = new long[end - start];\n\t\
    for (int i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\
    \tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp)\
    \ \n{\n\tlong[] u = new long[end - start];\n\tfor (int i = start; i < end; i +=\
    \ step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp, long ord) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u, cmp, ord);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp, long ord, int size) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u, cmp, ord, size);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, int\
    \ start, int end, int step, long cmp, long ord, int size, long ord2) \n{\n\tlong[]\
    \ u = new long[end - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\
    \t\tu[i - start] = l[i];\n", "{\n\tlong[] result = new long[l.length];\n\tfor(int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tint j = 0;\n\t\tfor(; j < i; j++) \n\t\t\
    {\n\t\t\tif(l[j] == l[i]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult[i]\
    \ = l[j];\n\t}\n\treturn result;\n}", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n        u[i] = l[i];\n    Arrays.sort(u);\n\
    \    return u;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `Arrays.sort`\
    \ doesn't return a new array, it sorts the existing array in-place. Try it out\
    \ with a simple array: `int[] a = {1, 3, 5}; Arrays.sort(a); println(a);`\n<|/\
    \ c |>\n<| c |>\nYes, it does work. Try it out with a simple array: `int[] a =\
    \ {1, 3, 5}; Arrays.sort(a); println(a);`\n<|/ c |>\n<| c |>\nOh sorry, I missed\
    \ the fact that `Arrays.sort` sorts the array in-place. My bad.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work. `Arrays.sort` doesn't return a new array, it sorts\
    \ the existing array in-place. Try it out with a simple array: `int[] a = {1,\
    \ 3, 5}; Arrays.sort(a); println(a);`\n<|/ c |>\n<| c |>\nYes, it does work. Try\
    \ it out with a simple array: `int[] a = {1, 3, 5}; Arrays.sort(a); println(a);`\n\
    <|/ c |>\n<| a tags=arrays,sorting,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] a = {1, 3, 5};\n    Arrays.sort(a);\n    System.out.println(Arrays.toString(a));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `Arrays.sort` doesn't\
    \ return a new array, it sorts the existing array in-place. Try it out with a\
    \ simple array: `int[] a = {1, 3, 5}; Arrays.sort(a); println(a);`\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end) \n{\n\tlong[] u = new long[end - start];\n\
    \tfor(int i = start; i < end; i++) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ int min) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i <\
    \ end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\t\
    for(int i = start; i < end; i += step) \n\t{\n\t\tif(u[i] < min) \n\t\t{\n\t\t\
    \tmin = u[i];\n\t\t}\n\t}\n\treturn unique(u, start, end, step, min);\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step, int min, int max) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\tfor(int i = start; i < end; i += step) \n\
    \t{\n\t\tif(u[i] < min) \n\t\t{\n\t\t\tmin = u[i];\n\t\t}\n\t\tif(u[i] > max)\
    \ \n\t\t{\n\t\t\tmax = u[i];\n\t\t}\n\t}\n\treturn unique(u, start, end, step,\
    \ min, max);\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, int min, int max, int mid) \n\
    {\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i < end; i += step)\
    \ \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n", "{\n\tlong[] u =\
    \ new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i\
    \ < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not an answer to the question.\
    \ He wants to know why his code is not working.\n<|/ c |>\n<| c |>\nThe question\
    \ was \"why my code is not working\", not \"how do I do it\".\n<|/ c |>\n<| c\
    \ |>\nI agree with you, but I believe that your answer does not answer the question.\
    \ He wants to know why his code is not working, not how to do it.\n<|/ c |>\n\
    <| c |>\nI believe that my answer does answer the question. He wants to know why\
    \ his code is not working, not how to do it.\n<|/ c |>\n<| c |>\nI believe that\
    \ my answer does answer the question. He wants to know why his code is not working,\
    \ not how to do it.\n<|/ c |>\n<| a tags=arrays,sorting,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i <\
    \ end; i++)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step) \n{\n\tlong[] u = new long[end - start];\n\tfor(int\
    \ i = start; i < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp) \n{\n\tlong[] u = new\
    \ long[end - start];\n\tfor(int i = start; i < end; i += step)\n\t\tu[i - start]\
    \ = l[i];\n\tArrays.sort(u, cmp);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp, long ord) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i =\
    \ start; i < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp,\
    \ ord);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n       \
    \ \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp, long ord,\
    \ int step2) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i\
    \ < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp, ord, step2);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp, long ord, int step2,\
    \ int step3) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i\
    \ < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp, ord, step2,\
    \ step3);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n     \
    \   \n*/", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\t\
    long[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\t\
    u[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end)\
    \ \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i < end; i++)\
    \ \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step) \n{\n\tlong[] u = new long[end - start];\n\tfor(int\
    \ i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp) \n{\n\tlong[] u = new\
    \ long[end - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i\
    \ - start] = l[i];\n\t}\n\tArrays.sort(u, cmp);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp, long ord) \n{\n\tlong[] u = new long[end - start];\n\
    \tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\
    \tArrays.sort(u, cmp, ord);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp, long ord, int size) \n{\n\tlong[] u = new long[end - start];\n\tfor(int\
    \ i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u,\
    \ cmp, ord, size);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp,\
    \ long ord, int size, int step2) \n{\n\tlong[] u = new long[end - start];\n\t\
    for(int i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n", "{\n\
    \tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n    long[] u = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n        u[i]\
    \ = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a tags=arrays,sorting,c#\
    \ |>\n<| c |>\nThis is not an answer to the question. He wants to know why his\
    \ code doesn't work, not how to fix it.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I thought that if he wants to know why his code doesn't work, he'll learn\
    \ something from my answer. Anyway, I added a comment to his question to clarify\
    \ that.\n<|/ c |>\n<| c |>\nI agree with you, but I thought that if he wants to\
    \ know why his code doesn't work, he'll learn something from my answer. Anyway,\
    \ I added a comment to his question to clarify that.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but I thought that if he wants to know why his code doesn't work,\
    \ he'll learn something from my answer. Anyway, I added a comment to his question\
    \ to clarify that.\n<|/ c |>\n<| c |>\nI agree with you, but I thought that if\
    \ he wants to know why his code doesn't work, he'll learn something from my answer.\
    \ Anyway, I added a comment to his question to clarify that.\n<|/ c |>\n<| a tags=arrays,sorting,c#\
    \ |>\nThe problem is that the array is getting sorted after each iteration. \n\
    <code>\nfor(int i = 0; i < l.Length; i++)\n{\n    Array.Sort(l);\n}\n</code>\n\
    This sorts the array after each iteration. \nTo fix this, you can move the Array.Sort(l)\
    \ out of the for loop. \n<code>\nArray.Sort(l);\nfor(int i = 0; i < l.Length;\
    \ i++)\n{\n    Console.WriteLine(l[i]);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nThe problem is that the array is getting sorted after each iteration. \n\
    <code>\nfor(int i = 0; i < l.Length; i++)\n{\n    Array.Sort(l);\n}\n</code>\n\
    This sorts the array after each iteration. \nTo fix this, you can move the Array.Sort(l)\
    \ out of the for loop. \n<code>\nArray.Sort(l);\nfor(int i = 0; i < l.Length;\
    \ i++)\n{\n    Console.WriteLine(l[i]);\n}\n</code>\n<|/ a tags=arrays,sorting,c#\
    \ |>\n<| a tags=arrays,sorting,", "{\n\tlong[] u = new long[l.length];\n\tfor(int\
    \ i = 0; i < l.length; ++i)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\t\
    return u;\n}", "{\n\tlong[] result = new long[l.length];\n\tstd.sort(l);\n\tfor(int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\tstd.sort(result);\n\
    \treturn result;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i\
    \ < l.length; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\
    \tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\
    \tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u;\n\tu\
    \ = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int\
    \ j = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif (l[i] > l[j])\n\t\t\t{\n\t\t\t\
    \tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t\
    }\n\t}\n\tfor (int i = 0; i < l.length; i++)\n\t\tu[l.length - 1 - i] = l[i];\n\
    \treturn u;\n}", "{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor(int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long x) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor(int i = 0; i <\
    \ l.length; i++) \n\t{\n\t\tif(l[i] == x) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\
    u[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long x, long y) \n\
    {\n\tlong[] u;\n\tu = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tif(l[i] == x || l[i] == y) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\
    u[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long x, long y, long\
    \ z) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif(l[i] == x || l[i] == y || l[i] == z) \n\t\t{\n\t\t\tcontinue;\n\
    \t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, long x, long\
    \ y, long z, long w) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor(int i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == x || l[i] == y || l[i] == z ||\
    \ l[i] == w) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long x, long y, long z, long w, long x) \n{\n\tlong[] u;\n\t\
    u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i]\
    \ == x || l[i] == y || l[i] == z || l[i] == w || l[i] == x) \n\t\t{\n\t\t\tcontinue;\n\
    \t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u", "{\n    long[] result\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n        result[i]\
    \ = l[i];\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI like this solution, but I wonder if it would be faster than the one\
    \ I posted below. I'm guessing it's because of the sorting step.\n<|/ c |>\n<|\
    \ c |>\nYes, it would be faster, because sorting is O(n log n), while your solution\
    \ is O(n^2). Also, if you don't need the original array, you can just use Arrays.asList(l).\n\
    <|/ c |>\n<| c |>\nI agree with you, but I wonder if there's a way to do this\
    \ without sorting.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't use sorting,\
    \ but it's still O(n^2)\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ use sorting, but it's still O(n^2)\n<|/ c |>\n<| a tags=arrays,c#,sorting |>\n\
    <code>\npublic static int[] SortUnique(int[] array)\n{\n    HashSet<int> uniques\
    \ = new HashSet<int>();\n    int[] result = new int[array.Length];\n    for (int\
    \ i = 0; i < array.Length; i++)\n    {\n        if (!uniques.Contains(array[i]))\n\
    \        {\n            uniques.Add(array[i]);\n            result[i] = array[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This solution will work only with primitive types. If you need to work with complex\
    \ types (like `Point`) then you need to implement `IComparable` interface and\
    \ implement `CompareTo` method (http://msdn.microsoft.com/en-us/library/system.icomparable.compareto.aspx).\n\
    <|/ c |>\n<| c |>\n: Yes, but you can implement `IComparable` on any type that\
    \ implements `IComparable` - including `Point`.\n<|/ c |>\n<| c |>\n: Yes, but\
    \ you can implement `IComparable` on any type that implements `IComparable` -\
    \ including `Point`.\n<|/ c |>\n<| c |>\n: Yes, but you can implement `IComparable`\
    \ on any type that implements `IComparable` - including `Point`.\n<|/ c |>\n<|\
    \ c |>\n: Yes, but you can implement `IComparable` on any type that implements\
    \ `IComparable` - including `Point`.\n", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n\
    \    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, int start, int end) \n{\n    long[]\
    \ u = new long[end - start];\n    for(int i = start; i < end; i++) \n    {\n \
    \       u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step) \n{\n    long[] u = new long[end - start];\n \
    \   for(int i = start; i < end; i += step) \n    {\n        u[i - start] = l[i];\n\
    \    }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp) \n{\n    long[] u = new long[end - start];\n    for(int i = start;\
    \ i < end; i += step) \n    {\n        u[i - start] = l[i];\n    }\n    Arrays.sort(u,\
    \ cmp);\n    return u;\n}\n/*\nReturn sorted unique elements in a list\n     \
    \   \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp, long\
    \ ord) \n{\n    long[] u = new long[end - start];\n    for(int i = start; i <\
    \ end; i += step) \n    {\n        u[i - start] = l[i];\n    }\n    Arrays.sort(u,\
    \ cmp, ord);\n    return u;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp,\
    \ long ord, int len) \n{\n    long[] u = new long[end - start];\n    for(int i\
    \ = start; i < end; i += step) \n    {\n        u[i - start] = l[i];\n    }\n\
    \    Arrays.sort(u, cmp, ord, len);\n    return u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step, long cmp, long ord, int len, int len2) \n{\n    long[] u = new long[end\
    \ - start];\n    for(int i = start; i < end; i += step) \n    {\n        u[i -\
    \ start] = l[i];\n    }\n    Arrays.sort(u, cmp", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u =\
    \ new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tu[i] = l[i];\n\
    \tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i\
    \ < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, long[] u) \n{\n    long[] result = new long[u.length];\n\
    \    for(int i = 0; i < u.length; i++) \n    {\n        result[i] = l[u[i]];\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long[] u, long[] v)\
    \ \n{\n    long[] result = new long[u.length];\n    for(int i = 0; i < u.length;\
    \ i++) \n    {\n        result[i] = l[u[i]];\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n/*\nReturn sorted unique elements in a list\n        \n\
    */\nlong[] unique(long[] l, long[] u, long[] v, long[] w) \n{\n    long[] result\
    \ = new long[u.length];\n    for(int i = 0; i < u.length; i++) \n    {\n     \
    \   result[i] = l[u[i]];\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long[] u, long[] v, long[] w, long[] x) \n{\n    long[] result = new long[u.length];\n\
    \    for(int i = 0; i < u.length; i++) \n    {\n        result[i] = l[u[i]];\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long[] u, long[] v,\
    \ long[] w, long[] x, long[] y) \n{\n    long[] result = new long[u.length];\n\
    \    for(int i = 0; i < u.length; i++) \n    {\n        result[i] = l[u[i]];\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long[] u, long[] v,\
    \ long[] w, long[] x, long[] y, long[] z) \n{\n    long[] result = new long[u.length];\n\
    \    for(int i = 0; i < u.length; i++) \n    {\n        result[i] = l[u[i]];\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long[] u, long[] v,\
    \ long[] w, long[] x, long[] y, long[] z, ", "{\n\tlong[] result = new long[l.length];\n\
    \tlong last = l[0];\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] !=\
    \ last)\n\t\t{\n\t\t\tlast = l[i];\n\t\t\tresult[i] = last;\n\t\t}\n\t}\n\treturn\
    \ result;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ ++i)\n\t{\n\t\tbool found = false;\n\t\tfor(int j = 0; j < u.length; ++j)\n\t\
    \t{\n\t\t\tif(l[i] == u[j])\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t\tif(!found)\n\t\t{\n\t\t\tu[i] = l[i];\n\t\t}\n\t}\n\treturn\
    \ u;\n}", "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tfor (int j = i+1; j < l.length; ++j)\n\t\t\tif (l[i] < l[j])\n\t\t\
    \t\tswap(l[i], l[j]);\n\tfor (int i = 0; i < l.length; ++i)\n\t\tresult[i] = l[i];\n\
    \tsort(result);\n\treturn result;\n}", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n\
    \    Arrays.sort(u);\n    return u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; ++i)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\
    \    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n \
    \       u[i] = l[i];\n    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a tags=arrays,sorting,c++,algorithm\
    \ |>\n<| c |>\nThe question was about C++, not C#.\n<|/ c |>\n<| c |>\nI know,\
    \ but I thought it would be helpful to see a solution in C++ as well. Maybe someone\
    \ else can use it.\n<|/ c |>\n<| c |>\nThe question was about C++, not C#.\n<|/\
    \ c |>\n<| c |>\nI added a C++ solution as well\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace\
    \ std;", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\
    \    long[] result = new long[l.length];\n    long last = 0;\n    for(int i =\
    \ 0; i < l.length; i++)\n    {\n        if(l[i] != last)\n        {\n        \
    \    result[i - 1] = l[i];\n            last = l[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the array\
    \ is sorted, which it should be.\n<|/ c |>\n<| c |>\nThis doesn't work if the\
    \ array is sorted, which it should be.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ the array is sorted, which it should be.\n<|/ c |>\n<| a |>\n<code>\npublic\
    \ static <T> List<T> uniqueSorted(List<T> list) {\n    List<T> result = new ArrayList<>();\n\
    \    Set<T> set = new HashSet<>();\n    for (T t : list) {\n        if (!set.add(t))\
    \ {\n            result.add(t);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,java,sorting dscore=2 |>\n<| c |>\nThis doesn't work if the\
    \ array is sorted, which it should be.\n<|/ c |>\n<| a tags=arrays,java,sorting\
    \ |>\n<code>\npublic static <T> List<T> uniqueSorted(List<T> list) {\n    List<T>\
    \ result = new ArrayList<>();\n    Set<T> set = new HashSet<>();\n    for (T t\
    \ : list) {\n        if (!set.add(t)) {\n            result.add(t);\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,java,sorting\
    \ |>\n<code>\npublic static <T> List<T> uniqueSorted(List<T> list) {\n    List<T>\
    \ result = new ArrayList<>();\n    Set<T> set = new HashSet<>();\n    for (T t\
    \ : list) {\n        if (!set.add(t)) {\n            result.add(t);\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if the array is sorted, which it should be.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\npublic static <T> List<T> uniqueSorted(List<T> list) {\n    List<T> result\
    \ = new ArrayList<>();\n    Set<T> set = new HashSet<>();\n    for (T t : list)\
    \ {\n        if (!set.add(t)) {\n            result.add(t);\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,java,sorting |>\n<| a |>\n\
    <code>\npublic static <T> List<T> uniqueSorted(List<T> ", "{\n\tlong[] u = new\
    \ long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j\
    \ = i+1; j < l.length; j++) \n\t\t{\n\t\t\tif (l[i] > l[j]) \n\t\t\t{\n\t\t\t\t\
    u[i] = l[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, int\
    \ start, int end) \n{\n\tlong[] u = new long[end - start];\n\tfor (int i = start;\
    \ i < end; i++) \n\t{\n\t\tfor (int j = i+1; j < end; j++) \n\t\t{\n\t\t\tif (l[i]\
    \ > l[j]) \n\t\t\t{\n\t\t\t\tu[i-start] = l[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n\
    */\nlong[] unique(long[] l, int start, int end, int step) \n{\n\tlong[] u = new\
    \ long[end - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\tfor\
    \ (int j = i+1; j < end; j += step) \n\t\t{\n\t\t\tif (l[i] > l[j]) \n\t\t\t{\n\
    \t\t\t\tu[i-start] = l[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp) \n{\n\tlong[] u = new long[end -\
    \ start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\tfor (int j = i+1;\
    \ j < end; j += step) \n\t\t{\n\t\t\tif (cmp(l[i], l[j]) > 0) \n\t\t\t{\n\t\t\t\
    \tu[i-start] = l[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step, long cmp, long ord) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\tfor (int j =\
    \ i+1; j < end; j += step) \n\t\t{\n\t\t\tif (ord(l[i], l[j]) > 0) \n\t\t\t{\n\
    \t\t\t\tu[i-start] = l[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp, long ord, int step2) \n{\n\tlong[]\
    \ u", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[]\
    \ u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] res = new long[l.length];\n\
    \tlong prev = 0;\n\tlong cur = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\
    \t\tcur = l[i];\n\t\tif (cur != prev)\n\t\t{\n\t\t\tres[i - 1] = cur;\n\t\t\t\
    prev = cur;\n\t\t}\n\t}\n\treturn res;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tint j = i;\n\t\twhile(j > 0 && l[j-1]\
    \ > l[j])\n\t\t{\n\t\t\tu[j] = l[j-1];\n\t\t\tj--;\n\t\t}\n\t\tu[j] = l[j];\n\t\
    }\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i <\
    \ l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n\
    }", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[]\
    \ u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor\
    \ (int j = i + 1; j < l.length; j++) \n\t\t{\n\t\t\tif (l[i] > l[j]) \n\t\t\t\
    {\n\t\t\t\tlong tmp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\t\
    }\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[l.length - 1\
    \ - i] = l[i];\n\t}\n\treturn u;\n}", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        u[i] = l[i];\n    }\n \
    \   Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, int start, int end) \n{\n    long[]\
    \ u = new long[end - start];\n    for(int i = start; i < end; i++)\n    {\n  \
    \      u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step) \n{\n    long[] u = new long[end - start];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        u[i - start] = l[i];\n\
    \    }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp) \n{\n    long[] u = new long[end - start];\n    for(int i = start;\
    \ i < end; i += step)\n    {\n        u[i - start] = l[i];\n    }\n    Arrays.sort(u,\
    \ cmp);\n    return u;\n}\n/*\nReturn sorted unique elements in a list\n     \
    \   \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp, long\
    \ ord) \n{\n    long[] u = new long[end - start];\n    for(int i = start; i <\
    \ end; i += step)\n    {\n        u[i - start] = l[i];\n    }\n    Arrays.sort(u,\
    \ cmp, ord);\n    return u;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp,\
    \ long ord, int len) \n{\n    long[] u = new long[end - start];\n    for(int i\
    \ = start; i < end; i += step)\n    {\n        u[i - start] = l[i];\n    }\n \
    \   Arrays.sort(u, cmp, ord, len);\n    return u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step, long cmp, long ord, int len, int step2) \n{\n    long[] u = new long[end\
    \ - start];\n    for(int i = start; i < end; i += step)\n    {\n        u[i -\
    \ start] = l[i];\n    }\n    Arrays.sort(u, cmp, ord, len, step2);\n", "{\n\t\
    long[] u = new long[l.length];\n\tlong t = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tfor (int j = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif (l[i]\
    \ < l[j])\n\t\t\t{\n\t\t\t\tt = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = t;\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++)\n\t\tu[i] = l[i];\n\t\
    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int n) \n{\n\tlong[] u = new long[n];\n\tlong t = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < l.length; j++)\n\
    \t\t{\n\t\t\tif (l[i] < l[j])\n\t\t\t{\n\t\t\t\tt = l[i];\n\t\t\t\tl[i] = l[j];\n\
    \t\t\t\tl[j] = t;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++)\n\
    \t\tu[i] = l[i];\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, long n) \n{\n\tlong[] u = new long[n];\n\
    \tlong t = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int j = i +\
    \ 1; j < l.length; j++)\n\t\t{\n\t\t\tif (l[i] < l[j])\n\t\t\t{\n\t\t\t\tt = l[i];\n\
    \t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = t;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0;\
    \ i < l.length; i++)\n\t\tu[i] = l[i];\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int n, long m) \n\
    {\n\tlong[] u = new long[n];\n\tlong t = 0;\n\tfor (int i = 0; i < l.length; i++)\n\
    \t{\n\t\tfor (int j = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif (l[i] < l[j])\n\
    \t\t\t{\n\t\t\t\tt = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = t;\n\t\t\t}\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++)\n\t\tu[i] = l[i];\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long n, long m) \n{\n\tlong[] u = new long[n];\n\tlong t = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < l.length; j++)\n\
    \t\t{\n\t\t\tif (l[i] < l[j])\n\t\t\t{\n\t\t\t\tt = l[i];\n\t\t\t\tl[i] = l[j];\n\
    \t\t\t\tl[j] = t;\n\t\t\t}\n\t\t}\n", "{\n\tlong[] u = new long[l.length];\n\t\
    for(int i = 0; i < l.length; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn\
    \ u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\t\
    long[] u;\n\tu = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\
    {\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u =\
    \ new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < l.length; j++) \n\t\t\
    {\n\t\t\tif (l[i] < l[j]) \n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] =\
    \ l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\treturn result;\n}", "{\n\tlong[] u;\n\
    \tu = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, long[] u) \n{\n\tlong[] v;\n\
    \tv = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tv[i]\
    \ = l[i];\n\t}\n\tArrays.sort(v);\n\tfor(int i = 0; i < u.length; i++) \n\t{\n\
    \t\tv[i] = u[i];\n\t}\n\treturn v;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, long[] u, long[] v) \n{\n\tlong[]\
    \ w;\n\tw = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \tw[i] = l[i];\n\t}\n\tArrays.sort(w);\n\tfor(int i = 0; i < u.length; i++) \n\
    \t{\n\t\tw[i] = u[i];\n\t}\n\tfor(int i = 0; i < v.length; i++) \n\t{\n\t\tw[i]\
    \ = v[i];\n\t}\n\treturn w;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, long[] u, long[] v, long[] w) \n{\n\tlong[]\
    \ x;\n\tx = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \tx[i] = l[i];\n\t}\n\tArrays.sort(x);\n\tfor(int i = 0; i < u.length; i++) \n\
    \t{\n\t\tx[i] = u[i];\n\t}\n\tfor(int i = 0; i < v.length; i++) \n\t{\n\t\tx[i]\
    \ = v[i];\n\t}\n\tfor(int i = 0; i < w.length; i++) \n\t{\n\t\tx[i] = w[i];\n\t\
    }\n\treturn x;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, long[] u, long[] v, long[] w, long[] x) \n{\n\tlong[]\
    \ y;\n\ty = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \ty[i] = l[i];\n\t}\n\tArrays.sort(y);\n\tfor(int i = 0; i < u.length; i++) \n\
    \t{\n\t\ty[i] = u[i];\n\t}\n\tfor(int i = 0; i < v.length; i++) \n\t{\n\t\ty[i]\
    \ = v[i];\n\t}\n\tfor(int i = 0; i < w.length; i++) \n\t{\n\t\ty[i] = w[i];\n\t\
    }\n\tfor(int i = 0; i < x.length; i++) \n\t{\n\t\ty[i] = x[i];\n", "{\n\tlong[]\
    \ u;\n\tu = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new\
    \ long[l.length];\n\tlong ux = 0;\n\tlong uy = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] > ux) \n\t\t{\n\t\t\tux = l[i];\n\t\t}\n\t\tif (l[i]\
    \ < uy) \n\t\t{\n\t\t\tuy = l[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] == ux) \n\t\t{\n\t\t\tu[i] = uy;\n\t\t}\n\t\telse if\
    \ (l[i] == uy) \n\t\t{\n\t\t\tu[i] = ux;\n\t\t}\n\t}\n\tsort(u);\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int lo, int hi) \n{\n\tlong[] u = new long[hi-lo+1];\n\tlong ux = 0;\n\t\
    long uy = 0;\n\tfor (int i = lo; i < hi; i++) \n\t{\n\t\tif (l[i] > ux) \n\t\t\
    {\n\t\t\tux = l[i];\n\t\t}\n\t\tif (l[i] < uy) \n\t\t{\n\t\t\tuy = l[i];\n\t\t\
    }\n\t}\n\tfor (int i = lo; i < hi; i++) \n\t{\n\t\tif (l[i] == ux) \n\t\t{\n\t\
    \t\tu[i] = uy;\n\t\t}\n\t\telse if (l[i] == uy) \n\t\t{\n\t\t\tu[i] = ux;\n\t\t\
    }\n\t}\n\tsort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int lo, int hi, int comp) \n{\n\tlong[]\
    \ u = new long[hi-lo+1];\n\tlong ux = 0;\n\tlong uy = 0;\n\tfor (int i = lo; i\
    \ < hi; i++) \n\t{\n\t\tif (comp(l[i], ux)) \n\t\t{\n\t\t\tux = l[i];\n\t\t}\n\
    \t\tif (comp(l[i], uy)) \n\t\t{\n\t\t\tuy = l[i];\n\t\t}\n\t}\n\tfor (int i =\
    \ lo; i < hi; i++) \n\t{\n\t\tif (comp(l[i], ux)) \n\t\t{\n\t\t\tu[i] = uy;\n\t\
    \t}\n\t\telse if (comp(l[i], uy)) \n\t\t{\n\t\t\tu[i] = ux;\n\t\t}\n\t}\n\tsort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int lo, int hi, int comp, long x) \n{\n\tlong[] u = new long[hi-lo+1];\n\
    \tlong ux = 0;\n\tlong uy = 0;\n\tfor (int i = lo; i < hi; i++", "{\n\tlong[]\
    \ u = new long[l.length];\n\tfor(int i = 0; i < l.length; ++i)\n\t\tu[i] = l[i];\n\
    \tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tfor (int j = i+1; j < l.length; j++) \n\t\t{\n\t\t\tif (l[i]\
    \ < l[j]) \n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\t\
    l[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\
    \t\tu[l.length-1-l[i]] = l[i];\n\t}\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n    long[] result = new long[l.length];\n    for(int i =\
    \ 0; i < l.length; i++) \n    {\n        long current = l[i];\n        for(int\
    \ j = 0; j < i; j++) \n        {\n            if(l[j] == current) \n         \
    \   {\n                current = l[j];\n            }\n        }\n        result[i]\
    \ = current;\n    }\n    Arrays.sort(result);\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, int\
    \ start, int end) \n{\n    long[] result = new long[end - start];\n    for(int\
    \ i = start; i < end; i++) \n    {\n        long current = l[i];\n        for(int\
    \ j = i; j > start; j--) \n        {\n            if(l[j] == current) \n     \
    \       {\n                current = l[j];\n            }\n        }\n       \
    \ result[i - start] = current;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step) \n{\n    long[] result = new long[end - start];\n\
    \    for(int i = start; i < end; i += step) \n    {\n        long current = l[i];\n\
    \        for(int j = i; j > start; j -= step) \n        {\n            if(l[j]\
    \ == current) \n            {\n                current = l[j];\n            }\n\
    \        }\n        result[i - start] = current;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n/*\nReturn sorted unique elements in a list\n        \n\
    */\nlong[] unique(long[] l, int start, int end, int step, long compare) \n{\n\
    \    long[] result = new long[end - start];\n    for(int i = start; i < end; i\
    \ += step) \n    {\n        long current = l[i];\n        for(int j = i; j > start;\
    \ j -= step) \n        {\n            if(compare(l[j], current) == 0) \n     \
    \       {\n                current = l[j];\n            }\n        }\n       \
    \ result[i - start] = current;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long compare, int step2) \n{\n    long[] result\
    \ = new long[end - start];\n    for(int i = start; i < end; i += step) \n    {\n\
    \        long current = l[i];\n        for(int j = i; j > start; j -= step) \n\
    \        {\n            if(compare(l[j], current) == 0) \n            {\n    \
    \            current = l[j];\n            }\n        }\n        result[i - start]\
    \ = current;\n", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\t\
    long[] u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\
    \tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end)\
    \ \n{\n\tlong[] u = new long[end - start];\n\tfor (int i = start; i < end; i++)\
    \ \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step) \n{\n\tlong[] u = new long[end - start];\n\tfor\
    \ (int i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\t\
    Arrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp)\
    \ \n{\n\tlong[] u = new long[end - start];\n\tfor (int i = start; i < end; i +=\
    \ step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp, long ord) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u, cmp, ord);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp, long ord, int len) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u, cmp, ord, len);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp, long ord, int len, int step2) \n{\n\tlong[] u =\
    \ new long[end - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\t\
    u[i - start] = l[i];\n", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i\
    \ = start; i < end; i++) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i <\
    \ end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp, long ord) \n{\n\tlong[]\
    \ u = new long[end - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\
    \t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp, ord);\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step, long cmp, long ord, int size) \n{\n\tlong[] u\
    \ = new long[end - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\
    \tu[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp, ord, size);\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp, long ord, int size, int step2) \n\
    {\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i < end; i += step)\
    \ \n\t{\n\t\tu[i - start] = l[i];\n", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n\
    \    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a tags=java,arrays,sorting\
    \ |>\n<| c |>\nThis is not the fastest solution. Sorting takes O(nlogn) time.\
    \ Your solution takes O(n^2) time. Your solution also doesn't work if there are\
    \ duplicates in the array.\n<|/ c |>\n<| c |>\nI agree with you, my solution is\
    \ just an alternative solution to the problem. My solution is also O(n^2) but\
    \ is more readable and easy to understand.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ my solution is just an alternative solution to the problem. My solution is also\
    \ O(nlogn) but is more readable and easy to understand.\n<|/ c |>\n<| c |>\nI\
    \ agree with you, my solution is just an alternative solution to the problem.\
    \ My solution is also O(nlogn) but is more readable and easy to understand.\n\
    <|/ c |>\n<| c |>\nI agree with you, my solution is just an alternative solution\
    \ to the problem. My solution is also O(nlogn) but is more readable and easy to\
    \ understand.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nimport java.util.Arrays;",
  "{\n\tlong[] u = new long[l.length];\n\tlong ucount = 0;\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif(l[i] != u[ucount]) \n\t\t{\n\t\t\tu[ucount] = l[i];\n\t\t\
    \tucount++;\n\t\t}\n\t}\n\treturn u;\n}\n/*\nReturn sorted unique elements in\
    \ a list\n        \n*/\nlong[] unique(long[] l, long n) \n{\n\tlong[] u = new\
    \ long[n];\n\tlong ucount = 0;\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\t\
    if(l[i] != u[ucount]) \n\t\t{\n\t\t\tu[ucount] = l[i];\n\t\t\tucount++;\n\t\t\
    }\n\t}\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n\
    */\nlong[] unique(long[] l, long n, long m) \n{\n\tlong[] u = new long[m];\n\t\
    long ucount = 0;\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] != u[ucount])\
    \ \n\t\t{\n\t\t\tu[ucount] = l[i];\n\t\t\tucount++;\n\t\t}\n\t}\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long n, long m, long n2) \n{\n\tlong[] u = new long[n2];\n\tlong ucount =\
    \ 0;\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] != u[ucount]) \n\t\
    \t{\n\t\t\tu[ucount] = l[i];\n\t\t\tucount++;\n\t\t}\n\t}\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ long n, long m, long n2, long n3) \n{\n\tlong[] u = new long[n3];\n\tlong ucount\
    \ = 0;\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] != u[ucount]) \n\
    \t\t{\n\t\t\tu[ucount] = l[i];\n\t\t\tucount++;\n\t\t}\n\t}\n\treturn u;\n}\n\
    /*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long n, long m, long n2, long n3, long n4) \n{\n\tlong[] u = new long[n4];\n\
    \tlong ucount = 0;\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] !=\
    \ u[ucount]) \n\t\t{\n\t\t\tu[ucount] = l[i];\n\t\t\tucount++;\n\t\t}\n\t}\n\t\
    return u;\n}\n/*\nReturn sorted ", "{\n\tlong[] result = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\
    \treturn result;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n\
    }", "{\n\tlong[] u = new long[l.length];\n\tlong uidx = 0;\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tif (l[i] != l[uidx]) \n\t\t{\n\t\t\tu[uidx] =\
    \ l[i];\n\t\t\tuidx++;\n\t\t}\n\t}\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn\
    \ u;\n}", "{\n\tlong[] res = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tres[i] = l[i];\n\tArrays.sort(res);\n\treturn res;\n}", "{\n\tlong[]\
    \ result = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\
    \tfor (int j = i + 1; j < l.length; j++) \n\t\t{\n\t\t\tif (l[i] > l[j]) \n\t\t\
    \t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\
    \t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tresult[i] = l[i];\n\
    \t}\n\tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, long key) \n{\n\tlong[] result\
    \ = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int\
    \ j = i + 1; j < l.length; j++) \n\t\t{\n\t\t\tif (l[i] > l[j] && l[i] == key)\
    \ \n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = tmp;\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tresult[i]\
    \ = l[i];\n\t}\n\tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, long key, long\
    \ key2) \n{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tfor (int j = i + 1; j < l.length; j++) \n\t\t{\n\t\t\tif (l[i]\
    \ > l[j] && l[i] == key && l[j] == key2) \n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\
    \t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\tArrays.sort(result);\n\
    \treturn result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, long key, long key2, long key3) \n{\n\tlong[] result =\
    \ new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int\
    \ j = i + 1; j < l.length; j++) \n\t\t{\n\t\t\tif (l[i] > l[j] && l[i] == key\
    \ && l[j] == key2 && l[j] == key3) \n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\
    \tl[i] = l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\tArrays.sort(result);\n\
    \treturn result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long", "{\n\tlong[] result = new long[l.length];\n\tfor (int i =\
    \ 0; i < l.length; i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\treturn\
    \ result;\n}", "{\n\tlong [] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, long\
    \ key) \n{\n\tlong [] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u, new Comparator<long>()\n\t\
    {\n\t\tpublic int compare(long a, long b)\n\t\t{\n\t\t\treturn key - a;\n\t\t\
    }\n\t});\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n      \
    \  \n*/\nlong[] unique(long[] l, int key) \n{\n\tlong [] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u,\
    \ new Comparator<long>()\n\t{\n\t\tpublic int compare(long a, long b)\n\t\t{\n\
    \t\t\treturn key - a;\n\t\t}\n\t});\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long key, int key2)\
    \ \n{\n\tlong [] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\
    \t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u, new Comparator<long>()\n\t{\n\t\t\
    public int compare(long a, long b)\n\t\t{\n\t\t\treturn key - a;\n\t\t}\n\t});\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int key, int key2) \n{\n\tlong [] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u,\
    \ new Comparator<long>()\n\t{\n\t\tpublic int compare(long a, long b)\n\t\t{\n\
    \t\t\treturn key - a;\n\t\t}\n\t});\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long key, int key2,\
    \ int key3) \n{\n\tlong [] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u, new Comparator<long>()\n\t\
    {\n\t\tpublic int compare(long a, long b)\n\t\t{\n\t\t\treturn key - a;\n\t\t}",
  "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\
    \t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new\
    \ long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, int start, int end) \n{\n\tlong[]\
    \ u = new long[end - start];\n\tfor(int i = start; i < end; i++) \n\t{\n\t\tu[i\
    \ - start] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start;\
    \ i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long comp) \n{\n\tlong[] u =\
    \ new long[end - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\t\
    u[i - start] = l[i];\n\t}\n\tArrays.sort(u, comp);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, int\
    \ start, int end, int step, long comp, long ord) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u, comp, ord);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long comp, long ord, int len) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u, comp, ord, len);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, int\
    \ start, int end, int step, long comp, long ord, int len, int len2) \n{\n\tlong[]\
    \ u = new long[end - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\
    \t\tu[i - start] = l[i];\n", "{\n\tlong[] res = new long[l.length];\n\t\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < l.length; j++)\n\
    \t\t{\n\t\t\tif (l[i] < l[j])\n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\tl[i]\
    \ = l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i <\
    \ l.length; i++)\n\t\tres[i] = l[i];\n\t\n\tArrays.sort(res);\n\t\n\treturn res;\n\
    }", "{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, long\
    \ x) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif(l[i] == x) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, int x) \n{\n\tlong[] u;\n\tu = new\
    \ long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == x)\
    \ \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\t\
    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long x, int y) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == x && l[i] == y) \n\t\
    \t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int x, int y) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor(int i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == x && l[i] == y) \n\t\t{\n\t\t\t\
    continue;\n\t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ long x, long y) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor(int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tif(l[i] == x && l[i] == y) \n\t\t{\n\t\t\tcontinue;\n\
    \t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int x, int\
    \ y, int z) \n{\n\tlong[] u;\n\tu = new long[l.length", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn\
    \ u;\n}", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end) \n{\n    long[] u = new long[end - start];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, int start, int end, int step) \n{\n    long[] u = new\
    \ long[end - start];\n    for(int i = start; i < end; i += step)\n    {\n    \
    \    u[i - start] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step, long cmp) \n{\n    long[] u = new long[end - start];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        u[i - start] = l[i];\n\
    \    }\n    Arrays.sort(u, cmp);\n    return u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp, long ord) \n{\n    long[] u = new long[end - start];\n    for(int\
    \ i = start; i < end; i += step)\n    {\n        u[i - start] = l[i];\n    }\n\
    \    Arrays.sort(u, cmp, ord);\n    return u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp, long ord, int len) \n{\n    long[] u = new long[end - start];\n  \
    \  for(int i = start; i < end; i += step)\n    {\n        u[i - start] = l[i];\n\
    \    }\n    Arrays.sort(u, cmp, ord, len);\n    return u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp, long ord, int len, int step2) \n{\n    long[] u\
    \ = new long[end - start];\n    for(int i = start; i < end; i += step2)\n    {\n\
    \        u[i - start] = l[i];\n    }\n    Arrays.sort(u, cmp, ord, len, step2);",
  "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\
    \t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n    long[] result\
    \ = new long[l.length];\n    long prev = 0;\n    long cur = l[0];\n    for(int\
    \ i = 1; i < l.length; i++) \n    {\n        if(l[i] < cur) \n        {\n    \
    \        result[i - 1] = cur;\n            cur = l[i];\n        }\n        else\
    \ \n        {\n            result[i - 1] = l[i];\n        }\n    }\n    result[result.length\
    \ - 1] = cur;\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,sorting,arrays\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n\
    }", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length; ++i)\n\
    \t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\t\
    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long key) \n{\n\tlong[] u = new long[l.length];\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u, key);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long key, long[] u) \n{\n\tlong[] u = new long[l.length];\n\tfor (int i =\
    \ 0; i < l.length; ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u, key);\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long key, long[] u, int lo, int hi) \n{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = lo; i < hi; ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u, key);\n\t\
    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long key, long[] u, int lo, int hi, int len) \n{\n\tlong[]\
    \ u = new long[l.length];\n\tfor (int i = lo; i < hi; ++i)\n\t\tu[i] = l[i];\n\
    \tArrays.sort(u, key);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, long key, long[] u, int lo, int\
    \ hi, int len, int len2) \n{\n\tlong[] u = new long[l.length];\n\tfor (int i =\
    \ lo; i < hi; ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u, key);\n\treturn u;\n}\n\
    /*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long key, long[] u, int lo, int hi, int len, int len2, int len3) \n{\n\t\
    long[] u = new long[l.length];\n\tfor (int i = lo; i < hi; ++i)\n\t\tu[i] = l[i];\n\
    \tArrays.sort(u, key);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, long key, long[] u, int lo, int\
    \ hi, int len, int len2, int len3, int len4) \n{\n\tlong[] u = new long[", "{\n\
    \    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n</code>\n\
    <|/ a tags=arrays,sorting,c# |>\n<| c |>\nThis doesn't work. `Arrays.sort` sorts\
    \ the array in place, so the original array is unchanged. See [here](http://msdn.microsoft.com/en-us/library/system.array.sort.aspx).\n\
    <|/ c |>\n<| c |>\n: Yes, I know. That's why I wrote \"in place\". I was just\
    \ trying to show that `Arrays.sort` sorts the array in place. Of course it would\
    \ be better to use a `List` instead.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ doesn't use an `Array` but a `List`.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that doesn't use an `Array` but a `List`.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that doesn't use an `Array` but a `List`.\n<|/ c |>\n<| a tags=arrays,sorting,c#\
    \ |>\n<code>", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; ++i)\n        u[i] = l[i];\n    Arrays.sort(u);\n    return u;\n}\n\
    </code>\n<|/ a tags=arrays,c#,sorting |>\n<| c |>\nThis code doesn't work. `Arrays.sort`\
    \ doesn't return an array.\n<|/ c |>\n<| c |>\nThis code doesn't work. `Arrays.sort`\
    \ doesn't return an array.\n<|/ c |>\n<| c |>\nThis code doesn't work. `Arrays.sort`\
    \ doesn't return an array.\n<|/ c |>\n<| c |>\nThis code doesn't work. `Arrays.sort`\
    \ doesn't return an array.\n<|/ c |>\n<| c |>\nThis code doesn't work. `Arrays.sort`\
    \ doesn't return an array.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "{\n\tlong[]\
    \ u;\n\tu = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \tfor(int j = i+1; j < l.length; j++) \n\t\t{\n\t\t\tif(l[i] > l[j]) \n\t\t\t\
    {\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\
    \t}\n\t\t}\n\t}\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tfor(int j = i+1;\
    \ j < l.length; j++) \n\t\t{\n\t\t\tif(l[i] > l[j]) \n\t\t\t{\n\t\t\t\tlong temp\
    \ = u[i];\n\t\t\t\tu[i] = u[j];\n\t\t\t\tu[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return u;\n}", "{\n\tlong[] result = new long[l.length];\n\t\n\tfor(int i = 0;\
    \ i < l.length; i++)\n\t\tresult[i] = l[i];\n\t\n\tArrays.sort(result);\n\t\n\t\
    return result;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i <\
    \ l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n\
    }", "{\n\tlong result[] = new long[l.length];\n\tlong last = 0;\n\tfor (int i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] != last) \n\t\t{\n\t\t\tresult[i]\
    \ = l[i];\n\t\t\tlast = l[i];\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long[]\
    \ res = new long[l.length];\n    long prev = 0;\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        if(l[i] != prev)\n        {\n            res[i - 1] = l[i];\n\
    \            prev = l[i];\n        }\n    }\n    return res;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,c# |>\n<| a tags=sorting,arrays,c# |>\n<code>\npublic\
    \ static int[] SortArray(int[] array)\n{\n    int[] sortedArray = new int[array.Length];\n\
    \    Array.Sort(array);\n    for(int i = 0; i < array.Length; i++)\n    {\n  \
    \      sortedArray[i] = array[i];\n    }\n    return sortedArray;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,arrays,c# |>\n<code>", "{\n\tlong[] u = new\
    \ long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n    long[] result = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        long x = l[i];\n      \
    \  for(int j = i + 1; j < l.length; ++j)\n        {\n            if(l[j] == x)\n\
    \            {\n                long y = l[j];\n                for(int k = j;\
    \ k < l.length; ++k)\n                {\n                    l[k] = l[k + 1];\n\
    \                }\n                l[l.length - 1] = y;\n            }\n    \
    \    }\n        result[i] = x;\n    }\n    return result;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end) \n{\n    long[] result = new long[end - start];\n    for(int i = start;\
    \ i < end; ++i)\n    {\n        long x = l[i];\n        for(int j = i + 1; j <\
    \ end; ++j)\n        {\n            if(l[j] == x)\n            {\n           \
    \     long y = l[j];\n                for(int k = j; k < end; ++k)\n         \
    \       {\n                    l[k] = l[k + 1];\n                }\n         \
    \       l[end - 1] = y;\n            }\n        }\n        result[i - start] =\
    \ x;\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end, int step) \n{\n   \
    \ long[] result = new long[end - start];\n    for(int i = start; i < end; i +=\
    \ step)\n    {\n        long x = l[i];\n        for(int j = i + 1; j < end; j\
    \ += step)\n        {\n            if(l[j] == x)\n            {\n            \
    \    long y = l[j];\n                for(int k = j; k < end; k += step)\n    \
    \            {\n                    l[k] = l[k + 1];\n                }\n    \
    \            l[end - 1] = y;\n            }\n        }\n        result[i - start]\
    \ = x;\n    }\n    return result;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp)\
    \ \n{\n    long[] result = new long[end - start];\n    for(int i = start; i <\
    \ end; i += step)\n    {\n        long x = l[i];\n        for(int j = i + 1; j\
    \ < end; j += step)\n        {\n            if(l[j] == x && cmp(x, l[j]) < 0)\n\
    \            {\n                long y = l[j];\n                for(int k = j;\
    \ k < end; k += step)\n                {\n                    l[k] = l[k + 1];\n\
    \                }\n                l[end - 1] = y;\n            }\n        }\n\
    \        result[i - start] = x;\n    }\n    return result;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n", "{\n\tlong[] u = new long[l.length];\n\tfor(int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\t\
    return u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\t\
    long[] result = new long[l.length];\n\t\n\tfor (int i = 0; i < l.length; i++)\n\
    \t\tresult[i] = l[i];\n\t\n\tArrays.sort(result);\n\t\n\treturn result;\n}", "{\n\
    \tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tu[i]\
    \ = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end) \n{\n\t\
    long[] u = new long[end - start];\n\tfor(int i = start; i < end; i++)\n\t\tu[i\
    \ - start] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i <\
    \ end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u);\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp) \n{\n\tlong[] u = new long[end -\
    \ start];\n\tfor(int i = start; i < end; i += step)\n\t\tu[i - start] = l[i];\n\
    \tArrays.sort(u, cmp);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step, long\
    \ cmp, long ord) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start;\
    \ i < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp, ord);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp, long ord, int len)\
    \ \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i < end; i +=\
    \ step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp, ord, len);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp, long ord, int len, int len2) \n{\n\
    \tlong[] u = new long[end - start];\n\tfor(int i = start; i < end; i += step)\n\
    \t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp, ord, len, len2);\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] ", "{\n\t\
    long[] u;\n\tu = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\
    {\n\t\tfor(int j = i+1; j < l.length; j++)\n\t\t{\n\t\t\tif(l[i] > l[j])\n\t\t\
    \t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\
    \t}\n\t\t}\n\t}\n\tfor(int i = 0; i < l.length; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end) \n{\n\tlong[] u;\n\tu = new long[end -\
    \ start];\n\tfor(int i = start; i < end; i++)\n\t{\n\t\tfor(int j = i+1; j < end;\
    \ j++)\n\t\t{\n\t\t\tif(l[i] > l[j])\n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\
    \tl[i] = l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = start;\
    \ i < end; i++)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n\
    /*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step) \n{\n\tlong[] u;\n\tu = new long[end - start];\n\
    \tfor(int i = start; i < end; i += step)\n\t{\n\t\tfor(int j = i+1; j < end; j\
    \ += step)\n\t\t{\n\t\t\tif(l[i] > l[j])\n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\
    \t\t\tl[i] = l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = start;\
    \ i < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u);\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp) \n{\n\tlong[] u;\n\tu = new long[end\
    \ - start];\n\tfor(int i = start; i < end; i += step)\n\t{\n\t\tfor(int j = i+1;\
    \ j < end; j += step)\n\t\t{\n\t\t\tif(l[i] > l[j])\n\t\t\t{\n\t\t\t\tlong tmp\
    \ = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\
    for(int i = start; i < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u,\
    \ cmp);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n       \
    \ \n*/\nlong[] unique(long[] l, int start, int end, int ", "{\n\tlong[] u = new\
    \ long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u;\n\tu = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u =\
    \ new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] =\
    \ l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; ++i)\n\t{\n\t\tfor(int j = i + 1; j < l.length;\
    \ ++j)\n\t\t{\n\t\t\tif(l[i] > l[j])\n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\
    \tl[i] = l[j];\n\t\t\t\tl[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i <\
    \ l.length; ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, int\
    \ start, int end) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start;\
    \ i < end; ++i)\n\t{\n\t\tfor(int j = i + 1; j < end; ++j)\n\t\t{\n\t\t\tif(l[i]\
    \ > l[j])\n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j]\
    \ = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = start; i < end; ++i)\n\t\tu[i] =\
    \ l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step)\
    \ \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i < end; i +=\
    \ step)\n\t{\n\t\tfor(int j = i + 1; j < end; j += step)\n\t\t{\n\t\t\tif(l[i]\
    \ > l[j])\n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j]\
    \ = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = start; i < end; i += step)\n\t\t\
    u[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i <\
    \ end; i += step)\n\t{\n\t\tfor(int j = i + 1; j < end; j += step)\n\t\t{\n\t\t\
    \tif(l[i] > l[j])\n\t\t\t{\n\t\t\t\tlong tmp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\
    \t\t\tl[j] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = start; i < end; i += step)\n\
    \t\tu[i] = l[i];\n\tArrays.sort(u, cmp);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step, long cmp, int step2) \n{\n\tlong[] u = new long[end - start];\n\t",
  "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\
    \t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long x) \n{\n\tlong[]\
    \ u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i]\
    \ = l[i];\n\t}\n\tArrays.sort(u, (x, y) -> {\n\t\tlong a = x;\n\t\tlong b = y;\n\
    \t\treturn a < b ? -1 : 1;\n\t});\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, long x, long y) \n{\n\tlong[]\
    \ u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i]\
    \ = l[i];\n\t}\n\tArrays.sort(u, (x, y) -> {\n\t\tlong a = x;\n\t\tlong b = y;\n\
    \t\treturn a < b ? -1 : 1;\n\t});\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, long x, long y, long z) \n\
    {\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\
    {\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u, (x, y) -> {\n\t\tlong a = x;\n\t\t\
    long b = y;\n\t\treturn a < b ? -1 : 1;\n\t});\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, long x, long\
    \ y, long z, long a) \n{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u, (x, y) -> {\n\
    \t\tlong a = x;\n\t\tlong b = y;\n\t\treturn a < b ? -1 : 1;\n\t});\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long x, long y, long z, long a, long b) \n{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u,\
    \ (x, y) -> {\n\t\tlong a = x;\n\t\tlong b = y;\n\t\treturn a < b ? -1 : 1;\n\t\
    });\n\treturn u;\n}\n/*\nReturn sorted unique element", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i\
    \ < l.length; ++i)\n        u[i] = l[i];\n    Arrays.sort(u);\n    return u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end) \n{\n    long[] u = new long[end - start];\n    for(int\
    \ i = start; i < end; ++i)\n        u[i - start] = l[i];\n    Arrays.sort(u);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, int start, int end, int step) \n{\n    long[] u = new\
    \ long[end - start];\n    for(int i = start; i < end; i += step)\n        u[i\
    \ - start] = l[i];\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step, long cmp) \n{\n    long[] u = new long[end - start];\n    for(int\
    \ i = start; i < end; i += step)\n        u[i - start] = l[i];\n    Arrays.sort(u,\
    \ cmp);\n    return u;\n}\n/*\nReturn sorted unique elements in a list\n     \
    \   \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp, long\
    \ ord) \n{\n    long[] u = new long[end - start];\n    for(int i = start; i <\
    \ end; i += step)\n        u[i - start] = l[i];\n    Arrays.sort(u, cmp, ord);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, int start, int end, int step, long cmp, long ord, int\
    \ len) \n{\n    long[] u = new long[end - start];\n    for(int i = start; i <\
    \ end; i += step)\n        u[i - start] = l[i];\n    Arrays.sort(u, cmp, ord,\
    \ len);\n    return u;\n}\n/*\nReturn sorted unique elements in a list\n     \
    \   \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp, long\
    \ ord, int len, int step2) \n{\n    long[] u = new long[end - start];\n    for(int\
    \ i = start; i < end; i += step)\n        u[i - start] = l[i];\n    Arrays.sort(u,\
    \ cmp, ord, len, step2);\n    return u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int ", "{\n\tlong[] u;\n\t\
    u = new long[l.length];\n\tfor(int i = 0; i < l.length; ++i)\n\t\tu[i] = l[i];\n\
    \tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] result = new long[l.length];\n\
    \tlong last = l[0];\n\tfor (int i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i]\
    \ != last) \n\t\t{\n\t\t\tlast = l[i];\n\t\t\tresult[i-1] = last;\n\t\t}\n\t}\n\
    \treturn result;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i\
    \ < l.length; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\
    \tlong result = 0;\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < l.length; j++)\n\t\t{\n\t\
    \t\tif (l[i] > l[j])\n\t\t\t{\n\t\t\t\tresult = l[i];\n\t\t\t\tl[i] = l[j];\n\t\
    \t\t\tl[j] = result;\n\t\t\t}\n\t\t}\n\t}\n\treturn l;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end)\
    \ \n{\n\tlong result = 0;\n\tlong[] result = new long[end - start];\n\tfor (int\
    \ i = start; i < end; i++)\n\t{\n\t\tfor (int j = i + 1; j < end; j++)\n\t\t{\n\
    \t\t\tif (l[i] > l[j])\n\t\t\t{\n\t\t\t\tresult = l[i];\n\t\t\t\tl[i] = l[j];\n\
    \t\t\t\tl[j] = result;\n\t\t\t}\n\t\t}\n\t}\n\treturn l;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step) \n{\n\tlong result = 0;\n\tlong[] result = new long[end -\
    \ start];\n\tfor (int i = start; i < end; i += step)\n\t{\n\t\tfor (int j = i\
    \ + 1; j < end; j += step)\n\t\t{\n\t\t\tif (l[i] > l[j])\n\t\t\t{\n\t\t\t\tresult\
    \ = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = result;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn l;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long stepSize) \n{\n\tlong result\
    \ = 0;\n\tlong[] result = new long[end - start];\n\tfor (int i = start; i < end;\
    \ i += step)\n\t{\n\t\tfor (int j = i + 1; j < end; j += step)\n\t\t{\n\t\t\t\
    if (l[i] > l[j])\n\t\t\t{\n\t\t\t\tresult = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\
    \tl[j] = result;\n\t\t\t}\n\t\t}\n\t}\n\treturn l;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step, long stepSize, long stepSize2) \n{\n\tlong result = 0;\n\tlong[] result\
    \ = new long[end - start];\n\tfor (int i = start; i < end; i += step)\n\t{\n\t\
    \tfor (int j = i + 1; j < end; j += step)\n\t\t{\n\t\t\tif (l[i] > l[j])\n\t\t\
    \t{\n\t\t\t\tresult = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = result;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn l;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\n", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\t\
    long[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\t\
    u[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end)\
    \ \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i < end; i++)\
    \ \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step) \n{\n\tlong[] u = new long[end - start];\n\tfor(int\
    \ i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp) \n{\n\tlong[] u = new\
    \ long[end - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i\
    \ - start] = l[i];\n\t}\n\tArrays.sort(u, cmp);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp, long ord) \n{\n\tlong[] u = new long[end - start];\n\
    \tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\
    \tArrays.sort(u, cmp, ord);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp, long ord, int size) \n{\n\tlong[] u = new long[end - start];\n\tfor(int\
    \ i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u,\
    \ cmp, ord, size);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp,\
    \ long ord, int size, int step2) \n{\n\tlong[] u = new long[end - start];\n\t\
    for(int i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n", "{\n\
    \tlong result = 0;\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < l.length; j++)\n\t\t{\n\t\
    \t\tif (l[i] < l[j])\n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\
    \t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++)\n\
    \t{\n\t\tfor (int j = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif (l[i] < l[j])\n\
    \t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int j\
    \ = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif (l[i] < l[j])\n\t\t\t{\n\t\t\t\t\
    long temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\
    \t}\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < l.length;\
    \ j++)\n\t\t{\n\t\t\tif (l[i] < l[j])\n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\
    \t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0;\
    \ i < l.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < l.length; j++)\n\t\t{\n\
    \t\t\tif (l[i] < l[j])\n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\
    \t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++)\n\
    \t{\n\t\tfor (int j = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif (l[i] < l[j])\n\
    \t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int j\
    \ = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif (l[i] < l[j])\n\t\t\t{\n\t\t\t\t\
    long temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\
    \t}\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < l.length;\
    \ j++)\n\t\t{\n\t\t\tif (l[i] < l[j])\n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\
    \t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0;\
    \ i < l.length; i++)\n\t{\n\t\tfor (int j = i + 1; j < l.length; j++)\n\t\t{\n\
    \t\t\tif (l[i] < l[j])\n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\
    \t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++)\n\
    \t{", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\
    \t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] result = new\
    \ long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j\
    \ = 0; j < i; j++) \n\t\t{\n\t\t\tif (l[i] == l[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (j == i) \n\t\t{\n\t\t\tresult[i] = l[i];\n\t\t}\n\t}\n\
    \treturn result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, int start, int end) \n{\n\tlong[] result = new long[end\
    \ - start];\n\tfor (int i = start; i < end; i++) \n\t{\n\t\tfor (int j = 0; j\
    \ < i; j++) \n\t\t{\n\t\t\tif (l[i] == l[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t\tif (j == i) \n\t\t{\n\t\t\tresult[i-start] = l[i];\n\t\t}\n\t}\n\
    \treturn result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, int start, int end, int step) \n{\n\tlong[] result = new\
    \ long[end - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\tfor\
    \ (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (l[i] == l[j]) \n\t\t\t{\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (j == i) \n\t\t{\n\t\t\tresult[i-start] = l[i];\n\
    \t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp)\
    \ \n{\n\tlong[] result = new long[end - start];\n\tfor (int i = start; i < end;\
    \ i += step) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (cmp(l[i],\
    \ l[j]) == 0) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == i) \n\t\t\
    {\n\t\t\tresult[i-start] = l[i];\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, int\
    \ start, int end, int step, long cmp, long key) \n{\n\tlong[] result = new long[end\
    \ - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\tfor (int j =\
    \ 0; j < i; j++) \n\t\t{\n\t\t\tif (cmp(l[i], l[j]) == 0 && l[i] == key) \n\t\t\
    \t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == i) \n\t\t{\n\t\t\tresult[i-start]\
    \ = l[i];\n\t\t}\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] ", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\t\
    long[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\t\
    u[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long x) \n{\n\tlong[]\
    \ u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i]\
    \ == x) \n\t\t{\n\t\t\tu[i] = l[i];\n\t\t}\n\t}\n\tArrays.sort(u);\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int x) \n{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif(l[i] == x) \n\t\t{\n\t\t\tu[i] = l[i];\n\t\t}\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long x, int y) \n{\n\tlong[] u = new long[l.length];\n\tfor(int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == x && l[i] == y) \n\t\t{\n\t\t\
    \tu[i] = l[i];\n\t\t}\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int x, int\
    \ y) \n{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tif(l[i] == x && l[i] == y) \n\t\t{\n\t\t\tu[i] = l[i];\n\t\t}\n\t\
    }\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, long x, long y) \n{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] == x && l[i] == y) \n\t\
    \t{\n\t\t\tu[i] = l[i];\n\t\t}\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, int\
    \ x, int y, int z) \n{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i <\
    \ l.length; i++) \n\t{\n\t\tif(l[i] == x && l[i] == y && l[i] == z) \n\t\t{\n\t\
    \t\tu[i] = l[i];\n\t\t}\n\t}\n\tArrays.sort(u);", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n\
    \    Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a tags=c++,sorting,arrays\
    \ |>\n<| a tags=c++,sorting,arrays |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    using namespace std;", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end) \n{\n\tlong[] u = new long[end - start];\n\tfor (int i =\
    \ start; i < end; ++i)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step) \n{\n\tlong[] u = new long[end - start];\n\t\
    for (int i = start; i < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp) \n{\n\tlong[] u = new\
    \ long[end - start];\n\tfor (int i = start; i < end; i += step)\n\t\tu[i - start]\
    \ = l[i];\n\tArrays.sort(u, cmp);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp, long ord) \n{\n\tlong[] u = new long[end - start];\n\tfor (int i =\
    \ start; i < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp,\
    \ ord);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n       \
    \ \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp, long ord,\
    \ int len) \n{\n\tlong[] u = new long[end - start];\n\tfor (int i = start; i <\
    \ end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp, ord, len);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp, long ord, int len,\
    \ int step2) \n{\n\tlong[] u = new long[end - start];\n\tfor (int i = start; i\
    \ < end; i += step)\n\t\tu[i - start] = l[i];\n\tArrays.sort(u, cmp, ord, len,\
    \ step2);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n     \
    \   \n*/\n", "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n        u[i] = l[i];\n    Arrays.sort(u);\n    return u;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis is not the right solution. `unique` should return\
    \ `long[]` not `int[]`.\n<|/ c |>\n<| c |>\n: I know, but I thought that OP will\
    \ understand how to implement it himself.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that uses `Arrays.sort` which I believe is more efficient than your solution.\
    \ Also, your solution doesn't return unique elements, it returns unique indices.\
    \ If you want unique elements then you should use my solution.\n<|/ c |>\n<| c\
    \ |>\n: I added a solution that uses `Arrays.sort` which I believe is more efficient\
    \ than your solution. Also, your solution doesn't return unique elements, it returns\
    \ unique indices. If you want unique elements then you should use my solution.\n\
    <|/ c |>\n<| c |>\n: I added a solution that uses `Arrays.sort` which I believe\
    \ is more efficient than your solution. Also, your solution doesn't return unique\
    \ elements, it returns unique indices. If you want unique elements then you should\
    \ use my solution.\n<|/ c |>\n<| a tags=java,arrays |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\t\
    long[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; ++i)\n\t{\n\t\t\
    u[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tlong u_index = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int j\
    \ = 0; j < u.length; j++)\n\t\t{\n\t\t\tif (l[i] == u[j])\n\t\t\t{\n\t\t\t\tu_index++;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u_index == u.length)\n\t\t{\n\t\t\tu[u_index]\
    \ = l[i];\n\t\t\tu_index++;\n\t\t}\n\t}\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long key)\n{\n\tlong[]\
    \ u = new long[l.length];\n\tlong u_index = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < u.length; j++)\n\t\t{\n\t\t\tif (l[i] ==\
    \ u[j] && l[i] == key)\n\t\t\t{\n\t\t\t\tu_index++;\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t}\n\t\tif (u_index == u.length)\n\t\t{\n\t\t\tu[u_index] = l[i];\n\t\t\tu_index++;\n\
    \t\t}\n\t}\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n    \
    \    \n*/\nlong[] unique(long[] l, long key, long key_index)\n{\n\tlong[] u =\
    \ new long[l.length];\n\tlong u_index = 0;\n\tfor (int i = 0; i < l.length; i++)\n\
    \t{\n\t\tfor (int j = 0; j < u.length; j++)\n\t\t{\n\t\t\tif (l[i] == u[j] &&\
    \ l[i] == key && j == key_index)\n\t\t\t{\n\t\t\t\tu_index++;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (u_index == u.length)\n\t\t{\n\t\t\tu[u_index] = l[i];\n\
    \t\t\tu_index++;\n\t\t}\n\t}\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, long key, long key_index, long\
    \ key_index_2)\n{\n\tlong[] u = new long[l.length];\n\tlong u_index = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int j = 0; j < u.length; j++)\n\
    \t\t{\n\t\t\tif (l[i] == u[j] && l[i] == key && j == key_index && j == key_index_2)\n\
    \t\t\t{\n\t\t\t\tu_index++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u_index ==\
    \ u.length)\n\t\t{\n\t\t\tu[u_index] = l[i];\n\t\t\tu_index++;\n\t\t}\n\t}\n\t\
    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long key, long key_index, long key_index_2, long key_index_3)\n\
    {\n\tlong[] u = new long[l.length];\n\tlong ", "{\n\tlong h;\n\tlong[] u = new\
    \ long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\th = l[i];\n\t\
    \tfor(int j = i+1; j < l.length; j++)\n\t\t{\n\t\t\tif(h == l[j])\n\t\t\t\tbreak;\n\
    \t\t\telse\n\t\t\t\tu[j-1] = h;\n\t\t}\n\t}\n\treturn u;\n}", "{\n\tlong [] u\
    \ = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end) \n{\n\tlong[] u = new long[end - start];\n\
    \tfor (int i = start; i < end; i++) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp) \n{\n\tlong[] u = new long[end - start];\n\tfor (int i = start; i\
    \ < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp, long ord) \n{\n\tlong[]\
    \ u = new long[end - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\
    \t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp, ord);\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step, long cmp, long ord, int len) \n{\n\tlong[] u =\
    \ new long[end - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\t\
    u[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp, ord, len);\n\treturn u;\n}\n\
    /*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp, long ord, int len, int step2) \n\
    {\n\tlong[] u = new long[end - start];\n\tfor (int i = start; i < end; i += step)\
    \ \n\t{\n\t\tu[i - start] = l[i];\n", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        u[i] = l[i];\n    }\n \
    \   Arrays.sort(u);\n    return u;\n}", "{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        while(j\
    \ < result.length && l[i] == result[j])\n            j++;\n        result[j] =\
    \ l[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| a tags=sorting,arrays,java |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] a = {1, 2, 3, 4, 5};\n    Arrays.sort(a);\n    System.out.println(Arrays.toString(a));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value.\n<|/ c |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n\tlong[] result = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\
    \treturn result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, long key)\n{\n\tlong[] result = new long[l.length];\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tif (l[i] == key)\n\t\t\tresult[i] = l[i];\n\
    \tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, long key, int lo, int hi)\n\
    {\n\tlong[] result = new long[hi-lo+1];\n\tfor (int i = lo; i <= hi; i++)\n\t\t\
    if (l[i] == key)\n\t\t\tresult[i-lo] = l[i];\n\tArrays.sort(result);\n\treturn\
    \ result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long key, int lo, int hi, int len)\n{\n\tlong[] result = new\
    \ long[len];\n\tfor (int i = lo; i <= hi; i++)\n\t\tif (l[i] == key)\n\t\t\tresult[i-lo]\
    \ = l[i];\n\tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long key, int lo,\
    \ int hi, int len, int stride)\n{\n\tlong[] result = new long[len];\n\tfor (int\
    \ i = lo; i <= hi; i++)\n\t\tif (l[i] == key)\n\t\t\tresult[i-lo] = l[i];\n\t\
    Arrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted unique elements in\
    \ a list\n        \n*/\nlong[] unique(long[] l, long key, int lo, int hi, int\
    \ len, int stride, int count)\n{\n\tlong[] result = new long[len];\n\tfor (int\
    \ i = lo; i <= hi; i++)\n\t\tif (l[i] == key)\n\t\t\tresult[i-lo] = l[i];\n\t\
    Arrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted unique elements in\
    \ a list\n        \n*/\nlong[] unique(long[] l, long key, int lo, int hi, int\
    \ len, int stride, int count, int stride2)\n{\n\tlong[] result = new long[len];\n\
    \tfor (int i = lo; i <= hi; i++)\n\t\tif (l[i] == key)\n\t\t\tresult[i-lo] = l[i];\n\
    \tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, long key, int lo, int hi, int\
    \ len, int stride, int count, int stride", "{\n\tlong[] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] result = new long[l.length];\n\tfor(int i = 0; i\
    \ < l.length; ++i)\n\t{\n\t\tint j;\n\t\tfor(j = 0; j < i; ++j)\n\t\t{\n\t\t\t\
    if(l[j] == l[i])\n\t\t\t\tbreak;\n\t\t}\n\t\tif(j == i)\n\t\t\tresult[i] = l[i];\n\
    \t\telse\n\t\t{\n\t\t\tint k;\n\t\t\tfor(k = i; k < j; ++k)\n\t\t\t\tresult[k]\
    \ = l[k];\n\t\t\tresult[j] = l[i];\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tlong[]\
    \ u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tu[i] = l[i];\n\
    \tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u;\n\tu = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < l.length;\
    \ j++) \n\t\t{\n\t\t\tif (l[i] > l[j]) \n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\
    \t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < l.length; j++) \n\t\
    \t{\n\t\t\tif (l[i] == l[j]) \n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i]\
    \ = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn l;\n}", "{\n  \
    \  long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n  \
    \  {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}", "{\n\
    \    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n \
    \       u[i] = l[i];\n    Arrays.sort(u);\n    return u;\n}", "{\n\tlong [] u\
    \ = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tu[i] =\
    \ l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end) \n{\n\t\
    long [] u = new long[end - start];\n\tfor (int i = start; i < end; i++)\n\t{\n\
    \t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step) \n{\n\tlong [] u = new long[end - start];\n\tfor (int i =\
    \ start; i < end; i += step)\n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp) \n{\n\tlong [] u =\
    \ new long[end - start];\n\tfor (int i = start; i < end; i += step)\n\t{\n\t\t\
    u[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, int\
    \ start, int end, int step, long cmp, long ord) \n{\n\tlong [] u = new long[end\
    \ - start];\n\tfor (int i = start; i < end; i += step)\n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u, cmp, ord);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp, long ord, int len) \n{\n\tlong [] u = new long[end\
    \ - start];\n\tfor (int i = start; i < end; i += step)\n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u, cmp, ord, len);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp, long ord, int len, int stride) \n{\n\tlong [] u\
    \ = new long[end - start];\n\tfor (int i = start; i < end; i += step)\n\t{\n\t\
    \tu[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp", "{\n    long[] u = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        u[i] = l[i];\n    }\n \
    \   Arrays.sort(u);\n    return u;\n}\n</code>\n<|/ a tags=c++,sorting,arrays\
    \ |>\n<| a tags=c++,sorting,arrays |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    using namespace std;", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}", "{\n\tlong[] result = new long[l.length];\n\t\n\tfor(int i = 0; i <\
    \ l.length; i++) \n\t{\n\t\tint j = i;\n\t\twhile(j > 0 && l[j-1] > l[j]) \n\t\
    \t{\n\t\t\tresult[j] = l[j-1];\n\t\t\tj--;\n\t\t}\n\t\tresult[j] = l[j];\n\t}\n\
    \t\n\treturn result;\n}", "{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor (int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j = 0; j < u.length; j++) \n\t\
    \t{\n\t\t\tif (l[i] == u[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif\
    \ (j == u.length) \n\t\t{\n\t\t\tu[i] = l[i];\n\t\t}\n\t}\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ long x) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tfor (int j = 0; j < u.length; j++) \n\t\t{\n\t\t\tif (l[i] ==\
    \ u[j] && l[i] == x) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == u.length)\
    \ \n\t\t{\n\t\t\tu[i] = l[i];\n\t\t}\n\t}\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long x, long y) \n\
    {\n\tlong[] u;\n\tu = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tfor (int j = 0; j < u.length; j++) \n\t\t{\n\t\t\tif (l[i] == u[j]\
    \ && l[i] == x && l[i] == y) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif\
    \ (j == u.length) \n\t\t{\n\t\t\tu[i] = l[i];\n\t\t}\n\t}\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ long x, long y, long z) \n{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor (int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j = 0; j < u.length; j++) \n\t\
    \t{\n\t\t\tif (l[i] == u[j] && l[i] == x && l[i] == y && l[i] == z) \n\t\t\t{\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == u.length) \n\t\t{\n\t\t\tu[i] = l[i];\n\
    \t\t}\n\t}\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n    \
    \    \n*/\nlong[] unique(long[] l, long x, long y, long z, long w) \n{\n\tlong[]\
    \ u;\n\tu = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\
    \tfor (int j = 0; j < u.length; j++) \n\t\t{\n\t\t\tif (l[i] == u[j] && l[i] ==\
    \ x && l[i] == y && l[i] == z && l[i] == w) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t\tif (j", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long[] u) \n{\n\tlong[] result = new long[u.length];\n\tfor(int i = 0; i\
    \ < u.length; i++) \n\t{\n\t\tresult[i] = l[u.length - i - 1];\n\t}\n\tArrays.sort(result);\n\
    \treturn result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, long[] u, long[] v) \n{\n\tlong[] result = new long[u.length];\n\
    \tfor(int i = 0; i < u.length; i++) \n\t{\n\t\tresult[i] = l[u.length - i - 1];\n\
    \t}\n\tArrays.sort(result);\n\treturn result;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, long[] u, long[] v, long[]\
    \ w) \n{\n\tlong[] result = new long[u.length];\n\tfor(int i = 0; i < u.length;\
    \ i++) \n\t{\n\t\tresult[i] = l[u.length - i - 1];\n\t}\n\tArrays.sort(result);\n\
    \treturn result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, long[] u, long[] v, long[] w, long[] x) \n{\n\tlong[]\
    \ result = new long[u.length];\n\tfor(int i = 0; i < u.length; i++) \n\t{\n\t\t\
    result[i] = l[u.length - i - 1];\n\t}\n\tArrays.sort(result);\n\treturn result;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long[] u, long[] v, long[] w, long[] x, long[] y) \n{\n\tlong[] result =\
    \ new long[u.length];\n\tfor(int i = 0; i < u.length; i++) \n\t{\n\t\tresult[i]\
    \ = l[u.length - i - 1];\n\t}\n\tArrays.sort(result);\n\treturn result;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ long[] u, long[] v, long[] w, long[] x, long[] y, long[] z) \n{\n\tlong[] result\
    \ = new long[u.length];\n\tfor(int i = 0; i < u.length; i++) \n\t{\n\t\tresult[i]\
    \ = l[u.length - i - 1];\n\t}\n\tArrays.sort(result);\n\treturn result;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/", "{\n\tlong [] u = new\
    \ long[l.length];\n\tfor (int i = 0; i < l.length; ++i)\n\t{\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, long[] u) \n{\n\tlong [] u = new\
    \ long[l.length];\n\tfor (int i = 0; i < l.length; ++i)\n\t{\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, long[] u, long[] v) \n{\n\tlong\
    \ [] u = new long[l.length];\n\tfor (int i = 0; i < l.length; ++i)\n\t{\n\t\t\
    u[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long[] u, long[] v,\
    \ long[] w) \n{\n\tlong [] u = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, long[]\
    \ u, long[] v, long[] w, long[] x) \n{\n\tlong [] u = new long[l.length];\n\t\
    for (int i = 0; i < l.length; ++i)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long[] u, long[] v, long[] w, long[] x, long[] y) \n{\n\tlong\
    \ [] u = new long[l.length];\n\tfor (int i = 0; i < l.length; ++i)\n\t{\n\t\t\
    u[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, long[] u, long[] v,\
    \ long[] w, long[] x, long[] y, long[] z) \n{\n\tlong [] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long[] u, long[] ", "{\n\tlong result[] = new long[l.length];\n\
    \tlong temp;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tfor (int j = i+1;\
    \ j < l.length; j++)\n\t\t{\n\t\t\tif (l[i] > l[j])\n\t\t\t{\n\t\t\t\ttemp = l[i];\n\
    \t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i\
    \ = 0; i < l.length; i++)\n\t{\n\t\tresult[i] = l[i];\n\t}\n\tArrays.sort(result);\n\
    \treturn result;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}", "{\n\tlong h;\n\tlong[] u;\n\t\n\tu = new long[l.length];\n\t\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\th = l[i];\n\t\tfor (int j = i + 1;\
    \ j < l.length; j++) \n\t\t{\n\t\t\tif (h == l[j]) \n\t\t\t{\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tu[j] = h;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\
    return u;\n}", "{\n\tlong[] u = new long[l.length];\n\tlong ux = 0;\n\tlong uy\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tux = l[i];\n\t\tuy = ux;\n\
    \t\tfor (int j = i + 1; j < l.length; j++)\n\t\t{\n\t\t\tif (l[j] == ux)\n\t\t\
    \t{\n\t\t\t\tux = l[j];\n\t\t\t\tuy = ux;\n\t\t\t}\n\t\t}\n\t\tu[uy] = ux;\n\t\
    }\n\treturn u;\n}", "{\n\tlong[] u;\n\tu = new long[l.length];\n\tfor(int i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int n) \n{\n\tlong[] u;\n\tu = new long[n];\n\tfor(int i = 0; i < n; i++)\
    \ \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, long\
    \ n) \n{\n\tlong[] u;\n\tu = new long[n];\n\tfor(int i = 0; i < n; i++) \n\t{\n\
    \t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int n, long m) \n\
    {\n\tlong[] u;\n\tu = new long[n];\n\tfor(int i = 0; i < n; i++) \n\t{\n\t\tu[i]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, long n, long m) \n{\n\tlong[]\
    \ u;\n\tu = new long[n];\n\tfor(int i = 0; i < n; i++) \n\t{\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, int n, long m, long n) \n{\n\tlong[]\
    \ u;\n\tu = new long[n];\n\tfor(int i = 0; i < n; i++) \n\t{\n\t\tu[i] = l[i];\n\
    \t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a\
    \ list\n        \n*/\nlong[] unique(long[] l, long n, long m, long n) \n{\n\t\
    long[] u;\n\tu = new long[n];\n\tfor(int i = 0; i < n; i++) \n\t{\n\t\tu[i] =\
    \ l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int n, long m, long n, long\
    \ m) \n{\n\tlong[] u;\n\tu = new long[n];\n\tfor(int i = 0; i < n; i++) \n", "{\n\
    \    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n</code>\n\
    <|/ a tags=arrays,c#,sorting,algorithm |>\n<| c |>\nThis is not the fastest solution,\
    \ since it sorts the entire array every time. Sorting only once is better.\n<|/\
    \ c |>\n<| c |>\nSorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better than sorting every time. Sorting only once is better than\
    \ sorting every time. Sorting only once is better than sorting every time. Sorting\
    \ only once is better ", "{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        long x = l[i];\n        for(int j\
    \ = i; j < l.length; ++j)\n        {\n            if(l[j] == x)\n            {\n\
    \                res[j-1] = x;\n                break;\n            }\n      \
    \  }\n    }\n    return res;\n}", "{\n\tlong[] res = new long[l.length];\n\tfor(int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tint j = i;\n\t\twhile(j > 0 && l[j-1] >\
    \ l[j]) \n\t\t{\n\t\t\tres[j] = l[j-1];\n\t\t\tj--;\n\t\t}\n\t\tres[j] = l[j];\n\
    \t}\n\treturn res;\n}\n/*\nReturn sorted unique elements in a list\n        \n\
    */\nlong[] unique(long[] l, int start, int end) \n{\n\tlong[] res = new long[end-start+1];\n\
    \tfor(int i = start; i < end; i++) \n\t{\n\t\tint j = i;\n\t\twhile(j > 0 && l[j-1]\
    \ > l[j]) \n\t\t{\n\t\t\tres[j] = l[j-1];\n\t\t\tj--;\n\t\t}\n\t\tres[j] = l[j];\n\
    \t}\n\treturn res;\n}\n/*\nReturn sorted unique elements in a list\n        \n\
    */\nlong[] unique(long[] l, int start, int end, int step) \n{\n\tlong[] res =\
    \ new long[end-start+1];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\t\
    int j = i;\n\t\twhile(j > 0 && l[j-1] > l[j]) \n\t\t{\n\t\t\tres[j] = l[j-1];\n\
    \t\t\tj--;\n\t\t}\n\t\tres[j] = l[j];\n\t}\n\treturn res;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp) \n{\n\tlong[] res = new long[end-start+1];\n\t\
    for(int i = start; i < end; i += step) \n\t{\n\t\tint j = i;\n\t\twhile(j > 0\
    \ && l[j-1] > l[j] && (cmp(l[j-1], l[j]) < 0)) \n\t\t{\n\t\t\tres[j] = l[j-1];\n\
    \t\t\tj--;\n\t\t}\n\t\tres[j] = l[j];\n\t}\n\treturn res;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp, long ord) \n{\n\tlong[] res = new long[end-start+1];\n\
    \tfor(int i = start; i < end; i += step) \n\t{\n\t\tint j = i;\n\t\twhile(j >\
    \ 0 && l[j-1] > l[j] && (cmp(l[j-1], l[j]) < 0) && (ord(l[j-1], l[j]) < 0)) \n\
    \t\t{\n\t\t\tres[j] = l[j-1];\n\t\t\tj--;\n\t\t}\n\t\tres[j] = l[j];\n\t}\n\t\
    return res;\n}\n/*\nReturn ", "{\n\tlong[] u = new long[l.length];\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n\
    }", "{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n        result[i] = l[i];\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,sorting,arrays |>\n<| c |>\nThis is not the most efficient\
    \ way to solve the problem. Using a hash table would be more efficient.\n<|/ c\
    \ |>\n<| c |>\nI agree with you, however I didn't want to rewrite his code from\
    \ scratch. He could easily adapt it to his needs.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but I wanted to give him a solution that he could easily adapt to\
    \ his needs.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to give him a\
    \ solution that he could easily adapt to his needs.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but I wanted to give him a solution that he could easily adapt to\
    \ his needs.\n<|/ c |>\n<| a tags=c#,sorting,arrays |>\n<code>\npublic static\
    \ int[] SortArray(int[] array)\n{\n    int[] result = new int[array.Length];\n\
    \    Array.Sort(array);\n    for(int i = 0; i < array.Length; i++)\n    {\n  \
    \      result[i] = array[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis is not the most efficient way to solve the problem. Using\
    \ a hash table would be more efficient.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ however I didn't want to rewrite his code from scratch. He could easily adapt\
    \ it to his needs.\n<|/ c |>\n<| c |>\nI agree with you, but I wanted to give\
    \ him a solution that he could easily adapt to his needs.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I wanted to give him a solution that he could easily adapt\
    \ to his needs.\n<|/ c |>\n<| a tags=c#,sorting,arrays |>\n<code>", "{\n\tlong[]\
    \ u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end) \n{\n\t\
    long[] u = new long[end - start];\n\tfor(int i = start; i < end; i++) \n\t{\n\t\
    \tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start;\
    \ i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp) \n{\n\tlong[] u = new\
    \ long[end - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i\
    \ - start] = l[i];\n\t}\n\tArrays.sort(u, cmp);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int start,\
    \ int end, int step, long cmp, long ord) \n{\n\tlong[] u = new long[end - start];\n\
    \tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\
    \tArrays.sort(u, cmp, ord);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp, long ord, int sz) \n{\n\tlong[] u = new long[end - start];\n\tfor(int\
    \ i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u,\
    \ cmp, ord, sz);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp,\
    \ long ord, int sz, long ord2) \n{\n\tlong[] u = new long[end - start];\n\tfor(int\
    \ i = start; i < end; i += step) \n\t{\n\t\tu[i - start] = l", "{\n    long[]\
    \ u = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n    \
    \    u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}", "{\n\tlong[]\
    \ u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] result = new\
    \ long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t\tresult[i] = l[i];\n\
    \tArrays.sort(result);\n\treturn result;\n}", "{\n\tlong temp;\n\tlong[] u = new\
    \ long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tfor (int j\
    \ = i+1; j < l.length; j++) \n\t\t{\n\t\t\tif (l[i] > l[j]) \n\t\t\t{\n\t\t\t\t\
    temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t\t\
    u[i] = l[i];\n\t}\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\t\
    return u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\t\
    long[] u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t\tu[i]\
    \ = l[i];\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong result[] = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\
    \treturn result;\n}", "{\n\tlong[] result = new long[l.length];\n\tlong last =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] != last) \n\t\t\
    {\n\t\t\tlast = l[i];\n\t\t\tresult[i] = last;\n\t\t}\n\t}\n\treturn result;\n\
    }", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[]\
    \ u = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\t\
    long[] result = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t\
    {\n\t\tfor (int j = i + 1; j < l.length; j++) \n\t\t{\n\t\t\tif (l[i] < l[j])\
    \ \n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tresult[i]\
    \ = l[i];\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end) \n{\n\tlong[] result\
    \ = new long[end - start];\n\tfor (int i = start; i < end; i++) \n\t{\n\t\tfor\
    \ (int j = i + 1; j < end; j++) \n\t\t{\n\t\t\tif (l[i] < l[j]) \n\t\t\t{\n\t\t\
    \t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\
    \t}\n\t}\n\tfor (int i = start; i < end; i++) \n\t{\n\t\tresult[i] = l[i];\n\t\
    }\n\treturn result;\n}\n/*\nReturn sorted unique elements in a list\n        \n\
    */\nlong[] unique(long[] l, int start, int end, int step) \n{\n\tlong[] result\
    \ = new long[end - start];\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\
    \tfor (int j = i + 1; j < end; j += step) \n\t\t{\n\t\t\tif (l[i] < l[j]) \n\t\
    \t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor (int i = start; i < end; i += step) \n\t{\n\t\tresult[i]\
    \ = l[i];\n\t}\n\treturn result;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, int start, int end, int step, long cmp)\
    \ \n{\n\tlong[] result = new long[end - start];\n\tfor (int i = start; i < end;\
    \ i += step) \n\t{\n\t\tfor (int j = i + 1; j < end; j += step) \n\t\t{\n\t\t\t\
    if (cmp(l[i], l[j]) < 0) \n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] =\
    \ l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = start; i <\
    \ end; i += step) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\treturn result;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step, long cmp, long ord) \n{\n\tlong[] result = new\
    \ long[end - start];\n", "{\n    long[] result = new long[l.length];\n    std.sort(l);\n\
    \    for(int i = 0; i < l.length; i++)\n        result[i] = l[i];\n    return\
    \ result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end) \n{\n    long[] result = new long[end -\
    \ start];\n    std.sort(l, start, end);\n    for(int i = start; i < end; i++)\n\
    \        result[i - start] = l[i];\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step) \n{\n    long[] result = new long[end - start];\n    std.sort(l, start,\
    \ end, step);\n    for(int i = start; i < end; i += step)\n        result[i -\
    \ start] = l[i];\n    return result;\n}\n/*\nReturn sorted unique elements in\
    \ a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp) \n{\n    long[] result = new long[end - start];\n    std.sort(l, start,\
    \ end, step, cmp);\n    for(int i = start; i < end; i += step)\n        result[i\
    \ - start] = l[i];\n    return result;\n}\n/*\nReturn sorted unique elements in\
    \ a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp, long ord) \n{\n    long[] result = new long[end - start];\n    std.sort(l,\
    \ start, end, step, cmp, ord);\n    for(int i = start; i < end; i += step)\n \
    \       result[i - start] = l[i];\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements in a list\n        \n*/\nlong[] unique(long[] l, int start, int end,\
    \ int step, long cmp, long ord, int step2) \n{\n    long[] result = new long[end\
    \ - start];\n    std.sort(l, start, end, step, cmp, ord, step2);\n    for(int\
    \ i = start; i < end; i += step)\n        result[i - start] = l[i];\n    return\
    \ result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp, long ord, int step2,\
    \ int step3) \n{\n    long[] result = new long[end - start];\n    std.sort(l,\
    \ start, end, step, cmp, ord, step2, step3);\n    for(int i = start; i < end;\
    \ i += step)\n        result[i - start] = l[i];\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique", "{\n\tlong[]\
    \ result = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\t\
    int j = 0;\n\t\tfor(; j < i; j++) \n\t\t{\n\t\t\tif(l[j] == l[i]) \n\t\t\t{\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult[i] = l[j];\n\t}\n\treturn result;\n}",
  "{\n\tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t\
    {\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong [] u\
    \ = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tu[i]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, long x) \n{\n\tlong [] u =\
    \ new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i]\
    \ == x) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long x, long y) \n{\n\tlong [] u = new long[l.length];\n\t\
    for (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == x || l[i] == y) \n\t\
    \t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long x, long y, long z) \n{\n\tlong [] u = new long[l.length];\n\tfor (int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == x || l[i] == y || l[i] == z)\
    \ \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\t\
    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long x, long y, long z, long w) \n{\n\tlong [] u = new long[l.length];\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] == x || l[i] == y ||\
    \ l[i] == z || l[i] == w) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\t\
    }\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements in a list\n\
    \        \n*/\nlong[] unique(long[] l, long x, long y, long z, long w, long x)\
    \ \n{\n\tlong [] u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tif (l[i] == x || l[i] == y || l[i] == z || l[i] == w || l[i] == x)\
    \ \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\t\
    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long ", "{\n\tlong[] result = new long[l.length];\n\tlong prev\
    \ = 0;\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] != prev)\n\t\t{\n\
    \t\t\tresult[i] = l[i];\n\t\t\tprev = l[i];\n\t\t}\n\t}\n\treturn result;\n}",
  "{\n    long[] u = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}", "{\n\
    \tlong[] u = new long[l.length];\n\tlong uidx = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tlong v = l[i];\n\t\twhile (uidx < u.length && u[uidx] == v)\
    \ \n\t\t{\n\t\t\tuidx++;\n\t\t}\n\t\tif (uidx == u.length) \n\t\t{\n\t\t\tu[uidx]\
    \ = v;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tu[uidx] = v;\n\t\t\tfor (int j = i+1; j\
    \ < l.length; j++) \n\t\t\t{\n\t\t\t\tif (l[j] == v) \n\t\t\t\t{\n\t\t\t\t\tfor\
    \ (int k = j; k < u.length; k++) \n\t\t\t\t\t{\n\t\t\t\t\t\tu[k] = u[k+1];\n\t\
    \t\t\t\t}\n\t\t\t\t\tu[uidx] = v;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn u;\n}", "{\n\tlong [] u = new long[l.length];\n\tfor(int i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn\
    \ u;\n}", "{\n    long[] u;\n    u = new long[l.length];\n    for(int i = 0; i\
    \ < l.length; i++) \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, int n) \n{\n    long[] u;\n    u = new long[n];\n    for(int\
    \ i = 0; i < n; i++) \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, int n, int m) \n{\n    long[] u;\n    u = new long[m];\n\
    \    for(int i = 0; i < m; i++) \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, int n, int m, int n) \n{\n    long[] u;\n    u = new long[n];\n\
    \    for(int i = 0; i < n; i++) \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n\
    \    return u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, int n, int m, int n, int m) \n{\n    long[] u;\n    u\
    \ = new long[m];\n    for(int i = 0; i < m; i++) \n    {\n        u[i] = l[i];\n\
    \    }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int n, int m, int n, int m,\
    \ int n) \n{\n    long[] u;\n    u = new long[n];\n    for(int i = 0; i < n; i++)\
    \ \n    {\n        u[i] = l[i];\n    }\n    Arrays.sort(u);\n    return u;\n}\n\
    /*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int n, int m, int n, int m, int m, int n) \n{\n    long[] u;\n    u = new\
    \ long[m];\n    for(int i = 0; i < m; i++) \n    {\n        u[i] = l[i];\n   \
    \ }\n    Arrays.sort(u);\n    return u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int n, int m, int n, int m,\
    \ int m, int n, int m) \n{\n    long[] u;\n    u = new long[n", "{\n\tlong[] u\
    \ = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] =\
    \ l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}", "{\n\tlong[] u = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end) \n{\n\tlong[] u = new long[end - start];\n\
    \tfor(int i = start; i < end; i++) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step) \n{\n\tlong[] u = new long[end\
    \ - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\tu[i - start]\
    \ = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int start, int end, int step,\
    \ long cmp) \n{\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i <\
    \ end; i += step) \n\t{\n\t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int start, int end, int step, long cmp, long ord) \n{\n\tlong[]\
    \ u = new long[end - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\
    \t\tu[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp, ord);\n\treturn u;\n}\n/*\n\
    Return sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l,\
    \ int start, int end, int step, long cmp, long ord, int size) \n{\n\tlong[] u\
    \ = new long[end - start];\n\tfor(int i = start; i < end; i += step) \n\t{\n\t\
    \tu[i - start] = l[i];\n\t}\n\tArrays.sort(u, cmp, ord, size);\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step, long cmp, long ord, int size, int step2) \n\
    {\n\tlong[] u = new long[end - start];\n\tfor(int i = start; i < end; i += step)\
    \ \n\t{\n\t\tu[i - start] = l[i];\n", "{\n\tlong[] u;\n\tu = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\
    \treturn u;\n}", "{\n\tlong [] u = new long[l.length];\n\tlong [] u2 = new long[l.length];\n\
    \tint i = 0;\n\tfor (int j = 0; j < l.length; j++) \n\t{\n\t\tu[i] = l[j];\n\t\
    \ti++;\n\t}\n\tfor (int j = 0; j < l.length; j++) \n\t{\n\t\tfor (int k = 0; k\
    \ < l.length; k++) \n\t\t{\n\t\t\tif (u[j] == u[k]) \n\t\t\t{\n\t\t\t\tu2[j] =\
    \ u[k];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn u2;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, long [] u)\
    \ \n{\n\tlong [] u2 = new long[l.length];\n\tint i = 0;\n\tfor (int j = 0; j <\
    \ l.length; j++) \n\t{\n\t\tu2[i] = l[j];\n\t\ti++;\n\t}\n\tfor (int j = 0; j\
    \ < l.length; j++) \n\t{\n\t\tfor (int k = 0; k < l.length; k++) \n\t\t{\n\t\t\
    \tif (u[j] == u[k]) \n\t\t\t{\n\t\t\t\tu2[j] = u[k];\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn u2;\n}\n/*\nReturn sorted unique elements in a list\n   \
    \     \n*/\nlong[] unique(long[] l, long [] u, long [] u2) \n{\n\tlong [] u3 =\
    \ new long[l.length];\n\tint i = 0;\n\tfor (int j = 0; j < l.length; j++) \n\t\
    {\n\t\tu3[i] = l[j];\n\t\ti++;\n\t}\n\tfor (int j = 0; j < l.length; j++) \n\t\
    {\n\t\tfor (int k = 0; k < l.length; k++) \n\t\t{\n\t\t\tif (u[j] == u[k]) \n\t\
    \t\t{\n\t\t\t\tu3[j] = u[k];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn u3;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long [] u, long [] u2, long [] u3) \n{\n\tlong [] u4 = new long[l.length];\n\
    \tint i = 0;\n\tfor (int j = 0; j < l.length; j++) \n\t{\n\t\tu4[i] = l[j];\n\t\
    \ti++;\n\t}\n\tfor (int j = 0; j < l.length; j++) \n\t{\n\t\tfor (int k = 0; k\
    \ < l.length; k++) \n\t\t{\n\t\t\tif (u[j] == u[k]) \n\t\t\t{\n\t\t\t\tu4[j] =\
    \ u[k];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn u4;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, long [] u,\
    \ long [] ", "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i <\
    \ l.length; i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\treturn result;\n\
    }", "{\n\tlong[] result = new long[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tint j = 0;\n\t\tfor(; j < i; j++) \n\t\t{\n\t\t\tif(l[j] ==\
    \ l[i]) \n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresult[i] = l[j];\n\t}\n\
    \treturn result;\n}", "{\n\tlong[] u = new long[l.length];\n\tfor(int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\treturn u;\n\
    }", "{\n\tlong[] result = new long[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tresult[i] = l[i];\n\tArrays.sort(result);\n\treturn result;\n}", "{\n\
    \tlong[] u = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t\tu[i]\
    \ = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, int n) \n{\n\tlong[] u = new\
    \ long[n];\n\tfor (int i = 0; i < n; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, long n) \n{\n\tlong[] u = new long[n];\n\tfor (int i = 0; i\
    \ < n; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted\
    \ unique elements in a list\n        \n*/\nlong[] unique(long[] l, int n, long\
    \ m) \n{\n\tlong[] u = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t\tu[i] =\
    \ l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn sorted unique elements\
    \ in a list\n        \n*/\nlong[] unique(long[] l, long n, long m) \n{\n\tlong[]\
    \ u = new long[n];\n\tfor (int i = 0; i < n; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\
    \treturn u;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[]\
    \ unique(long[] l, int n, long m, long n) \n{\n\tlong[] u = new long[n];\n\tfor\
    \ (int i = 0; i < n; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, long n, long m, long n) \n{\n\tlong[] u = new long[n];\n\tfor (int i = 0;\
    \ i < n; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, int\
    \ n, long m, long n, long m) \n{\n\tlong[] u = new long[n];\n\tfor (int i = 0;\
    \ i < n; i++)\n\t\tu[i] = l[i];\n\tArrays.sort(u);\n\treturn u;\n}\n/*\nReturn\
    \ sorted unique elements in a list\n        \n*/\nlong[] unique(long[] l, long\
    \ n, long m, long n, long m) \n{\n\tlong[] u = new long[n];\n\tfor (int i = 0;\
    \ i < n; i++)\n\t\tu[i] = l", "{\n\tlong[] u = new long[l.length];\n\tfor(int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tu[i] = l[i];\n\t}\n\tArrays.sort(u);\n\t\
    return u;\n}", "{\n\tlong[] result = new long[l.length];\n\tfor(int i = 0; i <\
    \ l.length; i++) \n\t{\n\t\tfor(int j = i + 1; j < l.length; j++) \n\t\t{\n\t\t\
    \tif(l[i] == l[j]) \n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] = l[j];\n\
    \t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tresult[i] = l[i];\n\t}\n\tArrays.sort(result);\n\treturn result;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end) \n{\n\tlong[] result = new long[end - start];\n\tfor(int\
    \ i = start; i < end; i++) \n\t{\n\t\tfor(int j = i + 1; j < end; j++) \n\t\t\
    {\n\t\t\tif(l[i] == l[j]) \n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i] =\
    \ l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = start; i < end;\
    \ i++) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\tArrays.sort(result);\n\treturn result;\n\
    }\n/*\nReturn sorted unique elements in a list\n        \n*/\nlong[] unique(long[]\
    \ l, int start, int end, int step) \n{\n\tlong[] result = new long[end - start];\n\
    \tfor(int i = start; i < end; i += step) \n\t{\n\t\tfor(int j = i + 1; j < end;\
    \ j += step) \n\t\t{\n\t\t\tif(l[i] == l[j]) \n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\
    \t\t\t\tl[i] = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i =\
    \ start; i < end; i += step) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\tArrays.sort(result);\n\
    \treturn result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, int start, int end, int step, long cmp) \n{\n\tlong[]\
    \ result = new long[end - start];\n\tfor(int i = start; i < end; i += step) \n\
    \t{\n\t\tfor(int j = i + 1; j < end; j += step) \n\t\t{\n\t\t\tif(l[i] == l[j]\
    \ && cmp(l[i], l[j]) == 0) \n\t\t\t{\n\t\t\t\tlong temp = l[i];\n\t\t\t\tl[i]\
    \ = l[j];\n\t\t\t\tl[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = start; i <\
    \ end; i += step) \n\t{\n\t\tresult[i] = l[i];\n\t}\n\tArrays.sort(result);\n\t\
    return result;\n}\n/*\nReturn sorted unique elements in a list\n        \n*/\n\
    long[] unique(long[] l, int start, int end, "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
