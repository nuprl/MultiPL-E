language: d
name: HumanEval_62_derivative
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i);\n    }\n    return new long[]{res};\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double res = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * derivative(xs,\
    \ i);\n    }\n    return new double[]{res};\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i);\n    }\n    return new float[]{res};\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp4sqnjai.d(16): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpp4sqnjai.d(16): Error: found `}` when expecting `;` following statement

    /tmp/tmpp4sqnjai.d(16): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpp4sqnjai.d(31): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpp4sqnjai.d(31): Error: found `}` when expecting `;` following statement

    /tmp/tmpp4sqnjai.d(31): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpp4sqnjai.d(46): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpp4sqnjai.d(46): Error: found `}` when expecting `;` following statement

    /tmp/tmpp4sqnjai.d(46): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp4sqnjai.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n    {\n        ys[i] = xs[i] * derivative(xs, 0, n - 1);\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int start,\
    \ int end) \n{\n    int n = end - start;\n    long[] ys = new long[n];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        ys[i] = xs[i] * derivative(xs, start,\
    \ i - 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int start)\
    \ \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        ys[i] = xs[i] * derivative(xs, start, n - 1);\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs) \n{\n    int\
    \ n = xs.length;\n    long[] ys = new long[n];\n    for(int i = 0; i < n; i++)\n\
    \    {\n        ys[i] = xs[i] * derivative(xs, 0, n - 1);\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int start, int end) \n{\n    int\
    \ n = end - start;\n    long[] ys = new long[n];\n    for(int i = start; i < end;\
    \ i++)\n    {\n        ys[i] = xs[i] * derivative(xs, start, i - 1);\n    }\n\
    \    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int start)\
    \ \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        ys[i] = xs[i] * derivative(xs, start, n - 1);\n\
    \    }\n    return ys;\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2wyxbao.d(98): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2wyxbao.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[result.length +\
    \ 1];\n    result[0] = result;\n    for(int i = 1; i < result.length; i++)\n \
    \   {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    double[] result = new double[result.length + 1];\n    result[0] = result;\n\
    \    for(int i = 1; i < result.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] result = new float[result.length\
    \ + 1];\n    result[0] = result;\n    for(int i = 1; i < result.length; i++)\n\
    \    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkneu1a0b.d(16): Error: no property `length` for type `long`

    /tmp/tmpkneu1a0b.d(16): Error: declaration `tmpkneu1a0b.derivative.result` is
    already defined

    /tmp/tmpkneu1a0b.d(17): Error: only one index allowed to index `long`

    /tmp/tmpkneu1a0b.d(18): Error: no property `length` for type `long`

    /tmp/tmpkneu1a0b.d(20): Error: only one index allowed to index `long`

    /tmp/tmpkneu1a0b.d(22): Error: cannot implicitly convert expression `result` of
    type `long` to `long[]`

    /tmp/tmpkneu1a0b.d(37): Error: no property `length` for type `double`

    /tmp/tmpkneu1a0b.d(37): Error: declaration `tmpkneu1a0b.derivative.result` is
    already defined

    /tmp/tmpkneu1a0b.d(38): Error: only one index allowed to index `double`

    /tmp/tmpkneu1a0b.d(39): Error: no property `length` for type `double`

    /tmp/tmpkneu1a0b.d(41): Error: only one index allowed to index `double`

    /tmp/tmpkneu1a0b.d(43): Error: cannot implicitly convert expression `result` of
    type `double` to `double[]`

    /tmp/tmpkneu1a0b.d(58): Error: no property `length` for type `fl'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d *= xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n    result[0]\
    \ = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d *= xs[i];\n    }\n    double[] result = new double[xs.length + 1];\n\
    \    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] result = new float[xs.length + 1];\n \
    \   result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyq26bqcb.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpyq26bqcb.__unittest_L72_C1() [0x428f72]

    ??:? void tmpyq26bqcb.__modtest() [0x42925c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9d5]

    ??:? runModuleUnitTests [0x42d941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d += xs[i] * xs[i];\n    }\n    return long[] {d, 1};\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double d = 0;\n    for(int i = 0; i\
    \ < xs.length; i++)\n    {\n        d += xs[i] * xs[i];\n    }\n    return double[]\
    \ {d, 1};\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    float d = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        d += xs[i] * xs[i];\n\
    \    }\n    return float[] {d, 1};\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5mkwqs08.d(16): Error: found `[` when expecting `.` following long

    /tmp/tmp5mkwqs08.d(16): Error: found `]` when expecting identifier following `long`.

    /tmp/tmp5mkwqs08.d(16): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp5mkwqs08.d(16): Error: found `}` when expecting `;` following statement

    /tmp/tmp5mkwqs08.d(16): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp5mkwqs08.d(31): Error: found `[` when expecting `.` following double

    /tmp/tmp5mkwqs08.d(31): Error: found `]` when expecting identifier following `double`.

    /tmp/tmp5mkwqs08.d(31): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp5mkwqs08.d(31): Error: found `}` when expecting `;` following statement

    /tmp/tmp5mkwqs08.d(31): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp5mkwqs08.d(46): Error: found `[` when expecting `.` following float

    /tmp/tmp5mkwqs08.d(46): Error: found `]` when expecting identifier following `float`.

    /tmp/tmp5mkwqs08.d(46): Error: found `{` w'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n        result[i] = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n        result[i] = result[i] + xs[i] * derivative(xs, i - 1);\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long[]\
    \ result = new long[(xs.length - degree)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = 0;\n    for(int i = 0; i < xs.length; i++)\n     \
    \   result[i] = result[i] + xs[i] * derivative(xs, i - degree);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order) \n{\n \
    \   long[] result = new long[(xs.length - degree)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = 0;\n    for(int i = 0; i < xs.length; i++)\n     \
    \   result[i] = result[i] + xs[i] * derivative(xs, i - degree, order);\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ int degree2) \n{\n    long[] result = new long[(xs.length - degree)];\n    for(int\
    \ i = 0; i < result.length; i++)\n        result[i] = 0;\n    for(int i = 0; i\
    \ < xs.length; i++)\n        result[i] = result[i] + xs[i] * derivative(xs, i\
    \ - degree, order, degree2);\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int degree2, int degree3) \n{\n    long[] result\
    \ = new long[(xs.length - degree)];\n    for(int i = 0; i < result.length; i++)\n\
    \        result[i] = 0;\n    for(int i = 0; i < xs.length; i++)\n        result[i]\
    \ = result[i] + xs[i] * derivative(xs, i - degree, order, degree2, degree3);\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz_zr_5bk.d(78): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_zr_5bk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] derivative = new long[result];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = xs[i]\
    \ - result;\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        result *= xs[i];\n    }\n    double[] derivative = new double[result];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = xs[i]\
    \ - result;\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] derivative = new float[result];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = xs[i]\
    \ - result;\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_qyh20u.d(36): Error: cannot implicitly convert expression `result`
    of type `double` to `ulong`

    /tmp/tmpl_qyh20u.d(56): Error: cannot implicitly convert expression `result` of
    type `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_qyh20u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n    {\n        ds[i] = xs[i+1] - xs[i];\n    }\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int n) \n{\n    long[]\
    \ ds = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n        ds[i] = xs[i+1]\
    \ - xs[i];\n    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int\
    \ m) \n{\n    long[] ds = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n\
    \        ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int n, int m, int n) \n{\n    long[] ds = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        ds[i] = xs[i+1] - xs[i];\n   \
    \ }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int\
    \ m, int n, int m) \n{\n    long[] ds = new long[n];\n    for(int i = 0; i < n;\
    \ i++)\n    {\n        ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int n, int m, int n, int m, int\
    \ n) \n{\n    long[] ds = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n\
    \        ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpetkunc41.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpetkunc41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    result /= xs.length;\n    long[] derivative\
    \ = new long[xs.length];\n    for(int i = 0; i < xs.length; i++)\n    {\n    \
    \    derivative[i] = result;\n    }\n    return derivative;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double result = 0;\n    for(int i =\
    \ 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    result /=\
    \ xs.length;\n    double[] derivative = new double[xs.length];\n    for(int i\
    \ = 0; i < xs.length; i++)\n    {\n        derivative[i] = result;\n    }\n  \
    \  return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result\
    \ *= xs[i];\n    }\n    result /= xs.length;\n    float[] derivative = new float[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = result;\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4zjc4t0a.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293cd]

    ??:? void tmp4zjc4t0a.__unittest_L72_C1() [0x428e62]

    ??:? void tmp4zjc4t0a.__modtest() [0x42914c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c8ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c8c5]

    ??:? runModuleUnitTests [0x42d831]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429890]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d *= xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n    result[0]\
    \ = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d *= xs[i];\n    }\n    double[] result = new double[xs.length + 1];\n\
    \    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] result = new float[xs.length + 1];\n \
    \   result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyq26bqcb.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpyq26bqcb.__unittest_L72_C1() [0x428f72]

    ??:? void tmpyq26bqcb.__modtest() [0x42925c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9d5]

    ??:? runModuleUnitTests [0x42d941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n        ds[i] = xs[i + 1] - xs[i];\n    return ds;\n}\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph4u9dxaj.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4u9dxaj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for (int i = 0;\
    \ i < result.length; i++) \n    {\n        result[i] = xs[i + 1];\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4dudoryp.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmp4dudoryp.__unittest_L18_C1() [0x427f8a]

    ??:? void tmp4dudoryp.__modtest() [0x428274]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b466]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b43d]

    ??:? runModuleUnitTests [0x42c3a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < xs.length; i++)\n        result[i] = xs[i + 1];\n    return result;\n}\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpq_sgcqhs.d(13): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4285a6]

    ??:? long[] tmpq_sgcqhs.derivative(long[]) [0x427e79]

    ??:? void tmpq_sgcqhs.__unittest_L16_C1() [0x427f1f]

    ??:? void tmpq_sgcqhs.__modtest() [0x428274]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b466]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b43d]

    ??:? runModuleUnitTests [0x42c3a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i];\n    for(int i = n - 1; i >=\
    \ 0; i--)\n        result[i] = result[i] * xs[i + 1];\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; i++)\n      \
    \  result[i] = xs[i];\n    for(int i = n - 1; i >= 0; i--)\n        result[i]\
    \ = result[i] * xs[i + 1];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i];\n    for(int i = n - 1; i >=\
    \ 0; i--)\n        result[i] = result[i] * xs[i + 1];\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmy6aflu4.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpmy6aflu4.d(27): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpmy6aflu4.d(43): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmy6aflu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    result *= xs.length;\n    long[] result\
    \ = new long[result.intValue()];\n    for(int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i] * result;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    result *= xs.length;\n    double[] result = new double[result.intValue()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i]\
    \ * result;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    result *= xs.length;\n    float[] result\
    \ = new float[result.intValue()];\n    for(int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i] * result;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvd6q0g1g.d(17): Error: no property `intValue` for type `long`

    /tmp/tmpvd6q0g1g.d(17): Error: declaration `tmpvd6q0g1g.derivative.result` is
    already defined

    /tmp/tmpvd6q0g1g.d(18): Error: no property `length` for type `long`

    /tmp/tmpvd6q0g1g.d(20): Error: only one index allowed to index `long`

    /tmp/tmpvd6q0g1g.d(22): Error: cannot implicitly convert expression `result` of
    type `long` to `long[]`

    /tmp/tmpvd6q0g1g.d(38): Error: no property `intValue` for type `double`

    /tmp/tmpvd6q0g1g.d(38): Error: declaration `tmpvd6q0g1g.derivative.result` is
    already defined

    /tmp/tmpvd6q0g1g.d(39): Error: no property `length` for type `double`

    /tmp/tmpvd6q0g1g.d(41): Error: only one index allowed to index `double`

    /tmp/tmpvd6q0g1g.d(43): Error: cannot implicitly convert expression `result` of
    type `double` to `double[]`

    /tmp/tmpvd6q0g1g.d(59): Error: no property `intValue` for type `float`

    /tmp/tmpvd6q0g1g.d(59): Error: declaration `tmpvd6q0g1g.derivative.result` is
    already defined

    /tmp/tmpvd6q0g1g.d(60): Error: no pro'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] ys = new long[n];\n    long x0\
    \ = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n    long x3 = xs[3];\n\
    \    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6 = xs[6];\n    long x7\
    \ = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n    long x10 = xs[10];\n\
    \    long x11 = xs[11];\n    long x12 = xs[12];\n    long x13 = xs[13];\n    long\
    \ x14 = xs[14];\n    long x15 = xs[15];\n    long x16 = xs[16];\n    long x17\
    \ = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n    long x20 = xs[20];\n\
    \    long x21 = xs[21];\n    long x22 = xs[22];\n    long x23 = xs[23];\n    long\
    \ x24 = xs[24];\n    long x25 = xs[25];\n    long x26 = xs[26];\n    long x27\
    \ = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n    long x30 = xs[30];\n\
    \    long x31 = xs[31];\n    long x32 = xs[32];\n    long x33 = xs[33];\n    long\
    \ x34 = xs[34];\n    long x35 = xs[35];\n    long x36 = xs[36];\n    long x37\
    \ = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n    long x40 = xs[40];\n\
    \    long x41 = xs[41];\n    long x42 = xs[42];\n    long x43 = xs[43];\n    long\
    \ x44 = xs[44];\n    long x45 = xs[45];\n    long x46 = xs[46];\n    long x47\
    \ = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n    long x50 = xs[50];\n\
    \    long x51 = xs[51];\n    long x52 = xs[52];\n    long x53 = xs[53];\n    long\
    \ x54 = xs[54];\n    long x55\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yy8kggp.d(69): Error: semicolon expected, not `unittest`

    /tmp/tmp5yy8kggp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yy8kggp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 1;\
    \ i < xs.length; i++) \n    {\n        result[i - 1] = (xs[i] - xs[i - 1]) / xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 1; i < xs.length;\
    \ i++) \n    {\n        result[i - 1] = (xs[i] - xs[i - 1]) / xs[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length - 1)];\n    for(int i = 1; i < xs.length;\
    \ i++) \n    {\n        result[i - 1] = (xs[i] - xs[i - 1]) / xs[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnaplbtvt.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293d5]

    ??:? void tmpnaplbtvt.__unittest_L54_C1() [0x428e6e]

    ??:? void tmpnaplbtvt.__modtest() [0x429158]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c8f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c8cd]

    ??:? runModuleUnitTests [0x42d839]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429898]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length];\n    for(int i = 0; i < xs.length;\
    \ i++)\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result =\
    \ new double[xs.length];\n    for(int i = 0; i < xs.length; i++)\n        result[i]\
    \ = xs[i+1] - xs[i] * xs[i+1];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[xs.length];\n    for(int i = 0; i <\
    \ xs.length; i++)\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpzw0ue9s6.d(13): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42947e]

    ??:? long[] tmpzw0ue9s6.derivative(long[]) [0x428b27]

    ??:? void tmpzw0ue9s6.__unittest_L48_C1() [0x428df7]

    ??:? void tmpzw0ue9s6.__modtest() [0x42914c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c8ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c8c5]

    ??:? runModuleUnitTests [0x42d831]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d *= xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n    result[0]\
    \ = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d *= xs[i];\n    }\n    double[] result = new double[xs.length + 1];\n\
    \    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] result = new float[xs.length + 1];\n \
    \   result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyq26bqcb.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpyq26bqcb.__unittest_L72_C1() [0x428f72]

    ??:? void tmpyq26bqcb.__modtest() [0x42925c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9d5]

    ??:? runModuleUnitTests [0x42d941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] d = new long[(xs.length - 1)];\n    long x = 0;\n    long\
    \ y = 0;\n    long xsq = 0;\n    long xsq2 = 0;\n    long xsq3 = 0;\n    long\
    \ xsq4 = 0;\n    long xsq5 = 0;\n    long xsq6 = 0;\n    long xsq7 = 0;\n    long\
    \ xsq8 = 0;\n    long xsq9 = 0;\n    long xsq10 = 0;\n    long xsq11 = 0;\n  \
    \  long xsq12 = 0;\n    long xsq13 = 0;\n    long xsq14 = 0;\n    long xsq15 =\
    \ 0;\n    long xsq16 = 0;\n    long xsq17 = 0;\n    long xsq18 = 0;\n    long\
    \ xsq19 = 0;\n    long xsq20 = 0;\n    long xsq21 = 0;\n    long xsq22 = 0;\n\
    \    long xsq23 = 0;\n    long xsq24 = 0;\n    long xsq25 = 0;\n    long xsq26\
    \ = 0;\n    long xsq27 = 0;\n    long xsq28 = 0;\n    long xsq29 = 0;\n    long\
    \ xsq30 = 0;\n    long xsq31 = 0;\n    long xsq32 = 0;\n    long xsq33 = 0;\n\
    \    long xsq34 = 0;\n    long xsq35 = 0;\n    long xsq36 = 0;\n    long xsq37\
    \ = 0;\n    long xsq38 = 0;\n    long xsq39 = 0;\n    long xsq40 = 0;\n    long\
    \ xsq41 = 0;\n    long xsq42 = 0;\n    long xsq43 = 0;\n    long xsq44 = 0;\n\
    \    long xsq45 = 0;\n    long xsq46 = 0;\n    long xsq47 = 0;\n    long xsq48\
    \ = 0;\n    long xsq49 = 0;\n    long xsq50 = 0;\n    long xsq51 = 0;\n    long\
    \ xsq52 = 0;\n    long xsq53 = 0;\n    long xsq54 = 0;\n    long xsq55 = 0;\n\
    \    long xsq56 = 0;\n    long xsq57 = 0;\n    long xsq58 = 0;\n    long xsq59\
    \ = 0;\n    long xsq60 = 0;\n    long xsq61 = 0;\n    long xsq62 = 0;\n    long\
    \ xsq63 = 0;\n    long xsq64 = 0;\n    long xsq65 = 0;\n    long xsq66 = 0;\n\
    \    long xsq67 = 0;\n    long xsq68 = 0;\n    long xsq69 = 0;\n    long xsq70\
    \ = 0;\n    long x\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpljinjef8.d(85): Error: semicolon expected, not `unittest`

    /tmp/tmpljinjef8.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpljinjef8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long d = 0;\n\
    \    long xd = 0;\n    long yd = 0;\n    long zd = 0;\n    long xdd = 0;\n   \
    \ long ydd = 0;\n    long zdd = 0;\n    long xdd = 1;\n    long ydd = 1;\n   \
    \ long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n   \
    \ long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n   \
    \ long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n   \
    \ long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n   \
    \ long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n   \
    \ long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n   \
    \ long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n   \
    \ long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n   \
    \ long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n   \
    \ long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n   \
    \ long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n   \
    \ long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n   \
    \ long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n   \
    \ long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n   \
    \ long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n   \
    \ long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw8hrwaub.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8hrwaub.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    result /= xs.length;\n    long[] derivative\
    \ = new long[xs.length];\n    for(int i = 0; i < xs.length; i++)\n    {\n    \
    \    derivative[i] = result;\n    }\n    return derivative;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double result = 0;\n    for(int i =\
    \ 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    result /=\
    \ xs.length;\n    double[] derivative = new double[xs.length];\n    for(int i\
    \ = 0; i < xs.length; i++)\n    {\n        derivative[i] = result;\n    }\n  \
    \  return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result\
    \ *= xs[i];\n    }\n    result /= xs.length;\n    float[] derivative = new float[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = result;\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4zjc4t0a.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293cd]

    ??:? void tmp4zjc4t0a.__unittest_L72_C1() [0x428e62]

    ??:? void tmp4zjc4t0a.__modtest() [0x42914c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c8ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c8c5]

    ??:? runModuleUnitTests [0x42d831]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429890]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length)+1];\n    result[0] = 1;\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result = new double[(xs.length)+1];\n\
    \    result[0] = 1;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length)+1];\n    result[0] = 1;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n    result[xs.length]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx15h8p5u.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x42946d]

    ??:? void tmpx15h8p5u.__unittest_L60_C1() [0x428f06]

    ??:? void tmpx15h8p5u.__modtest() [0x4291f0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4320c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431ba5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c965]

    ??:? runModuleUnitTests [0x42d8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n        ds[i] = xs[i];\n    for(int i = n - 1; i >= 0; i--)\n\
    \    {\n        ds[i] = (long) Math.pow(xs[i], (double) i);\n    }\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] ds = new double[n];\n    for(int i = 0; i < n; i++)\n        ds[i]\
    \ = xs[i];\n    for(int i = n - 1; i >= 0; i--)\n    {\n        ds[i] = (double)\
    \ Math.pow(xs[i], (double) i);\n    }\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] ds = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n        ds[i] = xs[i];\n    for(int i = n - 1; i >= 0; i--)\n\
    \    {\n        ds[i] = (float) Math.pow(xs[i], (float) i);\n    }\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm8mw3zyd.d(17): Error: C style cast illegal, use `cast(double)i`

    /tmp/tmpm8mw3zyd.d(17): Error: C style cast illegal, use `cast(long)Math.pow(xs[i],
    cast(double)i)`

    /tmp/tmpm8mw3zyd.d(35): Error: C style cast illegal, use `cast(double)i`

    /tmp/tmpm8mw3zyd.d(35): Error: C style cast illegal, use `cast(double)Math.pow(xs[i],
    cast(double)i)`

    /tmp/tmpm8mw3zyd.d(53): Error: C style cast illegal, use `cast(float)i`

    /tmp/tmpm8mw3zyd.d(53): Error: C style cast illegal, use `cast(float)Math.pow(xs[i],
    cast(float)i)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8mw3zyd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    long x = 0;\n\
    \    long xsq = 0;\n    long xsq2 = 0;\n    long xsq3 = 0;\n    long xsq4 = 0;\n\
    \    long xsq5 = 0;\n    long xsq6 = 0;\n    long xsq7 = 0;\n    long xsq8 = 0;\n\
    \    long xsq9 = 0;\n    long xsq10 = 0;\n    long xsq11 = 0;\n    long xsq12\
    \ = 0;\n    long xsq13 = 0;\n    long xsq14 = 0;\n    long xsq15 = 0;\n    long\
    \ xsq16 = 0;\n    long xsq17 = 0;\n    long xsq18 = 0;\n    long xsq19 = 0;\n\
    \    long xsq20 = 0;\n    long xsq21 = 0;\n    long xsq22 = 0;\n    long xsq23\
    \ = 0;\n    long xsq24 = 0;\n    long xsq25 = 0;\n    long xsq26 = 0;\n    long\
    \ xsq27 = 0;\n    long xsq28 = 0;\n    long xsq29 = 0;\n    long xsq30 = 0;\n\
    \    long xsq31 = 0;\n    long xsq32 = 0;\n    long xsq33 = 0;\n    long xsq34\
    \ = 0;\n    long xsq35 = 0;\n    long xsq36 = 0;\n    long xsq37 = 0;\n    long\
    \ xsq38 = 0;\n    long xsq39 = 0;\n    long xsq40 = 0;\n    long xsq41 = 0;\n\
    \    long xsq42 = 0;\n    long xsq43 = 0;\n    long xsq44 = 0;\n    long xsq45\
    \ = 0;\n    long xsq46 = 0;\n    long xsq47 = 0;\n    long xsq48 = 0;\n    long\
    \ xsq49 = 0;\n    long xsq50 = 0;\n    long xsq51 = 0;\n    long xsq52 = 0;\n\
    \    long xsq53 = 0;\n    long xsq54 = 0;\n    long xsq55 = 0;\n    long xsq56\
    \ = 0;\n    long xsq57 = 0;\n    long xsq58 = 0;\n    long xsq59 = 0;\n    long\
    \ xsq60 = 0;\n    long xsq61 = 0;\n    long xsq62 = 0;\n    long xsq63 = 0;\n\
    \    long xsq64 = 0;\n    long xsq65 = 0;\n    long xsq66 = 0;\n    long xsq67\
    \ = 0;\n    long xsq68 = 0;\n    long xsq69 = 0;\n    long xsq70 = 0;\n    long\
    \ xsq71 = 0;\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptny2ulr_.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptny2ulr_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.bitLength(); i++)\n    {\n        result[i]\
    \ = result.bitAt(i);\n    }\n    result[result.bitLength()] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n\
    \    }\n    long[] result = new long[result.bitLength() + 1];\n    for(int i =\
    \ 0; i < result.bitLength(); i++)\n    {\n        result[i] = result.bitAt(i);\n\
    \    }\n    result[result.bitLength()] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    long[] result = new long[result.bitLength() + 1];\n    for(int i = 0;\
    \ i < result.bitLength(); i++)\n    {\n        result[i] = result.bitAt(i);\n\
    \    }\n    result[result.bitLength()] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, int degree2) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n    }\n    long[] result = new long[result.bitLength() + 1];\n    for(int\
    \ i = 0; i < result.bitLength(); i++)\n    {\n        result[i] = result.bitAt(i);\n\
    \    }\n    result[result.bitLength()] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, int degree2, int order2) \n\
    {\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   result *= xs[i];\n    }\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphu46hxnf.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphu46hxnf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++) result[i] = 0;\n    for(int i = 0; i < xs.length - 1;\
    \ i++) result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result = new\
    \ double[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++) result[i]\
    \ = 0;\n    for(int i = 0; i < xs.length - 1; i++) result[i] = xs[i + 1] - xs[i]\
    \ * xs[i + 1];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++) result[i] = 0;\n    for(int i = 0; i < xs.length - 1; i++) result[i] =\
    \ xs[i + 1] - xs[i] * xs[i + 1];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpifiw0uww.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294bd]

    ??:? void tmpifiw0uww.__unittest_L48_C1() [0x428f56]

    ??:? void tmpifiw0uww.__modtest() [0x429240]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431bf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9b5]

    ??:? runModuleUnitTests [0x42d921]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429980]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n        ds[i] = xs[i+1] - xs[i];\n    return ds;\n}\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_180yd4.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_180yd4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    long x = 0;\n\
    \    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += xs[i] *\
    \ x;\n        d[i] = sum;\n        x += xs[i];\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] d = new double[n];\n    double x = 0;\n    double sum = 0;\n   \
    \ for (int i = 0; i < n; i++) {\n        sum += xs[i] * x;\n        d[i] = sum;\n\
    \        x += xs[i];\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] d = new float[n];\n    float x\
    \ = 0;\n    float sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum +=\
    \ xs[i] * x;\n        d[i] = sum;\n        x += xs[i];\n    }\n    return d;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpypxrw3n5.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpypxrw3n5.d(30): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpypxrw3n5.d(49): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpypxrw3n5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i + 1);\n    }\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int i) \n{\n    long res = 0;\n\
    \    for(int j = i; j < xs.length; j++)\n    {\n        res += xs[j] * derivative(xs,\
    \ j + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j) \n{\n    long res = 0;\n    for(int k = i; k < j; k++)\n    {\n        res\
    \ += xs[k] * derivative(xs, i + 1, k + 1);\n    }\n    return res;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative(long[] xs, int i, int j, int k) \n{\n    long res\
    \ = 0;\n    for(int l = i; l < j; l++)\n    {\n        res += xs[l] * derivative(xs,\
    \ i + 1, k + 1, l + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i, int j, int k, int l) \n{\n    long res = 0;\n    for(int m = i; m\
    \ < j; m++)\n    {\n        res += xs[m] * derivative(xs, i + 1, k + 1, l + 1,\
    \ m + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k, int l, int m) \n{\n    long res = 0;\n    for(int n = i; n < j; n++)\n\
    \    {\n        res += xs[n] * derivative(xs, i + 1, k + 1, l + 1, m + 1, n +\
    \ 1);\n    }\n    return res;\n}\n/*\n\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6xm86h8b.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xm86h8b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; ++i)\n        result[i] = xs[i] * derivative(xs, i - 1);\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    for(int i =\
    \ 0; i < n; ++i)\n        result[i] = xs[i] * derivative(xs, i - 1);\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    for(int i = 0; i < n; ++i)\n        result[i]\
    \ = xs[i] * derivative(xs, i - 1);\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgd4kiizx.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpgd4kiizx.d(14): Error: none of the overloads of `derivative` are callable
    using argument types `(long[], int)`, candidates are:

    /tmp/tmpgd4kiizx.d(9):        `tmpgd4kiizx.derivative(long[] xs)`

    /tmp/tmpgd4kiizx.d(23):        `tmpgd4kiizx.derivative(double[] xs)`

    /tmp/tmpgd4kiizx.d(37):        `tmpgd4kiizx.derivative(float[] xs)`

    /tmp/tmpgd4kiizx.d(25): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpgd4kiizx.d(28): Error: none of the overloads of `derivative` are callable
    using argument types `(double[], int)`, candidates are:

    /tmp/tmpgd4kiizx.d(9):        `tmpgd4kiizx.derivative(long[] xs)`

    /tmp/tmpgd4kiizx.d(23):        `tmpgd4kiizx.derivative(double[] xs)`

    /tmp/tmpgd4kiizx.d(37):        `tmpgd4kiizx.derivative(float[] xs)`

    /tmp/tmpgd4kiizx.d(39): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpgd4kiizx.d(42): Error'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    long x = 0;\n\
    \    long y = 0;\n    for(int i = 0; i < n; i++)\n    {\n        y = xs[i];\n\
    \        d[i] = 1;\n        for(int j = i+1; j < n; j++)\n        {\n        \
    \    d[i] += xs[j] * y;\n        }\n        x += y;\n    }\n    return d;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] d = new double[n];\n    double x = 0;\n    double y = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        y = xs[i];\n        d[i] = 1;\n        for(int\
    \ j = i+1; j < n; j++)\n        {\n            d[i] += xs[j] * y;\n        }\n\
    \        x += y;\n    }\n    return d;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] d = new float[n];\n    float x\
    \ = 0;\n    float y = 0;\n    for(int i = 0; i < n; i++)\n    {\n        y = xs[i];\n\
    \        d[i] = 1;\n        for(int j = i+1; j < n; j++)\n        {\n        \
    \    d[i] += xs[j] * y;\n        }\n        x += y;\n    }\n    return d;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxgtho76.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpnxgtho76.d(35): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpnxgtho76.d(59): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxgtho76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < xs.length - 1; i++)\n    {\n        result[i] = xs[i + 1] - xs[i] * xs[i\
    \ + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i < xs.length\
    \ - 1; i++)\n    {\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length - 1)];\n    for(int i = 0; i < xs.length\
    \ - 1; i++)\n    {\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1k91avde.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293e5]

    ??:? void tmp1k91avde.__unittest_L54_C1() [0x428e7e]

    ??:? void tmp1k91avde.__modtest() [0x429168]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c906]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c8dd]

    ??:? runModuleUnitTests [0x42d849]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4298a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d *= xs[i];\n    }\n    long[] ds = new long[xs.length + 1];\n    ds[0]\
    \ = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        ds[i + 1] = ds[i];\n\
    \        ds[i] *= d;\n    }\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d *= xs[i];\n    }\n    double[] ds = new double[xs.length + 1];\n  \
    \  ds[0] = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        ds[i + 1]\
    \ = ds[i];\n        ds[i] *= d;\n    }\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] ds = new float[xs.length + 1];\n    ds[0]\
    \ = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n        ds[i + 1] = ds[i];\n\
    \        ds[i] *= d;\n    }\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk6rw8q40.d(79): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294cd]

    ??:? void tmpk6rw8q40.__unittest_L75_C1() [0x428f66]

    ??:? void tmpk6rw8q40.__modtest() [0x429250]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9c5]

    ??:? runModuleUnitTests [0x42d931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429990]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    long x = 0;\n \
    \   long y = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        x = xs[i];\n\
    \        y = x * x;\n        result[i] = y;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int order) \n{\n    long[] result\
    \ = new long[(xs.length - order)];\n    long x = 0;\n    long y = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        x = xs[i];\n        y = x * x;\n\
    \        result[i] = y;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int order, int degree) \n{\n    long[] result = new long[(xs.length - order)];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        x = xs[i];\n        y = x * x;\n        result[i] = y;\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int order,\
    \ int degree, int power) \n{\n    long[] result = new long[(xs.length - order)];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        x = xs[i];\n        y = x * x;\n        result[i] = y;\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int order,\
    \ int degree, int power, int power2) \n{\n    long[] result = new long[(xs.length\
    \ - order)];\n    long x = 0;\n    long y = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        x = xs[i];\n        y = x * x;\n        result[i] = y;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] \nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnahfrplv.d(105): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnahfrplv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    long x = 0;\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        d[i] = 1;\n        for(int j =\
    \ i; j < n; ++j)\n        {\n            d[i] *= xs[j];\n        }\n        x\
    \ += xs[i] * d[i];\n    }\n    return d;\n}\n</code>\n<|/ a tags=c#,polynomial-math,math,algorithm\
    \ |>\n<| c |>\nThis doesn't work for polynomials with repeated coefficients. For\
    \ example, `derivative([1,1,1])` returns `[1,1,1]` instead of `[1,1,-1]`.\n<|/\
    \ c |>\n<| c |>\nI fixed the bug and added a test case. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\nI fixed the bug and added a test case. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nI fixed the bug and added a test case. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\nI fixed the bug and added a test case.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a dscore=4 |>\nThe simplest way to\
    \ do this in C# is to use LINQ:\n<code>\npublic static IEnumerable<double> Derivative(IEnumerable<double>\
    \ xs)\n{\n    return xs.Select((x, i) => x * (i + 1));\n}\n</code>\n<|/ a tags=c#,polynomial-math,math,algorithm\
    \ |>\n<| c |>\nThis doesn't work for polynomials with repeated coefficients. For\
    \ example, `Derivative([1,1,1])` returns `[1,1,1]` instead of `[1,1,-1]`.\n<|/\
    \ c |>\n<| c |>\nI fixed the bug and added a test case. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| a dscore=4 |>\nI wrote a C# program to solve this problem\
    \ using recursion.\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoq318ki0.d(25): Error: declaration expected, not `<`

    /tmp/tmpoq318ki0.d(28): Error: unterminated character constant

    /tmp/tmpoq318ki0.d(48): Error: unrecognized declaration

    /tmp/tmpoq318ki0.d(52): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoq318ki0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = result;\n    }\n    result[result.length - 1] = 1;\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    double[] result = new double[result.bitLength() + 1];\n    for(int i\
    \ = 0; i < result.length; i++)\n    {\n        result[i] = result;\n    }\n  \
    \  result[result.length - 1] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] result = new float[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = result;\n    }\n    result[result.length - 1] = 1;\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4bbikjmh.d(16): Error: no property `bitLength` for type `long`

    /tmp/tmp4bbikjmh.d(16): Error: declaration `tmp4bbikjmh.derivative.result` is
    already defined

    /tmp/tmp4bbikjmh.d(17): Error: no property `length` for type `long`

    /tmp/tmp4bbikjmh.d(19): Error: only one index allowed to index `long`

    /tmp/tmp4bbikjmh.d(21): Error: only one index allowed to index `long`

    /tmp/tmp4bbikjmh.d(22): Error: cannot implicitly convert expression `result` of
    type `long` to `long[]`

    /tmp/tmp4bbikjmh.d(37): Error: no property `bitLength` for type `double`

    /tmp/tmp4bbikjmh.d(37): Error: declaration `tmp4bbikjmh.derivative.result` is
    already defined

    /tmp/tmp4bbikjmh.d(38): Error: no property `length` for type `double`

    /tmp/tmp4bbikjmh.d(40): Error: only one index allowed to index `double`

    /tmp/tmp4bbikjmh.d(42): Error: only one index allowed to index `double`

    /tmp/tmp4bbikjmh.d(43): Error: cannot implicitly convert expression `result` of
    type `double` to `double[]`

    /tmp/tmp4bbikjmh.d(58): Error: no property `bitLength` for'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long xd = 0;\n\
    \    long yd = 0;\n    long zd = 0;\n    long xdd = 0;\n    long ydd = 0;\n  \
    \  long zdd = 0;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zd\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1suj5ri3.d(86): Error: semicolon expected, not `unittest`

    /tmp/tmp1suj5ri3.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1suj5ri3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i] - xs[n - i - 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    for(int i =\
    \ 0; i < n; i++)\n    {\n        result[i] = xs[i] - xs[n - i - 1];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        result[i] = xs[i] - xs[n - i - 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqy6emd_.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpaqy6emd_.d(27): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpaqy6emd_.d(43): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqy6emd_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    long sum =\
    \ 0;\n    for (int i = 0; i < n; i++) {\n        sum += xs[i];\n        d[i] =\
    \ sum;\n    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n) \n\
    {\n    long[] d = new long[n];\n    long sum = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        sum += xs[i];\n        d[i] = sum;\n    }\n    return d;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int n, int m) \n{\n    long[]\
    \ d = new long[n];\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n   \
    \     sum += xs[i];\n        d[i] = sum;\n    }\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int n, int m, int n) \n{\n    long[] d = new long[n];\n\
    \    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += xs[i];\n\
    \        d[i] = sum;\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int n, int m, int n, int m) \n{\n    long[] d = new long[n];\n    long sum\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        sum += xs[i];\n        d[i]\
    \ = sum;\n    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int\
    \ m, int n, int m, int n) \n{\n    long[] d = new long[n];\n    long sum = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        sum += xs[i];\n        d[i] = sum;\n\
    \    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpolen18a6.d(100): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpolen18a6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    long x = 0;\n\
    \    long y = 0;\n    for(int i = 0; i < n; i++)\n    {\n        y = xs[i];\n\
    \        d[i] = 1;\n        for(int j = 1; j < n; j++)\n        {\n          \
    \  x += xs[j];\n            d[i] *= x;\n        }\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int n) \n{\n    long[] d = new long[n];\n\
    \    long x = 0;\n    long y = 0;\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     y = xs[i];\n        d[i] = 1;\n        for(int j = 1; j < n; j++)\n    \
    \    {\n            x += xs[j];\n            d[i] *= x;\n        }\n    }\n  \
    \  return d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int m)\
    \ \n{\n    long[] d = new long[n];\n    long x = 0;\n    long y = 0;\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        y = xs[i];\n        d[i] = 1;\n        for(int\
    \ j = 1; j < n; j++)\n        {\n            x += xs[j];\n            d[i] *=\
    \ x;\n        }\n    }\n    return d;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int n, int m, int n) \n{\n    long[] d = new long[n];\n    long x = 0;\n\
    \    long y = 0;\n    for(int i = 0; i < n; i++)\n    {\n        y = xs[i];\n\
    \        d[i] = 1;\n        for(int j = 1; j < n; j++)\n        {\n          \
    \  x += xs[j];\n            d[i] *= x;\n        }\n    }\n    return d;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int n, int m, int n, int m) \n{\n\
    \    long[] d = new long[n];\n    long x = 0;\n    long y = 0;\n    for(int i\
    \ = 0; i < n; i++)\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpie9a7obq.d(109): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpie9a7obq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    long a = xs[0];\n\
    \    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n    long e = xs[4];\n\
    \    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n    long i = xs[8];\n\
    \    long j = xs[9];\n    long k = xs[10];\n    long l = xs[11];\n    long m =\
    \ xs[12];\n    long n = xs[13];\n    long o = xs[14];\n    long p = xs[15];\n\
    \    long q = xs[16];\n    long r = xs[17];\n    long s = xs[18];\n    long t\
    \ = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n    long w = xs[22];\n\
    \    long x = xs[23];\n    long y = xs[24];\n    long z = xs[25];\n    long a\
    \ = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n    long d = xs[29];\n\
    \    long e = xs[30];\n    long f = xs[31];\n    long g = xs[32];\n    long h\
    \ = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n    long k = xs[36];\n\
    \    long l = xs[37];\n    long m = xs[38];\n    long n = xs[39];\n    long o\
    \ = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n    long r = xs[43];\n\
    \    long s = xs[44];\n    long t = xs[45];\n    long u = xs[46];\n    long v\
    \ = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n    long y = xs[50];\n\
    \    long z = xs[51];\n    long a = xs[52];\n    long b = xs[53];\n    long c\
    \ = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n    long f = xs[57];\n\
    \    long g = xs[58];\n    long h = xs[59];\n    long i = xs[60];\n    long j\
    \ = xs[61];\n    long k = xs[\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpognwpf6x.d(75): Error: expression expected, not `unittest`

    /tmp/tmpognwpf6x.d(76): Error: found `{` when expecting `,`

    /tmp/tmpognwpf6x.d(77): Error: expression expected, not `alias`

    /tmp/tmpognwpf6x.d(77): Error: found `candidate` when expecting `,`

    /tmp/tmpognwpf6x.d(77): Error: expression expected, not `=`

    /tmp/tmpognwpf6x.d(77): Error: found `derivative` when expecting `,`

    /tmp/tmpognwpf6x.d(77): Error: expression expected, not `;`

    /tmp/tmpognwpf6x.d(79): Error: found `assert` when expecting `,`

    /tmp/tmpognwpf6x.d(79): Error: found `;` when expecting `,`

    /tmp/tmpognwpf6x.d(80): Error: found `;` when expecting `,`

    /tmp/tmpognwpf6x.d(81): Error: found `;` when expecting `,`

    /tmp/tmpognwpf6x.d(82): Error: found `;` when expecting `,`

    /tmp/tmpognwpf6x.d(83): Error: found `;` when expecting `,`

    /tmp/tmpognwpf6x.d(84): Error: expression expected, not `}`

    /tmp/tmpognwpf6x.d(85): Error: found `void` when expecting `,`

    /tmp/tmpognwpf6x.d(85): Error: found `{` when expecting `,`

    /tmp/tmpognwpf6x.d(85): Erro'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = result;\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        result *= xs[i];\n    }\n    double[] result = new double[xs.length\
    \ + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = result;\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] result = new float[xs.length\
    \ + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = result;\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqmlaiqax.d(16): Error: declaration `tmpqmlaiqax.derivative.result`
    is already defined

    /tmp/tmpqmlaiqax.d(19): Error: only one index allowed to index `long`

    /tmp/tmpqmlaiqax.d(21): Error: only one index allowed to index `long`

    /tmp/tmpqmlaiqax.d(22): Error: cannot implicitly convert expression `result` of
    type `long` to `long[]`

    /tmp/tmpqmlaiqax.d(37): Error: declaration `tmpqmlaiqax.derivative.result` is
    already defined

    /tmp/tmpqmlaiqax.d(40): Error: only one index allowed to index `double`

    /tmp/tmpqmlaiqax.d(42): Error: only one index allowed to index `double`

    /tmp/tmpqmlaiqax.d(43): Error: cannot implicitly convert expression `result` of
    type `double` to `double[]`

    /tmp/tmpqmlaiqax.d(58): Error: declaration `tmpqmlaiqax.derivative.result` is
    already defined

    /tmp/tmpqmlaiqax.d(61): Error: only one index allowed to index `float`

    /tmp/tmpqmlaiqax.d(63): Error: only one index allowed to index `float`

    /tmp/tmpqmlaiqax.d(64): Error: cannot implicitly convert expression `result` of
    type `float` to `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqmlaiqax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.bitLength(); i++)\n    {\n        result[i]\
    \ = result.bitAt(i);\n    }\n    result[result.bitLength()] = 1;\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n\
    \    }\n    long[] result = new long[result.bitLength() + 1];\n    for(int i =\
    \ 0; i < result.bitLength(); i++)\n    {\n        result[i] = result.bitAt(i);\n\
    \    }\n    result[result.bitLength()] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    long[] result = new long[result.bitLength() + 1];\n    for(int i = 0;\
    \ i < result.bitLength(); i++)\n    {\n        result[i] = result.bitAt(i);\n\
    \    }\n    result[result.bitLength()] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, int degree2) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n    }\n    long[] result = new long[result.bitLength() + 1];\n    for(int\
    \ i = 0; i < result.bitLength(); i++)\n    {\n        result[i] = result.bitAt(i);\n\
    \    }\n    result[result.bitLength()] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, int degree2, int order2) \n\
    {\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   result *= xs[i];\n    }\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphu46hxnf.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphu46hxnf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = result;\n    }\n    result[result.length - 1] = 1;\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n\
    \    }\n    long[] result = new long[result.bitLength() + 1];\n    for(int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = result;\n    }\n    result[result.length\
    \ - 1] = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = result;\n    }\n    result[result.length - 1] = 1;\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int scale)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = result;\n    }\n    result[result.length - 1] = 1;\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int scale,\
    \ int precision) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = result;\n    }\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpufhv_gjh.d(106): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpufhv_gjh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length)+1];\n    result[0] = 1;\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree) \n{\n    long[] result = new long[(xs.length)+1];\n    result[0]\
    \ = 1;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order) \n{\n    long[] result = new long[(xs.length)+1];\n\
    \    result[0] = 1;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int degree2) \n{\n    long[] result = new long[(xs.length)+1];\n\
    \    result[0] = 1;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int degree2, int order2) \n{\n    long[] result =\
    \ new long[(xs.length)+1];\n    result[0] = 1;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int degree2,\
    \ int order2, int degree3) \n{\n    long[] result = new long[(xs.length)+1];\n\
    \    result[0] = 1;\n    for(int i = 1; i < \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemkmghn2.d(94): Error: expression expected, not `unittest`

    /tmp/tmpemkmghn2.d(95): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpemkmghn2.d(96): Error: expression expected, not `alias`

    /tmp/tmpemkmghn2.d(96): Error: found `candidate` when expecting `)`

    /tmp/tmpemkmghn2.d(96): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemkmghn2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++) result[i] = 0;\n    for(int i = 1; i < xs.length; i++)\
    \ result[i] = result[i-1] + xs[i] * xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double[] result = new double[(xs.length\
    \ - 1)];\n    for(int i = 0; i < result.length; i++) result[i] = 0;\n    for(int\
    \ i = 1; i < xs.length; i++) result[i] = result[i-1] + xs[i] * xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result\
    \ = new float[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++) result[i]\
    \ = 0;\n    for(int i = 1; i < xs.length; i++) result[i] = result[i-1] + xs[i]\
    \ * xs[i];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp7tgvejb_.d(13): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x429586]

    ??:? long[] tmp7tgvejb_.derivative(long[]) [0x428b35]

    ??:? void tmp7tgvejb_.__unittest_L48_C1() [0x428f03]

    ??:? void tmp7tgvejb_.__modtest() [0x429258]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432130]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9cd]

    ??:? runModuleUnitTests [0x42d939]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i);\n    }\n    return res;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative(long[] xs, int i) \n{\n    long res = 0;\n    for(int\
    \ j = 0; j < i; j++)\n    {\n        res += xs[j] * derivative(xs, j);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j) \n{\n    long res = 0;\n    for(int k = 0; k < j; k++)\n    {\n        res\
    \ += xs[k] * derivative(xs, i, k);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k) \n{\n    long res = 0;\n   \
    \ for(int l = 0; l < k; l++)\n    {\n        res += xs[l] * derivative(xs, i,\
    \ j, l);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k, int l) \n{\n    long res = 0;\n    for(int m = 0; m < l; m++)\n  \
    \  {\n        res += xs[m] * derivative(xs, i, j, k, l);\n    }\n    return res;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int l, int\
    \ m) \n{\n    long res = 0;\n    for(int n = 0; n < m; n++)\n    {\n        res\
    \ += xs[n] * derivative(xs, i, j, k, l, m);\n    }\n    return res;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbymfud4l.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbymfud4l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = xs[0];\n    long x2 = xs[1];\n    long x3 = xs[2];\n \
    \   long x4 = xs[3];\n    long x5 = xs[4];\n    long x6 = xs[5];\n    long x7\
    \ = xs[6];\n    long x8 = xs[7];\n    long x9 = xs[8];\n    long x10 = xs[9];\n\
    \    long x11 = xs[10];\n    long x12 = xs[11];\n    long x13 = xs[12];\n    long\
    \ x14 = xs[13];\n    long x15 = xs[14];\n    long x16 = xs[15];\n    long x17\
    \ = xs[16];\n    long x18 = xs[17];\n    long x19 = xs[18];\n    long x20 = xs[19];\n\
    \    long x21 = xs[20];\n    long x22 = xs[21];\n    long x23 = xs[22];\n    long\
    \ x24 = xs[23];\n    long x25 = xs[24];\n    long x26 = xs[25];\n    long x27\
    \ = xs[26];\n    long x28 = xs[27];\n    long x29 = xs[28];\n    long x30 = xs[29];\n\
    \    long x31 = xs[30];\n    long x32 = xs[31];\n    long x33 = xs[32];\n    long\
    \ x34 = xs[33];\n    long x35 = xs[34];\n    long x36 = xs[35];\n    long x37\
    \ = xs[36];\n    long x38 = xs[37];\n    long x39 = xs[38];\n    long x40 = xs[39];\n\
    \    long x41 = xs[40];\n    long x42 = xs[41];\n    long x43 = xs[42];\n    long\
    \ x44 = xs[43];\n    long x45 = xs[44];\n    long x46 = xs[45];\n    long x47\
    \ = xs[46];\n    long x48 = xs[47];\n    long x49 = xs[48];\n    long x50 = xs[49];\n\
    \    long x51 = xs[50];\n    long x52 = xs[51];\n    long x53 = xs[52];\n    long\
    \ x54 = xs[53];\n    long x55 = xs[54];\n    long x56 = xs[55];\n    long x57\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_dy76r8.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_dy76r8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result += (long)(xs[i] * xs[i]);\n    }\n    long[] result = new long[result.__len__()];\n\
    \    for(int i = 0; i < result.__len__(); i++)\n    {\n        result[i] = (long)Math.pow(xs[i],\
    \ 2);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   result += (double)(xs[i] * xs[i]);\n    }\n    double[] result = new double[result.__len__()];\n\
    \    for(int i = 0; i < result.__len__(); i++)\n    {\n        result[i] = Math.pow(xs[i],\
    \ 2);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += (float)(xs[i] * xs[i]);\n    }\n    float[] result = new float[result.__len__()];\n\
    \    for(int i = 0; i < result.__len__(); i++)\n    {\n        result[i] = Math.pow(xs[i],\
    \ 2);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn3asaqa6.d(14): Error: C style cast illegal, use `cast(long)(xs[i]
    * xs[i])`

    /tmp/tmpn3asaqa6.d(19): Error: C style cast illegal, use `cast(long)Math.pow(xs[i],
    2)`

    /tmp/tmpn3asaqa6.d(34): Error: C style cast illegal, use `cast(double)(xs[i] *
    xs[i])`

    /tmp/tmpn3asaqa6.d(54): Error: C style cast illegal, use `cast(float)(xs[i] *
    xs[i])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3asaqa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result += (long)Math.pow(xs[i], 2);\n    }\n    long[] result = new long[result.length\
    \ + 1];\n    result[0] = result;\n    for(int i = 1; i < result.length; i++)\n\
    \    {\n        result[i] = result[i-1] * xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result += (double)Math.pow(xs[i],\
    \ 2);\n    }\n    double[] result = new double[result.length + 1];\n    result[0]\
    \ = result;\n    for(int i = 1; i < result.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result += (float)Math.pow(xs[i], 2);\n    }\n    float[] result =\
    \ new float[result.length + 1];\n    result[0] = result;\n    for(int i = 1; i\
    \ < result.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n   \
    \ }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7471tg5j.d(14): Error: C style cast illegal, use `cast(long)Math.pow(xs[i],
    2)`

    /tmp/tmp7471tg5j.d(35): Error: C style cast illegal, use `cast(double)Math.pow(xs[i],
    2)`

    /tmp/tmp7471tg5j.d(56): Error: C style cast illegal, use `cast(float)Math.pow(xs[i],
    2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7471tg5j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n\
    \    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long\
    \ g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvu8nnug4.d(116): Error: semicolon expected, not `unittest`

    /tmp/tmpvu8nnug4.d(116): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvu8nnug4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n    {\n        ys[i] = xs[i] * derivative(xs, n - i - 1);\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n) \n\
    {\n    long[] ys = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n     \
    \   ys[i] = xs[i] * derivative(xs, n - i - 1);\n    }\n    return ys;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int n, int i) \n{\n    long[] ys\
    \ = new long[n];\n    for(int j = 0; j < n; j++)\n    {\n        ys[j] = xs[i]\
    \ * derivative(xs, n - i - 1, j);\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int n, int i, int j) \n{\n    long[] ys = new long[n];\n\
    \    for(int k = 0; k < n; k++)\n    {\n        ys[k] = xs[i] * derivative(xs,\
    \ n - i - 1, j, k);\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int n, int i, int j, int k) \n{\n    long[] ys = new long[n];\n    for(int\
    \ l = 0; l < n; l++)\n    {\n        ys[l] = xs[i] * derivative(xs, n - i - 1,\
    \ j, k, l);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int\
    \ i, int j, int k, int l) \n{\n    long[] ys = new long[n];\n    for(int m = 0;\
    \ m < n; m++)\n    {\n        ys[m] = \nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvg236wt6.d(91): Error: expression expected, not `unittest`

    /tmp/tmpvg236wt6.d(92): Error: found `{` when expecting `;` following statement

    /tmp/tmpvg236wt6.d(101): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvg236wt6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i] * derivative(xs, n - 1);\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    for(int i =\
    \ 0; i < n; i++)\n        result[i] = xs[i] * derivative(xs, n - 1);\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    int n = xs.length;\n\
    \    float[] result = new float[n];\n    for(int i = 0; i < n; i++)\n        result[i]\
    \ = xs[i] * derivative(xs, n - 1);\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptcx8h92f.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmptcx8h92f.d(14): Error: none of the overloads of `derivative` are callable
    using argument types `(long[], int)`, candidates are:

    /tmp/tmptcx8h92f.d(9):        `tmptcx8h92f.derivative(long[] xs)`

    /tmp/tmptcx8h92f.d(23):        `tmptcx8h92f.derivative(double[] xs)`

    /tmp/tmptcx8h92f.d(37):        `tmptcx8h92f.derivative(float[] xs)`

    /tmp/tmptcx8h92f.d(25): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmptcx8h92f.d(28): Error: none of the overloads of `derivative` are callable
    using argument types `(double[], int)`, candidates are:

    /tmp/tmptcx8h92f.d(9):        `tmptcx8h92f.derivative(long[] xs)`

    /tmp/tmptcx8h92f.d(23):        `tmptcx8h92f.derivative(double[] xs)`

    /tmp/tmptcx8h92f.d(37):        `tmptcx8h92f.derivative(float[] xs)`

    /tmp/tmptcx8h92f.d(39): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmptcx8h92f.d(42): Error'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    for(int i\
    \ = 0; i < n; ++i)\n        d[i] = xs[i+1] - xs[i] * xs[i] / xs[i];\n    return\
    \ d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] d = new double[n];\n    for(int i = 0; i < n; ++i)\n        d[i]\
    \ = xs[i+1] - xs[i] * xs[i] / xs[i];\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] d = new float[n];\n    for(int\
    \ i = 0; i < n; ++i)\n        d[i] = xs[i+1] - xs[i] * xs[i] / xs[i];\n    return\
    \ d;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4rduo3q8.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp4rduo3q8.d(25): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp4rduo3q8.d(39): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rduo3q8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] derivative = new long[(xs.length + 1)];\n    derivative[0]\
    \ = xs[0];\n    derivative[1] = xs[1];\n    for (int i = 2; i < derivative.length;\
    \ i++)\n    {\n        derivative[i] = (derivative[i - 1] * xs[i]) - (derivative[i\
    \ - 2] * xs[i - 1]);\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] derivative = new double[(xs.length + 1)];\n    derivative[0]\
    \ = xs[0];\n    derivative[1] = xs[1];\n    for (int i = 2; i < derivative.length;\
    \ i++)\n    {\n        derivative[i] = (derivative[i - 1] * xs[i]) - (derivative[i\
    \ - 2] * xs[i - 1]);\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] derivative = new float[(xs.length + 1)];\n    derivative[0]\
    \ = xs[0];\n    derivative[1] = xs[1];\n    for (int i = 2; i < derivative.length;\
    \ i++)\n    {\n        derivative[i] = (derivative[i - 1] * xs[i]) - (derivative[i\
    \ - 2] * xs[i - 1]);\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpdue1n_3w.d(16): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4296f6]

    ??:? long[] tmpdue1n_3w.derivative(long[]) [0x428bda]

    ??:? void tmpdue1n_3w.__unittest_L60_C1() [0x42906f]

    ??:? void tmpdue1n_3w.__modtest() [0x4293c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dcd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42cb66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431df1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4322a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431d7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42cb3d]

    ??:? runModuleUnitTests [0x42daa9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = result\
    \ / xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = result\
    \ / xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[] result\
    \ = new long[result.bitLength()];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = result / xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int degree, int order, int scale)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = result\
    \ / xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int scale, int degree2) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n  \
    \  }\n    long[] result = new long[result.bitLength()];\n    for (int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = result / xs[i];\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + \nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkqhg7_hl.d(103): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkqhg7_hl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] ds = new long[n];\n    for(int\
    \ i = 0; i < n; ++i)\n        ds[i] = xs[i] * derivative(xs, 0, i-1);\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int i, int j) \n{\n  \
    \  long n = xs.length;\n    long[] ds = new long[n];\n    for(int k = i; k <=\
    \ j; ++k)\n        ds[k] = xs[k] * derivative(xs, i, k-1);\n    return ds;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k) \n{\n   \
    \ long n = xs.length;\n    long[] ds = new long[n];\n    for(int l = i; l <= j;\
    \ ++l)\n        ds[l] = xs[l] * derivative(xs, i, l-1, k);\n    return ds;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int l) \n\
    {\n    long n = xs.length;\n    long[] ds = new long[n];\n    for(int m = i; m\
    \ <= j; ++m)\n        ds[m] = xs[m] * derivative(xs, i, m-1, k, l);\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int\
    \ l, int m) \n{\n    long n = xs.length;\n    long[] ds = new long[n];\n    for(int\
    \ n = i; n <= j; ++n)\n        ds[n] = xs[n] * derivative(xs, i, n-1, k, l, m);\n\
    \    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k, int l, int m, int n\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvxrir6vu.d(80): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxrir6vu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n    {\n        ys[i] = xs[i];\n    }\n    for(int i = n -\
    \ 1; i >= 0; i--)\n    {\n        ys[i] = ys[i + 1] * xs[i];\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] ys = new double[n];\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     ys[i] = xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n    \
    \    ys[i] = ys[i + 1] * xs[i];\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] ys = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        ys[i] = xs[i];\n    }\n    for(int i = n\
    \ - 1; i >= 0; i--)\n    {\n        ys[i] = ys[i + 1] * xs[i];\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeq0wj7l8.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpeq0wj7l8.d(31): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpeq0wj7l8.d(51): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeq0wj7l8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n        ds[i] = xs[i] * derivative(xs, n - i - 1);\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int n) \n{\n    long[]\
    \ ds = new long[n];\n    for(int i = 0; i < n; i++)\n        ds[i] = xs[i] * derivative(xs,\
    \ n - i - 1);\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int\
    \ i) \n{\n    long[] ds = new long[n];\n    for(int j = 0; j < n; j++)\n     \
    \   ds[j] = xs[j] * derivative(xs, n - i - 1, j);\n    return ds;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative(long[] xs, int n, int i, int j) \n{\n    long[]\
    \ ds = new long[n];\n    for(int k = 0; k < n; k++)\n        ds[k] = xs[k] * derivative(xs,\
    \ n - i - 1, j, k);\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int n, int\
    \ i, int j, int k) \n{\n    long[] ds = new long[n];\n    for(int l = 0; l < n;\
    \ l++)\n        ds[l] = xs[l] * derivative(xs, n - i - 1, j, k, l);\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int n, int i, int j, int\
    \ k, int l) \n{\n    long[] ds = new long[n];\n    for(int m = 0; m < n; m++)\n\
    \        ds[m] = xs[m] * derivative(xs, n - i - 1, j, k, l, m);\n    return ds;\n\
    }\n/*\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg6h2d5o9.d(82): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg6h2d5o9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i] = xs[i] * derivative(xs, i - 1);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj9suumfl.d(14): Error: function `tmpj9suumfl.derivative(long[]
    xs)` is not callable using argument types `(long[], int)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9suumfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    result /= xs.length;\n    long[] derivative\
    \ = new long[xs.length];\n    for(int i = 0; i < xs.length; i++)\n    {\n    \
    \    derivative[i] = result;\n    }\n    return derivative;\n}\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy4g9h4_y.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428525]

    ??:? void tmpy4g9h4_y.__unittest_L24_C1() [0x427fbe]

    ??:? void tmpy4g9h4_y.__modtest() [0x4282a8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c603]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b496]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430721]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b46d]

    ??:? runModuleUnitTests [0x42c3d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n        d[i] = xs[i+1] - xs[i];\n    return d;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n  \
    \  double[] d = new double[n];\n    for(int i = 0; i < n; i++)\n        d[i] =\
    \ xs[i+1] - xs[i];\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] d = new float[n];\n    for(int i = 0; i < n;\
    \ i++)\n        d[i] = xs[i+1] - xs[i];\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpslfk8hvq.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpslfk8hvq.d(25): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpslfk8hvq.d(39): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpslfk8hvq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = xs[0];\n    long x0 = xs[1];\n    long x1 = xs[2];\n \
    \   long x2 = xs[3];\n    long x3 = xs[4];\n    long x4 = xs[5];\n    long x5\
    \ = xs[6];\n    long x6 = xs[7];\n    long x7 = xs[8];\n    long x8 = xs[9];\n\
    \    long x9 = xs[10];\n    long x10 = xs[11];\n    long x11 = xs[12];\n    long\
    \ x12 = xs[13];\n    long x13 = xs[14];\n    long x14 = xs[15];\n    long x15\
    \ = xs[16];\n    long x16 = xs[17];\n    long x17 = xs[18];\n    long x18 = xs[19];\n\
    \    long x19 = xs[20];\n    long x20 = xs[21];\n    long x21 = xs[22];\n    long\
    \ x22 = xs[23];\n    long x23 = xs[24];\n    long x24 = xs[25];\n    long x25\
    \ = xs[26];\n    long x26 = xs[27];\n    long x27 = xs[28];\n    long x28 = xs[29];\n\
    \    long x29 = xs[30];\n    long x30 = xs[31];\n    long x31 = xs[32];\n    long\
    \ x32 = xs[33];\n    long x33 = xs[34];\n    long x34 = xs[35];\n    long x35\
    \ = xs[36];\n    long x36 = xs[37];\n    long x37 = xs[38];\n    long x38 = xs[39];\n\
    \    long x39 = xs[40];\n    long x40 = xs[41];\n    long x41 = xs[42];\n    long\
    \ x42 = xs[43];\n    long x43 = xs[44];\n    long x44 = xs[45];\n    long x45\
    \ = xs[46];\n    long x46 = xs[47];\n    long x47 = xs[48];\n    long x48 = xs[49];\n\
    \    long x49 = xs[50];\n    long x50 = xs[51];\n    long x51 = xs[52];\n    long\
    \ x52 = xs[53];\n    long x53 = xs[54];\n    long x54 = xs[55];\n    long x55\
    \ = xs[56];\n    long \nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc7349q42.d(69): Error: no identifier for declarator `long`

    /tmp/tmpc7349q42.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7349q42.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length + 1)];\n    long x = 0;\n \
    \   long y = 0;\n    long sum = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        sum += xs[i];\n    }\n    result[0] = sum;\n    for (int i = 1;\
    \ i < result.length; i++)\n    {\n        x = sum;\n        y = result[i-1];\n\
    \        result[i] = y;\n        for (int j = 1; j < xs.length; j++)\n       \
    \ {\n            sum += xs[j] * y;\n        }\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long[] result\
    \ = new long[(xs.length + 1)];\n    long x = 0;\n    long y = 0;\n    long sum\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        sum += xs[i];\n\
    \    }\n    result[0] = sum;\n    for (int i = 1; i < result.length; i++)\n  \
    \  {\n        x = sum;\n        y = result[i-1];\n        result[i] = y;\n   \
    \     for (int j = 1; j < xs.length; j++)\n        {\n            sum += xs[j]\
    \ * y;\n        }\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order) \n{\n    long[] result = new long[(xs.length + 1)];\n\
    \    long x = 0;\n    long y = 0;\n    long sum = 0;\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        sum += xs[i];\n    }\n    result[0] = sum;\n\
    \    for (int i = 1; i < result.length; i++)\n    {\n        x = sum;\n      \
    \  y = result[i-1];\n        result[i] = y;\n        for (int j = 1; j < xs.length;\
    \ j++)\n        {\n            sum += xs[j] * y;\n        }\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ int degree2) \n{\n    long[] result = new long[(xs.length + 1)];\n    long x\
    \ = 0;\n    long y = 0;\n    long sum = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        sum += xs[i];\n    }\n    result[0] = sum;\n    for (int\
    \ i = 1; i < result.length; i++)\n    {\n        x = sum;\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9n4118s8.d(110): Error: found `unittest` instead of statement

    /tmp/tmp9n4118s8.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9n4118s8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i, xs.length - 1);\n    }\n    return res;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j) \n{\n    long res\
    \ = 0;\n    if(i == j)\n    {\n        return xs[i];\n    }\n    else\n    {\n\
    \        res += xs[i] * derivative(xs, i, j);\n    }\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int i, int j, int k) \n{\n    long\
    \ res = 0;\n    if(i == j && k == 0)\n    {\n        return xs[i];\n    }\n  \
    \  else\n    {\n        res += xs[i] * derivative(xs, i, j, k);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int\
    \ l) \n{\n    long res = 0;\n    if(i == j && k == l && l == 0)\n    {\n     \
    \   return xs[i];\n    }\n    else\n    {\n        res += xs[i] * derivative(xs,\
    \ i, j, k, l);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i, int j, int k, int l, int m) \n{\n    long res = 0;\n    if(i == j\
    \ && k == l && l == m && m == 0)\n    {\n        return xs[i];\n    }\n    else\n\
    \    {\n        res += xs[i] * derivative(xs, i, j, k, l, m);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int\
    \ l, int m, int n) \n{\n    long \nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpejrjnhru.d(103): Error: no identifier for declarator `long`

    /tmp/tmpejrjnhru.d(103): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpejrjnhru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = 0;\n    long[] result = new long[(xs.length - 1)];\n \
    \   for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n\
    \    }\n    result[result.length - 1] = 1;\n    for(int i = result.length - 2;\
    \ i >= 0; i--)\n    {\n        result[i] *= x;\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double x = 0;\n \
    \   double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    result[result.length\
    \ - 1] = 1;\n    for(int i = result.length - 2; i >= 0; i--)\n    {\n        result[i]\
    \ *= x;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float x = 0;\n    float[] result = new float[(xs.length - 1)];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n \
    \   result[result.length - 1] = 1;\n    for(int i = result.length - 2; i >= 0;\
    \ i--)\n    {\n        result[i] *= x;\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl1mo6ukx.d(18): Error: cannot implicitly convert expression `result.length
    - 2LU` of type `ulong` to `int`

    /tmp/tmpl1mo6ukx.d(39): Error: cannot implicitly convert expression `result.length
    - 2LU` of type `ulong` to `int`

    /tmp/tmpl1mo6ukx.d(60): Error: cannot implicitly convert expression `result.length
    - 2LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl1mo6ukx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1) * 2];\n    long x = 1;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i * 2] = x;\n \
    \       result[i * 2 + 1] = xs[i] - x;\n        x *= xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[(xs.length - 1) * 2];\n    double x = 1;\n    for(int i\
    \ = 0; i < xs.length; i++)\n    {\n        result[i * 2] = x;\n        result[i\
    \ * 2 + 1] = xs[i] - x;\n        x *= xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length - 1) * 2];\n    float x = 1;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i * 2] = x;\n        result[i * 2 + 1] = xs[i] -\
    \ x;\n        x *= xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpg8u6ifrz.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x429506]

    ??:? long[] tmpg8u6ifrz.derivative(long[]) [0x428aff]

    ??:? void tmpg8u6ifrz.__unittest_L63_C1() [0x428e83]

    ??:? void tmpg8u6ifrz.__modtest() [0x4291d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4320b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c94d]

    ??:? runModuleUnitTests [0x42d8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i] - xs[i - 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; i++)\n      \
    \  result[i] = xs[i] - xs[i - 1];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i] - xs[i - 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzpsiddnz.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpzpsiddnz.d(25): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpzpsiddnz.d(39): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpsiddnz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i);\n    }\n    return new long[]{res};\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i) \n{\n    long res = 0;\n\
    \    for(int j = 0; j < i; j++)\n    {\n        res += xs[i] * derivative(xs,\
    \ j);\n    }\n    return new long[]{res};\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i, int j) \n{\n    long res = 0;\n    for(int k = 0; k < j; k++)\n \
    \   {\n        res += xs[i] * derivative(xs, i, j);\n    }\n    return new long[]{res};\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k) \n{\n   \
    \ long res = 0;\n    for(int l = 0; l < k; l++)\n    {\n        res += xs[i] *\
    \ derivative(xs, i, j, l);\n    }\n    return new long[]{res};\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k, int l) \n{\n    long res = 0;\n\
    \    for(int m = 0; m < l; m++)\n    {\n        res += xs[i] * derivative(xs,\
    \ i, j, k, l);\n    }\n    return new long[]{res};\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i, int j, int k, int l, int m) \n{\n    long res = 0;\n    for(int n\
    \ = 0; n < m; n++)\n    {\n        res += xs[i] * derivative(xs, i, j, k, l, m);\n\
    \    }\n    return new long[]{res};\n}\n/*\n\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprz18hw54.d(16): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmprz18hw54.d(16): Error: found `}` when expecting `;` following statement

    /tmp/tmprz18hw54.d(16): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmprz18hw54.d(31): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmprz18hw54.d(31): Error: found `}` when expecting `;` following statement

    /tmp/tmprz18hw54.d(31): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmprz18hw54.d(46): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmprz18hw54.d(46): Error: found `}` when expecting `;` following statement

    /tmp/tmprz18hw54.d(46): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmprz18hw54.d(61): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmprz18hw54.d(61): Error: found `}` when expecting `;` following statement

    /tmp/tmprz18hw54.d(61): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmprz18hw54.d(76): Error: f'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp33mt1e9e.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33mt1e9e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i];\n    result[n-1] = 1;\n    for(int\
    \ i = n-2; i >= 0; i--)\n        result[i] = result[i+1] * xs[i];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; i++)\n      \
    \  result[i] = xs[i];\n    result[n-1] = 1;\n    for(int i = n-2; i >= 0; i--)\n\
    \        result[i] = result[i+1] * xs[i];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] result\
    \ = new float[n];\n    for(int i = 0; i < n; i++)\n        result[i] = xs[i];\n\
    \    result[n-1] = 1;\n    for(int i = n-2; i >= 0; i--)\n        result[i] =\
    \ result[i+1] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw0bflt4w.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpw0bflt4w.d(28): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpw0bflt4w.d(45): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw0bflt4w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] derivative = new long[xs.length +\
    \ 1];\n    derivative[0] = result;\n    for(int i = 1; i < xs.length; i++)\n \
    \   {\n        derivative[i] = derivative[i - 1] * xs[i];\n    }\n    return derivative;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    double[] derivative = new double[xs.length + 1];\n    derivative[0] =\
    \ result;\n    for(int i = 1; i < xs.length; i++)\n    {\n        derivative[i]\
    \ = derivative[i - 1] * xs[i];\n    }\n    return derivative;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float result = 0;\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    float[] derivative\
    \ = new float[xs.length + 1];\n    derivative[0] = result;\n    for(int i = 1;\
    \ i < xs.length; i++)\n    {\n        derivative[i] = derivative[i - 1] * xs[i];\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b64qlxm.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294c5]

    ??:? void tmp2b64qlxm.__unittest_L72_C1() [0x428f5e]

    ??:? void tmp2b64qlxm.__modtest() [0x429248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432120]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431bfd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9bd]

    ??:? runModuleUnitTests [0x42d929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429988]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1]\
    \ = 1;\n    for(int i = n-2; i >= 0; i--)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1]\
    \ = 1;\n    for(int i = n-2; i >= 0; i--)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1]\
    \ = 1;\n    for(int i = n-2; i >= 0; i--)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnziz4ly1.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpnziz4ly1.d(32): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpnziz4ly1.d(53): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnziz4ly1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] result = new long[n];\n    long\
    \ d = 1;\n    for(int i = 0; i < n; i++)\n    {\n        result[i] = d;\n    \
    \    d *= xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double n = xs.length;\n    double[] result = new double[n];\n \
    \   double d = 1;\n    for(int i = 0; i < n; i++)\n    {\n        result[i] =\
    \ d;\n        d *= xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float n = xs.length;\n    float[] result = new float[n];\n    float\
    \ d = 1;\n    for(int i = 0; i < n; i++)\n    {\n        result[i] = d;\n    \
    \    d *= xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0nboccnz.d(30): Error: cannot implicitly convert expression `n`
    of type `double` to `ulong`

    /tmp/tmp0nboccnz.d(48): Error: cannot implicitly convert expression `n` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0nboccnz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n   \
    \ }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++)\n    {\n\
    \        result[i] = xs[i + 1] - xs[i];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0o4ipfa_.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x429355]

    ??:? void tmp0o4ipfa_.__unittest_L54_C1() [0x428dee]

    ??:? void tmp0o4ipfa_.__modtest() [0x4290d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9e3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c876]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431fb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431a8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c84d]

    ??:? runModuleUnitTests [0x42d7b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429818]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d += xs[i] * xs[i];\n    }\n    return long[] { d };\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree) \n{\n    long d = 0;\n    for(int i =\
    \ 0; i < xs.length; i++)\n    {\n        d += xs[i] * xs[i];\n    }\n    return\
    \ long[] { d };\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        d += xs[i] * xs[i];\n    }\n    return long[] { d };\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative(long[] xs, int degree, int order, bool isDerivative)\
    \ \n{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n      \
    \  d += xs[i] * xs[i];\n    }\n    return long[] { d };\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, bool isDerivative, int order2)\
    \ \n{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n      \
    \  d += xs[i] * xs[i];\n    }\n    return long[] { d };\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, bool isDerivative, int order2,\
    \ int order3) \n{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n \
    \   {\n        d += xs[i] * xs[i];\n    }\n    return long[] { d };\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9spkma_a.d(16): Error: found `[` when expecting `.` following long

    /tmp/tmp9spkma_a.d(16): Error: found `]` when expecting identifier following `long`.

    /tmp/tmp9spkma_a.d(16): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp9spkma_a.d(16): Error: found `}` when expecting `;` following statement

    /tmp/tmp9spkma_a.d(16): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp9spkma_a.d(31): Error: found `[` when expecting `.` following long

    /tmp/tmp9spkma_a.d(31): Error: found `]` when expecting identifier following `long`.

    /tmp/tmp9spkma_a.d(31): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp9spkma_a.d(31): Error: found `}` when expecting `;` following statement

    /tmp/tmp9spkma_a.d(31): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp9spkma_a.d(46): Error: found `[` when expecting `.` following long

    /tmp/tmp9spkma_a.d(46): Error: found `]` when expecting identifier following `long`.

    /tmp/tmp9spkma_a.d(46): Error: found `{` when ex'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for (int i = 0;\
    \ i < result.length; i++)\n        result[i] = 0;\n    for (int i = 1; i < xs.length;\
    \ i++)\n        result[i] = result[i-1] + xs[i] * xs[i-1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result =\
    \ new double[(xs.length - 1)];\n    for (int i = 0; i < result.length; i++)\n\
    \        result[i] = 0;\n    for (int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] + xs[i] * xs[i-1];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    for (int i =\
    \ 0; i < result.length; i++)\n        result[i] = 0;\n    for (int i = 1; i <\
    \ xs.length; i++)\n        result[i] = result[i-1] + xs[i] * xs[i-1];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n\
    \    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpbehs5xn4.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x429596]

    ??:? long[] tmpbehs5xn4.derivative(long[]) [0x428b35]

    ??:? void tmpbehs5xn4.__unittest_L54_C1() [0x428f0f]

    ??:? void tmpbehs5xn4.__modtest() [0x429264]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ca06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9dd]

    ??:? runModuleUnitTests [0x42d949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    result[0]\
    \ = xs[0];\n    for (int i = 1; i < n; i++) {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    result[0]\
    \ = xs[0];\n    for (int i = 1; i < n; i++) {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    result[0]\
    \ = xs[0];\n    for (int i = 1; i < n; i++) {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbiow2sb.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpxbiow2sb.d(27): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpxbiow2sb.d(43): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbiow2sb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1) * 2];\n    for(int i =\
    \ 0; i < xs.length - 1; i++)\n    {\n        result[i * 2] = xs[i + 1];\n    \
    \    result[i * 2 + 1] = xs[i];\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b0riwdl.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x428555]

    ??:? void tmp2b0riwdl.__unittest_L19_C1() [0x427fee]

    ??:? void tmp2b0riwdl.__modtest() [0x4282d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c633]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b4c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430751]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c00]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b49d]

    ??:? runModuleUnitTests [0x42c409]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a18]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n        ds[i] = xs[i+1] - xs[i];\n    return ds;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] ds = new double[n];\n    for(int i = 0; i < n; i++)\n        ds[i]\
    \ = xs[i+1] - xs[i];\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] ds = new float[n];\n    for(int i = 0; i <\
    \ n; i++)\n        ds[i] = xs[i+1] - xs[i];\n    return ds;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2w2adzwy.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp2w2adzwy.d(25): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp2w2adzwy.d(39): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2w2adzwy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i] = xs[i];\n    }\n    result[xs.length-1] = 1;\n\
    \    for(int i = xs.length-2; i >= 0; i--)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ft0_gek.d(17): Error: cannot implicitly convert expression `xs.length
    - 2LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ft0_gek.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = result\
    \ / xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = result\
    \ / xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order) \n{\n    long result = 0;\n    for(int i = 0; i <\
    \ xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[] result =\
    \ new long[result.bitLength()];\n    for(int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = result / xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int degree, int order, int scale)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = result\
    \ / xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int scale, int degree2) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    long[] result = new long[result.bitLength()];\n    for(int i = 0; i <\
    \ result.length; i++)\n    {\n        result[i] = result / xs[i];\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1l9i6yr9.d(103): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1l9i6yr9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < xs.length - 1; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n   \
    \ }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i < xs.length\
    \ - 1; i++)\n    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result\
    \ = new float[(xs.length - 1)];\n    for(int i = 0; i < xs.length - 1; i++)\n\
    \    {\n        result[i] = xs[i + 1] - xs[i];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpebdsk39v.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x429365]

    ??:? void tmpebdsk39v.__unittest_L54_C1() [0x428dfe]

    ??:? void tmpebdsk39v.__modtest() [0x4290e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c886]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431fc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431a9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c85d]

    ??:? runModuleUnitTests [0x42d7c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429828]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = (long)Math.pow(xs[i],\
    \ result.length) - 1;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = (long)Math.pow(xs[i],\
    \ degree) - 1;\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int power) \n{\n    long result = 0;\n    for(int i = 0; i <\
    \ xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    long[] result =\
    \ new long[result.bitLength()];\n    for(int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = (long)Math.pow(xs[i], degree) - power;\n    }\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int power, int power2) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = (long)Math.pow(xs[i],\
    \ degree) - power;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int power, int power2, int power3) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    long[] result = new long[result.bitLength()];\n    for(int i = 0; i <\
    \ result.length; i++)\n    {\n        result\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3key4syd.d(19): Error: C style cast illegal, use `cast(long)Math.pow(xs[i],
    result.length)`

    /tmp/tmp3key4syd.d(39): Error: C style cast illegal, use `cast(long)Math.pow(xs[i],
    degree)`

    /tmp/tmp3key4syd.d(59): Error: C style cast illegal, use `cast(long)Math.pow(xs[i],
    degree)`

    /tmp/tmp3key4syd.d(79): Error: C style cast illegal, use `cast(long)Math.pow(xs[i],
    degree)`

    /tmp/tmp3key4syd.d(100): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp3key4syd.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp3key4syd.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3key4syd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    result *= -1;\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.bitLength(); i++)\n    {\n        result[i]\
    \ = (result.bitLength() - i) * result.bitAt(i);\n    }\n    result[result.bitLength()]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       result *= xs[i];\n    }\n    result *= -1;\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.bitLength(); i++)\n    {\n        result[i]\
    \ = (result.bitLength() - i) * result.bitAt(i);\n    }\n    result[result.bitLength()]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result *= xs[i];\n    }\n    result *= -1;\n    long[] result\
    \ = new long[result.bitLength() + 1];\n    for(int i = 0; i < result.bitLength();\
    \ i++)\n    {\n        result[i] = (result.bitLength() - i) * result.bitAt(i);\n\
    \    }\n    result[result.bitLength()] = 1;\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, int degree2) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result *=\
    \ xs[i];\n    }\n    result *= -1;\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.bitLength(); i++)\n    {\n        result[i]\
    \ = (result.bitLength() - i) * result.bitAt(i);\n    }\n    result[result.bitLength()]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzo0a_nxh.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzo0a_nxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d *= xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n    result[0]\
    \ = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbtusc_ot.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428595]

    ??:? void tmpbtusc_ot.__unittest_L24_C1() [0x42802e]

    ??:? void tmpbtusc_ot.__modtest() [0x428318]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c673]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b506]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430791]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43071d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4dd]

    ??:? runModuleUnitTests [0x42c449]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a58]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length + 1)];\n    result[0] = xs[0];\n\
    \    for (int i = 1; i < result.length; i++)\n        result[i] = result[i-1]\
    \ * xs[i];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length + 1)];\n    result[0] = xs[0];\n\
    \    for (int i = 1; i < result.length; i++)\n        result[i] = result[i-1]\
    \ * xs[i];\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length + 1)];\n    result[0] = xs[0];\n    for\
    \ (int i = 1; i < result.length; i++)\n        result[i] = result[i-1] * xs[i];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp5zcu4wmn.d(14): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4294c6]

    ??:? long[] tmp5zcu4wmn.derivative(long[]) [0x428b7e]

    ??:? void tmp5zcu4wmn.__unittest_L51_C1() [0x428e43]

    ??:? void tmp5zcu4wmn.__modtest() [0x429198]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42daa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431bc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c90d]

    ??:? runModuleUnitTests [0x42d879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for (int i = 0;\
    \ i < result.length; i++) \n    {\n        result[i] = xs[i + 1];\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree)\
    \ \n{\n    long[] result = new long[(xs.length - degree)];\n    for (int i = 0;\
    \ i < result.length; i++) \n    {\n        result[i] = xs[i + degree];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long[] result = new long[(xs.length - degree - order)];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + degree + order];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int power) \n{\n    long[] result = new long[(xs.length\
    \ - degree - order - power)];\n    for (int i = 0; i < result.length; i++) \n\
    \    {\n        result[i] = xs[i + degree + order + power];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ int power, int power2) \n{\n    long[] result = new long[(xs.length - degree\
    \ - order - power - power2)];\n    for (int i = 0; i < result.length; i++) \n\
    \    {\n        result[i] = xs[i + degree + order + power + power2];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order, int power, int power2, int power3) \n{\n    long[] result = new long[(xs.length\
    \ - degree - order - power - power2 - power3)];\n    for (int i = 0; i < result.length;\
    \ i++\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqt3056e4.d(88): Error: found `unittest` when expecting `)`

    /tmp/tmpqt3056e4.d(98): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqt3056e4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    long x = 1;\n \
    \   for (int i = 0; i < xs.length; i++)\n    {\n        result[i] = xs[i];\n \
    \       x = x * xs[i];\n    }\n    result[result.length - 1] = 1;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpy46okpfz.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428616]

    ??:? long[] tmpy46okpfz.derivative(long[]) [0x427e89]

    ??:? void tmpy46okpfz.__unittest_L21_C1() [0x427f8f]

    ??:? void tmpy46okpfz.__modtest() [0x4282e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c643]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b4d6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ad]

    ??:? runModuleUnitTests [0x42c419]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result += (long)Math.pow(xs[i], 2);\n    }\n    long[] derivative = new\
    \ long[result];\n    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i]\
    \ = (long)Math.pow(xs[i], 2);\n    }\n    return derivative;\n}\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp84kb9mr7.d(14): Error: C style cast illegal, use `cast(long)Math.pow(xs[i],
    2)`

    /tmp/tmp84kb9mr7.d(19): Error: C style cast illegal, use `cast(long)Math.pow(xs[i],
    2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84kb9mr7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; ++i)\n        result[i] = xs[i];\n    for(int i = n - 1; i >=\
    \ 0; --i)\n    {\n        result[i] = result[i + 1];\n        result[i + 1] =\
    \ 0;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int order)\
    \ \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int i\
    \ = 0; i < n; ++i)\n        result[i] = xs[i];\n    for(int i = n - 1; i >= 0;\
    \ --i)\n    {\n        result[i] = result[i + 1];\n        result[i + 1] = 0;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int order,\
    \ int degree) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n\
    \    for(int i = 0; i < n; ++i)\n        result[i] = xs[i];\n    for(int i = n\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = result[i + 1];\n        result[i\
    \ + 1] = 0;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int order, int degree, int scale) \n{\n    int n = xs.length;\n    long[]\
    \ result = new long[n];\n    for(int i = 0; i < n; ++i)\n        result[i] = xs[i];\n\
    \    for(int i = n - 1; i >= 0; --i)\n    {\n        result[i] = result[i + 1];\n\
    \        result[i + 1] = 0;\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int order, int degree, int scale, int power) \n{\n    int n = xs.length;\n\
    \    long[] result = new long[n];\n    for(int i = 0; i < n; ++i)\n        result[i]\
    \ = xs[i];\n    for(int i = n - 1; i >= 0; --i)\n    {\n        result[i] = result[i\
    \ + 1];\n        result[i + 1] = 0;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + x\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb05gs6yt.d(98): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb05gs6yt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] ds = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n        ds[i] = xs[i] * derivative(xs, n - 1);\n    return\
    \ ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    double n\
    \ = xs.length;\n    double[] ds = new double[n];\n    for(int i = 0; i < n; i++)\n\
    \        ds[i] = xs[i] * derivative(xs, n - 1);\n    return ds;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float n = xs.length;\n    float[] ds =\
    \ new float[n];\n    for(int i = 0; i < n; i++)\n        ds[i] = xs[i] * derivative(xs,\
    \ n - 1);\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8lwgga5e.d(14): Error: none of the overloads of `derivative` are
    callable using argument types `(long[], long)`, candidates are:

    /tmp/tmp8lwgga5e.d(9):        `tmp8lwgga5e.derivative(long[] xs)`

    /tmp/tmp8lwgga5e.d(23):        `tmp8lwgga5e.derivative(double[] xs)`

    /tmp/tmp8lwgga5e.d(37):        `tmp8lwgga5e.derivative(float[] xs)`

    /tmp/tmp8lwgga5e.d(26): Error: cannot implicitly convert expression `n` of type
    `double` to `ulong`

    /tmp/tmp8lwgga5e.d(28): Error: none of the overloads of `derivative` are callable
    using argument types `(double[], double)`, candidates are:

    /tmp/tmp8lwgga5e.d(9):        `tmp8lwgga5e.derivative(long[] xs)`

    /tmp/tmp8lwgga5e.d(23):        `tmp8lwgga5e.derivative(double[] xs)`

    /tmp/tmp8lwgga5e.d(37):        `tmp8lwgga5e.derivative(float[] xs)`

    /tmp/tmp8lwgga5e.d(40): Error: cannot implicitly convert expression `n` of type
    `float` to `ulong`

    /tmp/tmp8lwgga5e.d(42): Error: none of the overloads of `derivative` are callable
    using argument types `(float[], float)`, candidates are:

    /t'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] d = new long[n];\n    long a =\
    \ xs[0];\n    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n    long\
    \ e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n\
    \    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n    long l =\
    \ xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o = xs[14];\n\
    \    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n    long s\
    \ = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n\
    \    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n    long z\
    \ = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n\
    \    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n    long g\
    \ = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n\
    \    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n    long n\
    \ = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n\
    \    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n    long u\
    \ = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n\
    \    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n    long b\
    \ = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n\
    \    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n    long i\
    \ = xs[60];\n    long j = xs[61];\n    long \nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_jyhv90a.d(76): Error: no identifier for declarator `long`

    /tmp/tmp_jyhv90a.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_jyhv90a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++) \n    {\n        result[i] = xs[i + 1];\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1];\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++) \n    {\n\
    \        result[i] = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2w6y_ku7.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x4292bd]

    ??:? void tmp2w6y_ku7.__unittest_L54_C1() [0x428d52]

    ??:? void tmp2w6y_ku7.__modtest() [0x42903c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d94b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c7de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431a69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431f18]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4319f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c7b5]

    ??:? runModuleUnitTests [0x42d721]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429780]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i <= (xs.length - 1); ++i) {\n        result[i] = xs[i + 1] - xs[i] * xs[i +\
    \ 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i <= (xs.length\
    \ - 1); ++i) {\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length - 1)];\n    for(int i = 0; i <= (xs.length\
    \ - 1); ++i) {\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n  \
    \  return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp2fiiv4m6.d(13): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4294c6]

    ??:? long[] tmp2fiiv4m6.derivative(long[]) [0x428af3]

    ??:? void tmp2fiiv4m6.__unittest_L51_C1() [0x428e43]

    ??:? void tmp2fiiv4m6.__modtest() [0x429198]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42daa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431bc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c90d]

    ??:? runModuleUnitTests [0x42d879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d *= xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n        d *= xs[i];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d *= xs[i];\n    }\n    double[] result = new double[xs.length + 1];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n     \
    \   d *= xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nfloat[] derivative(float[] xs) \n{\n    float d = 1;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n    float[] result\
    \ = new float[xs.length + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i] = d;\n        d *= xs[i];\n    }\n    result[xs.length] = 1;\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpufax7xhb.d(79): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294ad]

    ??:? void tmpufax7xhb.__unittest_L75_C1() [0x428f42]

    ??:? void tmpufax7xhb.__modtest() [0x42922c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431be5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9a5]

    ??:? runModuleUnitTests [0x42d911]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429970]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < xs.length - 1; i++)\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i < xs.length\
    \ - 1; i++)\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length - 1)];\n    for(int i = 0; i < xs.length - 1; i++)\n      \
    \  result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsyi6uqmh.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293e5]

    ??:? void tmpsyi6uqmh.__unittest_L48_C1() [0x428e7e]

    ??:? void tmpsyi6uqmh.__modtest() [0x429168]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c906]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c8dd]

    ??:? runModuleUnitTests [0x42d849]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4298a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result += (long)xs[i] * derivative(xs, i - 1);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ei9p3bm.d(14): Error: C style cast illegal, use `cast(long)xs[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ei9p3bm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = xs[0];\n    long y = xs[1];\n    long x2 = xs[2];\n  \
    \  long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6 =\
    \ xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n \
    \   long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n    \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclucbw2e.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclucbw2e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1) * (xs.length - 1) * 2];\n\
    \    long sum = 0;\n    for (int i = 0; i < xs.length - 1; i++) {\n        for\
    \ (int j = i + 1; j < xs.length; j++) {\n            sum += xs[i] * xs[j];\n \
    \           result[i * (xs.length - 1) + j] = sum;\n        }\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[(xs.length - 1) * (xs.length - 1) * 2];\n    double sum\
    \ = 0;\n    for (int i = 0; i < xs.length - 1; i++) {\n        for (int j = i\
    \ + 1; j < xs.length; j++) {\n            sum += xs[i] * xs[j];\n            result[i\
    \ * (xs.length - 1) + j] = sum;\n        }\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length - 1) * (xs.length - 1) * 2];\n    float sum = 0;\n    for (int\
    \ i = 0; i < xs.length - 1; i++) {\n        for (int j = i + 1; j < xs.length;\
    \ j++) {\n            sum += xs[i] * xs[j];\n            result[i * (xs.length\
    \ - 1) + j] = sum;\n        }\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxvg5gt82.d(67): unittest failure

    ----------------

    ??:? _d_unittestp [0x429445]

    ??:? void tmpxvg5gt82.__unittest_L63_C1() [0x428ede]

    ??:? void tmpxvg5gt82.__modtest() [0x4291c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431bf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4320a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c93d]

    ??:? runModuleUnitTests [0x42d8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429908]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n        result[i] = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n        result[i] = result[i] + xs[i] * derivative(xs, i + 1);\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[(xs.length - 1)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = 0;\n    for(int i = 0; i < xs.length; i++)\n     \
    \   result[i] = result[i] + xs[i] * derivative(xs, i + 1);\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++)\n      \
    \  result[i] = 0;\n    for(int i = 0; i < xs.length; i++)\n        result[i] =\
    \ result[i] + xs[i] * derivative(xs, i + 1);\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpynalb0pt.d(15): Error: none of the overloads of `derivative` are
    callable using argument types `(long[], int)`, candidates are:

    /tmp/tmpynalb0pt.d(9):        `tmpynalb0pt.derivative(long[] xs)`

    /tmp/tmpynalb0pt.d(24):        `tmpynalb0pt.derivative(double[] xs)`

    /tmp/tmpynalb0pt.d(39):        `tmpynalb0pt.derivative(float[] xs)`

    /tmp/tmpynalb0pt.d(30): Error: none of the overloads of `derivative` are callable
    using argument types `(double[], int)`, candidates are:

    /tmp/tmpynalb0pt.d(9):        `tmpynalb0pt.derivative(long[] xs)`

    /tmp/tmpynalb0pt.d(24):        `tmpynalb0pt.derivative(double[] xs)`

    /tmp/tmpynalb0pt.d(39):        `tmpynalb0pt.derivative(float[] xs)`

    /tmp/tmpynalb0pt.d(45): Error: none of the overloads of `derivative` are callable
    using argument types `(float[], int)`, candidates are:

    /tmp/tmpynalb0pt.d(9):        `tmpynalb0pt.derivative(long[] xs)`

    /tmp/tmpynalb0pt.d(24):        `tmpynalb0pt.derivative(double[] xs)`

    /tmp/tmpynalb0pt.d(39):        `tmpynalb0pt.derivative(float[] xs)`

    Fail'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = 0;\n    long[] result = new long[(xs.length - 1)];\n \
    \   for (int i = 1; i < xs.length; i++)\n    {\n        result[i - 1] = (long)\
    \ (xs[i] - xs[i - 1]);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double x = 0;\n    double[] result = new double[(xs.length - 1)];\n\
    \    for (int i = 1; i < xs.length; i++)\n    {\n        result[i - 1] = (double)\
    \ (xs[i] - xs[i - 1]);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float x = 0;\n    float[] result = new float[(xs.length - 1)];\n\
    \    for (int i = 1; i < xs.length; i++)\n    {\n        result[i - 1] = (float)\
    \ (xs[i] - xs[i - 1]);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg21rya1i.d(15): Error: C style cast illegal, use `cast(long)(xs[i]
    - xs[i - 1])`

    /tmp/tmpg21rya1i.d(31): Error: C style cast illegal, use `cast(double)(xs[i] -
    xs[i - 1])`

    /tmp/tmpg21rya1i.d(47): Error: C style cast illegal, use `cast(float)(xs[i] -
    xs[i - 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg21rya1i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i] * derivative(xs, i, n -\
    \ 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ n) \n{\n    if(i == n)\n    {\n        return xs;\n    }\n    else\n    {\n\
    \        long[] result = new long[n];\n        for(int j = 0; j < n; j++)\n  \
    \      {\n            result[j] = xs[i] * derivative(xs, i + 1, n);\n        }\n\
    \        return result;\n    }\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i) \n\
    {\n    return derivative(xs, i, xs.length);\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    return derivative(xs, 0, xs.length);\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i, int n) \n{\n    if(i == n)\n    {\n        return xs;\n    }\n  \
    \  else\n    {\n        long[] result = new long[n];\n        for(int j = 0; j\
    \ < n; j++)\n        {\n            result[j] = xs[i] * derivative(xs, i + 1,\
    \ n);\n        }\n        return result;\n    }\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int i) \n{\n    return derivative(xs, i, xs.length);\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs) \n{\n    return derivative(xs, 0, xs.length);\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    x\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf6jn4inz.d(103): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf6jn4inz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long xd = 0;\n\
    \    long yd = 0;\n    long zd = 0;\n    long xdd = 0;\n    long ydd = 0;\n  \
    \  long zdd = 0;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n  \
    \  long ydd = 1;\n    long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n  \
    \  long zdd = 1;\n    long xdd = 1;\n    long ydd = 1;\n    long zdd = 1;\n  \
    \  long xdd = 1;\n    long ydd = 1;\n    long zd\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1suj5ri3.d(86): Error: semicolon expected, not `unittest`

    /tmp/tmp1suj5ri3.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1suj5ri3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    long a = xs[0];\n\
    \    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n    long e = xs[4];\n\
    \    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n    long i = xs[8];\n\
    \    long j = xs[9];\n    long k = xs[10];\n    long l = xs[11];\n    long m =\
    \ xs[12];\n    long n = xs[13];\n    long o = xs[14];\n    long p = xs[15];\n\
    \    long q = xs[16];\n    long r = xs[17];\n    long s = xs[18];\n    long t\
    \ = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n    long w = xs[22];\n\
    \    long x = xs[23];\n    long y = xs[24];\n    long z = xs[25];\n    long a\
    \ = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n    long d = xs[29];\n\
    \    long e = xs[30];\n    long f = xs[31];\n    long g = xs[32];\n    long h\
    \ = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n    long k = xs[36];\n\
    \    long l = xs[37];\n    long m = xs[38];\n    long n = xs[39];\n    long o\
    \ = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n    long r = xs[43];\n\
    \    long s = xs[44];\n    long t = xs[45];\n    long u = xs[46];\n    long v\
    \ = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n    long y = xs[50];\n\
    \    long z = xs[51];\n    long a = xs[52];\n    long b = xs[53];\n    long c\
    \ = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n    long f = xs[57];\n\
    \    long g = xs[58];\n    long h = xs[59];\n    long i = xs[60];\n    long j\
    \ = xs[61];\n    long k = xs[\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpognwpf6x.d(75): Error: expression expected, not `unittest`

    /tmp/tmpognwpf6x.d(76): Error: found `{` when expecting `,`

    /tmp/tmpognwpf6x.d(77): Error: expression expected, not `alias`

    /tmp/tmpognwpf6x.d(77): Error: found `candidate` when expecting `,`

    /tmp/tmpognwpf6x.d(77): Error: expression expected, not `=`

    /tmp/tmpognwpf6x.d(77): Error: found `derivative` when expecting `,`

    /tmp/tmpognwpf6x.d(77): Error: expression expected, not `;`

    /tmp/tmpognwpf6x.d(79): Error: found `assert` when expecting `,`

    /tmp/tmpognwpf6x.d(79): Error: found `;` when expecting `,`

    /tmp/tmpognwpf6x.d(80): Error: found `;` when expecting `,`

    /tmp/tmpognwpf6x.d(81): Error: found `;` when expecting `,`

    /tmp/tmpognwpf6x.d(82): Error: found `;` when expecting `,`

    /tmp/tmpognwpf6x.d(83): Error: found `;` when expecting `,`

    /tmp/tmpognwpf6x.d(84): Error: expression expected, not `}`

    /tmp/tmpognwpf6x.d(85): Error: found `void` when expecting `,`

    /tmp/tmpognwpf6x.d(85): Error: found `{` when expecting `,`

    /tmp/tmpognwpf6x.d(85): Erro'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = xs[0];\n    long[] result = new long[(xs.length - 1)];\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        result[i - 1] = (long)\
    \ (xs[i] - x * xs[i - 1]);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double x = xs[0];\n    double[] result = new double[(xs.length\
    \ - 1)];\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i - 1]\
    \ = (double) (xs[i] - x * xs[i - 1]);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float x = xs[0];\n    float[] result =\
    \ new float[(xs.length - 1)];\n    for(int i = 1; i < xs.length; i++)\n    {\n\
    \        result[i - 1] = (float) (xs[i] - x * xs[i - 1]);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdz0y873h.d(15): Error: C style cast illegal, use `cast(long)(xs[i]
    - x * xs[i - 1])`

    /tmp/tmpdz0y873h.d(31): Error: C style cast illegal, use `cast(double)(xs[i] -
    x * xs[i - 1])`

    /tmp/tmpdz0y873h.d(47): Error: C style cast illegal, use `cast(float)(xs[i] -
    x * xs[i - 1])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdz0y873h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n    long d =\
    \ 1;\n    for(int i = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d *=\
    \ xs[i];\n    }\n    return ds;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx6jwa8ph.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6jwa8ph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] d = new long[n];\n    long sum\
    \ = 0;\n    for(int i = 0; i < n; i++) {\n        d[i] = xs[i];\n        sum +=\
    \ xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--) {\n        d[i] = xs[i] -\
    \ sum;\n        sum += d[i];\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double n = xs.length;\n    double[] d = new double[n];\n    double\
    \ sum = 0;\n    for(int i = 0; i < n; i++) {\n        d[i] = xs[i];\n        sum\
    \ += xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--) {\n        d[i] = xs[i]\
    \ - sum;\n        sum += d[i];\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float n = xs.length;\n    float[] d = new float[n];\n    float\
    \ sum = 0;\n    for(int i = 0; i < n; i++) {\n        d[i] = xs[i];\n        sum\
    \ += xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--) {\n        d[i] = xs[i]\
    \ - sum;\n        sum += d[i];\n    }\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfk0glx9.d(18): Error: cannot implicitly convert expression `n
    - 1L` of type `long` to `int`

    /tmp/tmplfk0glx9.d(33): Error: cannot implicitly convert expression `n` of type
    `double` to `ulong`

    /tmp/tmplfk0glx9.d(39): Error: cannot implicitly convert expression `n - 1.00000`
    of type `double` to `int`

    /tmp/tmplfk0glx9.d(54): Error: cannot implicitly convert expression `n` of type
    `float` to `ulong`

    /tmp/tmplfk0glx9.d(60): Error: cannot implicitly convert expression `n - 1.00000F`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfk0glx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length)+1];\n    result[0] = 1;\n\
    \    for(int i = 1; i < xs.length; i++)\n        result[i] = result[i-1] * xs[i];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc8wpl48_.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x428545]

    ??:? void tmpc8wpl48_.__unittest_L17_C1() [0x427fde]

    ??:? void tmpc8wpl48_.__modtest() [0x4282c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c623]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b4b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430741]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bf0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b48d]

    ??:? runModuleUnitTests [0x42c3f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a08]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1) * 2];\n    for(int i =\
    \ 0; i < xs.length - 1; i++)\n    {\n        result[i * 2] = xs[i + 1];\n    \
    \    result[i * 2 + 1] = xs[i];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    double[] derivative(double[] xs) \n{\n    double[] result = new double[(xs.length\
    \ - 1) * 2];\n    for(int i = 0; i < xs.length - 1; i++)\n    {\n        result[i\
    \ * 2] = xs[i + 1];\n        result[i * 2 + 1] = xs[i];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[(xs.length - 1) * 2];\n    for(int i = 0; i < xs.length - 1; i++)\n  \
    \  {\n        result[i * 2] = xs[i + 1];\n        result[i * 2 + 1] = xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkh2t7bzy.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4293ed]

    ??:? void tmpkh2t7bzy.__unittest_L57_C1() [0x428e82]

    ??:? void tmpkh2t7bzy.__modtest() [0x42916c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c90e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c8e5]

    ??:? runModuleUnitTests [0x42d851]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4298b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result += (long)(xs[i] * xs[i]);\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = (long)Math.pow(xs[i], 2);\n    }\n    result[result.length - 1] = 1;\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n     \
    \   result += (double)(xs[i] * xs[i]);\n    }\n    double[] result = new double[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = Math.pow(xs[i], 2);\n    }\n    result[result.length - 1] = 1;\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    float result\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result += (float)(xs[i]\
    \ * xs[i]);\n    }\n    float[] result = new float[result.bitLength() + 1];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = (float)Math.pow(xs[i],\
    \ 2);\n    }\n    result[result.length - 1] = 1;\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptlt7khep.d(14): Error: C style cast illegal, use `cast(long)(xs[i]
    * xs[i])`

    /tmp/tmptlt7khep.d(19): Error: C style cast illegal, use `cast(long)Math.pow(xs[i],
    2)`

    /tmp/tmptlt7khep.d(35): Error: C style cast illegal, use `cast(double)(xs[i] *
    xs[i])`

    /tmp/tmptlt7khep.d(56): Error: C style cast illegal, use `cast(float)(xs[i] *
    xs[i])`

    /tmp/tmptlt7khep.d(61): Error: C style cast illegal, use `cast(float)Math.pow(xs[i],
    2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptlt7khep.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n        d[i] = xs[i];\n    for(int i = 1; i < n; i++)\n  \
    \      d[i] = d[i] - d[i-1] * xs[i];\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] d = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n        d[i] = xs[i];\n    for(int i = 1; i < n; i++)\n\
    \        d[i] = d[i] - d[i-1] * xs[i];\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] d = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n        d[i] = xs[i];\n    for(int i = 1; i < n; i++)\n\
    \        d[i] = d[i] - d[i-1] * xs[i];\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdee39x2v.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpdee39x2v.d(27): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpdee39x2v.d(43): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdee39x2v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i + 1);\n    }\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    double res = 0;\n \
    \   for(int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * derivative(xs,\
    \ i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        res\
    \ += xs[i] * derivative(xs, i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppnw_3blo.d(14): Error: none of the overloads of `derivative` are
    callable using argument types `(long[], int)`, candidates are:

    /tmp/tmppnw_3blo.d(9):        `tmppnw_3blo.derivative(long[] xs)`

    /tmp/tmppnw_3blo.d(24):        `tmppnw_3blo.derivative(double[] xs)`

    /tmp/tmppnw_3blo.d(39):        `tmppnw_3blo.derivative(float[] xs)`

    /tmp/tmppnw_3blo.d(16): Error: cannot implicitly convert expression `res` of type
    `long` to `long[]`

    /tmp/tmppnw_3blo.d(29): Error: none of the overloads of `derivative` are callable
    using argument types `(double[], int)`, candidates are:

    /tmp/tmppnw_3blo.d(9):        `tmppnw_3blo.derivative(long[] xs)`

    /tmp/tmppnw_3blo.d(24):        `tmppnw_3blo.derivative(double[] xs)`

    /tmp/tmppnw_3blo.d(39):        `tmppnw_3blo.derivative(float[] xs)`

    /tmp/tmppnw_3blo.d(31): Error: cannot implicitly convert expression `res` of type
    `double` to `double[]`

    /tmp/tmppnw_3blo.d(44): Error: none of the overloads of `derivative` are callable
    using argument types `(float[], int)`, candidates are:

    /'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n    for(int i\
    \ = 0; i < n; i++) {\n        ys[i] = xs[i];\n    }\n    for(int i = n - 1; i\
    \ >= 0; i--) {\n        ys[i] = ys[i + 1] * xs[i + 1];\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] ys = new double[n];\n    for(int i = 0; i < n; i++) {\n        ys[i]\
    \ = xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--) {\n        ys[i] = ys[i\
    \ + 1] * xs[i + 1];\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] ys = new float[n];\n    for(int\
    \ i = 0; i < n; i++) {\n        ys[i] = xs[i];\n    }\n    for(int i = n - 1;\
    \ i >= 0; i--) {\n        ys[i] = ys[i + 1] * xs[i + 1];\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmt74p8gn.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpmt74p8gn.d(29): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpmt74p8gn.d(47): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmt74p8gn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long[]\
    \ result = new long[degree];\n    for(int i = 0; i < result.length; i++)\n   \
    \ {\n        result[i] = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order) \n{\n    long[] result = new\
    \ long[order];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, double tol) \n{\n    long[] result = new long[order];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order, double tol, int precision) \n{\n    long[] result = new long[order];\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order, double tol, int precision, int order) \n{\n    long[] result = new\
    \ long[order];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpme52zdfb.d(84): Error: function `tmpme52zdfb.derivative` parameter
    `derivative.order` is already defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpme52zdfb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i] * derivative(xs, i-1);\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int i) \n{\n    int n\
    \ = xs.length;\n    long[] result = new long[n];\n    for(int j = 0; j < n; j++)\n\
    \        result[j] = xs[i] * derivative(xs, i-1);\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int i, int j) \n{\n    int n = xs.length;\n\
    \    long[] result = new long[n];\n    for(int k = 0; k < n; k++)\n        result[k]\
    \ = xs[i] * derivative(xs, i-1, k);\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k) \n{\n    int n = xs.length;\n\
    \    long[] result = new long[n];\n    for(int l = 0; l < n; l++)\n        result[l]\
    \ = xs[i] * derivative(xs, i-1, k, l);\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k, int l) \n{\n    int n = xs.length;\n\
    \    long[] result = new long[n];\n    for(int m = 0; m < n; m++)\n        result[m]\
    \ = xs[i] * derivative(xs, i-1, k, l, m);\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k, int l, int m) \n{\n    int n\
    \ = xs.length;\n    long[] result = new long[n];\n    for(int n = 0; n < n; n++)\n\
    \        result[n] = xs[i] * derivative(xs, i-1, k, l, m, \nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzjtei81h.d(85): Error: expression expected, not `unittest`

    /tmp/tmpzjtei81h.d(86): Error: found `{` when expecting `,`

    /tmp/tmpzjtei81h.d(87): Error: expression expected, not `alias`

    /tmp/tmpzjtei81h.d(87): Error: found `candidate` when expecting `,`

    /tmp/tmpzjtei81h.d(87): Error: expression expected, not `=`

    /tmp/tmpzjtei81h.d(87): Error: found `derivative` when expecting `,`

    /tmp/tmpzjtei81h.d(87): Error: expression expected, not `;`

    /tmp/tmpzjtei81h.d(89): Error: found `assert` when expecting `,`

    /tmp/tmpzjtei81h.d(89): Error: found `;` when expecting `,`

    /tmp/tmpzjtei81h.d(90): Error: found `;` when expecting `,`

    /tmp/tmpzjtei81h.d(91): Error: found `;` when expecting `,`

    /tmp/tmpzjtei81h.d(92): Error: found `;` when expecting `,`

    /tmp/tmpzjtei81h.d(93): Error: found `;` when expecting `,`

    /tmp/tmpzjtei81h.d(94): Error: expression expected, not `}`

    /tmp/tmpzjtei81h.d(95): Error: found `void` when expecting `,`

    /tmp/tmpzjtei81h.d(95): Error: found `{` when expecting `,`

    /tmp/tmpzjtei81h.d(95): Erro'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = xs[0];\n    long[] result = new long[xs.length + 1];\n\
    \    result[0] = 1;\n    for (int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * x;\n        x = xs[i];\n    }\n    result[xs.length] = 1;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa75peo7t.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x42859d]

    ??:? void tmpa75peo7t.__unittest_L22_C1() [0x428036]

    ??:? void tmpa75peo7t.__modtest() [0x428320]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c67b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b50e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430799]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430725]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4e5]

    ??:? runModuleUnitTests [0x42c451]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a60]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length)+1];\n    for(int i = 0; i\
    \ <= (xs.length); ++i)\n    {\n        result[i] = xs[i+1];\n    }\n    result[xs.length]\
    \ = 1;\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length)+1];\n    for(int i = 0; i <= (xs.length);\
    \ ++i)\n    {\n        result[i] = xs[i+1];\n    }\n    result[xs.length] = 1;\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length)+1];\n    for(int i = 0; i <= (xs.length);\
    \ ++i)\n    {\n        result[i] = xs[i+1];\n    }\n    result[xs.length] = 1;\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuelwjlel.d(14): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x429416]

    ??:? long[] tmpuelwjlel.derivative(long[]) [0x428b18]

    ??:? void tmpuelwjlel.__unittest_L57_C1() [0x428d8f]

    ??:? void tmpuelwjlel.__modtest() [0x4290e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9f3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c886]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431fc0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431a9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c85d]

    ??:? runModuleUnitTests [0x42d7c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long[]\
    \ result = new long[(xs.length - degree)];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + degree];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order) \n{\n \
    \   long[] result = new long[(xs.length - order - degree)];\n    for (int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = xs[i + order + degree];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order, int degree2) \n{\n    long[] result = new long[(xs.length - order\
    \ - degree - degree2)];\n    for (int i = 0; i < result.length; i++)\n    {\n\
    \        result[i] = xs[i + order + degree + degree2];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int degree2,\
    \ int order2) \n{\n    long[] result = new long[(xs.length - order - degree -\
    \ degree2 - order2)];\n    for (int i = 0; i < result.length; i++)\n    {\n  \
    \      result[i] = xs[i + order + degree + degree2 + order2];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ int degree2, int order2, int degree3) \n{\n    long[] result = new long[(xs.length\
    \ - order - degree - degree2 - order2 - degree3)];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu9f9pjmi.d(90): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpu9f9pjmi.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpu9f9pjmi.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu9f9pjmi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] ds = new long[n];\n    long d =\
    \ 1;\n    for(int i = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d *=\
    \ xs[i];\n    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double n = xs.length;\n    double[] ds = new double[n];\n    double d = 1;\n\
    \    for(int i = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d *= xs[i];\n\
    \    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float n = xs.length;\n    float[] ds = new float[n];\n    float d = 1;\n  \
    \  for(int i = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d *= xs[i];\n\
    \    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedqxapie.d(30): Error: cannot implicitly convert expression `n`
    of type `double` to `ulong`

    /tmp/tmpedqxapie.d(48): Error: cannot implicitly convert expression `n` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedqxapie.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n        result[i] = 0;\n    for(int i = 1; i < xs.length;\
    \ i++)\n        result[i] = result[i-1] + xs[i] * xs[i];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result =\
    \ new double[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++)\n \
    \       result[i] = 0;\n    for(int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] + xs[i] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n        result[i] = 0;\n    for(int i = 1; i < xs.length;\
    \ i++)\n        result[i] = result[i-1] + xs[i] * xs[i];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp63ubat1f.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x429586]

    ??:? long[] tmp63ubat1f.derivative(long[]) [0x428b35]

    ??:? void tmp63ubat1f.__unittest_L54_C1() [0x428f03]

    ??:? void tmp63ubat1f.__modtest() [0x429258]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432130]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9cd]

    ??:? runModuleUnitTests [0x42d939]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    result[0]\
    \ = xs[0];\n    result[1] = xs[1];\n    for (int i = 2; i < n; i++) {\n      \
    \  result[i] = result[i-2] + xs[i] * result[i-1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    result[0] = xs[0];\n    result[1] =\
    \ xs[1];\n    for (int i = 2; i < n; i++) {\n        result[i] = result[i-2] +\
    \ xs[i] * result[i-1];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    result[0]\
    \ = xs[0];\n    result[1] = xs[1];\n    for (int i = 2; i < n; i++) {\n      \
    \  result[i] = result[i-2] + xs[i] * result[i-1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf0v3d2o8.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpf0v3d2o8.d(28): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpf0v3d2o8.d(45): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf0v3d2o8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] derivative = new long[(xs.length - 1)];\n    derivative[0]\
    \ = xs[1];\n    for (int i = 2; i < derivative.length; i++)\n    {\n        derivative[i]\
    \ = (xs[i] - derivative[i - 1]) / xs[i - 1];\n    }\n    return derivative;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \          \n*/\nlong integral(long[] xs) \n{\n    long integral = 0;\n    for\
    \ (int i = 1; i < xs.length; i++)\n    {\n        integral += xs[i] * Math.pow(xs[0],\
    \ i);\n    }\n    return integral;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n            \n*/\ndouble integral(double[] xs) \n{\n    double\
    \ integral = 0;\n    for (int i = 1; i < xs.length; i++)\n    {\n        integral\
    \ += xs[i] * Math.pow(xs[0], i);\n    }\n    return integral;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n            \n*/\n\
    double integral(long xs) \n{\n    double integral = 0;\n    for (int i = 1; i\
    \ < xs.length; i++)\n    {\n        integral += xs[i] * Math.pow(xs[0], i);\n\
    \    }\n    return integral;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n            \n*/\ndouble integral(double xs) \n{\n    double\
    \ integral = 0;\n    for (int i = 1; i < xs.length; i++)\n    {\n        integral\
    \ += xs[i] * Math.pow(xs[0], i);\n    }\n    return integral;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n            \n*/\n\
    double integral(float xs) \n{\n    double integral = 0;\n    for (int i = 1; i\
    \ < xs.length; i++)\n    {\n        integral += xs[i] * Math.pow(xs[0], i);\n\
    \    }\n    return integral;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n            \n*/\ndouble integral(double \nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplznp410k.d(101): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplznp410k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n   \
    \ long d = xs[3];\n    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n\
    \    long h = xs[7];\n    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n\
    \    long l = xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o\
    \ = xs[14];\n    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n\
    \    long s = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v\
    \ = xs[21];\n    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n\
    \    long z = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c\
    \ = xs[28];\n    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n\
    \    long g = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j\
    \ = xs[35];\n    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n\
    \    long n = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q\
    \ = xs[42];\n    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n\
    \    long u = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x\
    \ = xs[49];\n    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n\
    \    long b = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e\
    \ = xs[56];\n    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n\
    \    long i = xs[60];\n    long j = xs[61];\n    long k = xs[62];\n    long l\
    \ = xs[63];\n    \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36_45_4z.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36_45_4z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; ++i)\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; ++i)\n      \
    \  result[i] = xs[i+1] - xs[i] * xs[i+1];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] result\
    \ = new float[n];\n    for(int i = 0; i < n; ++i)\n        result[i] = xs[i+1]\
    \ - xs[i] * xs[i+1];\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv60l18zi.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpv60l18zi.d(25): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpv60l18zi.d(39): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv60l18zi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1]\
    \ = 1;\n    for(int i = n-2; i >= 0; i--)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1]\
    \ = 1;\n    for(int i = n-2; i >= 0; i--)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1]\
    \ = 1;\n    for(int i = n-2; i >= 0; i--)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnziz4ly1.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpnziz4ly1.d(32): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpnziz4ly1.d(53): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnziz4ly1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i] * derivative(xs, i - 1);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    for(int i =\
    \ 0; i < n; i++)\n    {\n        result[i] = xs[i] * derivative(xs, i - 1);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        result[i] = xs[i] * derivative(xs, i - 1);\n   \
    \ }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp07245y8f.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp07245y8f.d(15): Error: none of the overloads of `derivative` are callable
    using argument types `(long[], int)`, candidates are:

    /tmp/tmp07245y8f.d(9):        `tmp07245y8f.derivative(long[] xs)`

    /tmp/tmp07245y8f.d(25):        `tmp07245y8f.derivative(double[] xs)`

    /tmp/tmp07245y8f.d(41):        `tmp07245y8f.derivative(float[] xs)`

    /tmp/tmp07245y8f.d(27): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp07245y8f.d(31): Error: none of the overloads of `derivative` are callable
    using argument types `(double[], int)`, candidates are:

    /tmp/tmp07245y8f.d(9):        `tmp07245y8f.derivative(long[] xs)`

    /tmp/tmp07245y8f.d(25):        `tmp07245y8f.derivative(double[] xs)`

    /tmp/tmp07245y8f.d(41):        `tmp07245y8f.derivative(float[] xs)`

    /tmp/tmp07245y8f.d(43): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp07245y8f.d(47): Error'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d *= xs[i];\n    }\n    long[] res = new long[xs.length + 1];\n    res[0]\
    \ = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        res[i] = xs[i]\
    \ - res[i - 1];\n    }\n    return res;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d *= xs[i];\n    }\n    double[] res = new double[xs.length + 1];\n \
    \   res[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        res[i]\
    \ = xs[i] - res[i - 1];\n    }\n    return res;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] res = new float[xs.length + 1];\n    res[0]\
    \ = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        res[i] = xs[i]\
    \ - res[i - 1];\n    }\n    return res;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprqyoksas.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294f5]

    ??:? void tmprqyoksas.__unittest_L72_C1() [0x428f8a]

    ??:? void tmprqyoksas.__modtest() [0x429274]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ca16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431ca1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432150]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9ed]

    ??:? runModuleUnitTests [0x42d959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i] = xs[i];\n    }\n    result[0] = 1;\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[xs.length];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i] = xs[i];\n    }\n    result[0] = 1;\n    for(int\
    \ i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[xs.length];\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i] = xs[i];\n    }\n    result[0] = 1;\n    for(int i =\
    \ 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4ms7ejie.d(73): unittest failure

    ----------------

    ??:? _d_unittestp [0x429535]

    ??:? void tmp4ms7ejie.__unittest_L69_C1() [0x428fca]

    ??:? void tmp4ms7ejie.__modtest() [0x4292b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dbc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ca56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431ce1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432190]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ca2d]

    ??:? runModuleUnitTests [0x42d999]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d *= xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n    result[0]\
    \ = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d *= xs[i];\n    }\n    double[] result = new double[xs.length + 1];\n\
    \    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n \
    \       d *= xs[i];\n    }\n    float[] result = new float[xs.length + 1];\n \
    \   result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyq26bqcb.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpyq26bqcb.__unittest_L72_C1() [0x428f72]

    ??:? void tmpyq26bqcb.__modtest() [0x42925c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9d5]

    ??:? runModuleUnitTests [0x42d941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d *= xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n        d *= xs[i];\n\
    \    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d *= xs[i];\n    }\n    double[] result = new double[xs.length + 1];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result[i] = d;\n     \
    \   d *= xs[i];\n    }\n    result[xs.length] = 1;\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nfloat[] derivative(float[] xs) \n{\n    float d = 1;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n    float[] result\
    \ = new float[xs.length + 1];\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i] = d;\n        d *= xs[i];\n    }\n    result[xs.length] = 1;\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpufax7xhb.d(79): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294ad]

    ??:? void tmpufax7xhb.__unittest_L75_C1() [0x428f42]

    ??:? void tmpufax7xhb.__modtest() [0x42922c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431be5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9a5]

    ??:? runModuleUnitTests [0x42d911]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429970]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] derivatives = new long[xs.length\
    \ + 1];\n    derivatives[0] = 1;\n    for(int i = 1; i < xs.length; i++)\n   \
    \ {\n        derivatives[i] = result / xs[i];\n    }\n    return derivatives;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    double[] derivatives = new double[xs.length + 1];\n    derivatives[0]\
    \ = 1;\n    for(int i = 1; i < xs.length; i++)\n    {\n        derivatives[i]\
    \ = result / xs[i];\n    }\n    return derivatives;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float result = 0;\n    for(int i = 0; i < xs.length; i++)\n   \
    \ {\n        result *= xs[i];\n    }\n    float[] derivatives = new float[xs.length\
    \ + 1];\n    derivatives[0] = 1;\n    for(int i = 1; i < xs.length; i++)\n   \
    \ {\n        derivatives[i] = result / xs[i];\n    }\n    return derivatives;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv6g31a13.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x42945d]

    ??:? void tmpv6g31a13.__unittest_L72_C1() [0x428ef2]

    ??:? void tmpv6g31a13.__modtest() [0x4291dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42daeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c97e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4320b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c955]

    ??:? runModuleUnitTests [0x42d8c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429920]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] derivative = new long[xs.length];\n    derivative[0] = xs[0];\n\
    \    derivative[1] = xs[1];\n    for(int i = 2; i < xs.length; i++)\n    {\n \
    \       derivative[i] = xs[i] - derivative[i - 2] * xs[i - 1];\n    }\n    return\
    \ derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n   \
    \ double[] derivative = new double[xs.length];\n    derivative[0] = xs[0];\n \
    \   derivative[1] = xs[1];\n    for(int i = 2; i < xs.length; i++)\n    {\n  \
    \      derivative[i] = xs[i] - derivative[i - 2] * xs[i - 1];\n    }\n    return\
    \ derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[]\
    \ derivative = new float[xs.length];\n    derivative[0] = xs[0];\n    derivative[1]\
    \ = xs[1];\n    for(int i = 2; i < xs.length; i++)\n    {\n        derivative[i]\
    \ = xs[i] - derivative[i - 2] * xs[i - 1];\n    }\n    return derivative;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d += xs[i] * xs[i];\n    }\n    long[] result = new long[xs.length + 1];\n\
    \    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i]\
    \ = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double d = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        d += xs[i] * xs[i];\n    }\n    double[] result = new double[xs.length\
    \ + 1];\n    result[0] = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n \
    \       result[i] = result[i-1] * xs[i];\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nfloat[] derivative(float[] xs) \n{\n    float d = 0;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        d += xs[i] * xs[i];\n    }\n    float[]\
    \ result = new float[xs.length + 1];\n    result[0] = d;\n    for(int i = 1; i\
    \ < xs.length; i++)\n    {\n        result[i] = result[i-1] * xs[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdfe1rgvi.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x429545]

    ??:? void tmpdfe1rgvi.__unittest_L72_C1() [0x428fda]

    ??:? void tmpdfe1rgvi.__modtest() [0x4292c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ca66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431cf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4321a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ca3d]

    ??:? runModuleUnitTests [0x42d9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429a08]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] d = new long[n];\n    long k =\
    \ 0;\n    long sum = 0;\n    long pow = 1;\n    for(int i = 0; i < n; i++) {\n\
    \        d[i] = 0;\n        sum += pow;\n        pow *= xs[i];\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        d[i] = xs[i] - sum;\n    }\n    return d;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative2(long[] xs) \n{\n    long n = xs.length;\n\
    \    long[] d = new long[n];\n    long k = 0;\n    long sum = 0;\n    long pow\
    \ = 1;\n    for(int i = 0; i < n; i++) {\n        d[i] = 0;\n        sum += pow;\n\
    \        pow *= xs[i];\n    }\n    for(int i = 0; i < n; i++) {\n        d[i]\
    \ = xs[i] - sum;\n    }\n    return d;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative3(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] d = new long[n];\n    long k =\
    \ 0;\n    long sum = 0;\n    long pow = 1;\n    for(int i = 0; i < n; i++) {\n\
    \        d[i] = 0;\n        sum += pow;\n        pow *= xs[i];\n    }\n    for(int\
    \ i = 0; i < n; i++) {\n        d[i] = xs[i] - sum;\n    }\n    return d;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative4(long[] xs) \n{\n    long n = xs.length;\n\
    \    long[] d = new long[n];\n    long k = 0;\n    long sum = 0;\n    long pow\
    \ = 1;\n    for(int i = 0; i < n; i++) {\n        d[i] = 0;\n        sum += pow;\n\
    \        pow *= xs[i];\n    }\n    for(int i = 0; i < n; i++) {\n        d[i]\
    \ = xs[i] - sum;\n    }\n    return d;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative5(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] d = new long[n];\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptnehk_lr.d(105): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnehk_lr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n        result[i] = xs[i + 1];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree) \n{\n    long[] result\
    \ = new long[(xs.length - degree)];\n    for(int i = 0; i < result.length; i++)\n\
    \        result[i] = xs[i + degree];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order) \n{\n    long[] result = new\
    \ long[(xs.length - order - degree)];\n    for(int i = 0; i < result.length; i++)\n\
    \        result[i] = xs[i + order + degree];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, int degree2) \n{\n    long[]\
    \ result = new long[(xs.length - order - degree)];\n    for(int i = 0; i < result.length;\
    \ i++)\n        result[i] = xs[i + order + degree + degree2];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int degree, int order, int degree2,\
    \ int order2) \n{\n    long[] result = new long[(xs.length - order - degree -\
    \ degree2)];\n    for(int i = 0; i < result.length; i++)\n        result[i] =\
    \ xs[i + order + degree + degree2 + order2];\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int degree, int order, int degree2, int order2, int\
    \ order3) \n{\n    long[] result = new long[(xs.length - order - degree - degree2\
    \ - order2)];\n    for(int i = 0; i < result.length; i++)\n        result[i] =\
    \ xs[i + order + degree + degree2 + order2 + order3];\n    return result;\n}\n\
    /*\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2xhb79yj.d(81): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2xhb79yj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] ds = new long[n];\n    long d =\
    \ 1;\n    for(int i = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d *=\
    \ xs[i];\n    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double n = xs.length;\n    double[] ds = new double[n];\n    double d = 1;\n\
    \    for(int i = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d *= xs[i];\n\
    \    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float n = xs.length;\n    float[] ds = new float[n];\n    float d = 1;\n  \
    \  for(int i = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d *= xs[i];\n\
    \    }\n    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedqxapie.d(30): Error: cannot implicitly convert expression `n`
    of type `double` to `ulong`

    /tmp/tmpedqxapie.d(48): Error: cannot implicitly convert expression `n` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedqxapie.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n        result[i] = 0;\n    for(int i = 1; i < xs.length;\
    \ i++)\n        result[i] = result[i-1] + xs[i] * xs[i];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result =\
    \ new double[(xs.length - 1)];\n    for(int i = 0; i < result.length; i++)\n \
    \       result[i] = 0;\n    for(int i = 1; i < xs.length; i++)\n        result[i]\
    \ = result[i-1] + xs[i] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++)\n        result[i] = 0;\n    for(int i = 1; i < xs.length;\
    \ i++)\n        result[i] = result[i-1] + xs[i] * xs[i];\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp63ubat1f.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x429586]

    ??:? long[] tmp63ubat1f.derivative(long[]) [0x428b35]

    ??:? void tmp63ubat1f.__unittest_L54_C1() [0x428f03]

    ??:? void tmp63ubat1f.__modtest() [0x429258]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432130]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9cd]

    ??:? runModuleUnitTests [0x42d939]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1) * (xs.length - 1) * 2];\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long sum = 0;\n    long\
    \ xpow = 0;\n    long ypow = 0;\n    long zpow = 0;\n    long xpow2 = 0;\n   \
    \ long ypow2 = 0;\n    long zpow2 = 0;\n    long xpow3 = 0;\n    long ypow3 =\
    \ 0;\n    long zpow3 = 0;\n    long xpow4 = 0;\n    long ypow4 = 0;\n    long\
    \ zpow4 = 0;\n    long xpow5 = 0;\n    long ypow5 = 0;\n    long zpow5 = 0;\n\
    \    long xpow6 = 0;\n    long ypow6 = 0;\n    long zpow6 = 0;\n    long xpow7\
    \ = 0;\n    long ypow7 = 0;\n    long zpow7 = 0;\n    long xpow8 = 0;\n    long\
    \ ypow8 = 0;\n    long zpow8 = 0;\n    long xpow9 = 0;\n    long ypow9 = 0;\n\
    \    long zpow9 = 0;\n    long xpow10 = 0;\n    long ypow10 = 0;\n    long zpow10\
    \ = 0;\n    long xpow11 = 0;\n    long ypow11 = 0;\n    long zpow11 = 0;\n   \
    \ long xpow12 = 0;\n    long ypow12 = 0;\n    long zpow12 = 0;\n    long xpow13\
    \ = 0;\n    long ypow13 = 0;\n    long zpow13 = 0;\n    long xpow14 = 0;\n   \
    \ long ypow14 = 0;\n    long zpow14 = 0;\n    long xpow15 = 0;\n    long ypow15\
    \ = 0;\n    long zpow15 = 0;\n    long xpow16 = 0;\n    long ypow16 = 0;\n   \
    \ long zpow16 = 0;\n    long xpow17 = 0;\n    long ypow17 = 0;\n    long zpow17\
    \ = 0;\n    long xpow18 = 0;\n    long ypow18 = 0;\n    long zpow18 = 0;\n   \
    \ long xpow19 = 0;\n    long ypow19 = 0;\n    long zpow19 = 0;\n    long xpow20\
    \ = 0;\n    long ypow20 = 0;\n    long zpow20 = 0;\n    long xpow21 = 0;\n   \
    \ long ypow21 = 0;\n    long zpow21 = 0;\n    long xpow22 = 0;\n    long ypow22\
    \ = 0;\n    long zpow22 = 0;\n    long xpow23 = 0;\n    long ypow23 = 0;\n   \
    \ long zpow23 = 0;\n    long xpow\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfs_rhqcv.d(86): Error: semicolon expected, not `unittest`

    /tmp/tmpfs_rhqcv.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfs_rhqcv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n    for(int i\
    \ = 0; i < n; ++i)\n        ds[i] = xs[i] * xs[i];\n    return ds;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative2(long[] xs) \n{\n    int n = xs.length;\n    long[]\
    \ ds = new long[n];\n    for(int i = 0; i < n; ++i)\n        ds[i] = xs[i] * xs[i];\n\
    \    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative3(long[] xs) \n{\n   \
    \ int n = xs.length;\n    long[] ds = new long[n];\n    for(int i = 0; i < n;\
    \ ++i)\n        ds[i] = xs[i] * xs[i];\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative4(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ds = new long[n];\n    for(int i\
    \ = 0; i < n; ++i)\n        ds[i] = xs[i] * xs[i];\n    return ds;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative5(long[] xs) \n{\n    int n = xs.length;\n    long[]\
    \ ds = new long[n];\n    for(int i = 0; i < n; ++i)\n        ds[i] = xs[i] * xs[i];\n\
    \    return ds;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative6(long[] xs) \n{\n   \
    \ int n = xs.length;\n    long[] ds = new long[n];\n    for(int i = 0; i < n;\
    \ ++i)\n        ds[i] = xs[i] * xs[i];\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative7(long[]\
    \ xs) \n{\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1fhkdls.d(96): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1fhkdls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length + 1)];\n    result[0] = xs[0];\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] result = new double[(xs.length + 1)];\n    result[0] =\
    \ xs[0];\n    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length + 1)];\n    result[0] = xs[0];\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = result[i-1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc5j257jq.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x429415]

    ??:? void tmpc5j257jq.__unittest_L57_C1() [0x428eae]

    ??:? void tmpc5j257jq.__modtest() [0x429198]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42daa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431bc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c90d]

    ??:? runModuleUnitTests [0x42d879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4298d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; ++i)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1]\
    \ = 1;\n    for(int i = n - 2; i >= 0; --i)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    int n = xs.length;\n    double[] result = new double[n];\n    for(int\
    \ i = 0; i < n; ++i)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1]\
    \ = 1;\n    for(int i = n - 2; i >= 0; --i)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; ++i)\n    {\n        result[i] = xs[i];\n    }\n    result[n-1]\
    \ = 1;\n    for(int i = n - 2; i >= 0; --i)\n    {\n        result[i] = result[i+1]\
    \ * xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5_q87ewm.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp5_q87ewm.d(32): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp5_q87ewm.d(53): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_q87ewm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i <= (xs.length - 1); i++)\n    {\n        result[i] = xs[i + 1] - xs[i] * xs[i\
    \ + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    double[] result = new double[(xs.length - 1)];\n    for(int i = 0; i <= (xs.length\
    \ - 1); i++)\n    {\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length - 1)];\n    for(int i = 0; i <= (xs.length\
    \ - 1); i++)\n    {\n        result[i] = xs[i + 1] - xs[i] * xs[i + 1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp5h0gbkqa.d(14): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x429496]

    ??:? long[] tmp5h0gbkqa.derivative(long[]) [0x428af7]

    ??:? void tmp5h0gbkqa.__unittest_L54_C1() [0x428e13]

    ??:? void tmp5h0gbkqa.__modtest() [0x429168]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c906]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c8dd]

    ??:? runModuleUnitTests [0x42d849]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n        d[i] = xs[i+1] - xs[i];\n    return d;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n  \
    \  double[] d = new double[n];\n    for(int i = 0; i < n; i++)\n        d[i] =\
    \ xs[i+1] - xs[i];\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] d = new float[n];\n    for(int i = 0; i < n;\
    \ i++)\n        d[i] = xs[i+1] - xs[i];\n    return d;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpslfk8hvq.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpslfk8hvq.d(25): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpslfk8hvq.d(39): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpslfk8hvq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long result = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long result = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long result = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    \nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17ijrw0f.d(117): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17ijrw0f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result += (long)(xs[i] * xs[i]);\n    }\n    result *= -1;\n    \n  \
    \  long[] result = new long[result.__len()];\n    for(int i = 0; i < result.__len();\
    \ i++)\n    {\n        result[i] = result;\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result += (double)(xs[i]\
    \ * xs[i]);\n    }\n    result *= -1;\n    \n    double[] result = new double[result.__len()];\n\
    \    for(int i = 0; i < result.__len(); i++)\n    {\n        result[i] = result;\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += (double)(xs[i] * xs[i]);\n    }\n    result *= -1;\n    \n    float[] result\
    \ = new float[result.__len()];\n    for(int i = 0; i < result.__len(); i++)\n\
    \    {\n        result[i] = result;\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp80ydi1b2.d(14): Error: C style cast illegal, use `cast(long)(xs[i]
    * xs[i])`

    /tmp/tmp80ydi1b2.d(36): Error: C style cast illegal, use `cast(double)(xs[i] *
    xs[i])`

    /tmp/tmp80ydi1b2.d(58): Error: C style cast illegal, use `cast(double)(xs[i] *
    xs[i])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp80ydi1b2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    result[0]\
    \ = 1;\n    for (int i = 1; i < n; i++) {\n        result[i] = result[i-1] * xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    result[0] =\
    \ 1;\n    for (int i = 1; i < n; i++) {\n        result[i] = result[i-1] * xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    result[0] = 1;\n\
    \    for (int i = 1; i < n; i++) {\n        result[i] = result[i-1] * xs[i];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphyeq00zm.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmphyeq00zm.d(27): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmphyeq00zm.d(43): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphyeq00zm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1) * 2];\n    long x = 0;\n\
    \    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        x =\
    \ xs[i];\n        y = x * x;\n        result[i * 2] = y;\n        result[i * 2\
    \ + 1] = x;\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree) \n{\n    long[] result = new long[(xs.length - 1) * degree];\n\
    \    long x = 0;\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n \
    \   {\n        x = xs[i];\n        y = x * x;\n        for (int j = 0; j < degree;\
    \ j++)\n        {\n            result[i * degree + j] = y;\n        }\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int degree,\
    \ int order) \n{\n    long[] result = new long[(xs.length - 1) * order];\n   \
    \ long x = 0;\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        x = xs[i];\n        y = x * x;\n        for (int j = 0; j < order; j++)\n\
    \        {\n            result[i * order + j] = y;\n        }\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\nlong[] derivative(long[] xs, int degree, int order,\
    \ int degree2) \n{\n    long[] result = new long[(xs.length - 1) * order * degree2];\n\
    \    long x = 0;\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n \
    \   {\n        x = xs[i];\n        y = x * x;\n        for (int j = 0; j < order;\
    \ j++)\n        {\n            for (int k = 0; k < degree2; k++)\n           \
    \ {\n                result[i * order * degree2 + j * degree2 + k] = y;\n    \
    \        }\n        }\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, int degree2, int order2) \n{\n    long[] result =\
    \ new long[(xs.length - 1) * order * degree2 * order2];\n\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzn1lyamf.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzn1lyamf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n   \
    \ long d = xs[3];\n    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n\
    \    long h = xs[7];\n    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n\
    \    long l = xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o\
    \ = xs[14];\n    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n\
    \    long s = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v\
    \ = xs[21];\n    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n\
    \    long z = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c\
    \ = xs[28];\n    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n\
    \    long g = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j\
    \ = xs[35];\n    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n\
    \    long n = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q\
    \ = xs[42];\n    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n\
    \    long u = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x\
    \ = xs[49];\n    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n\
    \    long b = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e\
    \ = xs[56];\n    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n\
    \    long i = xs[60];\n    long j = xs[61];\n    long k = xs[62];\n    long l\
    \ = xs[63];\n    \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36_45_4z.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36_45_4z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length + 1)];\n    long x = 0;\n \
    \   long y = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        y = xs[i];\n\
    \        result[i] = y;\n    }\n    result[xs.length] = 1;\n    for(int i = xs.length\
    \ - 1; i >= 0; i--)\n    {\n        x = result[i];\n        result[i] = result[i\
    \ + 1];\n        result[i + 1] = x * y;\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result = new double[(xs.length\
    \ + 1)];\n    double x = 0;\n    double y = 0;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        y = xs[i];\n        result[i] = y;\n    }\n    result[xs.length]\
    \ = 1;\n    for(int i = xs.length - 1; i >= 0; i--)\n    {\n        x = result[i];\n\
    \        result[i] = result[i + 1];\n        result[i + 1] = x * y;\n    }\n \
    \   return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float[] result = new float[(xs.length + 1)];\n    float x = 0;\n    float y\
    \ = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        y = xs[i];\n  \
    \      result[i] = y;\n    }\n    result[xs.length] = 1;\n    for(int i = xs.length\
    \ - 1; i >= 0; i--)\n    {\n        x = result[i];\n        result[i] = result[i\
    \ + 1];\n        result[i + 1] = x * y;\n    }\n    return result;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdgjuoq1v.d(20): Error: cannot implicitly convert expression `xs.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpdgjuoq1v.d(45): Error: cannot implicitly convert expression `xs.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpdgjuoq1v.d(70): Error: cannot implicitly convert expression `xs.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdgjuoq1v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length + 1)];\n    result[0] = 1;\n\
    \    for (int i = 1; i < xs.length; i++)\n        result[i] = result[i-1] * xs[i];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = derivative;\n\n   \
    \ assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvnfht77o.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x428545]

    ??:? void tmpvnfht77o.__unittest_L17_C1() [0x427fde]

    ??:? void tmpvnfht77o.__modtest() [0x4282c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c623]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b4b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430741]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bf0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b48d]

    ??:? runModuleUnitTests [0x42c3f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a08]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = xs[0];\n    long[] ds = new long[(xs.length - 1)];\n \
    \   for(int i = 1; i < xs.length; i++)\n    {\n        ds[i] = (long) (xs[i] -\
    \ x) / x;\n        x = xs[i];\n    }\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double x = xs[0];\n    double[] ds = new double[(xs.length - 1)];\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        ds[i] = (double) (xs[i]\
    \ - x) / x;\n        x = xs[i];\n    }\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float x = xs[0];\n    float[] ds = new float[(xs.length - 1)];\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        ds[i] = (float) (xs[i]\
    \ - x) / x;\n        x = xs[i];\n    }\n    return ds;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiugl4y1n.d(15): Error: C style cast illegal, use `cast(long)(xs[i]
    - x)`

    /tmp/tmpiugl4y1n.d(32): Error: C style cast illegal, use `cast(double)(xs[i] -
    x)`

    /tmp/tmpiugl4y1n.d(49): Error: C style cast illegal, use `cast(float)(xs[i] -
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiugl4y1n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      d *= xs[i];\n    }\n    long[] ret = new long[xs.length + 1];\n    ret[0]\
    \ = d;\n    for(int i = 1; i < xs.length; i++)\n    {\n        ret[i] = xs[i]\
    \ - ret[i - 1];\n    }\n    return ret;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n\
    \    {\n        d *= xs[i];\n    }\n    long[] ret = new long[degree + 1];\n \
    \   ret[0] = d;\n    for(int i = 1; i < degree; i++)\n    {\n        ret[i] =\
    \ xs[i] - ret[i - 1];\n    }\n    return ret;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        d *= xs[i];\n    }\n    long[] ret = new long[order + 1];\n\
    \    ret[0] = d;\n    for(int i = 1; i < order; i++)\n    {\n        ret[i] =\
    \ xs[i] - ret[i - 1];\n    }\n    return ret;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs, int degree, int order, bool isDerivative) \n{\n    long d = 1;\n    for(int\
    \ i = 0; i < xs.length; i++)\n    {\n        d *= xs[i];\n    }\n    long[] ret\
    \ = new long[order + 1];\n    ret[0] = d;\n    for(int i = 1; i < order; i++)\n\
    \    {\n        ret[i] = xs[i] - ret[i - 1];\n    }\n    return ret;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int degree, int order, bool isDerivative,\
    \ int order2) \n{\n    long d = 1;\n    for(int i = 0; i < xs.length; i++)\n \
    \   {\n        d *= xs[i];\n    }\n    long[] ret = new long[order2 + 1];\n  \
    \  ret[0] = \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw03kzgt7.d(102): Error: expression expected, not `unittest`

    /tmp/tmpw03kzgt7.d(103): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw03kzgt7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i+1);\n    }\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    double res = 0;\n \
    \   for(int i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * derivative(xs,\
    \ i+1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  float res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        res\
    \ += xs[i] * derivative(xs, i+1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdzztysbs.d(14): Error: none of the overloads of `derivative` are
    callable using argument types `(long[], int)`, candidates are:

    /tmp/tmpdzztysbs.d(9):        `tmpdzztysbs.derivative(long[] xs)`

    /tmp/tmpdzztysbs.d(24):        `tmpdzztysbs.derivative(double[] xs)`

    /tmp/tmpdzztysbs.d(39):        `tmpdzztysbs.derivative(float[] xs)`

    /tmp/tmpdzztysbs.d(16): Error: cannot implicitly convert expression `res` of type
    `long` to `long[]`

    /tmp/tmpdzztysbs.d(29): Error: none of the overloads of `derivative` are callable
    using argument types `(double[], int)`, candidates are:

    /tmp/tmpdzztysbs.d(9):        `tmpdzztysbs.derivative(long[] xs)`

    /tmp/tmpdzztysbs.d(24):        `tmpdzztysbs.derivative(double[] xs)`

    /tmp/tmpdzztysbs.d(39):        `tmpdzztysbs.derivative(float[] xs)`

    /tmp/tmpdzztysbs.d(31): Error: cannot implicitly convert expression `res` of type
    `double` to `double[]`

    /tmp/tmpdzztysbs.d(44): Error: none of the overloads of `derivative` are callable
    using argument types `(float[], int)`, candidates are:

    /'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = xs[0];\n    long x2 = xs[1];\n    long x3 = xs[2];\n \
    \   long x4 = xs[3];\n    long x5 = xs[4];\n    long x6 = xs[5];\n    long x7\
    \ = xs[6];\n    long x8 = xs[7];\n    long x9 = xs[8];\n    long x10 = xs[9];\n\
    \    long x11 = xs[10];\n    long x12 = xs[11];\n    long x13 = xs[12];\n    long\
    \ x14 = xs[13];\n    long x15 = xs[14];\n    long x16 = xs[15];\n    long x17\
    \ = xs[16];\n    long x18 = xs[17];\n    long x19 = xs[18];\n    long x20 = xs[19];\n\
    \    long x21 = xs[20];\n    long x22 = xs[21];\n    long x23 = xs[22];\n    long\
    \ x24 = xs[23];\n    long x25 = xs[24];\n    long x26 = xs[25];\n    long x27\
    \ = xs[26];\n    long x28 = xs[27];\n    long x29 = xs[28];\n    long x30 = xs[29];\n\
    \    long x31 = xs[30];\n    long x32 = xs[31];\n    long x33 = xs[32];\n    long\
    \ x34 = xs[33];\n    long x35 = xs[34];\n    long x36 = xs[35];\n    long x37\
    \ = xs[36];\n    long x38 = xs[37];\n    long x39 = xs[38];\n    long x40 = xs[39];\n\
    \    long x41 = xs[40];\n    long x42 = xs[41];\n    long x43 = xs[42];\n    long\
    \ x44 = xs[43];\n    long x45 = xs[44];\n    long x46 = xs[45];\n    long x47\
    \ = xs[46];\n    long x48 = xs[47];\n    long x49 = xs[48];\n    long x50 = xs[49];\n\
    \    long x51 = xs[50];\n    long x52 = xs[51];\n    long x53 = xs[52];\n    long\
    \ x54 = xs[53];\n    long x55 = xs[54];\n    long x56 = xs[55];\n    long x57\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_dy76r8.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_dy76r8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long sum = 0;\n    for(int i = 0; i < xs.length; i++)\n       \
    \ sum += xs[i] * derivative(xs, i);\n    return sum;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double sum = 0;\n    for(int i = 0; i < xs.length; i++)\n     \
    \   sum += xs[i] * derivative(xs, i);\n    return sum;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float sum = 0;\n    for(int i = 0; i < xs.length; i++)\n      \
    \  sum += xs[i] * derivative(xs, i);\n    return sum;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpja70clh9.d(13): Error: none of the overloads of `derivative` are
    callable using argument types `(long[], int)`, candidates are:

    /tmp/tmpja70clh9.d(9):        `tmpja70clh9.derivative(long[] xs)`

    /tmp/tmpja70clh9.d(22):        `tmpja70clh9.derivative(double[] xs)`

    /tmp/tmpja70clh9.d(35):        `tmpja70clh9.derivative(float[] xs)`

    /tmp/tmpja70clh9.d(14): Error: cannot implicitly convert expression `sum` of type
    `long` to `long[]`

    /tmp/tmpja70clh9.d(26): Error: none of the overloads of `derivative` are callable
    using argument types `(double[], int)`, candidates are:

    /tmp/tmpja70clh9.d(9):        `tmpja70clh9.derivative(long[] xs)`

    /tmp/tmpja70clh9.d(22):        `tmpja70clh9.derivative(double[] xs)`

    /tmp/tmpja70clh9.d(35):        `tmpja70clh9.derivative(float[] xs)`

    /tmp/tmpja70clh9.d(27): Error: cannot implicitly convert expression `sum` of type
    `double` to `double[]`

    /tmp/tmpja70clh9.d(39): Error: none of the overloads of `derivative` are callable
    using argument types `(float[], int)`, candidates are:

    /'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] derivative = new long[xs.length +\
    \ 1];\n    derivative[0] = result;\n    for(int i = 1; i < xs.length; i++)\n \
    \   {\n        derivative[i] = xs[i] * derivative[i - 1];\n    }\n    return derivative;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    double[] derivative = new double[xs.length + 1];\n    derivative[0] =\
    \ result;\n    for(int i = 1; i < xs.length; i++)\n    {\n        derivative[i]\
    \ = xs[i] * derivative[i - 1];\n    }\n    return derivative;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float result = 0;\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    float[] derivative\
    \ = new float[xs.length + 1];\n    derivative[0] = result;\n    for(int i = 1;\
    \ i < xs.length; i++)\n    {\n        derivative[i] = xs[i] * derivative[i - 1];\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpylt__cax.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294e5]

    ??:? void tmpylt__cax.__unittest_L72_C1() [0x428f7e]

    ??:? void tmpylt__cax.__modtest() [0x429268]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ca06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9dd]

    ??:? runModuleUnitTests [0x42d949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] d = new long[(xs.length + 1)];\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpll8twlea.d(112): Error: semicolon expected, not `unittest`

    /tmp/tmpll8twlea.d(112): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpll8twlea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i] * xs[n - i\
    \ - 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    for(int i =\
    \ 0; i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i] * xs[n - i - 1];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        result[i] = xs[i + 1] - xs[i] * xs[n - i - 1];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7k02mzwp.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp7k02mzwp.d(27): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp7k02mzwp.d(43): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7k02mzwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] derivative = new long[xs.length];\n    derivative[0] = xs[0];\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        derivative[i] = xs[i]\
    \ * derivative[i - 1];\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\ndouble[] derivative(double[]\
    \ xs) \n{\n    double[] derivative = new double[xs.length];\n    derivative[0]\
    \ = xs[0];\n    for(int i = 1; i < xs.length; i++)\n    {\n        derivative[i]\
    \ = xs[i] * derivative[i - 1];\n    }\n    return derivative;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float[] derivative = new float[xs.length];\n\
    \    derivative[0] = xs[0];\n    for(int i = 1; i < xs.length; i++)\n    {\n \
    \       derivative[i] = xs[i] * derivative[i - 1];\n    }\n    return derivative;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkq5ptwra.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x42942d]

    ??:? void tmpkq5ptwra.__unittest_L57_C1() [0x428ec6]

    ??:? void tmpkq5ptwra.__modtest() [0x4291b0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dabb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431bd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432088]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c925]

    ??:? runModuleUnitTests [0x42d891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4298f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] derivative = new long[xs.length +\
    \ 1];\n    derivative[0] = result;\n    for(int i = 1; i < xs.length; i++)\n \
    \   {\n        derivative[i] = xs[i] * derivative[i - 1];\n    }\n    return derivative;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result *= xs[i];\n   \
    \ }\n    double[] derivative = new double[xs.length + 1];\n    derivative[0] =\
    \ result;\n    for(int i = 1; i < xs.length; i++)\n    {\n        derivative[i]\
    \ = xs[i] * derivative[i - 1];\n    }\n    return derivative;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float result = 0;\n    for(int i = 0;\
    \ i < xs.length; i++)\n    {\n        result *= xs[i];\n    }\n    float[] derivative\
    \ = new float[xs.length + 1];\n    derivative[0] = result;\n    for(int i = 1;\
    \ i < xs.length; i++)\n    {\n        derivative[i] = xs[i] * derivative[i - 1];\n\
    \    }\n    return derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpylt__cax.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294e5]

    ??:? void tmpylt__cax.__unittest_L72_C1() [0x428f7e]

    ??:? void tmpylt__cax.__modtest() [0x429268]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ca06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431c1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c9dd]

    ??:? runModuleUnitTests [0x42d949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4299a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = xs[0];\n    long y = xs[1];\n    long x2 = xs[2];\n  \
    \  long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6 =\
    \ xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n \
    \   long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n    \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclucbw2e.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclucbw2e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] d = new long[(xs.length - 1)];\n    long x = 0;\n    long\
    \ y = 0;\n    for(int i = 0; i <= (xs.length - 1); i++)\n    {\n        y = xs[i\
    \ + 1];\n        d[i] = (y - x) * xs[i];\n        x = y;\n    }\n    return d;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] d = new\
    \ double[(xs.length - 1)];\n    double x = 0;\n    double y = 0;\n    for(int\
    \ i = 0; i <= (xs.length - 1); i++)\n    {\n        y = xs[i + 1];\n        d[i]\
    \ = (y - x) * xs[i];\n        x = y;\n    }\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    float[] d = new float[(xs.length - 1)];\n\
    \    float x = 0;\n    float y = 0;\n    for(int i = 0; i <= (xs.length - 1);\
    \ i++)\n    {\n        y = xs[i + 1];\n        d[i] = (y - x) * xs[i];\n     \
    \   x = y;\n    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcq2inqcq.d(16): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42949e]

    ??:? long[] tmpcq2inqcq.derivative(long[]) [0x428af9]

    ??:? void tmpcq2inqcq.__unittest_L66_C1() [0x428e1b]

    ??:? void tmpcq2inqcq.__modtest() [0x429170]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c90e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432048]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c8e5]

    ??:? runModuleUnitTests [0x42d851]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result *= xs[i];\n    }\n    long[] result = new long[result.bitLength()\
    \ + 1];\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = result;\n    }\n    result[result.length - 1] = 1;\n    return result;\n}\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmfvtfiw.d(16): Error: no property `bitLength` for type `long`

    /tmp/tmpsmfvtfiw.d(16): Error: declaration `tmpsmfvtfiw.derivative.result` is
    already defined

    /tmp/tmpsmfvtfiw.d(17): Error: no property `length` for type `long`

    /tmp/tmpsmfvtfiw.d(19): Error: only one index allowed to index `long`

    /tmp/tmpsmfvtfiw.d(21): Error: only one index allowed to index `long`

    /tmp/tmpsmfvtfiw.d(22): Error: cannot implicitly convert expression `result` of
    type `long` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmfvtfiw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    long x = 0;\n \
    \   for(int i = 1; i < xs.length; i++)\n    {\n        result[i - 1] = (long)\
    \ (xs[i] - x * xs[i - 1]);\n        x = xs[i];\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,math,polynomial-math,algorithm |>\n<| a tags=c#,math,polynomial-math,algorithm\
    \ |>\nI wrote a C# program that solves your problem in O(n) time complexity. \n\
    <code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;\nunittest\n{\n    alias candidate\
    \ = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L,\
    \ 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9vu6rp3g.d(15): Error: C style cast illegal, use `cast(long)(xs[i]
    - x * xs[i - 1])`

    /tmp/tmp9vu6rp3g.d(20): Error: declaration expected, not `<`

    /tmp/tmp9vu6rp3g.d(26): Error: semicolon expected, not `.`

    /tmp/tmp9vu6rp3g.d(26): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmp9vu6rp3g.d(27): Error: semicolon expected, not `.`

    /tmp/tmp9vu6rp3g.d(27): Error: no identifier for declarator `.Linq`

    /tmp/tmp9vu6rp3g.d(28): Error: semicolon expected, not `.`

    /tmp/tmp9vu6rp3g.d(28): Error: no identifier for declarator `.Text`

    /tmp/tmp9vu6rp3g.d(29): Error: semicolon expected, not `.`

    /tmp/tmp9vu6rp3g.d(29): Error: no identifier for declarator `.Threading.Tasks`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vu6rp3g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n    {\n        ys[i] = xs[i];\n    }\n    for(int i = n -\
    \ 1; i >= 0; i--)\n    {\n        ys[i] = ys[i + 1] * xs[i + 1];\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] ys = new double[n];\n    for(int i = 0; i < n; i++)\n    {\n   \
    \     ys[i] = xs[i];\n    }\n    for(int i = n - 1; i >= 0; i--)\n    {\n    \
    \    ys[i] = ys[i + 1] * xs[i + 1];\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] ys = new\
    \ float[n];\n    for(int i = 0; i < n; i++)\n    {\n        ys[i] = xs[i];\n \
    \   }\n    for(int i = n - 1; i >= 0; i--)\n    {\n        ys[i] = ys[i + 1] *\
    \ xs[i + 1];\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivwlpf3w.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpivwlpf3w.d(31): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpivwlpf3w.d(51): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivwlpf3w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n    double[]\
    \ result = new double[xs.length];\n    for(int i = 0; i < xs.length; i++)\n  \
    \  {\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float[] result = new\
    \ float[xs.length];\n    for(int i = 0; i < xs.length; i++)\n    {\n        result[i]\
    \ = xs[i+1] - xs[i] * xs[i+1];\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L,\
    \ 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
    \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpep_8_e45.d(14): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42947e]

    ??:? long[] tmpep_8_e45.derivative(long[]) [0x428b27]

    ??:? void tmpep_8_e45.__unittest_L54_C1() [0x428df7]

    ??:? void tmpep_8_e45.__modtest() [0x42914c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c8ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431b79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431b05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c8c5]

    ??:? runModuleUnitTests [0x42d831]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    long x = 0;\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        d[i] = xs[i];\n        x = x *\
    \ xs[i];\n    }\n    for(int i = n - 1; i >= 0; --i)\n    {\n        d[i] = d[i\
    \ + 1];\n    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] d = new double[n];\n    double x = 0;\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        d[i] = xs[i];\n        x = x *\
    \ xs[i];\n    }\n    for(int i = n - 1; i >= 0; --i)\n    {\n        d[i] = d[i\
    \ + 1];\n    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] d = new float[n];\n    float x = 0;\n    for(int\
    \ i = 0; i < n; ++i)\n    {\n        d[i] = xs[i];\n        x = x * xs[i];\n \
    \   }\n    for(int i = n - 1; i >= 0; --i)\n    {\n        d[i] = d[i + 1];\n\
    \    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2_avdyja.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp2_avdyja.d(33): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmp2_avdyja.d(55): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_avdyja.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i);\n    }\n    return res;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return derivative of this polynomial in the same form.\n      \
    \      \n*/\nlong[] derivative(long[] xs, int i) \n{\n    long res = 0;\n    for(int\
    \ j = i; j < xs.length; j++)\n    {\n        res += xs[i] * derivative(xs, j);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j) \n{\n    long res = 0;\n    for(int k = i; k < j; k++)\n    {\n        res\
    \ += xs[i] * derivative(xs, i, k);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k) \n{\n    long res = 0;\n   \
    \ for(int l = i; l < j; l++)\n    {\n        res += xs[i] * derivative(xs, i,\
    \ l, k);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k, int l) \n{\n    long res = 0;\n    for(int m = i; m < j; m++)\n  \
    \  {\n        res += xs[i] * derivative(xs, i, m, l, k);\n    }\n    return res;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int l, int\
    \ m) \n{\n    long res = 0;\n    for(int n = i; n < j; n++)\n    {\n        res\
    \ += xs[i] * derivative(xs, i, n, l, k, m);\n    }\n    return res;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + x\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfpzcl_ne.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpzcl_ne.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result += (long)xs[i] * derivative(xs, i);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i) \n{\n    long result =\
    \ 0;\n    for(int j = 0; j < i; j++)\n    {\n        result += (long)xs[i] * derivative(xs,\
    \ j);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j) \n{\n    long result = 0;\n    for(int k = 0; k < j; k++)\n    {\n      \
    \  result += (long)xs[i] * derivative(xs, i, j);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k) \n{\n   \
    \ long result = 0;\n    for(int l = 0; l < k; l++)\n    {\n        result += (long)xs[i]\
    \ * derivative(xs, i, j, l);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k, int l) \n{\n    long result\
    \ = 0;\n    for(int m = 0; m < l; m++)\n    {\n        result += (long)xs[i] *\
    \ derivative(xs, i, j, k, l);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k, int l, int m) \n{\n    long\
    \ result = 0;\n    for(int n = 0; n < m; n++)\n    {\n        result += (long)xs[i]\
    \ * derivative(xs, i, j, k, l, m);\n    }\n    return result;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\nunittest\n{\n\
    \    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L])\
    \ == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzcvslp90.d(14): Error: C style cast illegal, use `cast(long)xs[i]`

    /tmp/tmpzcvslp90.d(29): Error: C style cast illegal, use `cast(long)xs[i]`

    /tmp/tmpzcvslp90.d(44): Error: C style cast illegal, use `cast(long)xs[i]`

    /tmp/tmpzcvslp90.d(59): Error: C style cast illegal, use `cast(long)xs[i]`

    /tmp/tmpzcvslp90.d(74): Error: C style cast illegal, use `cast(long)xs[i]`

    /tmp/tmpzcvslp90.d(89): Error: C style cast illegal, use `cast(long)xs[i]`

    /tmp/tmpzcvslp90.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcvslp90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long n = xs.length;\n    long[] ds = new long[n];\n    long d =\
    \ 1;\n    for(int i = 0; i < n; i++)\n    {\n        ds[i] = d;\n        d *=\
    \ xs[i];\n    }\n    return ds;\n}\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprn6cp29q.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x42850d]

    ??:? void tmprn6cp29q.__unittest_L21_C1() [0x427fa6]

    ??:? void tmprn6cp29q.__modtest() [0x428290]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5eb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b47e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430709]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430695]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b455]

    ??:? runModuleUnitTests [0x42c3c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i];\n    for(int i = n - 1; i >=\
    \ 0; i--)\n        result[i] = result[i] * xs[i];\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] result = new double[n];\n    for(int i = 0; i < n; i++)\n      \
    \  result[i] = xs[i];\n    for(int i = n - 1; i >= 0; i--)\n        result[i]\
    \ = result[i] * xs[i];\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    int n = xs.length;\n    float[] result = new float[n];\n    for(int\
    \ i = 0; i < n; i++)\n        result[i] = xs[i];\n    for(int i = n - 1; i >=\
    \ 0; i--)\n        result[i] = result[i] * xs[i];\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj1st4f1u.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpj1st4f1u.d(27): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpj1st4f1u.d(43): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj1st4f1u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x = 0;\n    long y = 0;\n    long d = 0;\n    long dd = 1;\n\
    \    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n\
    \    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n \
    \   long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n \
    \   long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n \
    \   long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n \
    \   long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n \
    \   long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n \
    \   long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n \
    \   long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n \
    \   long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n \
    \   long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n \
    \   long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n \
    \   long ddd = 1;\n    long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n \
    \   long dddd = 1;\n    long dd = 1;\n    long ddd = 1;\n    long dddd = 1;\n\
    \    long dd = 1;\n    long dd\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2jluc_3i.d(97): Error: semicolon expected, not `unittest`

    /tmp/tmp2jluc_3i.d(97): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2jluc_3i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        result += (long)(xs[i] * xs[i]);\n    }\n    result /= xs.length;\n \
    \   long[] derivative = new long[xs.length];\n    for(int i = 0; i < xs.length;\
    \ i++)\n    {\n        derivative[i] = (long)(xs[i] * result);\n    }\n    return\
    \ derivative;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] +\
    \ xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in\
    \ the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n   \
    \ double result = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += (double)(xs[i] * xs[i]);\n    }\n    result /= xs.length;\n    double[] derivative\
    \ = new double[xs.length];\n    for(int i = 0; i < xs.length; i++)\n    {\n  \
    \      derivative[i] = (double)(xs[i] * result);\n    }\n    return derivative;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nfloat[] derivative(float[] xs) \n{\n    float result = 0;\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        result += (double)(xs[i]\
    \ * xs[i]);\n    }\n    result /= xs.length;\n    float[] derivative = new float[xs.length];\n\
    \    for(int i = 0; i < xs.length; i++)\n    {\n        derivative[i] = (float)(xs[i]\
    \ * result);\n    }\n    return derivative;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L,\
    \ 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L,\
    \ 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6riuyt_y.d(14): Error: C style cast illegal, use `cast(long)(xs[i]
    * xs[i])`

    /tmp/tmp6riuyt_y.d(20): Error: C style cast illegal, use `cast(long)(xs[i] * result)`

    /tmp/tmp6riuyt_y.d(35): Error: C style cast illegal, use `cast(double)(xs[i] *
    xs[i])`

    /tmp/tmp6riuyt_y.d(41): Error: C style cast illegal, use `cast(double)(xs[i] *
    result)`

    /tmp/tmp6riuyt_y.d(56): Error: C style cast illegal, use `cast(double)(xs[i] *
    xs[i])`

    /tmp/tmp6riuyt_y.d(62): Error: C style cast illegal, use `cast(float)(xs[i] *
    result)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6riuyt_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    for(int i =\
    \ 0; i < n; i++)\n    {\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        result[i] = xs[i+1] - xs[i] * xs[i+1];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnvsnu8fe.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpnvsnu8fe.d(27): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpnvsnu8fe.d(43): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnvsnu8fe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i] * derivative(xs, n - i\
    \ - 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    for(int i =\
    \ 0; i < n; i++)\n    {\n        result[i] = xs[i] * derivative(xs, n - i - 1);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        result[i] = xs[i] * derivative(xs, n - i - 1);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprzb1k6e4.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmprzb1k6e4.d(15): Error: none of the overloads of `derivative` are callable
    using argument types `(long[], int)`, candidates are:

    /tmp/tmprzb1k6e4.d(9):        `tmprzb1k6e4.derivative(long[] xs)`

    /tmp/tmprzb1k6e4.d(25):        `tmprzb1k6e4.derivative(double[] xs)`

    /tmp/tmprzb1k6e4.d(41):        `tmprzb1k6e4.derivative(float[] xs)`

    /tmp/tmprzb1k6e4.d(27): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmprzb1k6e4.d(31): Error: none of the overloads of `derivative` are callable
    using argument types `(double[], int)`, candidates are:

    /tmp/tmprzb1k6e4.d(9):        `tmprzb1k6e4.derivative(long[] xs)`

    /tmp/tmprzb1k6e4.d(25):        `tmprzb1k6e4.derivative(double[] xs)`

    /tmp/tmprzb1k6e4.d(41):        `tmprzb1k6e4.derivative(float[] xs)`

    /tmp/tmprzb1k6e4.d(43): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmprzb1k6e4.d(47): Error'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n   \
    \ long d = xs[3];\n    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n\
    \    long h = xs[7];\n    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n\
    \    long l = xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o\
    \ = xs[14];\n    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n\
    \    long s = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v\
    \ = xs[21];\n    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n\
    \    long z = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c\
    \ = xs[28];\n    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n\
    \    long g = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j\
    \ = xs[35];\n    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n\
    \    long n = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q\
    \ = xs[42];\n    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n\
    \    long u = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x\
    \ = xs[49];\n    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n\
    \    long b = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e\
    \ = xs[56];\n    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n\
    \    long i = xs[60];\n    long j = xs[61];\n    long k = xs[62];\n    long l\
    \ = xs[63];\n    \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36_45_4z.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36_45_4z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long res = 0;\n    for(int i = 0; i < xs.length; i++)\n    {\n\
    \        res += xs[i] * derivative(xs, i-1);\n    }\n    return res;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nlong[] derivative(long[] xs, int i) \n{\n    long res = 0;\n\
    \    for(int j = 0; j < i; j++)\n    {\n        res += xs[j] * derivative(xs,\
    \ j);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j) \n{\n    long res = 0;\n    for(int k = 0; k < j; k++)\n    {\n        res\
    \ += xs[k] * derivative(xs, i, j);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    long[] derivative(long[] xs, int i, int j, int k) \n{\n    long res = 0;\n   \
    \ for(int l = 0; l < k; l++)\n    {\n        res += xs[l] * derivative(xs, i,\
    \ j, l);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nlong[] derivative(long[] xs, int i, int\
    \ j, int k, int l) \n{\n    long res = 0;\n    for(int m = 0; m < l; m++)\n  \
    \  {\n        res += xs[m] * derivative(xs, i, j, k, l);\n    }\n    return res;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\nlong[] derivative(long[] xs, int i, int j, int k, int l, int\
    \ m) \n{\n    long res = 0;\n    for(int n = 0; n < m; n++)\n    {\n        res\
    \ += xs[n] * derivative(xs, i, j, k, l, m);\n    }\n    return res;\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + \nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikwney_0.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikwney_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] result = new long[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n    for(int i\
    \ = n - 1; i >= 0; i--)\n    {\n        result[i] = result[i + 1] * xs[i];\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] result = new double[n];\n    for(int i =\
    \ 0; i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n    for(int i = n\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = result[i + 1] * xs[i];\n    }\n\
    \    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] result = new float[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        result[i] = xs[i];\n    }\n    for(int i = n - 1;\
    \ i >= 0; i--)\n    {\n        result[i] = result[i + 1] * xs[i];\n    }\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgb1ybajd.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpgb1ybajd.d(31): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpgb1ybajd.d(51): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgb1ybajd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long x0 = xs[0];\n    long x1 = xs[1];\n    long x2 = xs[2];\n\
    \    long x3 = xs[3];\n    long x4 = xs[4];\n    long x5 = xs[5];\n    long x6\
    \ = xs[6];\n    long x7 = xs[7];\n    long x8 = xs[8];\n    long x9 = xs[9];\n\
    \    long x10 = xs[10];\n    long x11 = xs[11];\n    long x12 = xs[12];\n    long\
    \ x13 = xs[13];\n    long x14 = xs[14];\n    long x15 = xs[15];\n    long x16\
    \ = xs[16];\n    long x17 = xs[17];\n    long x18 = xs[18];\n    long x19 = xs[19];\n\
    \    long x20 = xs[20];\n    long x21 = xs[21];\n    long x22 = xs[22];\n    long\
    \ x23 = xs[23];\n    long x24 = xs[24];\n    long x25 = xs[25];\n    long x26\
    \ = xs[26];\n    long x27 = xs[27];\n    long x28 = xs[28];\n    long x29 = xs[29];\n\
    \    long x30 = xs[30];\n    long x31 = xs[31];\n    long x32 = xs[32];\n    long\
    \ x33 = xs[33];\n    long x34 = xs[34];\n    long x35 = xs[35];\n    long x36\
    \ = xs[36];\n    long x37 = xs[37];\n    long x38 = xs[38];\n    long x39 = xs[39];\n\
    \    long x40 = xs[40];\n    long x41 = xs[41];\n    long x42 = xs[42];\n    long\
    \ x43 = xs[43];\n    long x44 = xs[44];\n    long x45 = xs[45];\n    long x46\
    \ = xs[46];\n    long x47 = xs[47];\n    long x48 = xs[48];\n    long x49 = xs[49];\n\
    \    long x50 = xs[50];\n    long x51 = xs[51];\n    long x52 = xs[52];\n    long\
    \ x53 = xs[53];\n    long x54 = xs[54];\n    long x55 = xs[55];\n    long x56\
    \ = xs[56];\n\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoue50ppp.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoue50ppp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    long x = 0;\n \
    \   for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = xs[i] - x *\
    \ (xs[i-1] + xs[i+1]);\n        x = xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\ndouble[] derivative(double[] xs) \n{\n    double[] result = new\
    \ double[(xs.length - 1)];\n    double x = 0;\n    for(int i = 1; i < xs.length;\
    \ i++)\n    {\n        result[i] = xs[i] - x * (xs[i-1] + xs[i+1]);\n        x\
    \ = xs[i];\n    }\n    return result;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nfloat[] derivative(float[]\
    \ xs) \n{\n    float[] result = new float[(xs.length - 1)];\n    float x = 0;\n\
    \    for(int i = 1; i < xs.length; i++)\n    {\n        result[i] = xs[i] - x\
    \ * (xs[i-1] + xs[i+1]);\n        x = xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return derivative of this polynomial in the same form.\n  \
    \          \n*/\nunittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
    \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L])\
    \ == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
    \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuutje6wf.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42953e]

    ??:? long[] tmpuutje6wf.derivative(long[]) [0x428af9]

    ??:? void tmpuutje6wf.__unittest_L60_C1() [0x428eb7]

    ??:? void tmpuutje6wf.__modtest() [0x42920c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42db1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431c39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4320e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431bc5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c985]

    ??:? runModuleUnitTests [0x42d8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    long[] result = new long[(xs.length - 1)];\n    for(int i = 0;\
    \ i < result.length; i++) result[i] = 0;\n    for(int i = 1; i < xs.length; i++)\
    \ result[i] = result[i-1] + xs[i] * xs[i];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L,\
    \ 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n\
    \    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L,\
    \ 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp_i6_uw4z.d(13): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428656]

    ??:? long[] tmp_i6_uw4z.derivative(long[]) [0x427ec5]

    ??:? void tmp_i6_uw4z.__unittest_L16_C1() [0x427fd3]

    ??:? void tmp_i6_uw4z.__modtest() [0x428328]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c683]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b516]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4ed]

    ??:? runModuleUnitTests [0x42c459]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(c'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] d = new long[n];\n    long x = 0;\n\
    \    long sum = 0;\n    for(int i = 0; i < n; i++)\n    {\n        sum += xs[i]\
    \ * x;\n        d[i] = xs[i] * sum;\n        x += xs[i];\n    }\n    return d;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
    \            \n*/\ndouble[] derivative(double[] xs) \n{\n    int n = xs.length;\n\
    \    double[] d = new double[n];\n    double x = 0;\n    double sum = 0;\n   \
    \ for(int i = 0; i < n; i++)\n    {\n        sum += xs[i] * x;\n        d[i] =\
    \ xs[i] * sum;\n        x += xs[i];\n    }\n    return d;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return derivative of this polynomial in the same form.\n            \n*/\n\
    float[] derivative(float[] xs) \n{\n    int n = xs.length;\n    float[] d = new\
    \ float[n];\n    float x = 0;\n    float sum = 0;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        sum += xs[i] * x;\n        d[i] = xs[i] * sum;\n        x += xs[i];\n\
    \    }\n    return d;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpucariogl.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpucariogl.d(31): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpucariogl.d(51): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpucariogl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
    \ of this polynomial in the same form.\n            \n*/\nlong[] derivative(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n];\n    long x =\
    \ 0;\n    for(int i = 0; i < n; i++) {\n        x = xs[i];\n        ys[i] = 1;\n\
    \        for(int j = i; j < n; j++) {\n            ys[i] += xs[j] * ys[j-1];\n\
    \        }\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\ndouble[] derivative(double[] xs) \n{\n\
    \    int n = xs.length;\n    double[] ys = new double[n];\n    double x = 0;\n\
    \    for(int i = 0; i < n; i++) {\n        x = xs[i];\n        ys[i] = 1;\n  \
    \      for(int j = i; j < n; j++) {\n            ys[i] += xs[j] * ys[j-1];\n \
    \       }\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nfloat[] derivative(float[] xs) \n{\n  \
    \  int n = xs.length;\n    float[] ys = new float[n];\n    float x = 0;\n    for(int\
    \ i = 0; i < n; i++) {\n        x = xs[i];\n        ys[i] = 1;\n        for(int\
    \ j = i; j < n; j++) {\n            ys[i] += xs[j] * ys[j-1];\n        }\n   \
    \ }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial\
    \ in the same form.\n            \n*/\nunittest\n{\n    alias candidate = derivative;\n\
    \n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n \
    \   assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L])\
    \ == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnnlhaiv0.d(11): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpnnlhaiv0.d(31): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    /tmp/tmpnnlhaiv0.d(51): Error: cannot implicitly convert expression `xs.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnnlhaiv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163993
