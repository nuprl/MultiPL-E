language: d
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] res = new long[l.length];\n    for(; i < l.length; ++i)\n\
    \        res[i] = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] res = new long[l.length];\n    for(; i < l.length; ++i)\n\
    \        res[i] = l[i] - 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_array(float[] a) \n{\n   \
    \ int i = 0;\n    float[] res = new float[a.length];\n    for(; i < a.length;\
    \ ++i)\n        res[i] = a[i] + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_array(float[] a) \n{\n   \
    \ int i = 0;\n    float[] res = new float[a.length];\n    for(; i < a.length;\
    \ ++i)\n        res[i] = a[i] - 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_array(double[] a) \n{\n \
    \   int i = 0;\n    double[] res = new double[a.length];\n    for(; i < a.length;\
    \ ++i)\n        res[i] = a[i] + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\ndouble[] decr_array(double[] a) \n{\n \
    \   int i = 0;\n    double[] res = new double[a.length];\n    for(; i < a.length;\
    \ ++i)\n        res[i] = a[i] - 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ [] result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n  \
    \      result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ [] result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n  \
    \      result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] r = new long[l.length];\n  for(i=0;i<l.length;i++)\n    r[i] = l[i]+1;\n\
    \  return r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpqk_os57e.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpqk_os57e.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n   \
    \ {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l)\
    \ \n{\n    long result[] = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] - 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpx5ocvu4l.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpx5ocvu4l.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpx5ocvu4l.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpx5ocvu4l.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ res = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\tres[i]\
    \ = l[i] + 1;\n\treturn res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ res = 0;\n    foreach(long x in l)\n    {\n        res = res + 1;\n    }\n \
    \   return l;\n}\n/*\nReturn list with elements decremented by 1.\n          \
    \  \n*/\nlong[] decr_list(long[] l) \n{\n    long res = 0;\n    foreach(long x\
    \ in l)\n    {\n        res = res - 1;\n    }\n    return l;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[] l,\
    \ int n) \n{\n    long res = 0;\n    foreach(long x in l)\n    {\n        res\
    \ = res + n;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l, int n) \n{\n    long res\
    \ = 0;\n    foreach(long x in l)\n    {\n        res = res - n;\n    }\n    return\
    \ l;\n}\n/*\nReturn list with elements incremented by n.\n            \n*/\nlong[]\
    \ incr_list(long[] l, int n, int m) \n{\n    long res = 0;\n    foreach(long x\
    \ in l)\n    {\n        res = res + n*m;\n    }\n    return l;\n}\n/*\nReturn\
    \ list with elements decremented by n.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int n, int m) \n{\n    long res = 0;\n    foreach(long x in l)\n    {\n \
    \       res = res - n*m;\n    }\n    return l;\n}\n/*\nReturn list with elements\
    \ incremented by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int m,\
    \ int n) \n{\n    long res = 0;\n    foreach(long x in l)\n    {\n        res\
    \ = res + n*m*n;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented\
    \ by n.\n            \n*/\nlong[] decr_list(long[] l, int n, int m, int n) \n\
    {\n    long res = 0;\n    foreach(long x in l)\n    {\n        res = res - n*m*n;\n\
    \    }\n    return l;\n}\n/*\nReturn list with elements incremented by n.\n  \
    \          \n*/\nlong[] incr_list(long[] l, int n, int m, int n, int m) \n{\n\
    \    long res = 0;\n    foreach(long x in l)\n    {\n        res = res + n*m*n*m;\n\
    \    }\n    return l;\n}\n/*\nReturn list with elements decremented by n.\n  \
    \          \n*/\nlong\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_f1nf_hp.d(10): Error: found `in` when expecting `;`

    /tmp/tmp_f1nf_hp.d(23): Error: found `in` when expecting `;`

    /tmp/tmp_f1nf_hp.d(36): Error: found `in` when expecting `;`

    /tmp/tmp_f1nf_hp.d(49): Error: found `in` when expecting `;`

    /tmp/tmp_f1nf_hp.d(62): Error: found `in` when expecting `;`

    /tmp/tmp_f1nf_hp.d(75): Error: found `in` when expecting `;`

    /tmp/tmp_f1nf_hp.d(88): Error: found `in` when expecting `;`

    /tmp/tmp_f1nf_hp.d(101): Error: found `in` when expecting `;`

    /tmp/tmp_f1nf_hp.d(114): Error: found `in` when expecting `;`

    /tmp/tmp_f1nf_hp.d(125): Error: no identifier for declarator `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_f1nf_hp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i\
    \ = 0;\n  long j = 0;\n  long k = 0;\n  long l = 0;\n  long m = 0;\n  long n =\
    \ 0;\n  long o = 0;\n  long p = 0;\n  long q = 0;\n  long r = 0;\n  long s = 0;\n\
    \  long t = 0;\n  long u = 0;\n  long v = 0;\n  long w = 0;\n  long x = 0;\n \
    \ long y = 0;\n  long z = 0;\n  long aa = 0;\n  long ab = 0;\n  long ac = 0;\n\
    \  long ad = 0;\n  long ae = 0;\n  long af = 0;\n  long ag = 0;\n  long ah = 0;\n\
    \  long ai = 0;\n  long aj = 0;\n  long ak = 0;\n  long al = 0;\n  long am = 0;\n\
    \  long an = 0;\n  long ao = 0;\n  long ap = 0;\n  long aq = 0;\n  long ar = 0;\n\
    \  long as = 0;\n  long at = 0;\n  long au = 0;\n  long av = 0;\n  long aw = 0;\n\
    \  long ax = 0;\n  long ay = 0;\n  long az = 0;\n  long aaa = 0;\n  long aab =\
    \ 0;\n  long aac = 0;\n  long aad = 0;\n  long aae = 0;\n  long aaf = 0;\n  long\
    \ aag = 0;\n  long aah = 0;\n  long aai = 0;\n  long aaj = 0;\n  long aak = 0;\n\
    \  long aal = 0;\n  long aam = 0;\n  long aan = 0;\n  long aao = 0;\n  long aap\
    \ = 0;\n  long aax = 0;\n  long aay = 0;\n  long aaz = 0;\n  long aaaa = 0;\n\
    \  long aabb = 0;\n  long aaca = 0;\n  long aacb = 0;\n  long aacc = 0;\n  long\
    \ aacd = 0;\n  long aace = 0;\n  long aacf = 0;\n  long aacg = 0;\n  long aach\
    \ = 0;\n  long aaci = 0;\n  long aacj = 0;\n  long aack = 0;\n  long aack = 0;\n\
    \  long aacl = 0;\n  long aacm = 0;\n  long aacn = 0;\n  long aaco = 0;\n  long\
    \ aacp = 0;\n  long aacq = 0;\n  long aacr = 0;\n  long aacs = 0;\n  long aact\
    \ = 0;\n  long aacu = 0;\n  long aacv = 0;\n  long aacw = 0;\n  long aacx = 0;\n\
    \  long aac\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7o37uwu.d(100): Error: semicolon expected, not `unittest`

    /tmp/tmpu7o37uwu.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7o37uwu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n        result[i] = l[i] + n;\n    return result;\n}\n/*\nReturn list with\
    \ elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int\
    \ n) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n        result[i] = l[i] - n;\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by n.\n            \n*/\nlong[] incr_list(long[] l,\
    \ int n, int m) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; i++) \n        result[i] = l[i] + n * m;\n    return result;\n\
    }\n/*\nReturn list with elements decremented by n.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int n, int m) \n{\n    long[] result = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++) \n        result[i] = l[i] - n * m;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by m and decremented by n.\n    \
    \        \n*/\nlong[] incr_decr_list(long[] l, int n, int m) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] + n * m;\n    return result;\n}\n/*\nReturn list with elements decremented\
    \ by m and decremented by n.\n            \n*/\nlong[] decr_decr_list(long[] l,\
    \ int n, int m) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; i++) \n        result[i] = l[i] - n * m;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by m and decremented by n.\n    \
    \        \n*/\nlong[] incr_decr_list(long[] l, int n, int m, int n) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int \nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpluhc_522.d(99): Error: no identifier for declarator `int`

    /tmp/tmpluhc_522.d(99): Error: expression expected, not `unittest`

    /tmp/tmpluhc_522.d(100): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpluhc_522.d(101): Error: expression expected, not `alias`

    /tmp/tmpluhc_522.d(101): Error: found `candidate` when expecting `)`

    /tmp/tmpluhc_522.d(101): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpluhc_522.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] res = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n\
    \    {\n        res[i] = l[i] + n;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n) \n{\n    long[] res = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n    {\n        res[i] = l[i] - n;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by n.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int inc) \n{\n    long[] res = new long[l.length];\n    for (int i\
    \ = 0; i < l.length; ++i)\n    {\n        res[i] = l[i] + n * inc;\n    }\n  \
    \  return res;\n}\n/*\nReturn list with elements decremented by n.\n         \
    \   \n*/\nlong[] decr_list(long[] l, int n, int dec) \n{\n    long[] res = new\
    \ long[l.length];\n    for (int i = 0; i < l.length; ++i)\n    {\n        res[i]\
    \ = l[i] - n * dec;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int inc,\
    \ int inc2) \n{\n    long[] res = new long[l.length];\n    for (int i = 0; i <\
    \ l.length; ++i)\n    {\n        res[i] = l[i] + n * inc + inc2;\n    }\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by n.\n            \n*/\n\
    long[] decr_list(long[] l, int n, int dec, int dec2) \n{\n    long[] res = new\
    \ long[l.length];\n    for (int i = 0; i < l.length; ++i)\n    {\n        res[i]\
    \ = l[i] - n * dec + dec2;\n    }\n    return res;\n}\n/*\nReturn list \nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9s7fcave.d(107): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9s7fcave.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; ++i)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong result[] = new\
    \ long[l.length];\n\tfor(int i = 0; i < l.length; ++i)\n\t\tresult[i] = l[i] -\
    \ 1;\n\treturn result;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \           \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpt2fp69sg.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpt2fp69sg.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpt2fp69sg.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpt2fp69sg.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n  \
    \      res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n  \
    \      res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] + n;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] - n;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int m)\
    \ \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + n*m;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by n.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n, int m) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; ++i)\n        result[i] = l[i] - n*m;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by n.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m, int n) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; ++i)\n        result[i] = l[i] + n*m*n;\n    return\
    \ result;\n}\n/*\nReturn list with elements decremented by n.\n            \n\
    */\nlong[] decr_list(long[] l, int n, int m, int n) \n{\n    long[] result = new\
    \ long[l.length];\n    for (int i = 0; i < l.length; ++i)\n        result[i] =\
    \ l[i] - n*m*n;\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int m, int n, int\
    \ m) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + \nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpusy98kaz.d(100): Error: expression expected, not `unittest`

    /tmp/tmpusy98kaz.d(101): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpusy98kaz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ i = 0;\n    long[] result = new long[l.length];\n    for(int j=0; j<l.length;\
    \ j++) \n    {\n        result[j] = l[j] + i;\n        i = result[j];\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c++,list |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1pxauo9n.d(18): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1pxauo9n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ res = new long[l.length];\n\tfor(int i = 0; i < l.length; ++i)\n\t\tres[i] =\
    \ l[i] + 1;\n\treturn res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ i = 0;\n    foreach(long e in l) {\n        i++;\n        l[i] = e;\n    }\n\
    \    return l;\n}\n/*\nReturn list with elements decremented by 1.\n         \
    \   \n*/\nlong[] decr_list(long[] l) \n{\n    long i = 0;\n    foreach(long e\
    \ in l) {\n        i--;\n        l[i] = e;\n    }\n    return l;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpva93wsuc.d(10): Error: found `in` when expecting `;`

    /tmp/tmpva93wsuc.d(23): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpva93wsuc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] r;\n  r = new long[l.length];\n  for (i = 0; i < l.length; ++i)\n  \
    \  r[i] = l[i] + 1;\n  return r;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n  int i;\n  long[]\
    \ r;\n  r = new long[l.length];\n  for (i = 0; i < l.length; ++i)\n    r[i] =\
    \ l[i] - 1;\n  return r;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ n = l.length;\n    long[] r = new long[n];\n    for(int i = 0; i < n; ++i)\n\
    \        r[i] = l[i] + 1;\n    return r;\n}\n</code>\n<|/ a tags=arrays,c++,list\
    \ |>\n<| c |>\nI like your solution, but I wonder why you chose to not use std::vector\
    \ instead of an array. Is there some advantage to using std::vector instead of\
    \ an array?\n<|/ c |>\n<| c |>\n: I chose to not use std::vector because I didn't\
    \ want to reinvent the wheel. std::vector is designed to do exactly what you're\
    \ trying to do, and it does it efficiently. An array is just a raw array, and\
    \ it does all kinds of things that std::vector doesn't do. std::vector is designed\
    \ to do exactly what you're trying to do, and it does it efficiently. An array\
    \ is just a raw array, and it does all kinds of things that std::vector doesn't\
    \ do. std::vector is designed to do exactly what you're trying to do, and it does\
    \ it efficiently. An array is just a raw array, and it does all kinds of things\
    \ that std::vector doesn't do.\n<|/ c |>\n<| c |>\n: I chose to not use std::vector\
    \ because I didn't want to reinvent the wheel. std::vector is designed to do exactly\
    \ what you're trying to do, and it does it efficiently. An array is just a raw\
    \ array, and it does all kinds of things that std::vector doesn't do. std::vector\
    \ is designed to do exactly what you're trying to do, and it does it efficiently.\
    \ An array is just a raw array, and it does all kinds of things that std::vector\
    \ doesn't do. std::vector is designed to do exactly what you're trying to do,\
    \ and it does it efficiently. An array is just a raw array, and it does all kinds\
    \ of things that std::vector doesn't do.\n<|/ c |>\n<| c |>\n: I chose to not\
    \ use std::vector because I didn't want to reinvent the wheel. std::vector is\
    \ designed to do exactly what you're trying to do, and it does it efficiently.\
    \ An array is just a raw array, and it does all kinds of things that std::vector\
    \ doesn't do. std::vector is designed to do exactly what you're trying to do,\
    \ and it does it efficiently. An array is just a raw array, and it does all kinds\
    \ of things that std::vector doesn't do. std::vector is designed to do exactly\
    \ what you're trying to do, and it does it efficiently. An array is just a raw\
    \ array, and it does all kinds of things that std::\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbkqahp_.d(15): Error: declaration expected, not `<`

    /tmp/tmpmbkqahp_.d(21): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(21): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(21): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(21): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(21): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(21): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(21): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(24): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(24): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(24): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(24): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(24): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(24): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(24): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d(27): Error: unterminated character constant

    /tmp/tmpmbkqahp_.d'
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list2(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list2(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list3(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list3(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list4(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list4(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list5(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list5(long[] l) \n{\n    long\
    \ result\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphrc3x7v8.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmphrc3x7v8.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmphrc3x7v8.d(31): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmphrc3x7v8.d(42): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmphrc3x7v8.d(53): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmphrc3x7v8.d(64): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmphrc3x7v8.d(75): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmphrc3x7v8.d(86): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmphrc3x7v8.d(97): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmphrc3x7v8.d(109): Error: semicolon expected, not `unittest`

    /tmp/tmphrc3x7v8.d(109): Error: found `unittest` instead of stateme'
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ [] result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n   \
    \     result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ [] result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n   \
    \     result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ res = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        res += l[i];\n\
    \        l[i] = res;\n    }\n    return l;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=arrays,c++,list |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptduy6r3i.d(17): Error: declaration expected, not `<`

    /tmp/tmptduy6r3i.d(28): Error: declaration expected, not `assert`

    /tmp/tmptduy6r3i.d(29): Error: declaration expected, not `assert`

    /tmp/tmptduy6r3i.d(30): Error: declaration expected, not `assert`

    /tmp/tmptduy6r3i.d(31): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptduy6r3i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n  \
    \      res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n  \
    \      res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ multiplied by 2.\n            \n*/\nlong[] mult_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n  \
    \      res[i] = l[i] * 2;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ divided by 2.\n            \n*/\nlong[] div_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n      \
    \  res[i] = l[i] / 2;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ multiplied by 3 and added with 1.\n            \n*/\nlong[] add_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        res[i] = l[i] * 3 + 1;\n    }\n    return res;\n}\n/*\n\
    Return list with elements divided by 3 and subtracted with 1.\n            \n\
    */\nlong[] sub_list(long[] l) \n{\n    long[] res = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n    {\n        res[i] = l[i] / 3 - 1;\n    }\n  \
    \  return res;\n}\n/*\nReturn list with elements multiplied by 3 and added with\
    \ 1.\n            \n*/\nlong[] mult_add_list(long[] l) \n{\n    long[] res = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n        res[i]\
    \ = l[i] * 3 + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements divided\
    \ by 3 and subtracted with 1.\n            \n*/\nlong[] div_sub_list(long[] l)\
    \ \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n    {\n        res[i] = l[i] / 3 - 1;\n    }\n    return res;\n}\n/*\n\
    Return list with elements multiplied by 3 and added with 1.\n            \n*/\n\
    long[] mult_mult_add_list(long[] l) \n{\n\nunittest\n{\n    alias candidate =\
    \ incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvffsdcqx.d(114): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvffsdcqx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \  {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long result[] = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] - 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n) \n{\n    long result[] = new long[l.length];\n    for (int i = 0;\
    \ i < n; i++) \n    {\n        for (int j = 0; j < l.length; j++) \n        {\n\
    \            result[j] = l[j] + 1;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int n) \n{\n    long result[] = new long[l.length];\n    for (int i = 0;\
    \ i < n; i++) \n    {\n        for (int j = 0; j < l.length; j++) \n        {\n\
    \            result[j] = l[j] - 1;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m) \n{\n    long result[] = new long[l.length];\n    for (int\
    \ i = 0; i < n; i++) \n    {\n        for (int j = 0; j < m; j++) \n        {\n\
    \            for (int k = 0; k < l.length; k++) \n            {\n            \
    \    result[k] = l[k] + 1;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int n, int m) \n{\n    long result[] = new long[l.length];\n    for (int\
    \ i = 0; i < n; i++) \n    {\n        for (int j = 0; j < m; j++) \n        {\n\
    \            for (int k = 0; k < l.length; k++) \n            {\n            \
    \    result[k] = l[k] - 1;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m, int n2) \n{\n    long result[] = new long[l.length];\n    for\
    \ (int i = 0; i < n; i++) \n    {\n        for (int j = 0; j < m; j++) \n    \
    \    {\n            for (int k = 0; k < n2; k++) \n            {\n           \
    \     result[k] = l[k] + 1;\n            }\n        }\n    }\n    return result;\n\
    \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp979v52c8.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmp979v52c8.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp979v52c8.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp979v52c8.d(51): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp979v52c8.d(67): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp979v52c8.d(86): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp979v52c8.d(105): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp979v52c8.d(118): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp979v52c8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ multiplied by 2.\n            \n*/\nlong[] mul_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] * 2;\n    return result;\n}\n/*\nReturn list with elements\
    \ divided by 2.\n            \n*/\nlong[] div_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] / 2;\n    return result;\n}\n/*\nReturn list with elements multiplied\
    \ by 3.\n            \n*/\nlong[] mul3_list(long[] l) \n{\n    long[] result =\
    \ new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] * 3;\n    return result;\n}\n/*\nReturn list with elements divided by\
    \ 3.\n            \n*/\nlong[] div3_list(long[] l) \n{\n    long[] result = new\
    \ long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] / 3;\n    return result;\n}\n/*\nReturn list with elements multiplied\
    \ by 4.\n            \n*/\nlong[] mul4_list(long[] l) \n{\n    long[] result =\
    \ new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] * 4;\n    return result;\n}\n/*\nReturn list with elements divided by\
    \ 4.\n            \n*/\nlong[] div4_list(long[] l) \n{\n    long[] result = new\
    \ long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] / 4;\n    return result;\n}\n/*\nReturn list with elements multiplied\
    \ by 5.\n            \n*/\nlong[] mul5_list(long[] l) \n{\n    long[] result =\
    \ new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] * 5;\n    return result;\n}\n/*\nReturn list with elements divided by\
    \ 5.\n            \n*/\nlong[] div5_list(long[] l) \n{\n    long[] result = new\
    \ long[l.length];\n    for (int i = 0; i < l.length; i++) \nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjemu5vvr.d(110): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjemu5vvr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmptcitq108.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmptcitq108.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] r;\n  r = new long[l.length];\n  for (i = 0; i < l.length; ++i)\n  \
    \  r[i] = l[i] + 1;\n  return r;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n  int i;\n  long[]\
    \ r;\n  r = new long[l.length];\n  for (i = 0; i < l.length; ++i)\n    r[i] =\
    \ l[i] - 1;\n  return r;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmptcitq108.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmptcitq108.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        r[i]\
    \ = l[i] + 1;\n    return r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_double(double[] d) \n{\n\
    \    double[] res = new double[d.length];\n    for(int i = 0; i < d.length; ++i)\n\
    \    {\n        res[i] = d[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_double(double[]\
    \ d) \n{\n    double[] res = new double[d.length];\n    for(int i = 0; i < d.length;\
    \ ++i)\n    {\n        res[i] = d[i] - 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nfloat[] incr_float(float[]\
    \ f) \n{\n    float[] res = new float[f.length];\n    for(int i = 0; i < f.length;\
    \ ++i)\n    {\n        res[i] = f[i] + 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nfloat[] decr_float(float[]\
    \ f) \n{\n    float[] res = new float[f.length];\n    for(int i = 0; i < f.length;\
    \ ++i)\n    {\n        res[i] = f[i] - 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n   \
    \     result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n   \
    \     result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long result[] = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] + n;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int n) \n{\n\
    \    long result[] = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] - n;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int m)\
    \ \n{\n    long result[] = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + n * m;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by n.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n, int m) \n{\n    long result[] = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; ++i)\n        result[i] = l[i] - n * m;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by m and decremented by n.\n    \
    \        \n*/\nlong[] incr_decr_list(long[] l, int n, int m) \n{\n    long result[]\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n        result[i]\
    \ = l[i] + n * m;\n    return result;\n}\n/*\nReturn list with elements decremented\
    \ by m and incremented by n.\n            \n*/\nlong[] decr_incr_list(long[] l,\
    \ int n, int m) \n{\n    long result[] = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; ++i)\n        result[i] = l[i] - n * m;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by m and decremented by n.\n    \
    \        \n*/\nlong[] incr_decr_list(long[] l, int n, int m, int p) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int \nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt5cv7xv5.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpt5cv7xv5.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpt5cv7xv5.d(31): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpt5cv7xv5.d(42): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpt5cv7xv5.d(53): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpt5cv7xv5.d(64): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpt5cv7xv5.d(75): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpt5cv7xv5.d(86): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpt5cv7xv5.d(97): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpt5cv7xv5.d(99): Error: no identifier for declarator `int`

    /tmp/tmpt5cv7xv5.d(99): Error: expression expected, not `unittest`

    /'
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ n = l.length;\n    long[] r = new long[n + 1];\n    for (int i = 0; i < n; i++)\n\
    \        r[i] = l[i];\n    r[n] = 1;\n    return r;\n}\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91femjeg.d(9): Error: cannot implicitly convert expression `l.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91femjeg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ temp;\n\tlong[] res = new long[l.length];\n\tfor(int i = 0; i < l.length; ++i)\n\
    \t\tres[i] = l[i] + 1;\n\treturn res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n        result[i] = l[i] + n;\n    return result;\n}\n/*\nReturn list with\
    \ elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int\
    \ n) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n        result[i] = l[i] - n;\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by n.\n            \n*/\nlong[] incr_list(long[] l,\
    \ int n, int m) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; i++) \n        result[i] = l[i] + n * m;\n    return result;\n\
    }\n/*\nReturn list with elements decremented by n.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int n, int m) \n{\n    long[] result = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++) \n        result[i] = l[i] - n * m;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by n.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m, int n) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++) \n        result[i] = l[i] + n * m * n;\n   \
    \ return result;\n}\n/*\nReturn list with elements decremented by n.\n       \
    \     \n*/\nlong[] decr_list(long[] l, int n, int m, int n) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] - n * m * n;\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int m, int n, int\
    \ m) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n        result[i] = l[i] + \nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprsgifil8.d(100): Error: expression expected, not `unittest`

    /tmp/tmprsgifil8.d(101): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprsgifil8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] r;\n  r = [];\n  for (i = 0; i < l.length; ++i)\n    r[i] = l[i] + 1;\n\
    \  return r;\n}\n/*\nReturn list with elements decremented by 1.\n           \
    \ \n*/\nlong[] decr_list(long[] l) \n{\n  int i;\n  long[] r;\n  r = [];\n  for\
    \ (i = 0; i < l.length; ++i)\n    r[i] = l[i] - 1;\n  return r;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuc7hnv4z.d(13): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4285ae]

    ??:? long[] tmpuc7hnv4z.incr_list(long[]) [0x427eb7]

    ??:? void tmpuc7hnv4z.__unittest_L33_C1() [0x428065]

    ??:? void tmpuc7hnv4z.__modtest() [0x42827c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c57f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b412]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430531]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3e9]

    ??:? runModuleUnitTests [0x42c355]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(ch'
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    long[] incr_list(long[] l, int n) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n        res[i] = l[i] + n;\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by 1.\n            \n*/\n\
    long[] decr_list(long[] l, int n) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n        res[i] = l[i] - n;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by n.\n            \n*/\n\
    long[] incr_list(long[] l, int n, int inc) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n        res[i] = l[i] + n * inc;\n  \
    \  return res;\n}\n/*\nReturn list with elements decremented by n.\n         \
    \   \n*/\nlong[] decr_list(long[] l, int n, int inc) \n{\n    long[] res = new\
    \ long[l.length];\n    for (int i = 0; i < l.length; ++i)\n        res[i] = l[i]\
    \ - n * inc;\n    return res;\n}\n/*\nReturn list with elements incremented by\
    \ n.\n            \n*/\nlong[] incr_list(long[] l, int n, int inc, int inc2) \n\
    {\n    long[] res = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n\
    \        res[i] = l[i] + n * inc * inc2;\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by n.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n, int inc, int inc2) \n{\n    long[] res = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; ++i)\n        res[i] = l[i] - n * inc * inc2;\n  \
    \  return res;\n}\n/*\nReturn list with elements incremented by n.\n         \
    \   \n*/\nlong[] incr_list(long[] l, int n, int inc, int inc2, int inc3) \n{\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjpybqqez.d(97): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpybqqez.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        res[i] = l[i] + n;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        res[i] = l[i] - n;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by n.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int inc) \n{\n    long[] res = new long[l.length];\n    for(int i\
    \ = 0; i < l.length; i++) \n    {\n        res[i] = l[i] + n * inc;\n    }\n \
    \   return res;\n}\n/*\nReturn list with elements decremented by n.\n        \
    \    \n*/\nlong[] decr_list(long[] l, int n, int inc) \n{\n    long[] res = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n        res[i]\
    \ = l[i] - n * inc;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int inc,\
    \ int inc2) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; i++) \n    {\n        res[i] = l[i] + n * inc * inc2;\n    }\n   \
    \ return res;\n}\n/*\nReturn list with elements decremented by n.\n          \
    \  \n*/\nlong[] decr_list(long[] l, int n, int inc, int inc2) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - n * inc * inc2;\n    }\n    return \nunittest\n{\n   \
    \ alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp93mk7u7s.d(106): Error: expression expected, not `unittest`

    /tmp/tmp93mk7u7s.d(107): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93mk7u7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ res = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\tres[i]\
    \ = l[i] + 1;\n\treturn res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ res = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n        res += l[i];\n\
    \        l[i] = res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long res = 0;\n\
    \    for (int i = l.length - 1; i >= 0; --i)\n    {\n        res += l[i];\n  \
    \      l[i] = res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\ndouble[] incr_double(double[] d) \n{\n    double res\
    \ = 0;\n    for (int i = 0; i < d.length; ++i)\n    {\n        res += d[i];\n\
    \        d[i] = res;\n    }\n    return d;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\ndouble[] decr_double(double[] d) \n{\n    double res\
    \ = 0;\n    for (int i = d.length - 1; i >= 0; --i)\n    {\n        res += d[i];\n\
    \        d[i] = res;\n    }\n    return d;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nfloat[] incr_float(float[] f) \n{\n    float res =\
    \ 0;\n    for (int i = 0; i < f.length; ++i)\n    {\n        res += f[i];\n  \
    \      f[i] = res;\n    }\n    return f;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nfloat[] decr_float(float[] f) \n{\n    float res =\
    \ 0;\n    for (int i = f.length - 1; i >= 0; --i)\n    {\n        res += f[i];\n\
    \        f[i] = res;\n    }\n    return f;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpayzqlbo2.d(24): Error: cannot implicitly convert expression `l.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpayzqlbo2.d(52): Error: cannot implicitly convert expression `d.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpayzqlbo2.d(80): Error: cannot implicitly convert expression `f.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpayzqlbo2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ res = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tres[i] =\
    \ l[i] + 1;\n\treturn res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        result +=\
    \ l[i];\n        l[i] = result;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l)\
    \ \n{\n    long result = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n  \
    \      result -= l[i];\n        l[i] = result;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n) \n{\n    long result = 0;\n    for(int i = 0; i < n; i++)\n    {\n\
    \        result += l[i];\n        l[i] = result;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int n) \n{\n    long result = 0;\n    for(int i = 0; i < n; i++)\n    {\n\
    \        result -= l[i];\n        l[i] = result;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m) \n{\n    long result = 0;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        result += l[i];\n        l[i] = result;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int n, int m) \n{\n    long result = 0;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        result -= l[i];\n        l[i] = result;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m, int k) \n{\n    long result = 0;\n    for(int i = 0; i < n;\
    \ i++)\n    {\n        result += l[i];\n        l[i] = result;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements decremented by 1.\n            \n\
    */\nlong[] decr_list(long[] l, int n, int m, int k) \n{\n    long result = 0;\n\
    \    for(int i = 0; i < n; i++)\n    {\n        result -= l[i];\n        l[i]\
    \ = result;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list(long[] l, int n, int m, int k, int\
    \ j) \n{\n    long result = 0;\n    for(int i = 0; i < n; i++)\n    {\n      \
    \  result += l[i];\n        l[i] = result;\n    }\n    return result;\n}\n/*\n\
    Return list \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnre4ke9m.d(129): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnre4ke9m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i\
    \ = 0;\n  long[] res = new long[l.length];\n  while (i < l.length) \n  {\n   \
    \ res[i] = l[i] + 1;\n    i++;\n  }\n  return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n  int i\
    \ = 0;\n  long[] res = new long[l.length];\n  while (i < l.length) \n  {\n   \
    \ res[i] = l[i] - 1;\n    i++;\n  }\n  return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ res = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tres += l[i];\n\t\t\
    l[i] = res;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprp5xvhqo.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283f5]

    ??:? void tmprp5xvhqo.__unittest_L17_C1() [0x427fc1]

    ??:? void tmprp5xvhqo.__modtest() [0x428174]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c477]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b30a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43049d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43094c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430429]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]

    ??:? runModuleUnitTests [0x42c24d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n      \
    \  result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n      \
    \  result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ res = 0;\n\tfor(int i = 0; i < l.length; ++i)\n\t\tres += l[i];\n\treturn new\
    \ long[]{res};\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4v1nh3wk.d(12): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp4v1nh3wk.d(12): Error: found `}` when expecting `;` following statement

    /tmp/tmp4v1nh3wk.d(12): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4v1nh3wk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_double(double[] d) \n{\n\t\
    double result[] = new double[d.length];\n\tfor (int i = 0; i < d.length; i++)\
    \ \n\t{\n\t\tresult[i] = d[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_double(double[]\
    \ d) \n{\n\tdouble result[] = new double[d.length];\n\tfor (int i = 0; i < d.length;\
    \ i++) \n\t{\n\t\tresult[i] = d[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nfloat[] incr_float(float[]\
    \ f) \n{\n\tfloat result[] = new float[f.length];\n\tfor (int i = 0; i < f.length;\
    \ i++) \n\t{\n\t\tresult[i] = f[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nfloat[] decr_float(float[]\
    \ f) \n{\n\tfloat result[] = new float[f.length];\n\tfor (int i = 0; i < f.length;\
    \ i++) \n\t{\n\t\tresult[i] = f[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmp8e12i6rc.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmp8e12i6rc.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp8e12i6rc.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmp8e12i6rc.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmp8e12i6rc.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmp8e12i6rc.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmp8e12i6rc.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp8e12i6rc.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp8e12i6rc.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmp8e12i6rc.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmp8e12i6rc.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmp8e12i6rc.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n        result[i] = l[i] + n;\n    return result;\n}\n/*\nReturn list with\
    \ elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int\
    \ n) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n        result[i] = l[i] - n;\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by n.\n            \n*/\nlong[] incr_list(long[] l,\
    \ int m, int n) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; i++) \n        result[i] = l[i] + m * n;\n    return result;\n\
    }\n/*\nReturn list with elements decremented by n.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int m, int n) \n{\n    long[] result = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++) \n        result[i] = l[i] - m * n;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by m and decremented by n.\n    \
    \        \n*/\nlong[] incr_decr_list(long[] l, int m, int n) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] + m * n;\n    return result;\n}\n/*\nReturn list with elements decremented\
    \ by m and decremented by n.\n            \n*/\nlong[] decr_decr_list(long[] l,\
    \ int m, int n) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; i++) \n        result[i] = l[i] - m * n;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by m and decremented by n.\n    \
    \        \n*/\nlong[] incr_decr_list(long[] l, int m, int n, int m2, int n2) \n\
    {\n    long[] result = new \nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgta9k60s.d(98): Error: basic type expected, not `unittest`

    /tmp/tmpgta9k60s.d(98): Error: semicolon expected, not `unittest`

    /tmp/tmpgta9k60s.d(98): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgta9k60s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ res = 0;\n    foreach(long e in l)\n    {\n        res = res + 1;\n        l[res]\
    \ = e;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long res = 0;\n  \
    \  foreach(long e in l)\n    {\n        res = res - 1;\n        l[res] = e;\n\
    \    }\n    return l;\n}\n/*\nReturn list with elements incremented by 1.\n  \
    \          \n*/\nlong[] incr_list(long[] l, long val) \n{\n    long res = 0;\n\
    \    foreach(long e in l)\n    {\n        res = res + val;\n        l[res] = e;\n\
    \    }\n    return l;\n}\n/*\nReturn list with elements decremented by 1.\n  \
    \          \n*/\nlong[] decr_list(long[] l, long val) \n{\n    long res = 0;\n\
    \    foreach(long e in l)\n    {\n        res = res - val;\n        l[res] = e;\n\
    \    }\n    return l;\n}\n/*\nReturn list with elements incremented by 1.\n  \
    \          \n*/\nlong[] incr_list(long[] l, long val, long val2) \n{\n    long\
    \ res = 0;\n    foreach(long e in l)\n    {\n        res = res + val + val2;\n\
    \        l[res] = e;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l, long val, long val2) \n\
    {\n    long res = 0;\n    foreach(long e in l)\n    {\n        res = res - val\
    \ - val2;\n        l[res] = e;\n    }\n    return l;\n}\n/*\nReturn list with\
    \ elements incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, long\
    \ val, long val2, long val3) \n{\n    long res = 0;\n    foreach(long e in l)\n\
    \    {\n        res = res + val + val2 + val3;\n        l[res] = e;\n    }\n \
    \   return l;\n}\n/*\nReturn list with elements decremented by 1.\n          \
    \  \n*/\nlong[] decr_list(long[] l, long val, long val2, long val3) \n{\n    long\
    \ res = 0;\n    foreach(long e in l)\n    {\n        res = res - val - val2 -\
    \ val3;\n        l[res] = e;\n    }\n    return l;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, \nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5v75zwbq.d(10): Error: found `in` when expecting `;`

    /tmp/tmp5v75zwbq.d(24): Error: found `in` when expecting `;`

    /tmp/tmp5v75zwbq.d(38): Error: found `in` when expecting `;`

    /tmp/tmp5v75zwbq.d(52): Error: found `in` when expecting `;`

    /tmp/tmp5v75zwbq.d(66): Error: found `in` when expecting `;`

    /tmp/tmp5v75zwbq.d(80): Error: found `in` when expecting `;`

    /tmp/tmp5v75zwbq.d(94): Error: found `in` when expecting `;`

    /tmp/tmp5v75zwbq.d(108): Error: found `in` when expecting `;`

    /tmp/tmp5v75zwbq.d(120): Error: basic type expected, not `unittest`

    /tmp/tmp5v75zwbq.d(120): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5v75zwbq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ res = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tres += l[i];\n\t\t\
    l[i] = res;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprp5xvhqo.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283f5]

    ??:? void tmprp5xvhqo.__unittest_L17_C1() [0x427fc1]

    ??:? void tmprp5xvhqo.__modtest() [0x428174]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c477]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b30a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43049d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43094c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430429]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]

    ??:? runModuleUnitTests [0x42c24d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ res = 0;\n    for(int i = 0; i < l.length; i++)\n    {\n        res++;\n   \
    \     l[i] = res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long res = 0;\n\
    \    for(int i = 0; i < l.length; i++)\n    {\n        res--;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ohv7bqn.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmp8ohv7bqn.__unittest_L35_C1() [0x428041]

    ??:? void tmp8ohv7bqn.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b38a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43051d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b361]

    ??:? runModuleUnitTests [0x42c2cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428938]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ r = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\tr[i] = l[i]\
    \ + 1;\n\treturn r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long temp;\n  long result[] = new long[l.length];\n  for (i = 0; i < l.length;\
    \ i++)\n  {\n    temp = l[i];\n    result[i] = temp + 1;\n  }\n  return result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n  int i;\n  long temp;\n  long result[] = new long[l.length];\n  for\
    \ (i = 0; i < l.length; i++)\n  {\n    temp = l[i];\n    result[i] = temp - 1;\n\
    \  }\n  return result;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \           \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpl5dqz_5u.d(11): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpl5dqz_5u.d(27): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpl5dqz_5u.d(11): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpl5dqz_5u.d(27): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] result = new long[l.length];\n  for (i = 0; i < l.length; i++) \n  \
    \  result[i] = l[i] + 1;\n  return result;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n  int i;\n  long[]\
    \ result = new long[l.length];\n  for (i = 0; i < l.length; i++) \n    result[i]\
    \ = l[i] - 1;\n  return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ [] res = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ [] res = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    {\n\
    \        res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ [] result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n   \
    \     result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ [] result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n   \
    \     result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, long by) \n\
    {\n    long [] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + by;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ long by) \n{\n    long [] result = new long[l.length];\n    for(int i = 0; i\
    \ < l.length; ++i)\n        result[i] = l[i] - by;\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int by) \n{\n    long [] result = new long[l.length];\n    for(int i = 0;\
    \ i < l.length; ++i)\n        result[i] = l[i] + by;\n    return result;\n}\n\
    /*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int by) \n{\n    long [] result = new long[l.length];\n    for(int i = 0;\
    \ i < l.length; ++i)\n        result[i] = l[i] - by;\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, double by) \n{\n    long [] result = new long[l.length];\n    for(int i =\
    \ 0; i < l.length; ++i)\n        result[i] = l[i] + by;\n    return result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, double by) \n{\n    long [] result = new long[l.length];\n    for(int i =\
    \ 0; i < l.length; ++i)\n        result[i] = l[i] - by;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, float by) \n{\n    long [] result = new long[l.length];\n    for(int i =\
    \ 0; i < l.length; ++i)\n        result[i] = l[i] + by;\n    return result;\n\
    }\n/*\nReturn list \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi9p5knhb.d(102): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9p5knhb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] + n;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] - n;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n, int m)\
    \ \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + n * m;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n, int m) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; ++i)\n        result[i] = l[i] - n * m;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m, int n) \n{\n    long[] result = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; ++i)\n        result[i] = l[i] + n * m * n;\n    return\
    \ result;\n}\n/*\nReturn list with elements decremented by 1.\n            \n\
    */\nlong[] decr_list(long[] l, int n, int m, int n) \n{\n    long[] result = new\
    \ long[l.length];\n    for (int i = 0; i < l.length; ++i)\n        result[i] =\
    \ l[i] - n * m * n;\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list(long[] l, int n, int m, int n, int\
    \ m) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + \nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9df3zcwu.d(100): Error: expression expected, not `unittest`

    /tmp/tmp9df3zcwu.d(101): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9df3zcwu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        result +=\
    \ (long)l[i];\n        l[i] = result;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbv9cye2b.d(12): Error: C style cast illegal, use `cast(long)l[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbv9cye2b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_array(float[] l) \n{\n   \
    \ float[] result = new float[l.length];\n    for(int i = 0; i < l.length; i++)\
    \ \n        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with\
    \ elements decremented by 1.\n            \n*/\nfloat[] decr_array(float[] l)\
    \ \n{\n    float[] result = new float[l.length];\n    for(int i = 0; i < l.length;\
    \ i++) \n        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n            \n*/\ndouble[] incr_array(double[]\
    \ l) \n{\n    double[] result = new double[l.length];\n    for(int i = 0; i <\
    \ l.length; i++) \n        result[i] = l[i] + 1;\n    return result;\n}\n/*\n\
    Return list with elements decremented by 1.\n            \n*/\ndouble[] decr_array(double[]\
    \ l) \n{\n    double[] result = new double[l.length];\n    for(int i = 0; i <\
    \ l.length; i++) \n        result[i] = l[i] - 1;\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n            \n*/\nunittest\n{\n \
    \   alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_array(float[] l) \n{\n   \
    \ float result[] = new float[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_array(float[] l) \n{\n   \
    \ float result[] = new float[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_array(double[] l) \n{\n \
    \   double result[] = new double[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_array(double[]\
    \ l) \n{\n    double result[] = new double[l.length];\n    for(int i = 0; i <\
    \ l.length; ++i)\n        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmp4_lj54vi.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmp4_lj54vi.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp4_lj54vi.d(31): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmp4_lj54vi.d(42): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmp4_lj54vi.d(53): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmp4_lj54vi.d(64): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmp4_lj54vi.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp4_lj54vi.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp4_lj54vi.d(31): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmp4_lj54vi.d(42): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmp4_lj54vi.d(53): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmp4_lj54vi.d(64): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n      \
    \  result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n      \
    \  result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] + n;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] - n;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int m)\
    \ \n{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + n*m;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by n.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n, int m) \n{\n    long[] result = new long[l.length];\n    for(int i =\
    \ 0; i < l.length; ++i)\n        result[i] = l[i] - n*m;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by n.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m, int n2) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; ++i)\n        result[i] = l[i] + n*m + n2;\n    return\
    \ result;\n}\n/*\nReturn list with elements decremented by n.\n            \n\
    */\nlong[] decr_list(long[] l, int n, int m, int n2) \n{\n    long[] result =\
    \ new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        result[i]\
    \ = l[i] - n*m - n2;\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int m, int n2, int\
    \ n3) \n{\n    long[] result = new long[l.length];\n    for(int i = 0; i < \n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkckt2cmz.d(99): Error: expression expected, not `unittest`

    /tmp/tmpkckt2cmz.d(100): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpkckt2cmz.d(101): Error: expression expected, not `alias`

    /tmp/tmpkckt2cmz.d(101): Error: found `candidate` when expecting `)`

    /tmp/tmpkckt2cmz.d(101): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkckt2cmz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] + 1;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmp9gb68tx6.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmp9gb68tx6.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n   \
    \     result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n   \
    \     result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmposgfdckb.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmposgfdckb.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmposgfdckb.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmposgfdckb.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n\
    \        result[i] = l[i] + 1;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l)\
    \ \n{\n    long result[] = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        result[i] = l[i] - 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n            \n*/\nfloat[] incr_array(float[]\
    \ l) \n{\n    float result[] = new float[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements decremented by 1.\n            \n*/\nfloat[] decr_array(float[]\
    \ l) \n{\n    float result[] = new float[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        result[i] = l[i] - 1;\n    }\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n            \n*/\ndouble[] incr_array(double[]\
    \ l) \n{\n    double result[] = new double[l.length];\n    for(int i = 0; i <\
    \ l.length; ++i)\n    {\n        result[i] = l[i] + 1;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\ndouble[]\
    \ decr_array(double[] l) \n{\n    double result[] = new double[l.length];\n  \
    \  for(int i = 0; i < l.length; ++i)\n    {\n        result[i] = l[i] - 1;\n \
    \   }\n    return result;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpgy7ks7n9.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpgy7ks7n9.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpgy7ks7n9.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpgy7ks7n9.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpgy7ks7n9.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpgy7ks7n9.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpgy7ks7n9.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpgy7ks7n9.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpgy7ks7n9.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpgy7ks7n9.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpgy7ks7n9.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpgy7ks7n9.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmptcitq108.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmptcitq108.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, long val) \n\
    {\n    long[] res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        res[i] = l[i] + val;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ long val) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; ++i)\n    {\n        res[i] = l[i] - val;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by val.\n            \n*/\nlong[]\
    \ incr_list(long[] l, int val) \n{\n    long[] res = new long[l.length];\n   \
    \ for(int i = 0; i < l.length; ++i)\n    {\n        res[i] = l[i] + val;\n   \
    \ }\n    return res;\n}\n/*\nReturn list with elements decremented by val.\n \
    \           \n*/\nlong[] decr_list(long[] l, int val) \n{\n    long[] res = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n        res[i]\
    \ = l[i] - val;\n    }\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by val.\n            \n*/\nlong[] incr_list(long[] l, long val1, long val2)\
    \ \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        res[i] = l[i] + val1 + val2;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements decremented by val.\n            \n*/\nlong[]\
    \ decr_list(long[] l, long val1, long val2) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        res[i] = l[i] - val1 -\
    \ val2;\n    }\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by val\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa4xndtee.d(107): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4xndtee.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_list(float[] l) \n{\n\tfloat\
    \ result[] = new float[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_list(float[] l) \n{\n\tfloat\
    \ result[] = new float[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_list(double[] l) \n{\n\t\
    double result[] = new double[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\
    \t{\n\t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with\
    \ elements decremented by 1.\n            \n*/\ndouble[] decr_list(double[] l)\
    \ \n{\n\tdouble result[] = new double[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nchar[] incr_list(char[]\
    \ l) \n{\n\tchar result[] = new char[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nchar[] decr_list(char[]\
    \ l) \n{\n\tchar result[] = new char[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwu8t8lak.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpwu8t8lak.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpwu8t8lak.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpwu8t8lak.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpwu8t8lak.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpwu8t8lak.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpwu8t8lak.d(87): Deprecation: instead of C-style syntax, use D-style syntax
    `char[] result`

    /tmp/tmpwu8t8lak.d(100): Deprecation: instead of C-style syntax, use D-style syntax
    `char[] result`

    /tmp/tmpwu8t8lak.d(90): Error: cannot implicitly convert expression `cast(int)l[cast(ulong)i]
    + 1` of type `int` to `char`

    /tmp/tmpwu8t8lak.d(103): Error: cannot implicitly convert expression `cast(int)l[cast(ulong)i]
    - 1` of type `int` to `char`

    /tmp/tmpwu8t8lak.d(115): Error: `tmpwu8t8lak.incr_list` called with argument types
    `(void[])` matches both:

    /tmp/tmpwu8t8lak.d(7):     `tmpwu8t8lak.incr_list(long[] l)`

    and:

    /tmp/tmpwu8t8lak.d(85):     `tmpwu8t8lak.incr_list(char[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwu8t8lak.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for (long i = 0; i < l.length; i++) \n    {\n        result\
    \ += (long)1;\n        l[i] = result;\n    }\n    return result;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long result = 0;\n    for (long i = 0; i < l.length; i++) \n   \
    \ {\n        result += (long)-1;\n        l[i] = result;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpln54q2qg.d(12): Error: C style cast illegal, use `cast(long)1`

    /tmp/tmpln54q2qg.d(26): Error: found `)` when expecting `.` following long

    /tmp/tmpln54q2qg.d(26): Error: found `-` when expecting identifier following `long`.

    /tmp/tmpln54q2qg.d(26): Error: found `1` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpln54q2qg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long j;\n  long[] r;\n  r = new long[l.length];\n  for (i = 0; i < l.length;\
    \ i++) \n  {\n    r[i] = l[i] + 1;\n  }\n  return r;\n}\n/*\nReturn list with\
    \ elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n\
    {\n  int i;\n  long j;\n  long[] r;\n  r = new long[l.length];\n  for (i = 0;\
    \ i < l.length; i++) \n  {\n    r[i] = l[i] - 1;\n  }\n  return r;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\ndouble[] incr_double(double[]\
    \ d) \n{\n  int i;\n  double j;\n  double[] r;\n  r = new double[d.length];\n\
    \  for (i = 0; i < d.length; i++) \n  {\n    r[i] = d[i] + 1;\n  }\n  return r;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\ndouble[]\
    \ decr_double(double[] d) \n{\n  int i;\n  double j;\n  double[] r;\n  r = new\
    \ double[d.length];\n  for (i = 0; i < d.length; i++) \n  {\n    r[i] = d[i] -\
    \ 1;\n  }\n  return r;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \           \n*/\nfloat[] incr_float(float[] f) \n{\n  int i;\n  float j;\n  float[]\
    \ r;\n  r = new float[f.length];\n  for (i = 0; i < f.length; i++) \n  {\n   \
    \ r[i] = f[i] + 1;\n  }\n  return r;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nfloat[] decr_float(float[] f) \n{\n  int i;\n  float\
    \ j;\n  float[] r;\n  r = new float[f.length];\n  for (i = 0; i < f.length; i++)\
    \ \n  {\n    r[i] = f[i] - 1;\n  }\n  return r;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n        result +=\
    \ l[i];\n        l[i] = result;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n \
    \       result -= l[i];\n        l[i] = result;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n) \n{\n    long result = 0;\n    for (int i = 0; i < n; ++i)\n    {\n\
    \        result += l[i];\n        l[i] = result;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int n) \n{\n    long result = 0;\n    for (int i = 0; i < n; ++i)\n    {\n\
    \        result -= l[i];\n        l[i] = result;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m) \n{\n    long result = 0;\n    for (int i = 0; i < n; ++i)\n\
    \    {\n        result += l[i];\n        l[i] = result;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int n, int m) \n{\n    long result = 0;\n    for (int i = 0; i < n; ++i)\n\
    \    {\n        result -= l[i];\n        l[i] = result;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m, int k) \n{\n    long result = 0;\n    for (int i = 0; i < n;\
    \ ++i)\n    {\n        result += l[i];\n        l[i] = result;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements decremented by 1.\n            \n\
    */\nlong[] decr_list(long[] l, int n, int m, int k) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < n; ++i)\n    {\n        result -= l[i];\n        l[i]\
    \ = result;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list(long[] l, int n, int m, int k, int\
    \ j) \n{\n    long result = 0;\n    for (int i = 0; i < n; ++i)\n    {\n     \
    \   result += l[i];\n        l[i] = result;\n    }\n    return result;\n}\n/*\n\
    Return list \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvtz6rba_.d(129): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvtz6rba_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list3(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list3(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list5(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list5(long[] l) \n{\n    long[]\
    \ \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpem99zxjg.d(109): Error: no identifier for declarator `long[]`

    /tmp/tmpem99zxjg.d(109): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpem99zxjg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_double(double[] d) \n{\n\
    \    double[] result = new double[d.length];\n    for(int i = 0; i < d.length;\
    \ i++) \n        result[i] = d[i] + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_double(double[]\
    \ d) \n{\n    double[] result = new double[d.length];\n    for(int i = 0; i <\
    \ d.length; i++) \n        result[i] = d[i] - 1;\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n            \n*/\nfloat[] incr_float(float[]\
    \ f) \n{\n    float[] result = new float[f.length];\n    for(int i = 0; i < f.length;\
    \ i++) \n        result[i] = f[i] + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nfloat[] decr_float(float[]\
    \ f) \n{\n    float[] result = new float[f.length];\n    for(int i = 0; i < f.length;\
    \ i++) \n        result[i] = f[i] - 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i\
    \ = 0;\n  long j = 0;\n  long k = 0;\n  long l = 0;\n  long m = 0;\n  long n =\
    \ 0;\n  long o = 0;\n  long p = 0;\n  long q = 0;\n  long r = 0;\n  long s = 0;\n\
    \  long t = 0;\n  long u = 0;\n  long v = 0;\n  long w = 0;\n  long x = 0;\n \
    \ long y = 0;\n  long z = 0;\n  long aa = 0;\n  long ab = 0;\n  long ac = 0;\n\
    \  long ad = 0;\n  long ae = 0;\n  long af = 0;\n  long ag = 0;\n  long ah = 0;\n\
    \  long ai = 0;\n  long aj = 0;\n  long ak = 0;\n  long al = 0;\n  long am = 0;\n\
    \  long an = 0;\n  long ao = 0;\n  long ap = 0;\n  long aq = 0;\n  long ar = 0;\n\
    \  long as = 0;\n  long at = 0;\n  long au = 0;\n  long av = 0;\n  long aw = 0;\n\
    \  long ax = 0;\n  long ay = 0;\n  long az = 0;\n  long ba = 0;\n  long bb = 0;\n\
    \  long bc = 0;\n  long bd = 0;\n  long be = 0;\n  long bf = 0;\n  long bg = 0;\n\
    \  long bh = 0;\n  long bi = 0;\n  long bj = 0;\n  long bk = 0;\n  long bl = 0;\n\
    \  long bm = 0;\n  long bn = 0;\n  long bo = 0;\n  long bp = 0;\n  long bq = 0;\n\
    \  long br = 0;\n  long bs = 0;\n  long bt = 0;\n  long bu = 0;\n  long bv = 0;\n\
    \  long bw = 0;\n  long bx = 0;\n  long by = 0;\n  long bz = 0;\n  long ca = 0;\n\
    \  long cb = 0;\n  long cc = 0;\n  long cd = 0;\n  long ce = 0;\n  long cf = 0;\n\
    \  long cg = 0;\n  long ch = 0;\n  long ci = 0;\n  long cj = 0;\n  long ck = 0;\n\
    \  long cl = 0;\n  long cm = 0;\n  long cn = 0;\n  long co = 0;\n  long cp = 0;\n\
    \  long cq = 0;\n  long cr = 0;\n  long cs = 0;\n  long ct = 0;\n  long cu = 0;\n\
    \  long cv = 0;\n  long cw = 0;\n  long cx = 0;\n  long cy = 0;\n  long cz = 0;\n\
    \  long da = 0;\n  long db = 0;\n  long dc = 0;\n  long dd = 0;\n  long de = 0;\n\
    \  long df = 0;\n\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppiedtbsz.d(112): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppiedtbsz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n        r[i]\
    \ = l[i] + 1;\n    return r;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        r[i] = l[i] - 1;\n    return\
    \ r;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        result +=\
    \ l[i];\n        l[i] = result;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThanks for your answer. I'm afraid this doesn't work.\
    \ `incr_list` returns `long[]` but `l` is `int[]`. `incr_list` doesn't modify\
    \ `l` at all. `incr_list` also doesn't return `int[]` but `long[]`. `incr_list`\
    \ doesn't modify `l` at all. `incr_list` also doesn't return `int[]` but `long[]`.\n\
    <|/ c |>\n<| c |>\nI edited my answer to show how it can be done in C#. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm afraid this doesn't work.\
    \ `incr_list` returns `long[]` but `l` is `int[]`. `incr_list` doesn't modify\
    \ `l` at all. `incr_list` also doesn't return `int[]` but `long[]`. `incr_list`\
    \ doesn't modify `l` at all. `incr_list` also doesn't return `int[]` but `long[]`.\n\
    <|/ c |>\n<| c |>\nI edited my answer to show how it can be done in C#. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm afraid this doesn't work.\
    \ `incr_list` returns `long[]` but `l` is `int[]`. `incr_list` doesn't modify\
    \ `l` at all. `incr_list` also doesn't return `int[]` but `long[]`. `incr_list`\
    \ doesn't modify `l` at all. `incr_list` also doesn't return `int[]` but `long[]`.\n\
    <|/ c |>\n<| a |>\nI believe that this is what you are looking for:\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkeyn53l.d(17): Error: declaration expected, not `<`

    /tmp/tmpqkeyn53l.d(20): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(20): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(20): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(20): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(20): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(20): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(26): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(26): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(26): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(26): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(26): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(26): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(32): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(32): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d(32): Error: unterminated character constant

    /tmp/tmpqkeyn53l.d'
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n\
    \        res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n\
    \        res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] res = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n    {\n        res[i] = l[i] + n;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n) \n{\n    long[] res = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        res[i] = l[i] - n;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by n.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int m, int n) \n{\n    long[] res = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; i++) \n    {\n        res[i] = l[i] + m * n;\n    }\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by n.\n            \n*/\n\
    long[] decr_list(long[] l, int m, int n) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n    {\n        res[i] = l[i] - m * n;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by m and\
    \ decremented by n.\n            \n*/\nlong[] incr_decr_list(long[] l, int m,\
    \ int n) \n{\n    long[] res = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        res[i] = l[i] + m * n;\n    }\n    return res;\n}\n/*\n\
    Return list with elements decremented by m and decremented by n.\n           \
    \ \n*/\nlong[] decr_decr_list(long[] l, int m, int n) \n{\n    long[] res = new\
    \ long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n        res[i]\
    \ = l[i] - m * n;\n    }\n    return res;\n}\n\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_list(float[] l) \n{\n    float[]\
    \ res = new float[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_list(float[] l) \n{\n    float[]\
    \ res = new float[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_list(double[] l) \n{\n  \
    \  double[] res = new double[l.length];\n    for(int i = 0; i < l.length; i++)\
    \ \n    {\n        res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_list(double[]\
    \ l) \n{\n    double[] res = new double[l.length];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpneuvf26q.d(89): Error: `tmpneuvf26q.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpneuvf26q.d(7):     `tmpneuvf26q.incr_list(long[] l)`

    and:

    /tmp/tmpneuvf26q.d(59):     `tmpneuvf26q.incr_list(double[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpneuvf26q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        result +=\
    \ l[i];\n        l[i] = result;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,arrays,algorithm |>\n<| c |>\nThis doesn't work. Try `incr_list({1,\
    \ 2, 3})` with your function.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself.\n\
    <|/ c |>\n<| c |>\nI did. `incr_list({1, 2, 3})` returns `{2, 3, 4}`, not `{1,\
    \ 2, 3, 4}`.\n<|/ c |>\n<| c |>\nOh, I see. Yes, I misunderstood the question.\
    \ Sorry.\n<|/ c |>\n<| c |>\nNo problem. Thanks for your help anyway!\n<|/ c |>\n\
    <| a tags=c++,arrays,algorithm |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_g39yeh.d(17): Error: declaration expected, not `<`

    /tmp/tmpf_g39yeh.d(20): Error: unterminated character constant

    /tmp/tmpf_g39yeh.d(43): Error: declaration expected, not `assert`

    /tmp/tmpf_g39yeh.d(44): Error: declaration expected, not `assert`

    /tmp/tmpf_g39yeh.d(45): Error: declaration expected, not `assert`

    /tmp/tmpf_g39yeh.d(46): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_g39yeh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ res = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\tres[i]\
    \ = l[i] + 1;\n\treturn res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ res = 0;\n    foreach(long e in l) {\n        res = res + 1;\n    }\n    return\
    \ l;\n}\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[]\
    \ decr_list(long[] l) \n{\n    long res = 0;\n    foreach(long e in l) {\n   \
    \     res = res - 1;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph_f0e6mf.d(10): Error: found `in` when expecting `;`

    /tmp/tmph_f0e6mf.d(22): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_f0e6mf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n      \
    \  result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n      \
    \  result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int len) \n\
    {\n    long[] result = new long[len];\n    for(int i = 0; i < len; ++i)\n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int len) \n\
    {\n    long[] result = new long[len];\n    for(int i = 0; i < len; ++i)\n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int len, int\
    \ stride) \n{\n    long[] result = new long[len];\n    for(int i = 0; i < len;\
    \ ++i)\n        result[i] = l[i] + stride;\n    return result;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int len, int stride) \n{\n    long[] result = new long[len];\n    for(int\
    \ i = 0; i < len; ++i)\n        result[i] = l[i] - stride;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int len, int stride, int stride2) \n{\n    long[] result = new long[len];\n\
    \    for(int i = 0; i < len; ++i)\n        result[i] = l[i] + stride + stride2;\n\
    \    return result;\n}\n/*\nReturn list with elements decremented by 1.\n    \
    \        \n*/\nlong[] decr_list(long[] l, int len, int stride, int stride2) \n\
    {\n    long[] result = new long[len];\n    for(int i = 0; i < len; ++i)\n    \
    \    result[i] = l[i] - stride - stride2;\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[] l,\
    \ int len, int stride, int stride2, int stride3) \n{\n    long[] result = new\
    \ long[len];\n    for(int i = 0; i < len; ++i)\n        result[i] = l[i] + stride\
    \ + stride2 + stride\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ne4b0ar.d(100): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp0ne4b0ar.d(108): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ne4b0ar.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ res = new long[l.length];\n\tfor(int i = 0; i < l.length; ++i)\n\t\tres[i] =\
    \ l[i] + 1;\n\treturn res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n\
    \    {\n        res[i] = l[i] + n;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        res[i] = l[i] - n;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by n.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int m, int n) \n{\n    long[] res = new long[l.length];\n    for(int i =\
    \ 0; i < l.length; i++) \n    {\n        res[i] = l[i] + m * n;\n    }\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by n.\n            \n*/\n\
    long[] decr_list(long[] l, int m, int n) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        res[i] = l[i] - m * n;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by m and\
    \ decremented by n.\n            \n*/\nlong[] incr_decr_list(long[] l, int m,\
    \ int n) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        res[i] = l[i] + m * n;\n    }\n    return res;\n}\n/*\n\
    Return list with elements decremented by m and decremented by n.\n           \
    \ \n*/\nlong[] decr_decr_list(long[] l, int m, int n) \n{\n    long[] res = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n        res[i]\
    \ = l[i] - m * n;\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcgpgj9ap.d(104): Error: found `unittest` instead of statement

    /tmp/tmpcgpgj9ap.d(112): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcgpgj9ap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmp5oyan972.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmp5oyan972.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp5oyan972.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp5oyan972.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ r = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\tr[i] = l[i]\
    \ + 1;\n\treturn r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ res = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\tres[i]\
    \ = l[i] + 1;\n\treturn res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong[] res = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t\tres[i] = l[i] - 1;\n\treturn res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n        result[i] = l[i] + n;\n    return result;\n}\n/*\nReturn list with\
    \ elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int\
    \ n) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n        result[i] = l[i] - n;\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by n.\n            \n*/\nlong[] incr_list(long[] l,\
    \ int m, int n) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; i++) \n        result[i] = l[i] + m * n;\n    return result;\n\
    }\n/*\nReturn list with elements decremented by n.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int m, int n) \n{\n    long[] result = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++) \n        result[i] = l[i] - m * n;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by m and decremented by n.\n    \
    \        \n*/\nlong[] incr_decr_list(long[] l, int m, int n) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] + m * n;\n    return result;\n}\n/*\nReturn list with elements decremented\
    \ by m and incremented by n.\n            \n*/\nlong[] decr_incr_list(long[] l,\
    \ int m, int n) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; i++) \n        result[i] = l[i] - m * n;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by m and decremented by n.\n    \
    \        \n*/\nlong[] incr_decr_list(long[] l, int m, int n, int m2, int n2) \n\
    {\n    long[] result = new \nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ddqy7fu.d(98): Error: basic type expected, not `unittest`

    /tmp/tmp9ddqy7fu.d(98): Error: semicolon expected, not `unittest`

    /tmp/tmp9ddqy7fu.d(98): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ddqy7fu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ res = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tres += l[i];\n\tlong[] res\
    \ = new long[res + 1];\n\tfor (int i = 0; i < l.length; i++)\n\t\tres[i] = l[i]\
    \ + 1;\n\treturn res;\n}\n/*\nReturn list with elements decremented by 1.\n  \
    \          \n*/\nlong[] decr_list(long[] l) \n{\n\tlong res = 0;\n\tfor (int i\
    \ = 0; i < l.length; i++)\n\t\tres += l[i];\n\tlong[] res = new long[res + 1];\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tres[i] = l[i] - 1;\n\treturn res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list2(long[]\
    \ l) \n{\n\tlong res = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tres += l[i];\n\
    \tlong[] res = new long[res + 1];\n\tfor (int i = 0; i < l.length; i++)\n\t\t\
    res[i] = l[i] + 1;\n\treturn res;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list2(long[] l) \n{\n\tlong res = 0;\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tres += l[i];\n\tlong[] res = new long[res\
    \ + 1];\n\tfor (int i = 0; i < l.length; i++)\n\t\tres[i] = l[i] - 1;\n\treturn\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    long[] incr_list3(long[] l) \n{\n\tlong res = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tres += l[i];\n\tlong[] res = new long[res + 1];\n\tfor (int i = 0;\
    \ i < l.length; i++)\n\t\tres[i] = l[i] + 1;\n\treturn res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list3(long[]\
    \ l) \n{\n\tlong res = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tres += l[i];\n\
    \tlong[] res = new long[res + 1];\n\tfor (int i = 0; i < l.length; i++)\n\t\t\
    res[i] = l[i] - 1;\n\treturn res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list4(long[] l) \n{\n\tlong res = 0;\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tres += l[i];\n\tlong[] res = new long[res\
    \ + 1];\n\tfor (int i = 0; i < l.length; i++)\n\t\tres[i] = l[i] + 1;\n\treturn\
    \ res;\n}\n/*\nReturn list \nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukyagiy4.d(101): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukyagiy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n   \
    \     result[i] = l[i] + 1;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpp12dgp3q.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpp12dgp3q.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] r = new long[l.length];\n    for(i = 0; i < l.length; i++)\
    \ \n        r[i] = l[i] + 1;\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n      \
    \  result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n      \
    \  result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n\
    \        result[i] = l[i] + n;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int n) \n{\n\
    \    long[] result = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n\
    \        result[i] = l[i] - n;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int m)\
    \ \n{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n        result[i] = l[i] + n * m;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by n.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n, int m) \n{\n    long[] result = new long[l.length];\n    for(int i =\
    \ 0; i < l.length; i++)\n        result[i] = l[i] - n * m;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by n.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m, int n) \n{\n    long[] result = new long[l.length];\n    for(int\
    \ i = 0; i < l.length; i++)\n        result[i] = l[i] + n * m * n;\n    return\
    \ result;\n}\n/*\nReturn list with elements decremented by n.\n            \n\
    */\nlong[] decr_list(long[] l, int n, int m, int n) \n{\n    long[] result = new\
    \ long[l.length];\n    for(int i = 0; i < l.length; i++)\n        result[i] =\
    \ l[i] - n * m * n;\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int m, int n, int\
    \ m) \n{\n    long[] result = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n        result[i] = l[i] + \nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3t13kukd.d(100): Error: expression expected, not `unittest`

    /tmp/tmp3t13kukd.d(101): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3t13kukd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ [] result = new long[l.length];\n\tfor (int i = 0; i < l.length; i++)\n\t\t\
    result[i] = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate =\
    \ incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] res = new long[l.length];\n    for(; i < l.length; ++i)\n\
    \        res[i] = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] res = new long[l.length];\n    for(; i < l.length; ++i)\n\
    \        res[i] = l[i] - 1;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    int i = 0;\n    long[] res = new long[l.length];\n    for(; i < l.length;\
    \ ++i)\n        res[i] = l[i] + n;\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int n) \n{\n\
    \    int i = 0;\n    long[] res = new long[l.length];\n    for(; i < l.length;\
    \ ++i)\n        res[i] = l[i] - n;\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int inc)\
    \ \n{\n    int i = 0;\n    long[] res = new long[l.length];\n    for(; i < l.length;\
    \ ++i)\n        res[i] = l[i] + n * inc;\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by n.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n, int dec) \n{\n    int i = 0;\n    long[] res = new long[l.length];\n\
    \    for(; i < l.length; ++i)\n        res[i] = l[i] - n * dec;\n    return res;\n\
    }\n/*\nReturn list with elements incremented by n.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int inc, int inc2) \n{\n    int i = 0;\n    long[] res = new long[l.length];\n\
    \    for(; i < l.length; ++i)\n        res[i] = l[i] + n * inc * inc2;\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by n.\n            \n*/\n\
    long[] decr_list(long[] l, int n, int dec, int dec2) \n{\n    int i = 0;\n   \
    \ long[] res = new long[l.length];\n    for(; i < l.length; ++i)\n        res[i]\
    \ = l[i] - n * dec * dec2;\n    return res;\n}\n/*\nReturn list \nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbeqb_m24.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbeqb_m24.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        r[i]\
    \ = l[i] + 1;\n    return r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        result +=\
    \ (long)l[i];\n        l[i] = result;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c++,arrays,algorithm |>\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>\nusing namespace std;\nunittest\n{\n \
    \   alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2thmbizp.d(12): Error: C style cast illegal, use `cast(long)l[i]`

    /tmp/tmp2thmbizp.d(17): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2thmbizp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_array(float[] l) \n{\n\tfloat\
    \ result[] = new float[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_array(float[] l) \n{\n\tfloat\
    \ result[] = new float[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_array(double[] l) \n{\n\t\
    double result[] = new double[l.length];\n\tfor (int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_array(double[]\
    \ l) \n{\n\tdouble result[] = new double[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpj4n8_23o.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpj4n8_23o.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpj4n8_23o.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpj4n8_23o.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpj4n8_23o.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpj4n8_23o.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpj4n8_23o.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpj4n8_23o.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpj4n8_23o.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpj4n8_23o.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpj4n8_23o.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpj4n8_23o.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ multiplied by 2.\n            \n*/\nlong[] mul_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] * 2;\n    return result;\n}\n/*\nReturn list with elements\
    \ divided by 2.\n            \n*/\nlong[] div_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] / 2;\n    return result;\n}\n/*\nReturn list with elements multiplied\
    \ by 3 and added with 1.\n            \n*/\nlong[] add_list(long[] l) \n{\n  \
    \  long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n        result[i] = l[i] * 3 + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements divided by 3 and subtracted with 1.\n            \n*/\nlong[]\
    \ sub_list(long[] l) \n{\n    long[] result = new long[l.length];\n    for (int\
    \ i = 0; i < l.length; i++) \n        result[i] = l[i] / 3 - 1;\n    return result;\n\
    }\n/*\nReturn list with elements multiplied by 3 and added with 1.\n         \
    \   \n*/\nlong[] mult_list(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n        result[i] = l[i] * 3;\n    return\
    \ result;\n}\n/*\nReturn list with elements divided by 3 and subtracted with 1.\n\
    \            \n*/\nlong[] divt_list(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n        result[i] = l[i] / 3;\n    return\
    \ result;\n}\n/*\nReturn list with elements multiplied by 3 and added with 1.\n\
    \            \n*/\nlong[] add_list_2(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    for (int i = 0; i < l.length; i++) \n        result[i] = l[i] * 3 + 1;\n\
    \    return result;\n}\n/*\nReturn list with elements divided by 3 and subtracted\
    \ with 1.\n            \n*/\nlong[] sub_list_2(long[] \nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2pkfo1mb.d(107): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2pkfo1mb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpedaj1jrd.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpedaj1jrd.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpedaj1jrd.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpedaj1jrd.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long j;\n  long[] r = new long[l.length];\n  for(i=0;i<l.length;i++)\n  {\n\
    \    r[i] = l[i]+1;\n  }\n  return r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, long n) \n{\n\
    \    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n        result[i] = l[i] + n;\n    return result;\n}\n/*\nReturn list with\
    \ elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, long\
    \ n) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n        result[i] = l[i] - n;\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by n.\n            \n*/\nlong[] incr_list(long[] l,\
    \ int n) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i <\
    \ l.length; i++) \n        result[i] = l[i] + n;\n    return result;\n}\n/*\n\
    Return list with elements decremented by n.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int n) \n{\n    long[] result = new long[l.length];\n    for (int i = 0;\
    \ i < l.length; i++) \n        result[i] = l[i] - n;\n    return result;\n}\n\
    /*\nReturn list with elements incremented by n.\n            \n*/\nlong[] incr_list(long[]\
    \ l, double n) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; i++) \n        result[i] = l[i] + n;\n    return result;\n\
    }\n/*\nReturn list with elements decremented by n.\n            \n*/\nlong[] decr_list(long[]\
    \ l, double n) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; i++) \n        result[i] = l[i] - n;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by n.\n            \n*/\nlong[] incr_list(long[]\
    \ l, float n) \n{\n    long[] result = new long[l.length];\n    for (int i = 0;\
    \ i < l.length; i++) \n        result[i] = l[i] + n;\n    return result;\n}\n\
    /*\nReturn list with elements decremented by n.\n            \n*/\nlong[] decr_list\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx7da8w71.d(107): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7da8w71.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. `incr_list` returns a new array and doesn't modify\
    \ the original array.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. I just added the return statement to the function.\n<|/ c |>\n<| c |>\n\
    It doesn't work. `incr_list` returns a new array and doesn't modify the original\
    \ array.\n<|/ c |>\n<| c |>\nIt does work. `incr_list` returns a new array and\
    \ doesn't modify the original array. Try it yourself.\n<|/ c |>\n<| c |>\nIt does\
    \ work. `incr_list` returns a new array and doesn't modify the original array.\
    \ Try it yourself.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] a = {1,2,3,4,5};\n    int[] b = incr_list(a);\n    System.out.println(Arrays.toString(b));\n\
    }\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9sgwr_vr.d(14): Error: declaration expected, not `<`

    /tmp/tmp9sgwr_vr.d(17): Error: unterminated character constant

    /tmp/tmp9sgwr_vr.d(17): Error: unterminated character constant

    /tmp/tmp9sgwr_vr.d(23): Error: unterminated character constant

    /tmp/tmp9sgwr_vr.d(23): Error: unterminated character constant

    /tmp/tmp9sgwr_vr.d(26): Error: unterminated character constant

    /tmp/tmp9sgwr_vr.d(29): Error: unterminated character constant

    /tmp/tmp9sgwr_vr.d(36): Error: identifier expected following `.` instead of `out`

    /tmp/tmp9sgwr_vr.d(36): Error: no identifier for declarator `System`

    /tmp/tmp9sgwr_vr.d(36): Error: declaration expected, not `out`

    /tmp/tmp9sgwr_vr.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9sgwr_vr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\t\
    result[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\t\
    result[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, long step) \n\
    {\n\tlong[] result = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tresult[i] = l[i] + step;\n\t}\n\treturn result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ long step) \n{\n\tlong[] result = new long[l.length];\n\tfor(int i = 0; i <\
    \ l.length; i++) \n\t{\n\t\tresult[i] = l[i] - step;\n\t}\n\treturn result;\n\
    }\n/*\nReturn list with elements incremented by step.\n            \n*/\nlong[]\
    \ incr_list(long[] l, int step) \n{\n\tlong[] result = new long[l.length];\n\t\
    for(int i = 0; i < l.length; i++) \n\t{\n\t\tresult[i] = l[i] + step;\n\t}\n\t\
    return result;\n}\n/*\nReturn list with elements decremented by step.\n      \
    \      \n*/\nlong[] decr_list(long[] l, int step) \n{\n\tlong[] result = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t{\n\t\tresult[i] = l[i] - step;\n\t}\n\
    \treturn result;\n}\n/*\nReturn list with elements incremented by step.\n    \
    \        \n*/\nlong[] incr_list(long[] l, long step, long base) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\t\
    result[i] = l[i] + step * base;\n\t}\n\treturn result;\n}\n/*\nReturn list with\
    \ elements decremented by step.\n            \n*/\nlong[] decr_list(long[] l,\
    \ long step, long base) \n{\n\tlong[] result = new long[l.length];\n\tfor(int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tresult[i] = l[i] - step * base;\n\t}\n\t\
    return result;\n}\n/*\nReturn list with elements incremen\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqnj3h7bu.d(107): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqnj3h7bu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ res = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tres += l[i];\n\treturn new\
    \ long[]{res};\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp40rg6365.d(12): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp40rg6365.d(12): Error: found `}` when expecting `;` following statement

    /tmp/tmp40rg6365.d(12): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp40rg6365.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] result = new long[l.length];\n  for(i=0;i<l.length;i++)\n    result[i]\
    \ = l[i]+1;\n  return result;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n  int i;\n  long[] result\
    \ = new long[l.length];\n  for(i=0;i<l.length;i++)\n    result[i] = l[i]-1;\n\
    \  return result;\n}\n/*\nReturn list with elements incremented by 1.\n      \
    \      \n*/\ndouble[] incr_double(double[] d) \n{\n  int i;\n  double[] result\
    \ = new double[d.length];\n  for(i=0;i<d.length;i++)\n    result[i] = d[i]+1;\n\
    \  return result;\n}\n/*\nReturn list with elements decremented by 1.\n      \
    \      \n*/\ndouble[] decr_double(double[] d) \n{\n  int i;\n  double[] result\
    \ = new double[d.length];\n  for(i=0;i<d.length;i++)\n    result[i] = d[i]-1;\n\
    \  return result;\n}\n/*\nReturn list with elements incremented by 1.\n      \
    \      \n*/\nfloat[] incr_float(float[] f) \n{\n  int i;\n  float[] result = new\
    \ float[f.length];\n  for(i=0;i<f.length;i++)\n    result[i] = f[i]+1;\n  return\
    \ result;\n}\n/*\nReturn list with elements decremented by 1.\n            \n\
    */\nfloat[] decr_float(float[] f) \n{\n  int i;\n  float[] result = new float[f.length];\n\
    \  for(i=0;i<f.length;i++)\n    result[i] = f[i]-1;\n  return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n            \n*/\nunittest\n{\n \
    \   alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_list(float[] l) \n{\n    float[]\
    \ res = new float[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_list(float[] l) \n{\n    float[]\
    \ res = new float[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n\
    \        res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_list(double[] l) \n{\n  \
    \  double[] res = new double[l.length];\n    for(int i = 0; i < l.length; i++)\
    \ \n    {\n        res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_list(double[]\
    \ l) \n{\n    double[] res = new double[l.length];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpneuvf26q.d(89): Error: `tmpneuvf26q.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpneuvf26q.d(7):     `tmpneuvf26q.incr_list(long[] l)`

    and:

    /tmp/tmpneuvf26q.d(59):     `tmpneuvf26q.incr_list(double[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpneuvf26q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] r = new long[l.length];\n    for(i = 0; i < l.length; i++)\
    \ \n        r[i] = l[i] + 1;\n    return r;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] r = new long[l.length];\n    for(i = 0; i < l.length; i++)\
    \ \n        r[i] = l[i] - 1;\n    return r;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] r = new long[l.length];\n    for(i = 0; i < l.length; i++)\
    \ \n        r[i] = l[i] + 1;\n    return r;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] r = new long[l.length];\n    for(i = 0; i < l.length; i++)\
    \ \n        r[i] = l[i] - 1;\n    return r;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] r = new long[l.length];\n    for(i = 0; i < l.length; i++)\
    \ \n        r[i] = l[i] + 1;\n    return r;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] r = new long[l.length];\n    for(i = 0; i < l.length; i++)\
    \ \n        r[i] = l[i] - 1;\n    return r;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] r = new long[l.length];\n    for(i = 0; i < l.length; i++)\
    \ \n        r[i] = l[i] + 1;\n    return r;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] r = new long[l.length];\n    for(i = 0; i < l.length; i++)\
    \ \n        r[i] = l[i] - 1;\n    return r;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] r = new long[l.length];\n    for(i = 0; i < l.length; i++)\
    \ \n        r[i] = l[i]\nunittest\n{\n    alias candidate = incr_list;\n\n   \
    \ assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcem4fbin.d(109): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpcem4fbin.d(117): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcem4fbin.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] res = new long[l.length];\n    for(; i < l.length; ++i)\n\
    \    {\n        res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l)\
    \ \n{\n    int i = 0;\n    long[] res = new long[l.length];\n    for(; i < l.length;\
    \ ++i)\n    {\n        res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ r = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\tr[i] = l[i]\
    \ + 1;\n\treturn r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n      \
    \  result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n      \
    \  result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_array(float[] l) \n{\n   \
    \ float[] result = new float[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_array(float[] l) \n{\n   \
    \ float[] result = new float[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_array(double[] l) \n{\n \
    \   double[] result = new double[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_array(double[]\
    \ l) \n{\n    double[] result = new double[l.length];\n    for(int i = 0; i <\
    \ l.length; ++i)\n        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] r;\n  r = new long[l.length];\n  for(i=0;i<l.length;i++) \n    r[i]\
    \ = l[i]+1;\n  return r;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \            \n*/\nlong[] decr_list(long[] l) \n{\n  int i;\n  long[] r;\n  r\
    \ = new long[l.length];\n  for(i=0;i<l.length;i++) \n    r[i] = l[i]-1;\n  return\
    \ r;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ res = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tres += l[i];\n\t\t\
    l[i] = res;\n\t}\n\treturn l;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong res = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\tres += l[i];\n\t\tl[i] = res;\n\t\
    }\n\treturn l;\n}\n/*\nReturn list with elements incremented by 1.\n         \
    \   \n*/\ndouble[] incr_double(double[] d) \n{\n\tdouble res = 0;\n\tfor (int\
    \ i = 0; i < d.length; i++) \n\t{\n\t\tres += d[i];\n\t\td[i] = res;\n\t}\n\t\
    return d;\n}\n/*\nReturn list with elements decremented by 1.\n            \n\
    */\ndouble[] decr_double(double[] d) \n{\n\tdouble res = 0;\n\tfor (int i = 0;\
    \ i < d.length; i++) \n\t{\n\t\tres += d[i];\n\t\td[i] = res;\n\t}\n\treturn d;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nfloat[]\
    \ incr_float(float[] f) \n{\n\tfloat res = 0;\n\tfor (int i = 0; i < f.length;\
    \ i++) \n\t{\n\t\tres += f[i];\n\t\tf[i] = res;\n\t}\n\treturn f;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nfloat[] decr_float(float[]\
    \ f) \n{\n\tfloat res = 0;\n\tfor (int i = 0; i < f.length; i++) \n\t{\n\t\tres\
    \ += f[i];\n\t\tf[i] = res;\n\t}\n\treturn f;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyzfc3cat.d(96): unittest failure

    ----------------

    ??:? _d_unittestp [0x428845]

    ??:? void tmpyzfc3cat.__unittest_L91_C1() [0x428411]

    ??:? void tmpyzfc3cat.__modtest() [0x4285c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b75a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308ed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d9c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430879]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b731]

    ??:? runModuleUnitTests [0x42c69d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d08]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    float[] incr_array(float[] l) \n{\n    float[] res = new float[l.length];\n  \
    \  for (int i = 0; i < l.length; ++i)\n        res[i] = l[i] + 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by 1.\n            \n*/\n\
    float[] decr_array(float[] l) \n{\n    float[] res = new float[l.length];\n  \
    \  for (int i = 0; i < l.length; ++i)\n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    double[] incr_array(double[] l) \n{\n    double[] res = new double[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n        res[i] = l[i] + 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by 1.\n            \n*/\n\
    double[] decr_array(double[] l) \n{\n    double[] res = new double[l.length];\n\
    \    for (int i = 0; i < l.length; ++i)\n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \  {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long result[] = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] - 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list2(long[]\
    \ l) \n{\n    long result[] = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list2(long[]\
    \ l) \n{\n    long result[] = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] - 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long result[] = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list3(long[]\
    \ l) \n{\n    long result[] = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] - 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list4(long[]\
    \ l) \n{\n    long result[] = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list4(long[]\
    \ l) \n{\n    long result[] = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] - 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list5(long[]\
    \ l) \n{\n    long result[] = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] + 1;\n    }\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpprrbnqv8.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpprrbnqv8.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpprrbnqv8.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpprrbnqv8.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpprrbnqv8.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpprrbnqv8.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpprrbnqv8.d(87): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpprrbnqv8.d(100): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpprrbnqv8.d(113): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpprrbnqv8.d(118): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprrbnqv8.d"'
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpw7nl9kzb.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpw7nl9kzb.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tresult += l[i];\n\tlong[]\
    \ res = new long[l.length + 1];\n\tfor (int i = 0; i < l.length; ++i)\n\t\tres[i]\
    \ = l[i] + 1;\n\tres[l.length] = result;\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprblutloo.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x42847d]

    ??:? void tmprblutloo.__unittest_L18_C1() [0x427fac]

    ??:? void tmprblutloo.__modtest() [0x4281fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c55b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430679]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430605]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c5]

    ??:? runModuleUnitTests [0x42c331]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428940]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ i = 0;\n    long[] result = new long[l.length];\n    for(int j=0; j<l.length;\
    \ j++) \n    {\n        result[j+1] = l[j] + 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long i = 0;\n    long[] result = new long[l.length];\n    for(int\
    \ j=0; j<l.length; j++) \n    {\n        result[j+1] = l[j] - 1;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n            \n\
    */\nlong[] incr_list(long[] l) \n{\n    long i = 0;\n    long[] result = new long[l.length];\n\
    \    for(int j=0; j<l.length; j++) \n    {\n        result[j+1] = l[j] + 1;\n\
    \    }\n    return result;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \            \n*/\nlong[] decr_list(long[] l) \n{\n    long i = 0;\n    long[]\
    \ result = new long[l.length];\n    for(int j=0; j<l.length; j++) \n    {\n  \
    \      result[j+1] = l[j] - 1;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[] l)\
    \ \n{\n    long i = 0;\n    long[] result = new long[l.length];\n    for(int j=0;\
    \ j<l.length; j++) \n    {\n        result[j+1] = l[j] + 1;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements decremented by 1.\n            \n\
    */\nlong[] decr_list(long[] l) \n{\n    long i = 0;\n    long[] result = new long[l.length];\n\
    \    for(int j=0; j<l.length; j++) \n    {\n        result[j+1] = l[j] - 1;\n\
    \    }\n    return result;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \            \n*/\nlong[] incr_list(long[] l) \n{\n    long i = 0;\n    long[]\
    \ result = new long[l.length];\n    for(int j=0; j<l.length; j++) \n    {\n  \
    \      result[j+1] = l[j] + 1;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l)\
    \ \n{\n    long i = 0;\n    long[] result = new long[l.length\nunittest\n{\n \
    \   alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_sjb8x7_.d(109): Error: found `unittest` when expecting `]`

    /tmp/tmp_sjb8x7_.d(110): Error: semicolon expected, not `{`

    /tmp/tmp_sjb8x7_.d(117): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_sjb8x7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8a23__l1.d(14): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8a23__l1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list3(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list3(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list5(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list5(long[] l) \n{\n    long[]\
    \ \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnqk123ms.d(109): Error: no identifier for declarator `long[]`

    /tmp/tmpnqk123ms.d(109): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnqk123ms.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n        result +=\
    \ l[i];\n        l[i] = result;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l)\
    \ \n{\n    long result = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n \
    \       result -= l[i];\n        l[i] = result;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list2(long[]\
    \ l) \n{\n    long result = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n\
    \        result += l[i];\n    }\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list2(long[] l) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n        result -=\
    \ l[i];\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list3(long[] l) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n        result += l[i];\n\
    \        l[i] = result;\n    }\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list3(long[] l) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n        result -=\
    \ l[i];\n        l[i] = result;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n            \n*/\nlong[] incr_list4(long[]\
    \ l) \n{\n    long result = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n\
    \        result += l[i];\n    }\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list4(long[] l) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n        result -=\
    \ l[i];\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list5(long[] l) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < l.length; ++i)\n    {\n        result += l[i];\n\
    \        l[i] = result;\n    }\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list5(long[] l) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < l.length; ++\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzjkgbugk.d(133): Error: expression expected, not `unittest`

    /tmp/tmpzjkgbugk.d(134): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzjkgbugk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_list(float[] l) \n{\n    float[]\
    \ result = new float[l.length];\n    for (int i = 0; i < l.length; ++i)\n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_list(float[] l) \n{\n    float[]\
    \ result = new float[l.length];\n    for (int i = 0; i < l.length; ++i)\n    \
    \    result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_list(double[] l) \n{\n  \
    \  double[] result = new double[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_list(double[]\
    \ l) \n{\n    double[] result = new double[l.length];\n    for (int i = 0; i <\
    \ l.length; ++i)\n        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nchar[] incr_list(char[]\
    \ l) \n{\n    char[] result = new char[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nchar[] decr_list(char[] l)\
    \ \n{\n    char[] result = new char[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4gekzy1d.d(77): Error: cannot implicitly convert expression `cast(int)l[cast(ulong)i]
    + 1` of type `int` to `char`

    /tmp/tmp4gekzy1d.d(88): Error: cannot implicitly convert expression `cast(int)l[cast(ulong)i]
    - 1` of type `int` to `char`

    /tmp/tmp4gekzy1d.d(99): Error: `tmp4gekzy1d.incr_list` called with argument types
    `(void[])` matches both:

    /tmp/tmp4gekzy1d.d(7):     `tmp4gekzy1d.incr_list(long[] l)`

    and:

    /tmp/tmp4gekzy1d.d(73):     `tmp4gekzy1d.incr_list(char[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4gekzy1d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_array(float[] a) \n{\n   \
    \ float[] result = new float[a.length];\n    for (int i = 0; i < a.length; ++i)\n\
    \        result[i] = a[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_array(float[] a) \n{\n   \
    \ float[] result = new float[a.length];\n    for (int i = 0; i < a.length; ++i)\n\
    \        result[i] = a[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_array(double[] a) \n{\n \
    \   double[] result = new double[a.length];\n    for (int i = 0; i < a.length;\
    \ ++i)\n        result[i] = a[i] + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_array(double[]\
    \ a) \n{\n    double[] result = new double[a.length];\n    for (int i = 0; i <\
    \ a.length; ++i)\n        result[i] = a[i] - 1;\n    return result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\
    \tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmptcitq108.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmptcitq108.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n        r[i]\
    \ = l[i] + 1;\n    return r;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++)\n        r[i] = l[i] - 1;\n    return r;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n) \n{\n    long[] r = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n        r[i] = l[i] + n;\n    return r;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int n) \n{\n\
    \    long[] r = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n \
    \       r[i] = l[i] - n;\n    return r;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list(long[] l, int n, int m) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n        r[i]\
    \ = l[i] + n*m;\n    return r;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l, int n, int m) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n        r[i]\
    \ = l[i] - n*m;\n    return r;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nlong[] incr_list(long[] l, int n, int m, int n) \n{\n\
    \    long[] r = new long[l.length];\n    for(int i = 0; i < l.length; i++)\n \
    \       r[i] = l[i] + n*m*n;\n    return r;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int n, int m,\
    \ int n) \n{\n    long[] r = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++)\n        r[i] = l[i] - n*m*n;\n    return r;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n, int m,\
    \ int n, int m) \n{\n    long[] r = new long[l.length];\n    for(int i = 0; i\
    \ < l.\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjxov7zu9.d(99): Error: identifier expected following `.`, not `unittest`

    /tmp/tmpjxov7zu9.d(100): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpjxov7zu9.d(101): Error: expression expected, not `alias`

    /tmp/tmpjxov7zu9.d(101): Error: found `candidate` when expecting `)`

    /tmp/tmpjxov7zu9.d(101): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjxov7zu9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ res = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\tres[i]\
    \ = l[i] + 1;\n\treturn res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong[] res = new long[l.length];\n\
    \tfor(int i = 0; i < l.length; i++) \n\t\tres[i] = l[i] - 1;\n\treturn res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nfloat[]\
    \ incr_list(float[] l) \n{\n\tfloat[] res = new float[l.length];\n\tfor(int i\
    \ = 0; i < l.length; i++) \n\t\tres[i] = l[i] + 1;\n\treturn res;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nfloat[] decr_list(float[]\
    \ l) \n{\n\tfloat[] res = new float[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t\tres[i] = l[i] - 1;\n\treturn res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_list(double[] l) \n{\n\t\
    double[] res = new double[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\
    \tres[i] = l[i] + 1;\n\treturn res;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\ndouble[] decr_list(double[] l) \n{\n\tdouble[] res\
    \ = new double[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\tres[i] =\
    \ l[i] - 1;\n\treturn res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt0x7nwyq.d(77): Error: `tmpt0x7nwyq.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpt0x7nwyq.d(7):     `tmpt0x7nwyq.incr_list(long[] l)`

    and:

    /tmp/tmpt0x7nwyq.d(51):     `tmpt0x7nwyq.incr_list(double[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0x7nwyq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ i = 0;\n    long[] res = new long[l.length];\n    for(long j : l)\n    {\n \
    \       res[i++] = j + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ i = 0;\n    long[] res = new long[l.length];\n    for(long j : l)\n    {\n \
    \       res[i++] = j - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, long k) \n{\n\
    \    long i = 0;\n    long[] res = new long[l.length];\n    for(long j : l)\n\
    \    {\n        res[i++] = j + k;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ long k) \n{\n    long i = 0;\n    long[] res = new long[l.length];\n    for(long\
    \ j : l)\n    {\n        res[i++] = j - k;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by k.\n            \n*/\nlong[] incr_list(long[]\
    \ l, long k) \n{\n    long i = 0;\n    long[] res = new long[l.length];\n    for(long\
    \ j : l)\n    {\n        res[i++] = j + k;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements decremented by k.\n            \n*/\nlong[] decr_list(long[]\
    \ l, long k) \n{\n    long i = 0;\n    long[] res = new long[l.length];\n    for(long\
    \ j : l)\n    {\n        res[i++] = j - k;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by k.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int k) \n{\n    long i = 0;\n    long[] res = new long[l.length];\n    for(long\
    \ j : l)\n    {\n        res[i++] = j + k;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements decremented by k.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int k) \n{\n    long i = 0;\n    long[] res = new long[l.length];\n    for(long\
    \ j : l)\n    {\n        res[i++] = j - k;\n    }\n    return res;\n\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp77ktea99.d(11): Error: semicolon expected, not `:`

    /tmp/tmp77ktea99.d(11): Error: expression expected, not `:`

    /tmp/tmp77ktea99.d(11): Error: found `l` when expecting `;` following `for` condition

    /tmp/tmp77ktea99.d(25): Error: semicolon expected, not `:`

    /tmp/tmp77ktea99.d(25): Error: expression expected, not `:`

    /tmp/tmp77ktea99.d(25): Error: found `l` when expecting `;` following `for` condition

    /tmp/tmp77ktea99.d(39): Error: semicolon expected, not `:`

    /tmp/tmp77ktea99.d(39): Error: expression expected, not `:`

    /tmp/tmp77ktea99.d(39): Error: found `l` when expecting `;` following `for` condition

    /tmp/tmp77ktea99.d(53): Error: semicolon expected, not `:`

    /tmp/tmp77ktea99.d(53): Error: expression expected, not `:`

    /tmp/tmp77ktea99.d(53): Error: found `l` when expecting `;` following `for` condition

    /tmp/tmp77ktea99.d(67): Error: semicolon expected, not `:`

    /tmp/tmp77ktea99.d(67): Error: expression expected, not `:`

    /tmp/tmp77ktea99.d(67): Error: found `l` when expecting `;` following `for` condition'
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list2(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list2(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list3(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list3(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list4(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list4(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list5(long[] l) \n{\n    long[]\
    \ \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwi4yg3hk.d(114): Error: no identifier for declarator `long[]`

    /tmp/tmpwi4yg3hk.d(114): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwi4yg3hk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis is not the correct solution. `incr_list` returns a new array and\
    \ does not mutate the original array. `incr_list` should return a new array and\
    \ mutate the original array in place. `incr_list` should also not use any `unsafe`\
    \ code.\n<|/ c |>\n<| c |>\nI agree with you. My solution was to show how it can\
    \ be done with pointers and without unsafe. Of course the solution should be improved.\n\
    <|/ c |>\n<| c |>\nI agree with you. My solution was to show how it can be done\
    \ with pointers and without unsafe. Of course the solution should be improved.\n\
    <|/ c |>\n<| a tags=pointers,arrays,c# |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8vy384oq.d(14): Error: declaration expected, not `<`

    /tmp/tmp8vy384oq.d(28): Error: semicolon expected, not `.`

    /tmp/tmp8vy384oq.d(28): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmp8vy384oq.d(29): Error: semicolon expected, not `.`

    /tmp/tmp8vy384oq.d(29): Error: no identifier for declarator `.Linq`

    /tmp/tmp8vy384oq.d(30): Error: semicolon expected, not `.`

    /tmp/tmp8vy384oq.d(30): Error: no identifier for declarator `.Text`

    /tmp/tmp8vy384oq.d(31): Error: semicolon expected, not `.`

    /tmp/tmp8vy384oq.d(31): Error: no identifier for declarator `.Threading.Tasks`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vy384oq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ res = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        res++;\n  \
    \      l[i] = res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long res = 0;\n\
    \    for(int i = 0; i < l.length; i++) \n    {\n        res--;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nlong[] incr_list2(long[] l) \n{\n    long res = 0;\n \
    \   for(int i = 0; i < l.length; i++) \n    {\n        res++;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list2(long[] l) \n{\n    long res = 0;\n \
    \   for(int i = 0; i < l.length; i++) \n    {\n        res--;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nlong[] incr_list3(long[] l) \n{\n    long res = 0;\n \
    \   for(int i = 0; i < l.length; i++) \n    {\n        res++;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list3(long[] l) \n{\n    long res = 0;\n \
    \   for(int i = 0; i < l.length; i++) \n    {\n        res--;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nlong[] incr_list4(long[] l) \n{\n    long res = 0;\n \
    \   for(int i = 0; i < l.length; i++) \n    {\n        res++;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list4(long[] l) \n{\n    long res = 0;\n \
    \   for(int i = 0; i < l.length; i++) \n    {\n        res--;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nlong[] incr_list5(long[] l) \n{\n    long res = 0;\n \
    \   for(int i = 0; i < l.length; i++) \n    {\n        res++;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] \nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkyskxm1w.d(134): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkyskxm1w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tresult += l[i];\n\
    \t\tl[i] = result;\n\t}\n\treturn l;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4vlk85vu.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283f5]

    ??:? void tmp4vlk85vu.__unittest_L17_C1() [0x427fc1]

    ??:? void tmp4vlk85vu.__modtest() [0x428174]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c477]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b30a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43049d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43094c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430429]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]

    ??:? runModuleUnitTests [0x42c24d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, long by) \n\
    {\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + by;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ long by) \n{\n    long[] result = new long[l.length];\n    for (int i = 0; i\
    \ < l.length; ++i)\n        result[i] = l[i] - by;\n    return result;\n}\n/*\n\
    Return list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int by) \n{\n    long[] result = new long[l.length];\n    for (int i = 0;\
    \ i < l.length; ++i)\n        result[i] = l[i] + by;\n    return result;\n}\n\
    /*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int by) \n{\n    long[] result = new long[l.length];\n    for (int i = 0;\
    \ i < l.length; ++i)\n        result[i] = l[i] - by;\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, double by) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; ++i)\n        result[i] = l[i] + by;\n    return result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, double by) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; ++i)\n        result[i] = l[i] - by;\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, float by) \n{\n    long[] result = new long[l.length];\n    for (int i =\
    \ 0; i < l.length; ++i)\n        result[i] = l[i] + by;\n    return result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu60upnqn.d(102): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu60upnqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        r[i]\
    \ = l[i] + 1;\n    return r;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n        r[i] = l[i] - 1;\n    return r;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, long by) \n{\n    long[] r = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; ++i)\n        r[i] = l[i] + by;\n    return r;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ long by) \n{\n    long[] r = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n        r[i] = l[i] - by;\n    return r;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int by) \n{\n\
    \    long[] r = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n \
    \       r[i] = l[i] + by;\n    return r;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l, int by) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        r[i]\
    \ = l[i] - by;\n    return r;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nlong[] incr_list(long[] l, double by) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        r[i]\
    \ = l[i] + by;\n    return r;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l, double by) \n{\n    long[]\
    \ r = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        r[i]\
    \ = l[i] - by;\n    return r;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nlong[] incr_list(long[] l, long by, int by2) \n{\n   \
    \ long[] r = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    \
    \    r[i] = l[i] + \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7xhcb2zb.d(100): Error: expression expected, not `unittest`

    /tmp/tmp7xhcb2zb.d(101): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7xhcb2zb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        result +=\
    \ (long)l[i];\n        l[i] = result;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `incr_list` returns `long[]` but\
    \ `incr_list` expects `long`.\n<|/ c |>\n<| c |>\n: I fixed the return type. Thanks.\n\
    <|/ c |>\n<| a |>\n<code>\npublic static long[] incrList(long[] l) {\n    long\
    \ result = 0;\n    for(int i = 0; i < l.length; ++i) {\n        result += (long)l[i];\n\
    \        l[i] = result;\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,list\
    \ dscore=1 |>\n<| a tags=java,arrays,list |>\n<code>\npublic static long[] incrList(long[]\
    \ l) {\n    long result = 0;\n    for(int i = 0; i < l.length; ++i) {\n      \
    \  result += (long)l[i];\n        l[i] = result;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static long[]\
    \ incrList(long[] l) {\n    long result = 0;\n    for(int i = 0; i < l.length;\
    \ ++i) {\n        result += (long)l[i];\n        l[i] = result;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays,list |>\n<| a tags=java,arrays,list\
    \ |>\n<code>\npublic static long[] incrList(long[] l) {\n    long result = 0;\n\
    \    for(int i = 0; i < l.length; ++i) {\n        result += (long)l[i];\n    \
    \    l[i] = result;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=java,arrays,list |>\n<code>\npublic static long[] incrList(long[] l)\
    \ {\n    long result = 0;\n    for(int i = 0; i < l.length; ++i) {\n        result\
    \ += (long)l[i];\n        l[i] = result;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=java,arrays,list |>\n<code>\npublic static long[]\
    \ incrList(long[] l) {\n    long result = 0;\n    for(int i = 0; i < l.length;\
    \ ++i) {\n        result += (long)l[i];\n        l[i] = result;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,arrays,list |>\n<code>\n\
    public static long[] incrList(long[] l) {\n    long result = 0;\n    for(int i\
    \ = 0; i < l.length; ++i) {\n        result += (long)l[i];\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprnbm8bnl.d(12): Error: C style cast illegal, use `cast(long)l[i]`

    /tmp/tmprnbm8bnl.d(17): Error: declaration expected, not `<`

    /tmp/tmprnbm8bnl.d(20): Error: unterminated character constant

    /tmp/tmprnbm8bnl.d(29): Error: declaration expected, not `for`

    /tmp/tmprnbm8bnl.d(29): Error: no identifier for declarator `i`

    /tmp/tmprnbm8bnl.d(29): Error: declaration expected, not `<`

    /tmp/tmprnbm8bnl.d(29): Error: declaration expected, not `++`

    /tmp/tmprnbm8bnl.d(31): Error: no identifier for declarator `l[i]`

    /tmp/tmprnbm8bnl.d(31): Error: declaration expected, not `=`

    /tmp/tmprnbm8bnl.d(32): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprnbm8bnl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n    {\n \
    \       res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        result +=\
    \ l[i];\n        l[i] = result;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. `incr_list` returns `l` unchanged.\
    \ `incr_list` should return a new list with the elements incremented by 1.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. I missed that. I've edited my answer accordingly.\n\
    <|/ c |>\n<| a tags=c++,arrays,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_0xs46wl.d(17): Error: declaration expected, not `<`

    /tmp/tmp_0xs46wl.d(20): Error: unterminated character constant

    /tmp/tmp_0xs46wl.d(23): Error: unterminated character constant

    /tmp/tmp_0xs46wl.d(34): Error: declaration expected, not `assert`

    /tmp/tmp_0xs46wl.d(35): Error: declaration expected, not `assert`

    /tmp/tmp_0xs46wl.d(36): Error: declaration expected, not `assert`

    /tmp/tmp_0xs46wl.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0xs46wl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] res = new long[l.length];\n  for(i = 0; i < l.length; i++) \n    res[i]\
    \ = l[i] + 1;\n  return res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n  int i;\n  long[] res\
    \ = new long[l.length];\n  for(i = 0; i < l.length; i++) \n    res[i] = l[i] -\
    \ 1;\n  return res;\n}\n/*\nReturn list with elements incremented by 1.\n    \
    \        \n*/\nlong[] incr_list(long[] l, int n) \n{\n  int i;\n  long[] res =\
    \ new long[l.length];\n  for(i = 0; i < n; i++) \n    res[i] = l[i] + 1;\n  return\
    \ res;\n}\n/*\nReturn list with elements decremented by 1.\n            \n*/\n\
    long[] decr_list(long[] l, int n) \n{\n  int i;\n  long[] res = new long[l.length];\n\
    \  for(i = 0; i < n; i++) \n    res[i] = l[i] - 1;\n  return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m) \n{\n  int i;\n  long[] res = new long[l.length];\n  for(i\
    \ = 0; i < n; i++) \n    res[i] = l[i] + 1;\n  return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n, int m) \n{\n  int i;\n  long[] res = new long[l.length];\n  for(i = 0;\
    \ i < n; i++) \n    res[i] = l[i] - 1;\n  return res;\n}\n/*\nReturn list with\
    \ elements incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int\
    \ n, int m, int p) \n{\n  int i;\n  long[] res = new long[l.length];\n  for(i\
    \ = 0; i < n; i++) \n    res[i] = l[i] + 1;\n  return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n, int m, int p) \n{\n  int i;\n  long[] res = new long[l.length];\n  for(i\
    \ = 0; i < n; i++) \n    res[i] = l[i] - 1;\n  return res;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[] l,\
    \ int n, int m, \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxh1j9twd.d(104): Error: basic type expected, not `unittest`

    /tmp/tmpxh1j9twd.d(104): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxh1j9twd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list2(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list3(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list3(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list4(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list5(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list5(long\nunittest\n{\n \
    \   alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplqxced28.d(107): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplqxced28.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i\
    \ = 0;\n  long[] result = new long[l.length];\n  while (i < l.length) {\n    result[i]\
    \ = l[i] + 1;\n    i++;\n  }\n  return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n  int i\
    \ = 0;\n  long[] result = new long[l.length];\n  while (i < l.length) {\n    result[i]\
    \ = l[i] - 1;\n    i++;\n  }\n  return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_double(double[] d) \n{\n\
    \  int i = 0;\n  double[] result = new double[d.length];\n  while (i < d.length)\
    \ {\n    result[i] = d[i] + 1;\n    i++;\n  }\n  return result;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\ndouble[] decr_double(double[]\
    \ d) \n{\n  int i = 0;\n  double[] result = new double[d.length];\n  while (i\
    \ < d.length) {\n    result[i] = d[i] - 1;\n    i++;\n  }\n  return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nfloat[]\
    \ incr_float(float[] f) \n{\n  int i = 0;\n  float[] result = new float[f.length];\n\
    \  while (i < f.length) {\n    result[i] = f[i] + 1;\n    i++;\n  }\n  return\
    \ result;\n}\n/*\nReturn list with elements decremented by 1.\n            \n\
    */\nfloat[] decr_float(float[] f) \n{\n  int i = 0;\n  float[] result = new float[f.length];\n\
    \  while (i < f.length) {\n    result[i] = f[i] - 1;\n    i++;\n  }\n  return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n            \n\
    */\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        result +=\
    \ l[i];\n        l[i] = result;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThe question was about how to do this in O(n) time, not\
    \ O(n^2) time.\n<|/ c |>\n<| c |>\nI believe this solution runs in O(n) time.\
    \ `incr_list` runs in O(n) time. `incr_list` runs in O(n) time because `incr_list`\
    \ runs in O(n) time. `incr_list` runs in O(n) time because `incr_list` runs in\
    \ O(n) time. `incr_list` runs in O(n) time because `incr_list` runs in O(n) time.\
    \ `incr_list` runs in O(n) time because `incr_list` runs in O(n) time. `incr_list`\
    \ runs in O(n) time because `incr_list` runs in O(n) time. `incr_list` runs in\
    \ O(n) time because `incr_list` runs in O(n) time. `incr_list` runs in O(n) time\
    \ because `incr_list` runs in O(n) time. `incr_list` runs in O(n) time because\
    \ `incr_list` runs in O(n) time. `incr_list` runs in O(n) time because `incr_list`\
    \ runs in O(n) time. `incr_list` runs in O(n) time because `incr_list` runs in\
    \ O(n) time. `incr_list` runs in O(n) time because `incr_list` runs in O(n) time.\
    \ `incr_list` runs in O(n) time because `incr_list` runs in O(n) time. `incr_list`\
    \ runs in O(n) time because `incr_list` runs in O(n) time. `incr_list` runs in\
    \ O(n) time because `incr_list` runs in O(n) time. `incr_list` runs in O(n) time\
    \ because `incr_list` runs in O(n) time. `incr_list` runs in O(n) time because\
    \ `incr_list` runs in O(n) time. `incr_list` runs in O(n) time because `incr_list`\
    \ runs in O(n) time. `incr_list` run\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdlz5mcvp.d(17): Error: declaration expected, not `<`

    /tmp/tmpdlz5mcvp.d(28): Error: declaration expected, not `assert`

    /tmp/tmpdlz5mcvp.d(29): Error: declaration expected, not `assert`

    /tmp/tmpdlz5mcvp.d(30): Error: declaration expected, not `assert`

    /tmp/tmpdlz5mcvp.d(31): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdlz5mcvp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpw7nl9kzb.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpw7nl9kzb.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor (int i = 0; i < l.length; ++i)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpmkhkem65.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpmkhkem65.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] result = new long[l.length];\n  for(i = 0; i < l.length; ++i)\n    result[i]\
    \ = l[i] + 1;\n  return result;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n  int i;\n  long[]\
    \ result = new long[l.length];\n  for(i = 0; i < l.length; ++i)\n    result[i]\
    \ = l[i] - 1;\n  return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor(int i = 0; i < l.length; ++i)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n\
    \        res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n    {\n\
    \        res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, long by) \n\
    {\n    long[] res = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n    {\n        res[i] = l[i] + by;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, long by) \n{\n    long[] res = new long[l.length];\n    for (int i = 0; i\
    \ < l.length; i++) \n    {\n        res[i] = l[i] - by;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int by) \n{\n    long[] res = new long[l.length];\n    for (int i = 0; i\
    \ < l.length; i++) \n    {\n        res[i] = l[i] + by;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int by) \n{\n    long[] res = new long[l.length];\n    for (int i = 0; i\
    \ < l.length; i++) \n    {\n        res[i] = l[i] - by;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, double by) \n{\n    long[] res = new long[l.length];\n    for (int i = 0;\
    \ i < l.length; i++) \n    {\n        res[i] = l[i] + by;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, double by) \n{\n    long[] res = new long[l.length];\n    for (int i = 0;\
    \ i < l.length; i++) \n    {\n        res[i] = l[i] - by;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, float \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs80iprn.d(112): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs80iprn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        result +=\
    \ (long)l[i];\n        l[i] = result;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,c# |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbtjvbrcg.d(12): Error: C style cast illegal, use `cast(long)l[i]`

    /tmp/tmpbtjvbrcg.d(17): Error: declaration expected, not `<`

    /tmp/tmpbtjvbrcg.d(22): Error: semicolon expected, not `.`

    /tmp/tmpbtjvbrcg.d(22): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmpbtjvbrcg.d(23): Error: semicolon expected, not `.`

    /tmp/tmpbtjvbrcg.d(23): Error: no identifier for declarator `.Linq`

    /tmp/tmpbtjvbrcg.d(24): Error: semicolon expected, not `.`

    /tmp/tmpbtjvbrcg.d(24): Error: no identifier for declarator `.Text`

    /tmp/tmpbtjvbrcg.d(25): Error: semicolon expected, not `.`

    /tmp/tmpbtjvbrcg.d(25): Error: no identifier for declarator `.Threading.Tasks`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbtjvbrcg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\
    \tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\
    \tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_list(float[] l) \n{\n\tfloat[]\
    \ result = new float[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\
    \tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_list(float[] l) \n{\n\tfloat[]\
    \ result = new float[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\
    \tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_list(double[] l) \n{\n\t\
    double[] result = new double[l.length];\n\tfor (int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_list(double[]\
    \ l) \n{\n\tdouble[] result = new double[l.length];\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp20o0mtte.d(89): Error: `tmp20o0mtte.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmp20o0mtte.d(7):     `tmp20o0mtte.incr_list(long[] l)`

    and:

    /tmp/tmp20o0mtte.d(59):     `tmp20o0mtte.incr_list(double[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20o0mtte.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; ++i)\n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    \
    \    result[i] = l[i] + 1;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmp9xw6hoqr.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmp9xw6hoqr.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] result = new long[l.length];\n  for(i=0;i<l.length;++i) {\n    result[i]\
    \ = l[i]+1;\n  }\n  return result;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n  int i;\n  long[]\
    \ result = new long[l.length];\n  for(i=0;i<l.length;++i) {\n    result[i] = l[i]-1;\n\
    \  }\n  return result;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \           \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n   \
    \ {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l)\
    \ \n{\n    long result[] = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        result[i] = l[i] - 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nfloat[] incr_array(float[]\
    \ a) \n{\n    float result[] = new float[a.length];\n    for(int i = 0; i < a.length;\
    \ i++) \n    {\n        result[i] = a[i] + 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements decremented by 1.\n            \n*/\nfloat[] decr_array(float[]\
    \ a) \n{\n    float result[] = new float[a.length];\n    for(int i = 0; i < a.length;\
    \ i++) \n    {\n        result[i] = a[i] - 1;\n    }\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\ndouble[] incr_array(double[]\
    \ a) \n{\n    double result[] = new double[a.length];\n    for(int i = 0; i <\
    \ a.length; i++) \n    {\n        result[i] = a[i] + 1;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\ndouble[]\
    \ decr_array(double[] a) \n{\n    double result[] = new double[a.length];\n  \
    \  for(int i = 0; i < a.length; i++) \n    {\n        result[i] = a[i] - 1;\n\
    \    }\n    return result;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmpr3jzs5l5.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpr3jzs5l5.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpr3jzs5l5.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpr3jzs5l5.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpr3jzs5l5.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpr3jzs5l5.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpr3jzs5l5.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpr3jzs5l5.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpr3jzs5l5.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpr3jzs5l5.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpr3jzs5l5.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpr3jzs5l5.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    '
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        result +=\
    \ (long)l[i];\n        l[i] = result;\n    }\n    return result;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long result = 0;\n    for(int i = l.length-1; i >= 0; --i)\n   \
    \ {\n        result += (long)l[i];\n        l[i] = result;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n            \n\
    */\nlong[] incr_list(long[] l, long by) \n{\n    long result = 0;\n    for(int\
    \ i = 0; i < l.length; ++i)\n    {\n        result += (long)l[i] + by;\n     \
    \   l[i] = result;\n    }\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, long by) \n\
    {\n    long result = 0;\n    for(int i = l.length-1; i >= 0; --i)\n    {\n   \
    \     result += (long)l[i] - by;\n        l[i] = result;\n    }\n    return result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int by) \n{\n    long result = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        result += (long)l[i] + by;\n        l[i] = result;\n    }\n  \
    \  return result;\n}\n/*\nReturn list with elements decremented by 1.\n      \
    \      \n*/\nlong[] decr_list(long[] l, int by) \n{\n    long result = 0;\n  \
    \  for(int i = l.length-1; i >= 0; --i)\n    {\n        result += (long)l[i] -\
    \ by;\n        l[i] = result;\n    }\n    return result;\n}\n/*\nReturn list with\
    \ elements incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, long\
    \ by, int by2) \n{\n    long result = 0;\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        result += (long)l[i] + by;\n        l[i] = result;\n    }\n  \
    \  return result;\n}\n/*\nReturn list with elements decremented by 1.\n      \
    \      \n*/\nlong[] decr_list(long[] l, long by, int by2) \n{\n    long result\
    \ = 0;\n    for(int i = l.length-1; i >= 0; --i)\n    {\n        result += (long)l[i]\
    \ - by;\n        l[i] = result;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n            \n\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpopp30x27.d(12): Error: C style cast illegal, use `cast(long)l[i]`

    /tmp/tmpopp30x27.d(26): Error: C style cast illegal, use `cast(long)l[i]`

    /tmp/tmpopp30x27.d(40): Error: C style cast illegal, use `cast(long)l[i]`

    /tmp/tmpopp30x27.d(54): Error: C style cast illegal, use `cast(long)l[i]`

    /tmp/tmpopp30x27.d(68): Error: C style cast illegal, use `cast(long)l[i]`

    /tmp/tmpopp30x27.d(82): Error: C style cast illegal, use `cast(long)l[i]`

    /tmp/tmpopp30x27.d(96): Error: C style cast illegal, use `cast(long)l[i]`

    /tmp/tmpopp30x27.d(110): Error: C style cast illegal, use `cast(long)l[i]`

    /tmp/tmpopp30x27.d(115): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopp30x27.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    long[] incr_list(long[] l, int n) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] + n;\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by 1.\n            \n*/\n\
    long[] decr_list(long[] l, int n) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] - n;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by n.\n            \n*/\n\
    long[] incr_list(long[] l, int n, int m) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] + n*m;\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by n.\n            \n*/\n\
    long[] decr_list(long[] l, int n, int m) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] - n*m;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by n.\n            \n*/\n\
    long[] incr_list(long[] l, int n, int m, int n2) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] + n*m + n2;\n \
    \   return res;\n}\n/*\nReturn list with elements decremented by n.\n        \
    \    \n*/\nlong[] decr_list(long[] l, int n, int m, int n2) \n{\n    long[] res\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n        res[i]\
    \ = l[i] - n*m - n2;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int m, int n2, int\
    \ n3) \n\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdufngn4x.d(97): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdufngn4x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ res = 0;\n    for (long i = 0; i < l.length; i++) \n    {\n        res += l[i];\n\
    \        l[i] = res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long res = 0;\n\
    \    for (long i = 0; i < l.length; i++) \n    {\n        res -= l[i];\n     \
    \   l[i] = res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list(long[] l, long val) \n{\n    long\
    \ res = 0;\n    for (long i = 0; i < l.length; i++) \n    {\n        res += l[i]\
    \ + val;\n        l[i] = res;\n    }\n    return l;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, long val) \n\
    {\n    long res = 0;\n    for (long i = 0; i < l.length; i++) \n    {\n      \
    \  res -= l[i] - val;\n        l[i] = res;\n    }\n    return l;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, long val, long val2) \n{\n    long res = 0;\n    for (long i = 0; i < l.length;\
    \ i++) \n    {\n        res += l[i] + val + val2;\n        l[i] = res;\n    }\n\
    \    return l;\n}\n/*\nReturn list with elements decremented by 1.\n         \
    \   \n*/\nlong[] decr_list(long[] l, long val, long val2) \n{\n    long res =\
    \ 0;\n    for (long i = 0; i < l.length; i++) \n    {\n        res -= l[i] - val\
    \ - val2;\n        l[i] = res;\n    }\n    return l;\n}\n/*\nReturn list with\
    \ elements incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, long\
    \ val, long val2, long val3) \n{\n    long res = 0;\n    for (long i = 0; i <\
    \ l.length; i++) \n    {\n        res += l[i] + val + val2 + val3;\n        l[i]\
    \ = res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l, long val, long val2, long val3)\
    \ \n{\n    long res = 0;\n    for (long i = 0; i < l.length; i++) \n    {\n  \
    \      res -= l[i] - val - val2 - val3;\n        l[i] = res;\n    }\n    return\
    \ l;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\n\
    unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9_bh1skh.d(125): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289fd]

    ??:? void tmp9_bh1skh.__unittest_L120_C1() [0x4285c9]

    ??:? void tmp9_bh1skh.__modtest() [0x42877c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca7f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b912]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430aa5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a31]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8e9]

    ??:? runModuleUnitTests [0x42c855]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ec0]

    ??:? void rt.dmain2._d'
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\t\
    \tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_list(float[] l) \n{\n\tfloat\
    \ result[] = new float[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_list(float[] l) \n{\n\tfloat\
    \ result[] = new float[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_list(double[] l) \n{\n\t\
    double result[] = new double[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\
    \t{\n\t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with\
    \ elements decremented by 1.\n            \n*/\ndouble[] decr_list(double[] l)\
    \ \n{\n\tdouble result[] = new double[l.length];\n\tfor(int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfhs2p6yh.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpfhs2p6yh.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpfhs2p6yh.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpfhs2p6yh.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmpfhs2p6yh.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpfhs2p6yh.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmpfhs2p6yh.d(89): Error: `tmpfhs2p6yh.incr_list` called with argument types
    `(void[])` matches both:

    /tmp/tmpfhs2p6yh.d(7):     `tmpfhs2p6yh.incr_list(long[] l)`

    and:

    /tmp/tmpfhs2p6yh.d(59):     `tmpfhs2p6yh.incr_list(double[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhs2p6yh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] result = new long[l.length];\n    for(; i < l.length; ++i)\n\
    \        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] result = new long[l.length];\n    for(; i < l.length; ++i)\n\
    \        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    int i = 0;\n    long[] result = new long[l.length];\n    for(; i < n; ++i)\n\
    \        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, int n) \n{\n\
    \    int i = 0;\n    long[] result = new long[l.length];\n    for(; i < n; ++i)\n\
    \        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n, int m)\
    \ \n{\n    int i = 0;\n    long[] result = new long[l.length];\n    for(; i <\
    \ n; ++i)\n        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n, int m) \n{\n    int i = 0;\n    long[] result = new long[l.length];\n\
    \    for(; i < n; ++i)\n        result[i] = l[i] - 1;\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m, int k) \n{\n    int i = 0;\n    long[] result = new long[l.length];\n\
    \    for(; i < n; ++i)\n        result[i] = l[i] + 1;\n    return result;\n}\n\
    /*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int n, int m, int k) \n{\n    int i = 0;\n    long[] result = new long[l.length];\n\
    \    for(; i < n; ++i)\n        result[i] = l[i] - 1;\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int n, int m, int k, int j) \n{\n    int i = 0;\n    long[] result = new\
    \ \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt102lgoz.d(107): Error: basic type expected, not `unittest`

    /tmp/tmpt102lgoz.d(107): Error: semicolon expected, not `unittest`

    /tmp/tmpt102lgoz.d(107): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt102lgoz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tresult += l[i];\n\
    \t\tl[i] = result;\n\t}\n\treturn l;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong result = 0;\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tresult -= l[i];\n\t\tl[i] = result;\n\
    \t}\n\treturn l;\n}\n/*\nReturn list with elements incremented by 1.\n       \
    \     \n*/\nlong[] incr_list(long[] l, long delta) \n{\n\tlong result = 0;\n\t\
    for (int i = 0; i < l.length; i++) \n\t{\n\t\tresult += l[i] + delta;\n\t\tl[i]\
    \ = result;\n\t}\n\treturn l;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l, long delta) \n{\n\tlong result\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tresult -= l[i] - delta;\n\
    \t\tl[i] = result;\n\t}\n\treturn l;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list(long[] l, int delta) \n{\n\tlong result\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tresult += l[i] + delta;\n\
    \t\tl[i] = result;\n\t}\n\treturn l;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l, int delta) \n{\n\tlong result\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tresult -= l[i] - delta;\n\
    \t\tl[i] = result;\n\t}\n\treturn l;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list(long[] l, long delta, int scale) \n\
    {\n\tlong result = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tresult\
    \ += l[i] + delta;\n\t\tl[i] = result;\n\t}\n\treturn l;\n}\n/*\nReturn list with\
    \ elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l, long\
    \ delta, int scale) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tresult -= l[i] - delta;\n\t\tl[i] = result;\n\t}\n\treturn l;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int delta, int scale\nunittest\n{\n    alias candidate = incr_list;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkepjc04b.d(120): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkepjc04b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ res = new long[l.length];\n\tfor(int i = 0; i < l.length; i++) \n\t\tres[i]\
    \ = l[i] + 1;\n\treturn res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n   \
    \     result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n   \
    \     result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_array(float[] a) \n{\n   \
    \ float result[] = new float[a.length];\n    for (int i = 0; i < a.length; ++i)\n\
    \        result[i] = a[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_array(float[] a) \n{\n   \
    \ float result[] = new float[a.length];\n    for (int i = 0; i < a.length; ++i)\n\
    \        result[i] = a[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_array(double[] a) \n{\n \
    \   double result[] = new double[a.length];\n    for (int i = 0; i < a.length;\
    \ ++i)\n        result[i] = a[i] + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_array(double[]\
    \ a) \n{\n    double result[] = new double[a.length];\n    for (int i = 0; i <\
    \ a.length; ++i)\n        result[i] = a[i] - 1;\n    return result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmphc6u72cn.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmphc6u72cn.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmphc6u72cn.d(31): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmphc6u72cn.d(42): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmphc6u72cn.d(53): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmphc6u72cn.d(64): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmphc6u72cn.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmphc6u72cn.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmphc6u72cn.d(31): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmphc6u72cn.d(42): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmphc6u72cn.d(53): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmphc6u72cn.d(64): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    '
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ res = new long[l.length];\n\tfor (int i = 0; i < l.length; ++i)\n\t\tres[i]\
    \ = l[i] + 1;\n\treturn res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; ++i)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong result[] = new\
    \ long[l.length];\n\tfor(int i = 0; i < l.length; ++i)\n\t\tresult[i] = l[i] -\
    \ 1;\n\treturn result;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \           \n*/\nlong[] incr_list(long[] l, int size) \n{\n\tlong result[] =\
    \ new long[size];\n\tfor(int i = 0; i < size; ++i)\n\t\tresult[i] = l[i] + 1;\n\
    \treturn result;\n}\n/*\nReturn list with elements decremented by 1.\n       \
    \     \n*/\nlong[] decr_list(long[] l, int size) \n{\n\tlong result[] = new long[size];\n\
    \tfor(int i = 0; i < size; ++i)\n\t\tresult[i] = l[i] - 1;\n\treturn result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int size, int step) \n{\n\tlong result[] = new long[size];\n\tfor(int i =\
    \ 0; i < size; ++i)\n\t\tresult[i] = l[i] + step;\n\treturn result;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int size, int step) \n{\n\tlong result[] = new long[size];\n\tfor(int i =\
    \ 0; i < size; ++i)\n\t\tresult[i] = l[i] - step;\n\treturn result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int size, int step, long step2) \n{\n\tlong result[] = new long[size];\n\t\
    for(int i = 0; i < size; ++i)\n\t\tresult[i] = l[i] + step;\n\treturn result;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int size, int step, long step2) \n{\n\tlong result[] = new long[size];\n\t\
    for(int i = 0; i < size; ++i)\n\t\tresult[i] = l[i] - step;\n\treturn result;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int size, int step, long step2, long step3) \n{\n\tlong result[] = new long[size];\n\
    \tfor(int i = 0; i < size; ++\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbc5b53f8.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpbc5b53f8.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpbc5b53f8.d(31): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpbc5b53f8.d(42): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpbc5b53f8.d(53): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpbc5b53f8.d(64): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpbc5b53f8.d(75): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpbc5b53f8.d(86): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpbc5b53f8.d(97): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpbc5b53f8.d(99): Error: expression expected, not `unittest`

    /tmp/tmpbc5b53f8.d(100): Error: found `{` when expecting `)`

    Failed'
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n      \
    \  result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n      \
    \  result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_array(float[] l) \n{\n   \
    \ float[] result = new float[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_array(float[] l) \n{\n   \
    \ float[] result = new float[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_array(double[] l) \n{\n \
    \   double[] result = new double[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_array(double[]\
    \ l) \n{\n    double[] result = new double[l.length];\n    for(int i = 0; i <\
    \ l.length; ++i)\n        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164118
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ res = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        res += l[i];\n\
    \        l[i] = res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long res = 0;\n\
    \    for(int i = l.length - 1; i >= 0; --i)\n    {\n        res += l[i];\n   \
    \     l[i] = res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list2(long[] l) \n{\n    long res = 0;\n\
    \    for(int i = 0; i < l.length; ++i)\n    {\n        res += l[i];\n        l[i]\
    \ = res - 1;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list2(long[] l) \n{\n    long res = 0;\n\
    \    for(int i = l.length - 1; i >= 0; --i)\n    {\n        res += l[i];\n   \
    \     l[i] = res + 1;\n    }\n    return l;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list3(long[] l) \n{\n    long\
    \ res = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        res += l[i];\n\
    \        l[i] = res - 1;\n    }\n    return l;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list3(long[] l) \n{\n    long\
    \ res = 0;\n    for(int i = l.length - 1; i >= 0; --i)\n    {\n        res +=\
    \ l[i];\n        l[i] = res + 1;\n    }\n    return l;\n}\n/*\nReturn list with\
    \ elements incremented by 1.\n            \n*/\nlong[] incr_list4(long[] l) \n\
    {\n    long res = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        res\
    \ += l[i];\n        l[i] = res - 1;\n    }\n    return l;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list4(long[]\
    \ l) \n{\n    long res = 0;\n    for(int i = l.length - 1; i >= 0; --i)\n    {\n\
    \        res += l[i];\n        l[i] = res + 1;\n    }\n    return l;\n}\n/*\n\
    Return list with elements incremented by 1.\n            \n*/\nlong[] incr_list5(long[]\
    \ l) \n{\n    long res = 0;\n    for(int i = 0; i < l.length; ++\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3p3zdx51.d(123): Error: expression expected, not `unittest`

    /tmp/tmp3p3zdx51.d(124): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3p3zdx51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] r = new long[l.length];\n  for(i=0;i<l.length;i++)\n    r[i] = l[i]+1;\n\
    \  return r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    for(; i < l.length; ++i)\n        l[i] = l[i] + 1;\n    return l;\n\
    }\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor(int i = 0; i < l.length; i++)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmptcitq108.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmptcitq108.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong[]\
    \ result = new long[l.length];\n\tfor (int i = 0; i < l.length; ++i)\n\t\tresult[i]\
    \ = l[i] + 1;\n\treturn result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result = 0;\n    for (long i = 0; i < l.length; ++i)\n    {\n        result\
    \ += l[i];\n        l[i] = result;\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThe question was about a list with random elements.\
    \ Your solution doesn't work for that.\n<|/ c |>\n<| c |>\nThe question was about\
    \ a list with random elements. Your solution doesn't work for that.\n<|/ c |>\n\
    <| c |>\nThe question was about a list with random elements. Your solution doesn't\
    \ work for that.\n<|/ c |>\n<| c |>\nThe question was about a list with random\
    \ elements. Your solution doesn't work for that.\n<|/ c |>\n<| c |>\nThe question\
    \ was about a list with random elements. Your solution doesn't work for that.\n\
    <|/ c |>\n<| a tags=arrays,c++,list |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\nusing namespace std;\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgc9v3k5v.d(17): Error: declaration expected, not `<`

    /tmp/tmpgc9v3k5v.d(20): Error: unterminated character constant

    /tmp/tmpgc9v3k5v.d(23): Error: unterminated character constant

    /tmp/tmpgc9v3k5v.d(26): Error: unterminated character constant

    /tmp/tmpgc9v3k5v.d(29): Error: unterminated character constant

    /tmp/tmpgc9v3k5v.d(32): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgc9v3k5v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164118
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n      \
    \  result[i] = l[i] + 1;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] - 1;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by 1.\n            \n*/\n\
    long[] incr_list(long[] l, int n) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] + n;\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by 1.\n            \n*/\n\
    long[] decr_list(long[] l, int n) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] - n;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by n.\n            \n*/\n\
    long[] incr_list(long[] l, int n, int m) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] + n*m;\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by n.\n            \n*/\n\
    long[] decr_list(long[] l, int n, int m) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] - n*m;\n    return\
    \ res;\n}\n/*\nReturn list with elements incremented by n.\n            \n*/\n\
    long[] incr_list(long[] l, int n, int m, int n2) \n{\n    long[] res = new long[l.length];\n\
    \    for(int i = 0; i < l.length; i++) \n        res[i] = l[i] + n*m + n2;\n \
    \   return res;\n}\n/*\nReturn list with elements decremented by n.\n        \
    \    \n*/\nlong[] decr_list(long[] l, int n, int m, int n2) \n{\n    long[] res\
    \ = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n        res[i]\
    \ = l[i] - n*m - n2;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by n.\n            \n*/\nlong[] incr_list(long[] l, int n, int m, int n2, int\
    \ m2) \n\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp57ssbynj.d(97): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57ssbynj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for (int i = 0; i < l.length; ++i)\n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nfloat[] incr_array(float[] l) \n{\n   \
    \ float[] result = new float[l.length];\n    for (int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nfloat[] decr_array(float[] l) \n{\n   \
    \ float[] result = new float[l.length];\n    for (int i = 0; i < l.length; ++i)\n\
    \        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_array(double[] l) \n{\n \
    \   double[] result = new double[l.length];\n    for (int i = 0; i < l.length;\
    \ ++i)\n        result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_array(double[]\
    \ l) \n{\n    double[] result = new double[l.length];\n    for (int i = 0; i <\
    \ l.length; ++i)\n        result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    int\
    \ i = 0;\n    long[] res = new long[l.length];\n    for(; i < l.length; ++i)\n\
    \    {\n        res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l)\
    \ \n{\n    int i = 0;\n    long[] res = new long[l.length];\n    for(; i < l.length;\
    \ ++i)\n    {\n        res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int len) \n{\n    int i = 0;\n    long[] res = new long[len];\n    for(;\
    \ i < len; ++i)\n    {\n        res[i] = l[i] + 1;\n    }\n    return res;\n}\n\
    /*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int len) \n{\n    int i = 0;\n    long[] res = new long[len];\n    for(;\
    \ i < len; ++i)\n    {\n        res[i] = l[i] - 1;\n    }\n    return res;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int len, int step) \n{\n    int i = 0;\n    long[] res = new long[len];\n\
    \    for(; i < len; ++i)\n    {\n        res[i] = l[i] + step;\n    }\n    return\
    \ res;\n}\n/*\nReturn list with elements decremented by 1.\n            \n*/\n\
    long[] decr_list(long[] l, int len, int step) \n{\n    int i = 0;\n    long[]\
    \ res = new long[len];\n    for(; i < len; ++i)\n    {\n        res[i] = l[i]\
    \ - step;\n    }\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list(long[] l, int len, int step, int inc)\
    \ \n{\n    int i = 0;\n    long[] res = new long[len];\n    for(; i < len; ++i)\n\
    \    {\n        res[i] = l[i] + step + inc;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int len, int step, int dec) \n{\n    int i = 0;\n    long[] res = new long[len];\n\
    \    for(; i < len; ++i)\n    {\n        res[i] = l[i] - step + dec\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkl4vh2au.d(112): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpkl4vh2au.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpkl4vh2au.d(120): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkl4vh2au.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long\
    \ result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n  \
    \      result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, long inc) \n\
    {\n    long result[] = new long[l.length];\n    for (int i = 0; i < l.length;\
    \ i++) \n        result[i] = l[i] + inc;\n    return result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ long dec) \n{\n    long result[] = new long[l.length];\n    for (int i = 0;\
    \ i < l.length; i++) \n        result[i] = l[i] - dec;\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, int inc) \n{\n    long result[] = new long[l.length];\n    for (int i = 0;\
    \ i < l.length; i++) \n        result[i] = l[i] + inc;\n    return result;\n}\n\
    /*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, int dec) \n{\n    long result[] = new long[l.length];\n    for (int i = 0;\
    \ i < l.length; i++) \n        result[i] = l[i] - dec;\n    return result;\n}\n\
    /*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, long inc, int inc) \n{\n    long result[] = new long[l.length];\n    for\
    \ (int i = 0; i < l.length; i++) \n        result[i] = l[i] + inc + inc;\n   \
    \ return result;\n}\n/*\nReturn list with elements decremented by 1.\n       \
    \     \n*/\nlong[] decr_list(long[] l, long dec, int dec) \n{\n    long result[]\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++) \n        result[i]\
    \ = l[i] - dec - dec;\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nlong[] incr_list(long[] l, int inc, int inc) \n{\n\
    \    long result[] = new long[l.length];\n    for (int i = 0; i < l.length; i++)\
    \ \n        result[i] = l[i] + inc + inc;\n    return result;\n\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4_cqls_t.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmp4_cqls_t.d(20): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp4_cqls_t.d(31): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp4_cqls_t.d(42): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp4_cqls_t.d(53): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp4_cqls_t.d(64): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp4_cqls_t.d(75): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp4_cqls_t.d(86): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp4_cqls_t.d(97): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp4_cqls_t.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_cqls_t.d", '
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ res = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tres += l[i];\n\tlong[] res\
    \ = new long[res + 1];\n\tfor (int i = 0; i < l.length; ++i)\n\t\tres[i] = l[i]\
    \ + 1;\n\treturn res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4xkrvvk2.d(12): Error: declaration `tmp4xkrvvk2.incr_list.res`
    is already defined

    /tmp/tmp4xkrvvk2.d(14): Error: only one index allowed to index `long`

    /tmp/tmp4xkrvvk2.d(15): Error: cannot implicitly convert expression `res` of type
    `long` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xkrvvk2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164119
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      res[i] = l[i] + 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      res[i] = l[i] - 1;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l, int n) \n{\n\
    \    long[] res = new long[l.length];\n    for(int i = 0; i < l.length; ++i)\n\
    \    {\n        res[i] = l[i] + n;\n    }\n    return res;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[] l,\
    \ int n) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        res[i] = l[i] - n;\n    }\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, long n) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; ++i)\n    {\n        res[i] = l[i] + n;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, long n) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i <\
    \ l.length; ++i)\n    {\n        res[i] = l[i] - n;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ l, double n) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i\
    \ < l.length; ++i)\n    {\n        res[i] = l[i] + n;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements decremented by 1.\n            \n*/\nlong[] decr_list(long[]\
    \ l, double n) \n{\n    long[] res = new long[l.length];\n    for(int i = 0; i\
    \ < l.length; ++i)\n    {\n        res[i] = l[i] - n;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n            \n*/\nlong[] incr_list(long[]\
    \ \nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjl2p9aq5.d(112): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjl2p9aq5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] r = new long[l.length];\n  for(i = 0; i < l.length; ++i)\n    r[i] =\
    \ l[i] + 1;\n  return r;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n  int i;\n\
    \  long[] result = new long[l.length];\n  for(i = 0; i < l.length; i++) \n   \
    \ result[i] = l[i] + 1;\n  return result;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n  int i;\n  long[]\
    \ result = new long[l.length];\n  for(i = 0; i < l.length; i++) \n    result[i]\
    \ = l[i] - 1;\n  return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\ndouble[] incr_double(double[] d) \n{\n  int i;\n  double[]\
    \ result = new double[d.length];\n  for(i = 0; i < d.length; i++) \n    result[i]\
    \ = d[i] + 1;\n  return result;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\ndouble[] decr_double(double[] d) \n{\n  int i;\n  double[]\
    \ result = new double[d.length];\n  for(i = 0; i < d.length; i++) \n    result[i]\
    \ = d[i] - 1;\n  return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nfloat[] incr_float(float[] f) \n{\n  int i;\n  float[]\
    \ result = new float[f.length];\n  for(i = 0; i < f.length; i++) \n    result[i]\
    \ = f[i] + 1;\n  return result;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nfloat[] decr_float(float[] f) \n{\n  int i;\n  float[]\
    \ result = new float[f.length];\n  for(i = 0; i < f.length; i++) \n    result[i]\
    \ = f[i] - 1;\n  return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164119
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n\tlong\
    \ result[] = new long[l.length];\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\
    \t\tresult[i] = l[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\ndouble[] incr_double(double[] d) \n{\n\t\
    double result[] = new double[d.length];\n\tfor (int i = 0; i < d.length; i++)\
    \ \n\t{\n\t\tresult[i] = d[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn list\
    \ with elements decremented by 1.\n            \n*/\ndouble[] decr_double(double[]\
    \ d) \n{\n\tdouble result[] = new double[d.length];\n\tfor (int i = 0; i < d.length;\
    \ i++) \n\t{\n\t\tresult[i] = d[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nfloat[] incr_float(float[]\
    \ f) \n{\n\tfloat result[] = new float[f.length];\n\tfor (int i = 0; i < f.length;\
    \ i++) \n\t{\n\t\tresult[i] = f[i] + 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n            \n*/\nfloat[] decr_float(float[]\
    \ f) \n{\n\tfloat result[] = new float[f.length];\n\tfor (int i = 0; i < f.length;\
    \ i++) \n\t{\n\t\tresult[i] = f[i] - 1;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: '/tmp/tmp8e12i6rc.d(9): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmp8e12i6rc.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp8e12i6rc.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmp8e12i6rc.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmp8e12i6rc.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmp8e12i6rc.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmp8e12i6rc.d(9): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp8e12i6rc.d(22): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp8e12i6rc.d(35): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmp8e12i6rc.d(48): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] result`

    /tmp/tmp8e12i6rc.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    /tmp/tmp8e12i6rc.d(74): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] result`

    '
  stdout: ''
  timestamp: 1660164117
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] + 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long[]\
    \ result = new long[l.length];\n    for(int i = 0; i < l.length; i++) \n     \
    \   result[i] = l[i] - 1;\n    return result;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164117
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn list with elements\
    \ incremented by 1.\n            \n*/\nlong[] incr_list(long[] l) \n{\n    long\
    \ res = 0;\n    for(long i = 0; i < l.length; i++) \n    {\n        res++;\n \
    \       l[i] = res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n            \n*/\nlong[] decr_list(long[] l) \n{\n    long res = 0;\n\
    \    for(long i = 0; i < l.length; i++) \n    {\n        res--;\n        l[i]\
    \ = res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nlong[] incr_list2(long[] l) \n{\n    long res = 0;\n \
    \   for(long i = 0; i < l.length; i++) \n    {\n        res++;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list2(long[] l) \n{\n    long res = 0;\n \
    \   for(long i = 0; i < l.length; i++) \n    {\n        res--;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nlong[] incr_list3(long[] l) \n{\n    long res = 0;\n \
    \   for(long i = 0; i < l.length; i++) \n    {\n        res++;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list3(long[] l) \n{\n    long res = 0;\n \
    \   for(long i = 0; i < l.length; i++) \n    {\n        res--;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nlong[] incr_list4(long[] l) \n{\n    long res = 0;\n \
    \   for(long i = 0; i < l.length; i++) \n    {\n        res++;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremented by\
    \ 1.\n            \n*/\nlong[] decr_list4(long[] l) \n{\n    long res = 0;\n \
    \   for(long i = 0; i < l.length; i++) \n    {\n        res--;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements incremented by\
    \ 1.\n            \n*/\nlong[] incr_list5(long[] l) \n{\n    long res = 0;\n \
    \   for(long i = 0; i < l.length; i++) \n    {\n        res++;\n        l[i] =\
    \ res;\n    }\n    return l;\n}\n/*\nReturn list with elements decremen\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9md6xd48.d(129): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9md6xd48.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164119
