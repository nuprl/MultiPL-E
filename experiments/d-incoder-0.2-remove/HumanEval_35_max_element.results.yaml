language: d
name: HumanEval_35_max_element
results:
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tmax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor\
    \ (int i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin\
    \ = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\t\
    for (int i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tprod\
    \ *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn square of all elements in the list.\n\
    \            \n*/\nlong square_element(long[] l) \n{\n\tlong square = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\tsquare = square + l[i] * l[i];\n\t\
    }\n\treturn square;\n}\n/*\nReturn sum of all elements in the list.\n        \
    \    \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\ndouble prod_elements(double[]\
    \ l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\t\
    prod *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn square of all elements in the\
    \ list.\n            \n*/\ndouble square_elements(double[] l) \n{\n\tdouble square\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tsquare = square + l[i]\
    \ * l[i];\n\t}\n\treturn square;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nfloat prod_\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpru7liw82.d(132): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpru7liw82.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tstd.sort(l);\n\tmax =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5b6xw3d0.d(9): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5b6xw3d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t\
    }\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n          \
    \  \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) {\n\t\tif (l[i] < min) {\n\t\t\tmin = l[i];\n\t\t\
    }\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n      \
    \      \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; i++) {\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) {\n\t\t\
    prod *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong i;\n\t\
    for (i = 0; i < l.length; i++) {\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tdouble i;\n\tfor (i = 0; i < l.length; i++) {\n\
    \t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat i;\n\
    \tfor (i = 0; i < l.length; i++) {\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfjwx3c3r.d(68): Error: cannot implicitly convert expression `l`
    of type `long[]` to `long`

    /tmp/tmpfjwx3c3r.d(78): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmpfjwx3c3r.d(80): Error: cannot implicitly convert expression `l` of type
    `double[]` to `double`

    /tmp/tmpfjwx3c3r.d(90): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmpfjwx3c3r.d(92): Error: cannot implicitly convert expression `l` of type
    `float[]` to `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfjwx3c3r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor (i\
    \ = 1; i < l.length; i++) \n\t\tif (l[i] > max) \n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t\t\
    if (l[i] < min) \n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; i++) \n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong\
    \ abs = 0;\n\tfor (i = 0; i < l.length; i++) \n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor\
    \ (i = 0; i < l.length; i++) \n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs = 0;\n\tfor (i = 0; i < l.length; i++) \n\t\t\
    abs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxaalmv9.d(61): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpaxaalmv9.d(73): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpaxaalmv9.d(85): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxaalmv9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn median of all elements in the list.\n \
    \           \n*/\nlong median_element(long[] l) \n{\n\tlong mid = l.length / 2;\n\
    \tlong median = l[mid];\n\tfor (int i = mid; i < l.length; i++)\n\t\tif (l[i]\
    \ < median)\n\t\t\tmedian = l[i];\n\tfor (int i = mid; i > 0; i--)\n\t\tif (l[i]\
    \ > median)\n\t\t\tmedian = l[i];\n\treturn median;\n}\n/*\nReturn standard deviation\
    \ of all elements in the list.\n            \n*/\ndouble std_element(long[] l)\
    \ \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += pow(l[i]\
    \ - median_element(l), 2);\n\treturn sqrt(sum / (l.length - 1));\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\ndouble sum_element(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\ndouble prod_element(double[] l) \n{\n\tdouble prod = 1;\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\n\
    Return median of all elements in the list.\n            \n*/\ndouble median_element(double[]\
    \ l) \n{\n\tdouble mid = l.length / 2;\n\tdouble median = l[mid];\n\tfor (int\
    \ i = mid; i < l.length; i++)\n\t\tif (l[i] < median)\n\t\t\tmedian = l[i];\n\t\
    for (int i = mid; i > 0; i--)\n\t\tif (l[i] > median)\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg9i16dxa.d(110): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9i16dxa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max_element = 0;\n\tlong i;\n\t\
    for(i = 0; i < l.length; i++){\n\t\tif(l[i] > max_element){\n\t\t\tmax_element\
    \ = l[i];\n\t\t}\n\t}\n\treturn max_element;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list that\
    \ are less than the given value.\n            \n*/\nlong sum_element_less_than(long[]\
    \ l, long value) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\
    \tif (l[i] < value)\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list that are less than the given value.\n          \
    \  \n*/\nlong product_element_less_than(long[] l, long value) \n{\n\tlong product\
    \ = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tif (l[i] < value)\n\t\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list that\
    \ are greater than the given value.\n            \n*/\nlong sum_element_greater_than(long[]\
    \ l, long value) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\
    \tif (l[i] > value)\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list that are greater than the given value.\n       \
    \     \n*/\nlong product_element_greater_than(long[] l, long value) \n{\n\tlong\
    \ product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tif (l[i] > value)\n\t\
    \t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list that are equal to the given value.\n            \n*/\nlong sum_element_equal_to(long[]\
    \ l, long value) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\
    \tif (l[i] == value)\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list that are equal to the given value.\n           \
    \ \n*/\nlong product_element_equal_to(long[] \nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkq94c4k9.d(113): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkq94c4k9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i,j;\n\tlong max;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tmax=l[i];\n\t\tfor(j=i+1;j<l.length;j++)\n\t\t{\n\t\t\tif(l[j]>max)\n\
    \t\t\t{\n\t\t\t\tmax=l[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn\
    \ minimum element in the list.\n            \n*/\nlong min_element(long[] l) \n\
    {\n\tint i,j;\n\tlong min;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tmin=l[i];\n\t\t\
    for(j=i+1;j<l.length;j++)\n\t\t{\n\t\t\tif(l[j]<min)\n\t\t\t{\n\t\t\t\tmin=l[j];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum=0;\n\t\
    for(i=0;i<l.length;i++)\n\t{\n\t\tsum+=l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod=1;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tprod*=l[i];\n\
    \t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n        \
    \    \n*/\ndouble sum_element_double(double[] l) \n{\n\tint i;\n\tdouble sum=0;\n\
    \tfor(i=0;i<l.length;i++)\n\t{\n\t\tsum+=l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_element_double(double[]\
    \ l) \n{\n\tint i;\n\tdouble prod=1;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tprod*=l[i];\n\
    \t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n        \
    \    \n*/\nfloat sum_element_float(float[] l) \n{\n\tint i;\n\tfloat sum=0;\n\t\
    for(i=0;i<l.length;i++)\n\t{\n\t\tsum+=l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tint i;\n\tfloat prod=1;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tprod*=l[i];\n\
    \t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n        \
    \    \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm_by6zhg.d(137): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286b5]

    ??:? void tmpm_by6zhg.__unittest_L132_C1() [0x428424]

    ??:? void tmpm_by6zhg.__modtest() [0x428438]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c713]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430739]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430be8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b57d]

    ??:? runModuleUnitTests [0x42c4e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b78]

    ??:? void rt.dmain2._d'
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor(int i = 1;\
    \ i < l.length; ++i)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tstd.sort(l);\n\tmax =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i] > max) {\n\t\t\t\
    max = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tlong min;\n\tstd.sort(l);\n\
    \tmin = l[0];\n\tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i] < min) {\n\
    \t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_array(long[] l) \n{\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < l.length; ++i) {\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong prod_array(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i) {\n\t\tprod *=\
    \ l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_array(double[] l) \n{\n\tdouble sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; ++i) {\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\ndouble prod_array(double[]\
    \ l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; ++i) {\n\t\tprod\
    \ *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_array(float[] l) \n{\n\tfloat sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i) {\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat prod_array(float[]\
    \ l) \n{\n\tfloat prod = 1;\n\tfor (int i = 0; i < l.length; ++i) {\n\t\tprod\
    \ *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5j3q6c4t.d(9): Error: undefined identifier `sort` in package `std`

    /tmp/tmp5j3q6c4t.d(25): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5j3q6c4t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong\
    \ min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i <\
    \ l.length; i++) {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) {\n\t\t\
    sum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n            \n*/\nlong product_element(long[] l) \n{\n\tlong product\
    \ = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) {\n\t\tproduct *= l[i];\n\t\
    }\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n       \
    \     \n*/\ndouble sum_element_double(double[] l) \n{\n\tdouble sum = 0;\n\tdouble\
    \ i;\n\tfor (i = 0; i < l.length; i++) {\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\ndouble product_element_double(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tdouble i;\n\tfor (i = 0; i < l.length; i++)\
    \ {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nfloat sum_element_float(float[] l) \n{\n\tfloat\
    \ sum = 0;\n\tfloat i;\n\tfor (i = 0; i < l.length; i++) {\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nfloat product_element_float(float[] l) \n{\n\tfloat product = 1;\n\
    \tfloat i;\n\tfor (i = 0; i < l.length; i++) {\n\t\tproduct *= l[i];\n\t}\n\t\
    return product;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfnvzzzed.d(65): Error: cannot implicitly convert expression `i`
    of type `double` to `ulong`

    /tmp/tmpfnvzzzed.d(78): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmpfnvzzzed.d(91): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmpfnvzzzed.d(104): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnvzzzed.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\
    \t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n        \
    \    \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int i =\
    \ 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n  \
    \          \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\t\
    product *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\t\
    long abs = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs = abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    float abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp42678uaf.d(69): Error: function expected before `()`, not `abs`
    of type `long`

    /tmp/tmp42678uaf.d(82): Error: function expected before `()`, not `abs` of type
    `double`

    /tmp/tmp42678uaf.d(95): Error: function expected before `()`, not `abs` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp42678uaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor(i=1;\
    \ i<l.length; i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    /*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor(i=1; i<l.length; i++)\n\t\tif(l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\t\
    long sum = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong product = 1;\n\tfor(i=1; i<l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_elements(long[] l) \n{\n\tint i;\n\tlong\
    \ abs = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_elements(double[] l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor(i=1; i<l.length;\
    \ i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_elements(float[] l)\
    \ \n{\n\tint i;\n\tfloat abs = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt20ydhvn.d(61): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpt20ydhvn.d(73): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpt20ydhvn.d(85): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt20ydhvn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; ++i) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\
    }\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i\
    \ = 1; i < l.length; ++i) {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_element(long[] l) \n{\n\tint i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nlong prod_element(long[] l) \n\
    {\n\tint i;\n\tlong prod;\n\tprod = 1;\n\tfor (i = 0; i < l.length; ++i)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong\
    \ abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble abs;\n\t\
    abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ax7w_ij.d(68): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp3ax7w_ij.d(81): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp3ax7w_ij.d(94): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ax7w_ij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax\
    \ = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin\
    \ = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t\
    {\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\tlong prod;\n\tprod\
    \ = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tprod *= l[i];\n\t}\n\treturn\
    \ prod;\n}\n/*\nReturn absolute value of all elements in the list.\n         \
    \   \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\t\
    for (i = 0; i < l.length; i++) \n\t{\n\t\tabs += l[i];\n\t}\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor (i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tabs += l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tabs += l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i,j;\n\tlong max;\n\tfor(i=0,j=l.length-1;i<j;i++,j--)\n\
    \t{\n\t\tif(l[i]>l[j])\n\t\t{\n\t\t\tmax=l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\
    max=l[j];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tint i,j;\n\tlong min;\n\t\
    for(i=0,j=l.length-1;i<j;i++,j--)\n\t{\n\t\tif(l[i]<l[j])\n\t\t{\n\t\t\tmin=l[i];\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tmin=l[j];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tint i;\n\tlong sum=0;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tsum+=l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\tlong prod=1;\n\t\
    for(i=0;i<l.length;i++)\n\t{\n\t\tprod=prod*l[i];\n\t}\n\treturn prod;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tabs=abs+l[i]*l[i];\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble abs=0;\n\
    \tfor(i=0;i<l.length;i++)\n\t{\n\t\tabs=abs+l[i]*l[i];\n\t}\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nfloat\
    \ abs_element(float[] l) \n{\n\tint i;\n\tfloat abs=0;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tabs=abs+l[i]*l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpla7mrcn9.d(10): Error: cannot implicitly convert expression `l.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpla7mrcn9.d(31): Error: cannot implicitly convert expression `l.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpla7mrcn9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    int i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong product_element(long[] l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i =\
    \ 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs\
    \ = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\
    \tdouble abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs = 0;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nlong\
    \ long abs_element(long long[] l) \n{\n\tint i;\n\tlong long abs = 0;\n\tfor (i\
    \ = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l, int size) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor (i = 0; i < size; ++i)\n\
    \t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nfloat abs_element(float[] l, int size)\
    \ \n{\n\tint i;\n\tfloat abs = 0;\n\tfor (i = 0; i < \nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0useffl0.d(94): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmp0useffl0.d(94): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmp0useffl0.d(97): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmp0useffl0.d(123): Error: expression expected, not `unittest`

    /tmp/tmp0useffl0.d(124): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp0useffl0.d(125): Error: expression expected, not `alias`

    /tmp/tmp0useffl0.d(125): Error: found `candidate` when expecting `)`

    /tmp/tmp0useffl0.d(125): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0useffl0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor(int i = 1;\
    \ i < l.length; ++i)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_array(long[] l) \n{\n\tlong sum = 0;\n\
    \tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong prod_array(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_array(long[] l) \n{\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_array(long[]\
    \ l, long d) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_array(long[] l, long d, long e) \n{\n\tlong i;\n\tfor (i\
    \ = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_array(long[]\
    \ l, long d, long e, long f) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\
    \t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_array(long[] l, long d, long e, long\
    \ f, long g) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_array(long[] l, long d, long e, long f, long g, long h)\
    \ \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\t\
    return l;\n}\n/*\n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplea0nz1j.d(118): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplea0nz1j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t\
    }\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i;\n\tfor(i =\
    \ 0; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong long sum_elements(long long[] l) \n{\n\tlong long sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong long\
    \ product_elements(long long[] l) \n{\n\tlong long product = 1;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\nulong sum_elements(ulong[]\
    \ l) \n{\n\tulong sum = 0;\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb24qg_ch.d(96): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmpb24qg_ch.d(96): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpb24qg_ch.d(98): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpb24qg_ch.d(107): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpb24qg_ch.d(107): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpb24qg_ch.d(109): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpb24qg_ch.d(121): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb24qg_ch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_elements(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_elements(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i <\
    \ l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_elements(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7hjes65c.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp7hjes65c.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp7hjes65c.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7hjes65c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpylats5ph.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpylats5ph.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpylats5ph.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpylats5ph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_element(float[] l)\
    \ \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4m5wgn_q.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp4m5wgn_q.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp4m5wgn_q.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4m5wgn_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzb8eg1mi.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpzb8eg1mi.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpzb8eg1mi.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzb8eg1mi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor (i\
    \ = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i = 0;\n\twhile\
    \ (i < l.length) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\
    \t\ti++;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_element(float[] l)\
    \ \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4m5wgn_q.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp4m5wgn_q.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp4m5wgn_q.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4m5wgn_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i;\n\tfor(i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tif(l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tlong min = 0;\n\tlong i;\n\tfor(i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n  \
    \          \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\t\
    for(i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor(i = 0; i < l.length; i++) \n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\ndouble sum_element_double(double[] l) \n{\n\t\
    double sum = 0;\n\tdouble i;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tsum +=\
    \ l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_element_double(double[] l) \n{\n\tdouble product\
    \ = 1;\n\tdouble i;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nfloat sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\tfloat\
    \ i;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfloat i;\n\tfor(i = 0; i < l.length; i++) \n\
    \t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjpgqdnfj.d(74): Error: cannot implicitly convert expression `i`
    of type `double` to `ulong`

    /tmp/tmpjpgqdnfj.d(88): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmpjpgqdnfj.d(102): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmpjpgqdnfj.d(116): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpgqdnfj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tmax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\
    \tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    long sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long prod_element(long[] l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\t\
    long abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2mj9_rab.d(58): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp2mj9_rab.d(69): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp2mj9_rab.d(80): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2mj9_rab.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tstd.csort(l);\n\tmax =\
    \ l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\t\tif(l[i] > max)\n\t\t\tmax =\
    \ l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfavpqzft.d(9): Error: undefined identifier `csort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfavpqzft.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tlong i;\n\tfor(i = 0;\
    \ i < (long)l.length; i++) \n\t{\n\t\tif(l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuunt3cee.d(10): Error: C style cast illegal, use `cast(long)l.length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuunt3cee.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tfor(i=0;i<l.length;i++){\n\
    \t\tif(l[i]>max){\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint\
    \ i;\n\tlong min;\n\tfor(i=0;i<l.length;i++){\n\t\tif(l[i]<min){\n\t\t\tmin=l[i];\n\
    \t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n  \
    \          \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum=0;\n\tfor(i=0;i<l.length;i++){\n\
    \t\tsum+=l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n            \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod=1;\n\
    \tfor(i=0;i<l.length;i++){\n\t\tprod*=l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<l.length;i++){\n\t\tabs=abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_sum(long[] l) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<l.length;i++){\n\
    \t\tabs=abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_prod(long[] l) \n{\n\tint i;\n\tlong\
    \ abs=1;\n\tfor(i=0;i<l.length;i++){\n\t\tabs*=l[i];\n\t}\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nlong\
    \ abs_max(long[] l) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<l.length;i++){\n\
    \t\tabs=max(abs,l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_min(long[] l) \n{\n\tint i;\n\
    \tlong abs=0;\n\tfor(i=0;i<l.length;i++){\n\t\tabs=min(abs,l[i]);\n\t}\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nlong abs_avg(long[] l\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3sh579a1.d(128): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3sh579a1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\
    \t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n        \
    \    \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int i =\
    \ 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n  \
    \          \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tprod\
    \ *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\t\
    prod *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat prod = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\t\
    prod *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor(i=1; i<l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor(i=1;\
    \ i<l.length; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_elements(long[] l) \n{\n\tint i;\n\tlong sum;\n\tsum = 0;\n\tfor(i=0; i<l.length;\
    \ i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\
    \tlong prod;\n\tprod = 1;\n\tfor(i=0; i<l.length; i++)\n\t\tprod *= l[i];\n\t\
    return prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    double sum_elements(double[] l) \n{\n\tint i;\n\tdouble sum;\n\tsum = 0;\n\tfor(i=0;\
    \ i<l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tint i;\n\tdouble prod;\n\tprod = 1;\n\tfor(i=0; i<l.length; i++)\n\
    \t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tint i;\n\tfloat sum;\n\
    \tsum = 0;\n\tfor(i=0; i<l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat prod;\n\tprod = 1;\n\tfor(i=0; i<l.length; i++)\n\t\
    \tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = 0;\n\tfor(i =\
    \ 0; i < l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = 0;\n\tfor(i = 0; i < l.length; i++)\n\t{\n\t\t\
    if(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    int i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong product_element(long[] l) \n{\n\tint i;\n\tlong product = 1;\n\tfor(i\
    \ = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ sum of all elements in the list with specified type.\n            \n*/\nlong\
    \ sum_elements(long[] l, int type) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0;\
    \ i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list with specified type.\n            \n*/\nlong product_elements(long[]\
    \ l, int type) \n{\n\tint i;\n\tlong product = 1;\n\tfor(i = 0; i < l.length;\
    \ i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n            \n*/\ndouble sum_elements(double[]\
    \ l, int type) \n{\n\tint i;\n\tdouble sum = 0;\n\tfor(i = 0; i < l.length; i++)\n\
    \t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list with specified type.\n            \n*/\ndouble product_elements(double[]\
    \ l, int type) \n{\n\tint i;\n\tdouble product = 1;\n\tfor(i = 0; i < l.length;\
    \ i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n            \n*/\nfloat sum_elements(float[]\
    \ l, int type) \n{\n\tint i;\n\tfloat sum = 0;\n\tfor(i = 0; i < l.length; i++)\n\
    \t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list with specified type.\n            \n*/\nfloat product_elements(float[]\
    \ l, int type) \n{\n\tint i;\n\tfloat product = 1;\n\tfor(i = 0; i < \nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp753oqnpl.d(125): Error: expression expected, not `unittest`

    /tmp/tmp753oqnpl.d(126): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp753oqnpl.d(127): Error: expression expected, not `alias`

    /tmp/tmp753oqnpl.d(127): Error: found `candidate` when expecting `)`

    /tmp/tmp753oqnpl.d(127): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp753oqnpl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\t\n\tmax = l[0];\n\
    \tfor(i=1; i<l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\
    \treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long prod_element(long[] l) \n{\n\tlong prod = 1;\n\tlong i;\n\tfor (i = 0; i\
    \ < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_element2(long[] l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ ++i)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_element3(long[] l) \n{\n\t\
    long i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element4(long[] l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\
    \t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element5(long[] l) \n{\n\tlong i;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nlong abs_element6(long[]\
    \ l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_element7(long[] l) \n{\n\t\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqpteb484.d(125): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpteb484.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = 0;\n\tfor(i =\
    \ 0; i < l.length; ++i)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\t\
    if(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    int i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong product_element(long[] l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor(i =\
    \ 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tint i;\n\tdouble sum = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements(double[] l) \n{\n\tint i;\n\tdouble\
    \ prod = 1;\n\tfor(i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat sum = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nfloat product_elements(float[] l) \n{\n\tint i;\n\tfloat prod\
    \ = 1;\n\tfor(i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nunittest\n{\n \
    \   alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor(i=1;\
    \ i<l.length; i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    /*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor(i=1; i<l.length; i++)\n\t\tif(l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong product = 1;\n\tfor(i=1; i<l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list with\
    \ specified type.\n            \n*/\nlong sum_elements(long[] l, int type) \n\
    {\n\tint i;\n\tlong sum = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tif(type == 0)\n\
    \t\t\tsum += l[i];\n\t\telse if(type == 1)\n\t\t\tsum += l[i] * l[i];\n\t\telse\
    \ if(type == 2)\n\t\t\tsum += l[i] * l[i] * l[i];\n\t\telse if(type == 3)\n\t\t\
    \tsum += l[i] * l[i] * l[i] * l[i];\n\t\telse if(type == 4)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if(type == 5)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if(type == 6)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if(type == 7)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if(type == 8)\n\t\
    \t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\t\
    else if(type == 9)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i]\
    \ * l[i] * l[i] * l[i];\n\t\telse if(type == 10)\n\t\t\tsum += l[i] * l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp403rghou.d(83): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp403rghou.d(90): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp403rghou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpylats5ph.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpylats5ph.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpylats5ph.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpylats5ph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i;\n\tfor(i =\
    \ 0; i < l.length; ++i)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\
    \tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n\
    {\n\tlong sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\
    \tfor(i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements_double(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements_double(double[] l) \n{\n\tdouble product\
    \ = 1;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_elements_float(float[] l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor(i\
    \ = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_elements_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i;\n\tfor (i\
    \ = 0; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tif\
    \ (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_element(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i =\
    \ 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\ndouble sum_element_double(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tdouble i;\n\tfor (i = 0; i < l.length; i++)\n\t\
    \tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_element_double(double[] l) \n{\n\tdouble product\
    \ = 1;\n\tdouble i;\n\tfor (i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\t\
    return product;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nfloat sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\tfloat i;\n\tfor\
    \ (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfloat i;\n\tfor (i = 0; i < l.length; i++)\n\
    \t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1y07u_yr.d(61): Error: cannot implicitly convert expression `i`
    of type `double` to `ulong`

    /tmp/tmp1y07u_yr.d(73): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmp1y07u_yr.d(85): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmp1y07u_yr.d(97): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1y07u_yr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor (i\
    \ = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i = 0;\n\twhile\
    \ (i < l.length) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\
    \t\ti++;\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n   \
    \         \n*/\nlong min_element(long[] l) \n{\n\tlong min = 0;\n\tlong i = 0;\n\
    \twhile (i < l.length) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\t\
    long i = 0;\n\twhile (i < l.length) \n\t{\n\t\tsum += l[i];\n\t\ti++;\n\t}\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tlong i = 0;\n\t\
    while (i < l.length) \n\t{\n\t\tproduct *= l[i];\n\t\ti++;\n\t}\n\treturn product;\n\
    }\n/*\nReturn mean of all elements in the list.\n            \n*/\ndouble mean_elements(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < l.length) \n\t{\n\t\tsum\
    \ += l[i];\n\t\ti++;\n\t}\n\treturn (double)sum / l.length;\n}\n/*\nReturn median\
    \ of all elements in the list.\n            \n*/\ndouble median_elements(long[]\
    \ l) \n{\n\tlong mid = l.length / 2;\n\tlong sum = 0;\n\tlong i = 0;\n\twhile\
    \ (i < l.length) \n\t{\n\t\tsum += l[i];\n\t\ti++;\n\t}\n\tif (l.length % 2 ==\
    \ 0) \n\t{\n\t\treturn (double)sum / mid;\n\t} \n\telse \n\t{\n\t\treturn (double)sum\
    \ / mid + l[mid];\n\t}\n}\n/*\nReturn standard deviation of all elements in the\
    \ list.\n            \n*/\ndouble std_dev_elements(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i = 0;\n\twhile (i < l.length) \n\t{\n\t\tsum += l[i] * l[i];\n\t\
    \ti++;\n\t}\n\treturn (double)Math.sqrt(sum / (l.length - 1));\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\ndouble sum_elements_double(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tlong i = 0;\n\twhile (i < l.length\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpahr8dr8m.d(81): Error: C style cast illegal, use `cast(double)sum`

    /tmp/tmpahr8dr8m.d(99): Error: C style cast illegal, use `cast(double)sum`

    /tmp/tmpahr8dr8m.d(103): Error: C style cast illegal, use `cast(double)sum`

    /tmp/tmpahr8dr8m.d(119): Error: C style cast illegal, use `cast(double)Math.sqrt(sum
    / (l.length - 1))`

    /tmp/tmpahr8dr8m.d(130): Error: found `unittest` when expecting `)`

    /tmp/tmpahr8dr8m.d(137): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpahr8dr8m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tstd.sort(l);\n\tmax =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5b6xw3d0.d(9): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5b6xw3d0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor(i\
    \ = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t\
    }\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor(i = 1; i <\
    \ l.length; i++){\n\t\tif(l[i] < min){\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_element(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length;\
    \ i++){\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\
    \tlong product = 1;\n\tfor(i = 0; i < l.length; i++){\n\t\tproduct *= l[i];\n\t\
    }\n\treturn product;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs = 0;\n\
    \tfor(i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor(i = 0; i < l.length;\
    \ i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_element(float[] l)\
    \ \n{\n\tint i;\n\tfloat abs = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tabs =\
    \ abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppjzcwjj0.d(67): Error: function expected before `()`, not `abs`
    of type `long`

    /tmp/tmppjzcwjj0.d(80): Error: function expected before `()`, not `abs` of type
    `double`

    /tmp/tmppjzcwjj0.d(93): Error: function expected before `()`, not `abs` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjzcwjj0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\t\
    int i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\tlong product;\n\
    \tproduct = 1;\n\tfor (i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn absolute value of all elements in the list.\n      \
    \      \n*/\nlong abs_elements(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_elements(double[] l) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor (i\
    \ = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nfloat abs_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\
    \t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong long abs_elements(long long[]\
    \ l) \n{\n\tint i;\n\tlong long abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length;\
    \ ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\ndouble abs_elements(double[]\
    \ l, int size) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor (i = 0; i < size;\
    \ ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn \nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgajlaq_m.d(99): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmpgajlaq_m.d(99): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpgajlaq_m.d(102): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpgajlaq_m.d(121): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgajlaq_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor(int i = 1;\
    \ i < l.length; i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    /*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor(int i = 1; i < l.length; i++)\n\t\tif(l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_array(long[] l) \n{\n\tlong sum = 0;\n\
    \tfor(int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nlong prod_array(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor(int i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\
    \treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\ndouble sum_array(double[] l) \n{\n\tdouble sum = 0;\n\tfor(int i = 0; i <\
    \ l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all\
    \ elements in the list.\n            \n*/\ndouble prod_array(double[] l) \n{\n\
    \tdouble prod = 1;\n\tfor(int i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\t\
    return prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_array(float[] l) \n{\n\tfloat sum = 0;\n\tfor(int i = 0; i < l.length;\
    \ i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nfloat prod_array(float[] l) \n{\n\tfloat prod\
    \ = 1;\n\tfor(int i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_element(float[] l)\
    \ \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4m5wgn_q.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp4m5wgn_q.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp4m5wgn_q.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4m5wgn_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tmax = l[0];\n\tfor(int\
    \ i=1; i<l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_array(long[] l) \n{\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nlong product_array(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\ndouble sum_array(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\ndouble product_array(double[]\
    \ l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\nfloat sum_array(float[] l) \n{\n\tfloat sum = 0;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_array(float[]\
    \ l) \n{\n\tfloat prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor(i\
    \ = 1; i < l.length; ++i)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor(i = 1; i < l.length; ++i)\n\t\t\
    if(l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong product = 1;\n\tfor(i = 0; i < l.length; ++i)\n\t\t\
    product *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\t\
    long abs = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\t\
    return abs;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_max(long[] l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor(i =\
    \ 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_min(long[]\
    \ l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tabs\
    \ = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_sum(long[] l) \n{\n\tint i;\n\tlong\
    \ abs = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nlong abs_product(long[] l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor(i =\
    \ 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_max(long[]\
    \ l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor(i = 0; i < l.length; ++i)\n\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpst3efy_w.d(122): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpst3efy_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong\
    \ min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i <\
    \ l.length; i++) {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\t\
    long i;\n\tfor (i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor (i = 0;\
    \ i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++) \n\t\tif (l[i] > max) \n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++) \n\t\tif (l[i]\
    \ < min) \n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_element_double(double[] l) \n{\n\tdouble sum = 0;\n\
    \tfor (int i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\ndouble product_element_double(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\t\
    for (int i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor(i\
    \ = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t\
    }\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor(i = 1; i <\
    \ l.length; i++){\n\t\tif(l[i] < min){\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_element(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length;\
    \ i++){\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\t\
    long prod = 1;\n\tfor(i = 0; i < l.length; i++){\n\t\tprod *= l[i];\n\t}\n\treturn\
    \ prod;\n}\n/*\nReturn absolute value of all elements in the list.\n         \
    \   \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor(i =\
    \ 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\t\
    abs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\
    \tfloat abs = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t}\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmperam37ko.d(67): Error: function expected before `()`, not `abs`
    of type `long`

    /tmp/tmperam37ko.d(80): Error: function expected before `()`, not `abs` of type
    `double`

    /tmp/tmperam37ko.d(93): Error: function expected before `()`, not `abs` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmperam37ko.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max_val;\n\t\n\tmax_val\
    \ = l[0];\n\tfor(i = 1; i < l.length; i++){\n\t\tif(l[i] > max_val)\n\t\t\tmax_val\
    \ = l[i];\n\t}\n\treturn max_val;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_element(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i =\
    \ 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\ndouble abs_element(double[] l) \n{\n\tdouble i;\n\tfor (i = 0; i\
    \ < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz05stdbn.d(61): Error: cannot implicitly convert expression `l`
    of type `long[]` to `long`

    /tmp/tmpz05stdbn.d(71): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmpz05stdbn.d(72): Error: cannot implicitly convert expression `l` of type
    `double[]` to `double`

    /tmp/tmpz05stdbn.d(82): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmpz05stdbn.d(83): Error: cannot implicitly convert expression `l` of type
    `float[]` to `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz05stdbn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor (i\
    \ = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n \
    \           \n*/\ndouble sum_element_double(double[] l) \n{\n\tint i;\n\tdouble\
    \ sum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\ndouble product_element_double(double[]\
    \ l) \n{\n\tint i;\n\tdouble prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_element_float(float[] l) \n{\n\tint i;\n\tfloat sum\
    \ = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tint i;\n\tfloat prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\t\n\tmax = l[0];\n\
    \t\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\t\
    max = l[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}\n/*\nReturn minimum element in the\
    \ list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\
    \t\n\tmin = l[0];\n\t\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] <\
    \ min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\t\n\treturn min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tint i;\n\tlong sum;\n\t\n\tsum = 0;\n\t\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tsum += l[i];\n\t}\n\t\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong prod_element(long[] l)\
    \ \n{\n\tint i;\n\tlong prod;\n\t\n\tprod = 1;\n\t\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tprod *= l[i];\n\t}\n\t\n\treturn prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs;\n\t\n\tabs = 0;\n\t\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tabs += l[i];\n\t}\n\t\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tint i;\n\tdouble abs;\n\t\n\tabs = 0;\n\t\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tabs += l[i];\n\t}\n\t\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs;\n\t\n\tabs = 0;\n\t\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tabs += l[i];\n\t}\n\t\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max_element = 0;\n\tlong i;\n\t\
    for(i = 0; i < l.length; ++i)\n\t{\n\t\tif(l[i] > max_element)\n\t\t\tmax_element\
    \ = l[i];\n\t}\n\treturn max_element;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tlong min_element = 0;\n\t\
    long i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tif(l[i] < min_element)\n\t\t\
    \tmin_element = l[i];\n\t}\n\treturn min_element;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\t\
    product *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\ndouble sum_element_double(double[] l) \n{\n\tdouble\
    \ sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    double product_element_double(double[] l) \n{\n\tdouble product = 1;\n\tlong i;\n\
    \tfor(i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_element_float(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nfloat product_element_float(float[] l) \n{\n\tfloat product\
    \ = 1;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor(i = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t\
    }\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n          \
    \  \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\
    \tfor(i = 1; i < l.length; i++){\n\t\tif(l[i] < min){\n\t\t\tmin = l[i];\n\t\t\
    }\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n      \
    \      \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum;\n\tsum = 0;\n\
    \tfor(i = 0; i < l.length; i++){\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong product;\n\tproduct = 1;\n\tfor(i = 0; i < l.length;\
    \ i++){\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor(i = 0; i < l.length; i++){\n\
    \t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\
    \tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tabs\
    \ = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\
    \tfloat abs;\n\tabs = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9loawk_.d(72): Error: function expected before `()`, not `abs`
    of type `long`

    /tmp/tmps9loawk_.d(86): Error: function expected before `()`, not `abs` of type
    `double`

    /tmp/tmps9loawk_.d(100): Error: function expected before `()`, not `abs` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9loawk_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tif(l[i]>max)\n\t\t\tmax=l[i];\n\t}\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint\
    \ i;\n\tlong min;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tif(l[i]<min)\n\t\t\tmin=l[i];\n\
    \t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n         \
    \   \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\tlong sum=0;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tsum+=l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\
    \tlong prod=1;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tprod*=l[i];\n\t}\n\treturn\
    \ prod;\n}\n/*\nReturn absolute value of all elements in the list.\n         \
    \   \n*/\nlong abs_elements(long[] l) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tabs=abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_elements(long[] l, int n)\
    \ \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<n;i++)\n\t{\n\t\tabs=abs(l[i]);\n\t\
    }\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_elements(long[] l, int n, int m) \n{\n\tint i;\n\t\
    long abs=0;\n\tfor(i=0;i<n;i++)\n\t{\n\t\tabs=abs(l[i]);\n\t}\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_elements(long[] l, int n, int m, int n) \n{\n\tint i;\n\tlong abs=0;\n\
    \tfor(i=0;i<n;i++)\n\t{\n\t\tabs=abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_elements(long[]\
    \ l, int n, int m, int n, int m) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<n;i++)\n\
    \t{\n\t\tabs=abs(l[i]);\n\t}\n\treturn abs;\n\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpelarq0ix.d(130): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpelarq0ix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax\
    \ = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin\
    \ = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t\
    {\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\t\
    long sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\tlong product;\n\
    \tproduct = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\ndouble sum_elements(double[] l) \n{\n\tint i;\n\tdouble sum;\n\t\
    sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    double product_elements(double[] l) \n{\n\tint i;\n\tdouble product;\n\tproduct\
    \ = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\t\
    return product;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nfloat sum_elements(float[] l) \n{\n\tint i;\n\tfloat sum;\n\tsum = 0;\n\t\
    for (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat product;\n\tproduct = 1;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor(i\
    \ = 1; i < l.length; i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor(i = 1; i < l.length; i++)\n\t\t\
    if(l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\t\
    long sum = 0;\n\tfor(i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor(i = 0; i < l.length; i++)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list with\
    \ given predicate.\n            \n*/\nlong sum_elements_pred(long[] l, bool pred)\
    \ \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++)\n\t\tif(pred(l[i]))\n\
    \t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list with given predicate.\n            \n*/\nlong product_elements_pred(long[]\
    \ l, bool pred) \n{\n\tint i;\n\tlong prod = 1;\n\tfor(i = 0; i < l.length; i++)\n\
    \t\tif(pred(l[i]))\n\t\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of\
    \ all elements in the list with given predicate.\n            \n*/\nlong sum_elements_not_pred(long[]\
    \ l, bool pred) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++)\n\
    \t\tif(!pred(l[i]))\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list with given predicate.\n            \n*/\nlong product_elements_not_pred(long[]\
    \ l, bool pred) \n{\n\tint i;\n\tlong prod = 1;\n\tfor(i = 0; i < l.length; i++)\n\
    \t\tif(!pred(l[i]))\n\t\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of\
    \ all elements in the list with given predicate.\n            \n*/\nlong sum_elements_not_pred(long[]\
    \ l, bool pred, long init) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length;\
    \ i++)\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66imgucy.d(113): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66imgucy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tstd.sort(l);\n\tmax =\
    \ l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\t\tif(l[i] > max)\n\t\t\tmax =\
    \ l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n         \
    \   \n*/\nlong min_element(long[] l) \n{\n\tlong min;\n\tstd.sort(l);\n\tmin =\
    \ l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\t\tif(l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor(int i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nlong prod_element(long[] l) \n\
    {\n\tlong prod = 1;\n\tfor(int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\t\
    return prod;\n}\n/*\nReturn absolute value of all elements in the list.\n    \
    \        \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor(int i =\
    \ 0; i < l.length; ++i)\n\t\tabs = l[i] < 0 ? -l[i] : l[i];\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor(int i = 0; i < l.length;\
    \ ++i)\n\t\tabs = l[i] < 0 ? -l[i] : l[i];\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor(int i = 0; i < l.length; ++i)\n\t\tabs = l[i]\
    \ < 0 ? -l[i] : l[i];\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91m_6mcj.d(9): Error: undefined identifier `sort` in package `std`

    /tmp/tmp91m_6mcj.d(23): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91m_6mcj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i=1; i<l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i=1; i<l.length; i++)\n\
    \t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    int i;\n\tlong sum;\n\tsum = 0;\n\tfor (i=1; i<l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod;\n\tprod = 1;\n\
    \tfor (i=1; i<l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor (i=1; i<l.length; i++)\n\t\t\
    abs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\
    \tdouble abs;\n\tabs = 0;\n\tfor (i=1; i<l.length; i++)\n\t\tabs = max(abs, l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs;\n\tabs\
    \ = 0;\n\tfor (i=1; i<l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgyld7vhj.d(66): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpgyld7vhj.d(79): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpgyld7vhj.d(92): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgyld7vhj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tstd.sort(l);\n\tmax =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i] > max) {\n\t\t\t\
    max = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate =\
    \ max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwx7r3955.d(9): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwx7r3955.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t\
    }\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n          \
    \  \n*/\nlong min_element(long[] l) \n{\n\tlong min = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t\
    }\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n      \
    \      \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tprod\
    \ *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs = l[i] < 0 ? -l[i] :\
    \ l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs = l[i] < 0 ? -l[i] :\
    \ l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs = l[i] < 0 ? -l[i] : l[i];\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i = 0;\n\twhile\
    \ (i < l.length) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\
    \t\ti++;\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n   \
    \         \n*/\nlong min_element(long[] l) \n{\n\tlong min = 0;\n\tlong i = 0;\n\
    \twhile (i < l.length) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\t\
    long i = 0;\n\twhile (i < l.length) \n\t{\n\t\tsum += l[i];\n\t\ti++;\n\t}\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong product_element(long[] l) \n{\n\tlong product = 1;\n\tlong i = 0;\n\t\
    while (i < l.length) \n\t{\n\t\tproduct *= l[i];\n\t\ti++;\n\t}\n\treturn product;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element(long[] l) \n{\n\tlong i = 0;\n\tlong sum = 0;\n\twhile (i < l.length)\
    \ \n\t{\n\t\tsum += l[i];\n\t\ti++;\n\t}\n\treturn sum;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble i = 0;\n\tdouble sum = 0;\n\twhile (i < l.length) \n\t{\n\t\
    \tsum += l[i];\n\t\ti++;\n\t}\n\treturn sum;\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/\nfloat abs_element(float[] l) \n\
    {\n\tfloat i = 0;\n\tfloat sum = 0;\n\twhile (i < l.length) \n\t{\n\t\tsum +=\
    \ l[i];\n\t\ti++;\n\t}\n\treturn sum;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpddd2tlo3.d(93): Error: cannot implicitly convert expression `i`
    of type `double` to `ulong`

    /tmp/tmpddd2tlo3.d(108): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpddd2tlo3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t\
    }\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tlong i;\n\tfor(i = 0;\
    \ i < (long)l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t\
    }\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdfgt7nxq.d(10): Error: C style cast illegal, use `cast(long)l.length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdfgt7nxq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor(i\
    \ = 1; i < l.length; i++) \n\t{\n\t\tif(l[i] > max) \n\t\t\tmax = l[i];\n\t}\n\
    \treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong\
    \ min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i <\
    \ l.length; i++) {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_array(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong prod_array(long[] l) \n{\n\tlong prod = 1;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_array(long[]\
    \ l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\ndouble abs_array(double[] l) \n{\n\tdouble i;\n\tfor (i = 0; i <\
    \ l.length; i++)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_array(float[] l) \n\
    {\n\tfloat i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\treturn\
    \ l;\n}\n/*\nReturn absolute value of all elements in the list.\n            \n\
    */\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9p_hhhx3.d(63): Error: cannot implicitly convert expression `l`
    of type `long[]` to `long`

    /tmp/tmp9p_hhhx3.d(73): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmp9p_hhhx3.d(74): Error: cannot implicitly convert expression `l` of type
    `double[]` to `double`

    /tmp/tmp9p_hhhx3.d(84): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmp9p_hhhx3.d(85): Error: cannot implicitly convert expression `l` of type
    `float[]` to `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9p_hhhx3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\t\n\t\
    for (i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\
    }\n\t\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n           \
    \ \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min = l[0];\n\t\n\tfor\
    \ (i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\
    }\n\t\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n       \
    \     \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\t\n\t\
    for (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\t\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\t\n\tfor (i = 0; i < l.length; i++)\n\t\
    \tprod *= l[i];\n\t\n\treturn prod;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\t\
    long abs = 0;\n\t\n\tfor (i = 0; i < l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\
    \t\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble abs\
    \ = 0;\n\t\n\tfor (i = 0; i < l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\
    \t\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs = 0;\n\
    \t\n\tfor (i = 0; i < l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\t\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbcy2upn0.d(74): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpbcy2upn0.d(88): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpbcy2upn0.d(102): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcy2upn0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax\
    \ = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin\
    \ = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t\
    {\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\tlong product;\n\t\
    product = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t\
    }\n\treturn product;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs\
    \ = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tabs = abs(l[i]);\n\t}\n\t\
    return abs;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_max(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = l[0];\n\
    \tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > abs) \n\t\t{\n\t\t\tabs\
    \ = l[i];\n\t\t}\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_min(long[] l) \n{\n\tint i;\n\tlong\
    \ abs;\n\tabs = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] <\
    \ abs) \n\t\t{\n\t\t\tabs = l[i];\n\t\t}\n\t}\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_sum(long[] l)\
    \ \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\nunittest\n{\n    alias candidate = max_element;\n\n \
    \   assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqlr_spua.d(134): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqlr_spua.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor(int i = 1;\
    \ i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\t\
    return max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong\
    \ min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor(int i = 1; i < l.length;\
    \ i++){\n\t\tif(l[i] < min){\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor(int i = 0; i < l.length; i++){\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tfor(int\
    \ i = 0; i < l.length; i++){\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nlong\
    \ abs_elements(long[] l) \n{\n\tlong abs = 0;\n\tfor(int i = 0; i < l.length;\
    \ i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\ndouble abs_elements(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor(int i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_elements(float[] l) \n{\n\tfloat abs = 0;\n\tfor(int\
    \ i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ai1d8bl.d(62): Error: function expected before `()`, not `abs`
    of type `long`

    /tmp/tmp3ai1d8bl.d(74): Error: function expected before `()`, not `abs` of type
    `double`

    /tmp/tmp3ai1d8bl.d(86): Error: function expected before `()`, not `abs` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ai1d8bl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor (i\
    \ = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n \
    \           \n*/\ndouble sum_elements(double[] l) \n{\n\tint i;\n\tdouble sum\
    \ = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tint i;\n\tdouble prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tint i;\n\tfloat sum =\
    \ 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\t\
    for (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin =\
    \ l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list that are less than the given value.\n            \n*/\nlong sum_element_less_than(long[]\
    \ l, long value) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] < value) \n\t\t{\n\t\t\tsum += l[i];\n\t\t}\n\t}\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list that are less than\
    \ the given value.\n            \n*/\nlong product_element_less_than(long[] l,\
    \ long value) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] < value) \n\t\t{\n\t\t\tproduct *= l[i];\n\t\t}\n\t\
    }\n\treturn product;\n}\n/*\nReturn sum of all elements in the list that are greater\
    \ than the given value.\n            \n*/\nlong sum_element_greater_than(long[]\
    \ l, long value) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] > value) \n\t\t{\n\t\t\tsum += l[i];\n\t\t}\n\t}\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list that are greater\
    \ than the given value.\n            \n*/\nlong product_element_greater_than(long[]\
    \ l, long value) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] > value) \n\t\t{\n\t\t\tproduct *= l[i];\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprga9lkhb.d(128): Error: found `unittest` instead of statement

    /tmp/tmprga9lkhb.d(135): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmprga9lkhb.d(135): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprga9lkhb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tstd.sort(l);\n\tmax =\
    \ l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\t\tif(l[i] > max)\n\t\t\tmax =\
    \ l[i];\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoox0_qcv.d(9): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoox0_qcv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\
    }\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i\
    \ < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tlong product\
    \ = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\t\
    return product;\n}\n/*\nReturn absolute value of all elements in the list.\n \
    \           \n*/\nlong abs_element(long[] l) \n{\n\tlong i;\n\tlong sum = 0;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i] * l[i];\n\treturn sum;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nlong\
    \ abs_sum(long[] l) \n{\n\tlong i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length;\
    \ ++i)\n\t\tsum += l[i] * l[i];\n\treturn sum;\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/\nlong abs_product(long[] l) \n{\n\
    \tlong i;\n\tlong product = 1;\n\tfor (i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i] * l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_max(long[] l) \n{\n\tlong i;\n\tlong\
    \ max = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax =\
    \ l[i];\n\treturn max;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_min(long[] l) \n{\n\tlong i;\n\tlong min = 0;\n\t\
    for (i = 0; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn\
    \ min;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nlong abs_sum(long[] l) \n{\n\tlong i;\n\tlong \nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp20s1st6w.d(126): Error: no identifier for declarator `long`

    /tmp/tmp20s1st6w.d(126): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20s1st6w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tstd.csort(l);\n\tmax =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n       \
    \     \n*/\nlong min_element(long[] l) \n{\n\tlong min;\n\tstd.csort(l);\n\tmin\
    \ = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin\
    \ = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nlong sum_array(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i =\
    \ 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\ndouble sum_array(double[] l) \n\
    {\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nfloat sum_array(float[] l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/\nlong sum_array(int[] l) \n{\n\tlong sum = 0;\n\t\
    for (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\ndouble sum_array(double2[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum +=\
    \ l[i].x;\n\treturn sum;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nfloat sum_array(float2[] l) \n{\n\tfloat sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i].x;\n\treturn sum;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\nlong sum_array(int2[] l)\
    \ \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i].x;\n\
    \treturn sum;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\ndouble sum_array(double3[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i\
    \ < l.length; ++i)\n\t\tsum += l[i].x;\n\treturn sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nfloat sum_array(\nunittest\n{\n   \
    \ alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiutqgw07.d(123): Error: basic type expected, not `unittest`

    /tmp/tmpiutqgw07.d(123): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiutqgw07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max_val = l[0];\n\tlong max_idx\
    \ = 1;\n\tfor(int i = 1; i < l.length; ++i)\n\t{\n\t\tif(l[i] > max_val)\n\t\t\
    {\n\t\t\tmax_val = l[i];\n\t\t\tmax_idx = i;\n\t\t}\n\t}\n\treturn max_idx;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu62b9726.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x428125]

    ??:? void tmpu62b9726.__unittest_L20_C1() [0x427e03]

    ??:? void tmpu62b9726.__modtest() [0x427ea4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c183]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b016]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4301a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430658]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430135]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]

    ??:? runModuleUnitTests [0x42bf59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list with specified\
    \ type.\n            \n*/\nlong sum_elements(long[] l, int type) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tif (type == 0)\n\t\t\tsum +=\
    \ l[i];\n\t\telse if (type == 1)\n\t\t\tsum += l[i] * l[i];\n\t\telse if (type\
    \ == 2)\n\t\t\tsum += l[i] * l[i] * l[i];\n\t\telse if (type == 3)\n\t\t\tsum\
    \ += l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 4)\n\t\t\tsum += l[i] *\
    \ l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 5)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 6)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 7)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 8)\n\
    \t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\
    \telse if (type == 9)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] *\
    \ l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 10)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if\
    \ (type == 11)\n\t\t\tsum += l[i]\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0mcfuhlx.d(80): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp0mcfuhlx.d(87): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0mcfuhlx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor(i=1;\
    \ i<l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor (i\
    \ = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min = l[0];\n\t\
    for (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin =\
    \ l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\
    \t\tprod *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn square root of sum of all\
    \ elements in the list.\n            \n*/\ndouble sqrt(long sum) \n{\n\tdouble\
    \ root;\n\troot = sqrt(sum);\n\treturn root;\n}\n/*\nReturn square root of product\
    \ of all elements in the list.\n            \n*/\ndouble sqrt(long prod) \n{\n\
    \tdouble root;\n\troot = sqrt(prod);\n\treturn root;\n}\n/*\nReturn square root\
    \ of sum of all elements in the list.\n            \n*/\ndouble sqrt(double sum)\
    \ \n{\n\tdouble root;\n\troot = sqrt(sum);\n\treturn root;\n}\n/*\nReturn square\
    \ root of product of all elements in the list.\n            \n*/\ndouble sqrt(double\
    \ prod) \n{\n\tdouble root;\n\troot = sqrt(prod);\n\treturn root;\n}\n/*\nReturn\
    \ square root of sum of all elements in the list.\n            \n*/\ndouble sqrt(int\
    \ sum) \n{\n\tdouble root;\n\troot = sqrt(sum);\n\treturn root;\n}\n/*\nReturn\
    \ square root of product of all elements in the list.\n            \n*/\ndouble\
    \ sqrt(int prod) \n{\n\tdouble root;\n\troot = sqrt(prod);\n\treturn root;\n}\n\
    /*\nReturn square root of sum of all elements in the list.\n            \n*/\n\
    double sqrt(short sum) \n{\n\tdouble root;\n\troot = sqrt(sum);\n\treturn root;\n\
    }\n/*\n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy93x8hgr.d(134): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy93x8hgr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t\
    }\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tstd.carray<long,\
    \ 1> a(l);\n\tmax = a[0];\n\tfor(i = 1; i < a.length; i++)\n\t{\n\t\tif(a[i] >\
    \ max)\n\t\t\tmax = a[i];\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbn21etrv.d(10): Error: found `,` when expecting `.` following long

    /tmp/tmpbn21etrv.d(10): Error: found `1` when expecting identifier following `long`.

    /tmp/tmpbn21etrv.d(10): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbn21etrv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\t\
    for (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin =\
    \ l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_element(long[] l) \n\
    {\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tl[i] = abs(l[i]);\n\t\
    }\n\treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n  \
    \          \n*/\nlong abs_element_long(long[] l) \n{\n\tlong i;\n\tfor (i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element_double(double[]\
    \ l) \n{\n\tdouble i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tl[i] = abs(l[i]);\n\
    \t}\n\treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element_float(float[] l) \n{\n\tfloat i;\n\tfor (i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpney2skto.d(75): Error: cannot implicitly convert expression `l`
    of type `long[]` to `long`

    /tmp/tmpney2skto.d(88): Error: cannot implicitly convert expression `l` of type
    `long[]` to `long`

    /tmp/tmpney2skto.d(99): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmpney2skto.d(101): Error: cannot implicitly convert expression `l` of type
    `double[]` to `double`

    /tmp/tmpney2skto.d(112): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmpney2skto.d(114): Error: cannot implicitly convert expression `l` of type
    `float[]` to `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpney2skto.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax\
    \ = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin\
    \ = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t\
    {\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\tlong prod;\n\tprod\
    \ = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tprod *= l[i];\n\t}\n\treturn\
    \ prod;\n}\n/*\nReturn absolute value of all elements in the list.\n         \
    \   \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\t\
    for (i = 0; i < l.length; i++) \n\t{\n\t\tabs += l[i] * l[i];\n\t}\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double[] l) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor\
    \ (i = 0; i < l.length; i++) \n\t{\n\t\tabs += l[i] * l[i];\n\t}\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    float abs_element(float[] l) \n{\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tabs += l[i] * l[i];\n\t}\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_element(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i =\
    \ 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum\
    \ += l[i] * l[i];\n\treturn sum;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble\
    \ i;\n\tdouble sum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i] * l[i];\n\
    \treturn sum;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tfloat i;\n\tfloat sum = 0;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i] * l[i];\n\treturn sum;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyby1y_2v.d(73): Error: cannot implicitly convert expression `i`
    of type `double` to `ulong`

    /tmp/tmpyby1y_2v.d(73): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmpyby1y_2v.d(85): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmpyby1y_2v.d(85): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyby1y_2v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max_val = 0;\n\tlong max_pos =\
    \ 0;\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] > max_val)\n\t\t{\n\
    \t\t\tmax_val = l[i];\n\t\t\tmax_pos = i;\n\t\t}\n\t}\n\treturn max_pos;\n}\n\
    /*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min_val = 0;\n\tlong min_pos = 0;\n\tfor(int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tif(l[i] < min_val)\n\t\t{\n\t\t\tmin_val = l[i];\n\t\t\tmin_pos\
    \ = i;\n\t\t}\n\t}\n\treturn min_pos;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\t\
    for(int i = 0; i < l.length; i++)\n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\t\
    product *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum\
    \ = 0;\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    double product_elements(double[] l) \n{\n\tdouble product = 1;\n\tfor(int i =\
    \ 0; i < l.length; i++)\n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_elements(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tsum\
    \ += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nfloat product_elements(float[] l) \n{\n\tfloat product = 1;\n\
    \tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpayipemhq.d(124): unittest failure

    ----------------

    ??:? _d_unittestp [0x428605]

    ??:? void tmpayipemhq.__unittest_L120_C1() [0x4282e7]

    ??:? void tmpayipemhq.__modtest() [0x428388]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c663]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b4f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430689]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b38]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430615]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b4cd]

    ??:? runModuleUnitTests [0x42c439]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ac8]

    ??:? void rt.dmain2._d'
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list with\
    \ specified type.\n            \n*/\nlong sum_elements(long[] l, int type) \n\
    {\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tif (type == 0)\n\
    \t\t\tsum += l[i];\n\t\telse if (type == 1)\n\t\t\tsum += l[i] * l[i];\n\t\telse\
    \ if (type == 2)\n\t\t\tsum += l[i] * l[i] * l[i];\n\t\telse if (type == 3)\n\t\
    \t\tsum += l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 4)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 5)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 6)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 7)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 8)\n\
    \t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\
    \telse if (type == 9)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] *\
    \ l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 10)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if\
    \ (type == 11)\n\t\t\tsum += l[i]\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp83lgd2zs.d(80): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp83lgd2zs.d(87): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp83lgd2zs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n\
    */\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor\
    \ (i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\
    }\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n           \
    \ \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor (i =\
    \ 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; ++i)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list divided\
    \ by number of elements in the list.\n            \n*/\ndouble sum_elements_divided_by_elements(long[]\
    \ l, int n) \n{\n\tint i;\n\tdouble sum = 0;\n\tfor (i = 0; i < n; ++i)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list\
    \ divided by number of elements in the list.\n            \n*/\ndouble product_elements_divided_by_elements(long[]\
    \ l, int n) \n{\n\tint i;\n\tdouble prod = 1;\n\tfor (i = 0; i < n; ++i)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list divided\
    \ by number of elements in the list.\n            \n*/\nfloat sum_elements_divided_by_elements(long[]\
    \ l, int n) \n{\n\tint i;\n\tfloat sum = 0;\n\tfor (i = 0; i < n; ++i)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list divided\
    \ by number of elements in the list.\n            \n*/\nfloat product_elements_divided_by_elements(long[]\
    \ l, int n) \n{\n\tint i;\n\tfloat prod = 1;\n\tfor (i = 0; i < n; ++i)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list divided\
    \ by number of elements in the list.\n            \n*/\ndouble sum_elements_divided_by_elements(double[]\
    \ l, int n) \n{\n\tint i;\n\tdouble sum = 0;\n\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe_seq2n3.d(115): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_seq2n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements_double(double[] l) \n{\n\tdouble sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\ndouble product_elements_double(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements_float(float[] l) \n{\n\tfloat sum = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nfloat product_elements_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpywu08bf7.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpywu08bf7.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpywu08bf7.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpywu08bf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_elements(long[] l) \n{\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i] * l[i];\n\treturn sum;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i <\
    \ l.length; ++i)\n\t\tsum += l[i] * l[i];\n\treturn sum;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_elements(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i]\
    \ * l[i];\n\treturn sum;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnplq6kce.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpnplq6kce.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpnplq6kce.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnplq6kce.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long prod_element(long[] l) \n{\n\tlong prod = 1;\n\tlong i;\n\tfor (i = 0; i\
    \ < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_sum(long[] l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++)\n\t\tl[i] = abs(l[i]);\n\treturn sum_element(l);\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_prod(long[] l)\
    \ \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\t\
    return prod_element(l);\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_max(long[] l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++)\n\t\tl[i] = abs(l[i]);\n\treturn max_element(l);\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_min(long[] l)\
    \ \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\t\
    return min_element(l);\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_avg(long[] l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++)\n\t\tl[i] = abs(l[i]);\n\treturn sum_element(l) / l.length;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_max(long[]\
    \ l, long x) \n{\n\tlong i;\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpugkpbv_2.d(125): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugkpbv_2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor (i\
    \ = 1; i < l.length; i++) \n\t\tif (l[i] > max) \n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i;\n\tfor(i =\
    \ 0; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min = 0;\n\tlong i;\n\tfor(i = 0; i < l.length;\
    \ i++){\n\t\tif(l[i] < min){\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; i++){\n\t\tsum\
    \ += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong prod_element(long[] l) \n{\n\tlong prod = 1;\n\tlong i;\n\
    \tfor(i = 0; i < l.length; i++){\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nlong\
    \ abs_element(long[] l) \n{\n\tlong i;\n\tfor(i = 0; i < l.length; i++){\n\t\t\
    l[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element_long(long[] l) \n{\n\tlong\
    \ i;\n\tfor(i = 0; i < l.length; i++){\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element_int(long[] l) \n{\n\tlong i;\n\tfor(i = 0; i < l.length; i++){\n\
    \t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element_double(long[] l) \n{\n\tlong\
    \ i;\n\tfor(i = 0; i < l.length; i++){\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element_float(long[] l) \n{\n\tlong i;\n\tfor(i = 0; i < l.length; i++){\n\
    \t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element_byte(long[] l) \n{\n\tlong\
    \ i;\n\tfor(i = 0; i < l.length; i++){\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn \n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdao1yvlu.d(129): Error: expression expected, not `unittest`

    /tmp/tmpdao1yvlu.d(130): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdao1yvlu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tstd.csort(l);\n\tmax =\
    \ l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\t\tif(l[i] > max)\n\t\t\tmax =\
    \ l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n         \
    \   \n*/\nlong min_element(long[] l) \n{\n\tlong min;\n\tstd.csort(l);\n\tmin\
    \ = l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\t\tif(l[i] < min)\n\t\t\tmin\
    \ = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nlong sum_array(long[] l) \n{\n\tlong sum = 0;\n\tfor(int i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nlong prod_array(long[] l) \n{\n\
    \tlong prod = 1;\n\tfor(int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn\
    \ prod;\n}\n/*\nReturn absolute value of all elements in the list.\n         \
    \   \n*/\nlong abs_array(long[] l) \n{\n\tlong abs = 0;\n\tfor(int i = 0; i <\
    \ l.length; ++i)\n\t\tabs = std.abs(l[i]);\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\ndouble abs_array(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor(int i = 0; i < l.length; ++i)\n\t\tabs = std.abs(l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_array(float[] l) \n{\n\tfloat abs = 0;\n\tfor(int i\
    \ = 0; i < l.length; ++i)\n\t\tabs = std.abs(l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgqv3hqrl.d(9): Error: undefined identifier `csort` in package `std`

    /tmp/tmpgqv3hqrl.d(23): Error: undefined identifier `csort` in package `std`

    /tmp/tmpgqv3hqrl.d(60): Error: undefined identifier `abs` in package `std`

    /tmp/tmpgqv3hqrl.d(71): Error: undefined identifier `abs` in package `std`

    /tmp/tmpgqv3hqrl.d(82): Error: undefined identifier `abs` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgqv3hqrl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l));\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tabs = max(abs, abs(l));\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_element(float l) \n\
    {\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ abs(l));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2eb1ww26.d(114): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2eb1ww26.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor (i\
    \ = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs\
    \ = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor\
    \ (i = 0; i < l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    float abs_element(float[] l) \n{\n\tint i;\n\tfloat abs = 0;\n\tfor (i = 0; i\
    \ < l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong long abs_element(long\
    \ long[] l) \n{\n\tint i;\n\tlong long abs = 0;\n\tfor (i = 0; i < l.length; i++)\n\
    \t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/\ndouble abs_element(double[] l,\
    \ int i) \n{\n\tint j;\n\tdouble abs = 0;\n\tfor (j = 0; j < i; j++)\n\t\tabs\
    \ = max(abs, abs(l[j]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nfloat abs_element(float[] l, int i) \n{\n\t\
    int j;\n\tfloat abs = 0;\n\tfor (j = 0; j < i; j++)\n\t\tabs = max(\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpau4102yf.d(92): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmpau4102yf.d(92): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpau4102yf.d(95): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpau4102yf.d(122): Error: expression expected, not `unittest`

    /tmp/tmpau4102yf.d(123): Error: found `{` when expecting `,`

    /tmp/tmpau4102yf.d(124): Error: expression expected, not `alias`

    /tmp/tmpau4102yf.d(124): Error: found `candidate` when expecting `,`

    /tmp/tmpau4102yf.d(124): Error: expression expected, not `=`

    /tmp/tmpau4102yf.d(124): Error: found `max_element` when expecting `,`

    /tmp/tmpau4102yf.d(124): Error: expression expected, not `;`

    /tmp/tmpau4102yf.d(126): Error: found `assert` when expecting `,`

    /tmp/tmpau4102yf.d(126): Error: found `;` when expecting `,`

    /tmp/tmpau4102yf.d(127): Error: found `;` when expecting `,`

    /tmp/tmpau4102yf.d(128): Error: expression expected, not `}`

    /tmp/tmpau4102yf.d(129): Error: found `void` when expecting `'
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor(i=1;\
    \ i<l.length; i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\t\
    for (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin =\
    \ l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_element(long[] l) \n\
    {\n\tlong i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum\
    \ += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(double[] l) \n{\n\tlong i;\n\t\
    long sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\
    \treturn sum;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nlong abs_element(float[] l) \n{\n\tlong i;\n\tlong sum = 0;\n\t\
    for (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nlong\
    \ abs_element(int[] l) \n{\n\tlong i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_element(short[] l)\
    \ \n{\n\tlong i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\t\
    sum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\n\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i = 0;\n\twhile\
    \ (i < l.length) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\ti++;\n\t}\n\t\
    return max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong\
    \ min_element(long[] l) \n{\n\tlong min = 0;\n\tlong i = 0;\n\twhile (i < l.length)\
    \ {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\ti++;\n\t}\n\treturn min;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < l.length) {\n\t\tsum +=\
    \ l[i];\n\t\ti++;\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n            \n*/\nlong prod_element(long[] l) \n{\n\tlong prod =\
    \ 1;\n\tlong i = 0;\n\twhile (i < l.length) {\n\t\tprod *= l[i];\n\t\ti++;\n\t\
    }\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong i = 0;\n\tlong abs =\
    \ 0;\n\twhile (i < l.length) {\n\t\tabs = abs(l[i]);\n\t\ti++;\n\t}\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l) \n{\n\tdouble i = 0;\n\tdouble abs = 0;\n\
    \twhile (i < l.length) {\n\t\tabs = abs(l[i]);\n\t\ti++;\n\t}\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    float abs_element(float[] l) \n{\n\tfloat i = 0;\n\tfloat abs = 0;\n\twhile (i\
    \ < l.length) {\n\t\tabs = abs(l[i]);\n\t\ti++;\n\t}\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp73k2sb5v.d(69): Error: function expected before `()`, not `abs`
    of type `long`

    /tmp/tmp73k2sb5v.d(83): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmp73k2sb5v.d(97): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp73k2sb5v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_array(long[] l) \n{\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nlong prod_array(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\ndouble sum_array(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\ndouble prod_array(double[] l)\
    \ \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\
    \treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nfloat sum_array(float[] l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nfloat prod_array(float[] l) \n{\n\tfloat prod\
    \ = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzb8eg1mi.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpzb8eg1mi.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpzb8eg1mi.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzb8eg1mi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160780
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor(i\
    \ = 1; i < l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long prod_element(long[] l) \n{\n\tlong prod = 1;\n\tlong i;\n\tfor (i = 0; i\
    \ < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\ndouble sum_elements(double[] l) \n\
    {\n\tdouble sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\ndouble prod_elements(double[] l) \n{\n\tdouble prod = 1;\n\t\
    long i;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_elements(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nfloat prod_elements(float[] l) \n{\n\tfloat prod = 1;\n\tlong\
    \ i;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nunittest\n{\n \
    \   alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor (i\
    \ = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor(i=1; i<l.length; i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor(i=1; i<l.length; i++)\n\t\
    \tif(l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum;\n\tsum = 0;\n\tfor(i=0; i<l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long prod_element(long[] l) \n{\n\tint i;\n\tlong prod;\n\tprod = 1;\n\tfor(i=0;\
    \ i<l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor(i=0; i<l.length; i++)\n\t\t\
    abs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\
    \tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor(i=0; i<l.length; i++)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\t\
    float abs;\n\tabs = 0;\n\tfor(i=0; i<l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0iqam410.d(66): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp0iqam410.d(79): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp0iqam410.d(92): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0iqam410.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t\
    }\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n          \
    \  \n*/\nlong min_element(long[] l) \n{\n\tlong min = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t\
    }\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n      \
    \      \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\t\
    product *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\t\
    long abs = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs = abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_max(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tabs = max(abs, abs(l[i]));\n\t}\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_min(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tabs = min(abs, abs(l[i]));\n\t}\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_sum(long[] l)\
    \ \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs +=\
    \ abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_product(long[] l) \n{\n\tlong abs =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs *= abs(l[i]);\n\t}\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nlong abs_max(long[] l, long max) \n{\n\tlong abs = 0;\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3v2ox99v.d(132): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3v2ox99v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tmax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\
    \tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\t\
    long sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_elements(long[] l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_elements(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nfloat product_elements(float[] l) \n{\n\tfloat product = 1;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n   \
    \ assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tmax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tlong product\
    \ = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_element_double(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\ndouble product_element_double(double[] l) \n{\n\tdouble product\
    \ = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_element_float(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nfloat product_element_float(float[] l) \n{\n\tfloat product = 1;\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    /*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = l[i] < 0 ? -l[i] : l[i];\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tabs = l[i] < 0 ? -l[i] : l[i];\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = l[i]\
    \ < 0 ? -l[i] : l[i];\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor(int i=1; i<l.length;\
    \ i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i;\n\tfor(i =\
    \ 0; i < l.length; ++i)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\
    \tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\
    \tlong sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nlong product_element(long[] l) \n{\n\tlong product = 1;\n\tlong\
    \ i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    double sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\tdouble i;\n\tfor(i =\
    \ 0; i < l.length; ++i)\n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tdouble i;\n\tfor(i = 0; i < l.length; ++i)\n\
    \t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum\
    \ = 0;\n\tfloat i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tsum += l[i];\n\t\
    }\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n       \
    \     \n*/\nfloat product_elements(float[] l) \n{\n\tfloat product = 1;\n\tfloat\
    \ i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz6jui5o8.d(70): Error: cannot implicitly convert expression `i`
    of type `double` to `ulong`

    /tmp/tmpz6jui5o8.d(84): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmpz6jui5o8.d(98): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmpz6jui5o8.d(112): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz6jui5o8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = 0;\n\tfor(i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tif(l[i] > max) \n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong\
    \ min_element(long[] l) \n{\n\tint i;\n\tlong min = 0;\n\tfor(i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif(l[i] < min) \n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\
    \tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\tlong\
    \ product = 1;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t\
    }\n\treturn product;\n}\n/*\nReturn sum of all elements in the list that are less\
    \ than the given value.\n            \n*/\nlong sum_less_than(long[] l, long value)\
    \ \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\t\
    if(l[i] < value) \n\t\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list that are less than the given value.\n          \
    \  \n*/\nlong product_less_than(long[] l, long value) \n{\n\tint i;\n\tlong product\
    \ = 1;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] < value) \n\t\t\tproduct\
    \ *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list\
    \ that are greater than the given value.\n            \n*/\nlong sum_greater_than(long[]\
    \ l, long value) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tif(l[i] > value) \n\t\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list that are greater than the given value.\n\
    \            \n*/\nlong product_greater_than(long[] l, long value) \n{\n\tint\
    \ i;\n\tlong product = 1;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i]\
    \ > value) \n\t\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum\
    \ of all elements in the list that are equal to the given value.\n           \
    \ \n*/\nlong sum_equal(long\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_aj06fqh.d(125): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_aj06fqh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max_el = l[0];\n\tfor(i=1;\
    \ i<l.length; i++)\n\t\tif(l[i] > max_el)\n\t\t\tmax_el = l[i];\n\treturn max_el;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor(i\
    \ = 1; i < l.length; ++i)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\n/*\nReturn\
    \ minimum element in the list.\n            \n*/\nlong min_element(long[] l) \n\
    {\n\tlong min = 0;\n\tlong i;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tif(l[i] < min)\n\
    \t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\t\
    long i;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tlong i;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tprod\
    \ *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_elements(long[] l) \n{\n\tlong i;\n\
    \tlong abs = 0;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tabs = abs(l[i]);\n\t}\n\t\
    return abs;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_max(long[] l) \n{\n\tlong i;\n\tlong abs = 0;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tif(l[i] > abs)\n\t\t\tabs = l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_min(long[]\
    \ l) \n{\n\tlong i;\n\tlong abs = 0;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tif(l[i]\
    \ < abs)\n\t\t\tabs = l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_sum(long[] l) \n{\n\
    \tlong i;\n\tlong abs = 0;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tabs += l[i];\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_product(long[] l) \n{\n\tlong i;\n\tlong abs = 0;\n\
    \tfor(i=0;i<l.length;i++)\n\t{\n\t\tabs *= l[i];\n\t}\n\treturn abs;\n}\n/*\n\
    Return absolute \nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sa82xij.d(132): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sa82xij.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tmax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t\tif (l[i] > max) \n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t\
    \tif (l[i] < min) \n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\t\
    long sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t\tproduct *= l[i];\n\treturn product;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor (i = 0;\
    \ i < l.length; i++) \n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\
    \t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/\nlong sum_elements(short[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_elements(short[] l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i\
    \ = 0; i < l.length; i++) \n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\n\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7u8r2pld.d(124): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7u8r2pld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor(int i = 1;\
    \ i < l.length; ++i)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor(int i = 1;\
    \ i < l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_elements(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i\
    \ = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor (i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tfor(i = 0; i\
    \ < (int)(l.length / 2); ++i)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t\
    }\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tfor(i = 0; i < (int)(l.length\
    \ / 2); ++i)\n\t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < (int)(l.length / 2); ++i)\n\
    \t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\
    \tlong product = 1;\n\tfor(i = 0; i < (int)(l.length / 2); ++i)\n\t{\n\t\tproduct\
    \ *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_elements(long[] l) \n{\n\tint i;\n\t\
    long abs = 0;\n\tfor(i = 0; i < (int)(l.length / 2); ++i)\n\t{\n\t\tabs = abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\ndouble abs_elements(double[] l) \n{\n\tint i;\n\tdouble abs\
    \ = 0;\n\tfor(i = 0; i < (int)(l.length / 2); ++i)\n\t{\n\t\tabs = abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_elements(float[] l) \n{\n\tint i;\n\tfloat abs =\
    \ 0;\n\tfor(i = 0; i < (int)(l.length / 2); ++i)\n\t{\n\t\tabs = abs(l[i]);\n\t\
    }\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_elements(long l) \n{\n\tint i;\n\tlong abs = 0;\n\t\
    for(i = 0; i < (int)(l.length / 2); ++i)\n\t{\n\t\tabs = abs(l[i]);\n\t}\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the \nunittest\n{\n  \
    \  alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66w5hnyo.d(10): Error: C style cast illegal, use `cast(int)(l.length
    / 2)`

    /tmp/tmp66w5hnyo.d(25): Error: C style cast illegal, use `cast(int)(l.length /
    2)`

    /tmp/tmp66w5hnyo.d(40): Error: C style cast illegal, use `cast(int)(l.length /
    2)`

    /tmp/tmp66w5hnyo.d(54): Error: C style cast illegal, use `cast(int)(l.length /
    2)`

    /tmp/tmp66w5hnyo.d(68): Error: C style cast illegal, use `cast(int)(l.length /
    2)`

    /tmp/tmp66w5hnyo.d(82): Error: C style cast illegal, use `cast(int)(l.length /
    2)`

    /tmp/tmp66w5hnyo.d(96): Error: C style cast illegal, use `cast(int)(l.length /
    2)`

    /tmp/tmp66w5hnyo.d(110): Error: C style cast illegal, use `cast(int)(l.length
    / 2)`

    /tmp/tmp66w5hnyo.d(116): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66w5hnyo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    /*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tmax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\
    \tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\t\
    long sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_elements(long[] l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_elements(long[]\
    \ l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_elements(long[] l, long max) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_elements(long[] l, long min, long max) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nlong abs_elements(long[]\
    \ l, long min, long max, long step) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_elements(long[]\
    \ l, long min, long max, long step, long scale) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nlong abs_elements(long[]\
    \ l, long min, long max, long step, long scale, long offset) \n{\n\tlong abs =\
    \ 0;\n\t\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp16j0snzs.d(113): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16j0snzs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\t\
    for (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin =\
    \ l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\ndouble sum_element_double(double[] l) \n{\n\t\
    double sum = 0;\n\tdouble i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum\
    \ += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_element_double(double[] l) \n{\n\tdouble product\
    \ = 1;\n\tdouble i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nfloat sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\tfloat\
    \ i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    float product_element_float(float[] l) \n{\n\tfloat product = 1;\n\tfloat i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu4rwhigv.d(74): Error: cannot implicitly convert expression `i`
    of type `double` to `ulong`

    /tmp/tmpu4rwhigv.d(88): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmpu4rwhigv.d(102): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmpu4rwhigv.d(116): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu4rwhigv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    int i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0;\
    \ i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs\
    \ = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\
    \tdouble abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs = 0;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L,\
    \ 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpui_6uhco.d(63): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpui_6uhco.d(75): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpui_6uhco.d(87): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpui_6uhco.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    /*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_max(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\
    \t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_min(long[] l) \n{\n\tlong\
    \ abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = min(abs, l[i]);\n\t\
    return abs;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_sum(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tabs += l[i];\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_product(long[] l) \n\
    {\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs *= l[i];\n\t\
    return abs;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_max(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_min(long[] l)\
    \ \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52j8mr1x.d(123): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52j8mr1x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\t\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax\
    \ = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\t\n\
    \tmin = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\
    \t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum;\n\t\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum +=\
    \ l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod;\n\t\
    \n\tprod = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tprod *= l[i];\n\t}\n\
    \treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\ndouble sum_elements(double[] l) \n{\n\tint i;\n\tdouble sum;\n\t\n\tsum =\
    \ 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    double prod_elements(double[] l) \n{\n\tint i;\n\tdouble prod;\n\t\n\tprod = 1;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat sum;\n\t\n\tsum = 0;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all\
    \ elements in the list.\n            \n*/\nfloat prod_elements(float[] l) \n{\n\
    \tint i;\n\tfloat prod;\n\t\n\tprod = 1;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i;\n\tfor (i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tlong min = 0;\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n  \
    \          \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble\
    \ sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product = 1;\n\
    \tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\
    \treturn product;\n}\n/*\nReturn sum of all elements in the list.\n          \
    \  \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\
    \t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tmax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tlong\
    \ product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\t\
    return product;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i =\
    \ 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30ycsixa.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp30ycsixa.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp30ycsixa.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30ycsixa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_element(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i =\
    \ 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\ndouble sum_element_double(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_element_double(double[] l) \n{\n\tdouble product\
    \ = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\t\
    return product;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nfloat sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tlong i;\n\tfor(i = 0;\
    \ i < (long)l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong\
    \ min_element(long[] l) \n{\n\tlong min;\n\tlong i;\n\tfor(i = 0; i < (long)l.length;\
    \ i++)\n\t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor(i = 0; i < (long)l.length; i++)\n\t\
    {\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tlong\
    \ product = 1;\n\tlong i;\n\tfor(i = 0; i < (long)l.length; i++)\n\t{\n\t\tproduct\
    \ *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    double i;\n\tfor(i = 0; i < (double)l.length; i++)\n\t{\n\t\tsum += l[i];\n\t\
    }\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n       \
    \     \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product = 1;\n\t\
    double i;\n\tfor(i = 0; i < (double)l.length; i++)\n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfloat i;\n\
    \tfor(i = 0; i < (float)l.length; i++)\n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfloat i;\n\tfor(i = 0; i < (float)l.length;\
    \ i++)\n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nunittest\n{\n    alias candidate\
    \ = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ddurkm2.d(10): Error: C style cast illegal, use `cast(long)l.length`

    /tmp/tmp9ddurkm2.d(25): Error: C style cast illegal, use `cast(long)l.length`

    /tmp/tmp9ddurkm2.d(40): Error: C style cast illegal, use `cast(long)l.length`

    /tmp/tmp9ddurkm2.d(54): Error: C style cast illegal, use `cast(long)l.length`

    /tmp/tmp9ddurkm2.d(68): Error: C style cast illegal, use `cast(double)l.length`

    /tmp/tmp9ddurkm2.d(82): Error: C style cast illegal, use `cast(double)l.length`

    /tmp/tmp9ddurkm2.d(96): Error: C style cast illegal, use `cast(float)l.length`

    /tmp/tmp9ddurkm2.d(110): Error: C style cast illegal, use `cast(float)l.length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ddurkm2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tmax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\
    \tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    long sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_element(long[] l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\t\
    long abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = abs(l[i]);\n\t\
    return abs;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = abs(l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = abs(l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsar5l1ax.d(58): Error: function expected before `()`, not `abs`
    of type `long`

    /tmp/tmpsar5l1ax.d(69): Error: function expected before `()`, not `abs` of type
    `double`

    /tmp/tmpsar5l1ax.d(80): Error: function expected before `()`, not `abs` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsar5l1ax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_element(float[] l)\
    \ \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjek7wjyv.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpjek7wjyv.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpjek7wjyv.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjek7wjyv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor(i\
    \ = 1; i < l.length; i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; i++)\n\
    \t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\t\
    int i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\tlong prod;\n\
    \tprod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_elements(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor (i =\
    \ 0; i < l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\ndouble abs_elements(double[]\
    \ l) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\
    \t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/\nfloat abs_elements(float[] l) \n\
    {\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    abs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nunittest\n{\n    alias candidate =\
    \ max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgpg8omni.d(66): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpgpg8omni.d(79): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpgpg8omni.d(92): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgpg8omni.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor(int i = 1;\
    \ i < l.length; i++) \n\t{\n\t\tif(l[i] > max) \n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor(int i=1; i<l.length;\
    \ i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong\
    \ min = l[0];\n\tfor(int i=1; i<l.length; i++)\n\t\tif(l[i] < min)\n\t\t\tmin\
    \ = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor(int i=0;\
    \ i<l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nlong product_elements(long[] l)\
    \ \n{\n\tlong product = 1;\n\tfor(int i=0; i<l.length; i++)\n\t\tproduct *= l[i];\n\
    \treturn product;\n}\n/*\nReturn sum of all elements in the list with specified\
    \ type.\n            \n*/\nlong sum_elements(long[] l, long type) \n{\n\tlong\
    \ sum = 0;\n\tfor(int i=0; i<l.length; i++)\n\t\tif(l[i] == type)\n\t\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list with\
    \ specified type.\n            \n*/\nlong product_elements(long[] l, long type)\
    \ \n{\n\tlong product = 1;\n\tfor(int i=0; i<l.length; i++)\n\t\tif(l[i] == type)\n\
    \t\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list with specified type.\n            \n*/\ndouble sum_elements(double[]\
    \ l, double type) \n{\n\tdouble sum = 0;\n\tfor(int i=0; i<l.length; i++)\n\t\t\
    if(l[i] == type)\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list with specified type.\n            \n*/\ndouble product_elements(double[]\
    \ l, double type) \n{\n\tdouble product = 1;\n\tfor(int i=0; i<l.length; i++)\n\
    \t\tif(l[i] == type)\n\t\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ sum of all elements in the list with specified type.\n            \n*/\nfloat\
    \ sum_elements(float[] l, float type) \n{\n\tfloat sum = 0;\n\tfor(int i=0; i<l.length;\
    \ i++)\n\t\tif(l[i] == type)\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list with specified type.\n            \n*/\n\
    float product_elements(float[] l, float type) \n{\n\tfloat product = 1;\n\tfor(int\
    \ i=0; i<l.length; i++)\n\t\tif(\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpexjvz_0u.d(117): Error: expression expected, not `unittest`

    /tmp/tmpexjvz_0u.d(118): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexjvz_0u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tlong i;\n\tfor(i = 0;\
    \ i < (long)l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdcu4we8_.d(10): Error: C style cast illegal, use `cast(long)l.length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdcu4we8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = 0;\n\tlong i = 0;\n\twhile\
    \ (i < l.length) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\
    \t\ti++;\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list with\
    \ specified type.\n            \n*/\nlong sum_elements(long[] l, int type) \n\
    {\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tif (type == 0)\n\
    \t\t\tsum += l[i];\n\t\telse if (type == 1)\n\t\t\tsum += l[i] * l[i];\n\t\telse\
    \ if (type == 2)\n\t\t\tsum += l[i] * l[i] * l[i];\n\t\telse if (type == 3)\n\t\
    \t\tsum += l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 4)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 5)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 6)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 7)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 8)\n\
    \t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\
    \telse if (type == 9)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] *\
    \ l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 10)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if\
    \ (type == 11)\n\t\t\tsum += l[i]\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp83lgd2zs.d(80): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp83lgd2zs.d(87): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp83lgd2zs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max_el = l[0];\n\tfor\
    \ (i = 1; i < l.length; i++)\n\t\tif (l[i] > max_el)\n\t\t\tmax_el = l[i];\n\t\
    return max_el;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tint i;\n\tlong min_el = l[0];\n\tfor (i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] < min_el)\n\t\t\tmin_el = l[i];\n\treturn min_el;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\tlong product\
    \ = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tint i;\n\tdouble sum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements(double[] l) \n{\n\tint i;\n\tdouble\
    \ product = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_elements(float[] l) \n{\n\tint i;\n\tfloat sum = 0;\n\tfor (i = 0; i\
    \ < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat product = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i =\
    \ 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30ycsixa.d(56): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp30ycsixa.d(67): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp30ycsixa.d(78): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30ycsixa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; i++)\n\
    \t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    int i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod;\n\t\
    prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor (i =\
    \ 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\
    \t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\t\
    int i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs =\
    \ max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpraud4mug.d(66): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpraud4mug.d(79): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpraud4mug.d(92): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpraud4mug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max;\n\tstd.sort(l);\n\tmax =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i] > max) {\n\t\t\t\
    max = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nunittest\n{\n    alias candidate =\
    \ max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwx7r3955.d(9): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwx7r3955.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max_val = l[0];\n\t\
    for (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max_val)\n\t\t\tmax_val = l[i];\n\
    \treturn max_val;\n}\n/*\nReturn minimum element in the list.\n            \n\
    */\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min_val = l[0];\n\tfor (i\
    \ = 1; i < l.length; ++i)\n\t\tif (l[i] < min_val)\n\t\t\tmin_val = l[i];\n\t\
    return min_val;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor (i = 0; i\
    \ < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nlong prod_element(long[] l) \n\
    {\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\
    \treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n  \
    \          \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs = 0;\n\t\
    for (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double[] l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor (i = 0;\
    \ i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs\
    \ = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(long l) \n{\n\treturn abs(l);\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double l) \n{\n\treturn abs(l);\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_element(float l) \n\
    {\n\treturn abs(l);\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long l) \n{\n\treturn abs(l);\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double\
    \ l) \n{\n\treturn abs(l);\n}\n/*\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp_j6h87p.d(128): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_j6h87p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; ++i) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\
    }\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i\
    \ = 1; i < l.length; ++i) {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_element(long[] l) \n{\n\tint i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nlong product_element(long[] l)\
    \ \n{\n\tint i;\n\tlong prod;\n\tprod = 1;\n\tfor (i = 0; i < l.length; ++i)\n\
    \t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\t\
    long abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble abs;\n\t\
    abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66alocq_.d(68): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp66alocq_.d(81): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp66alocq_.d(94): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66alocq_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\t\
    for (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin =\
    \ l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_element(long[] l) \n\
    {\n\tlong i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum\
    \ += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble i;\n\
    \tdouble sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t\
    }\n\treturn sum;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat i;\n\tfloat sum =\
    \ 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86pfp55c.d(88): Error: cannot implicitly convert expression `i`
    of type `double` to `ulong`

    /tmp/tmp86pfp55c.d(102): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86pfp55c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t\tif (l[i] > max) \n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t\
    \tif (l[i] < min) \n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    long sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong product_element(long[] l) \n{\n\tlong prod = 1;\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; i++) \n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\ndouble abs_element(double[] l) \n{\n\tdouble i;\n\tfor (i = 0; i\
    \ < l.length; i++) \n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat i;\n\tfor (i = 0; i < l.length; i++) \n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmgq9cpbk.d(61): Error: cannot implicitly convert expression `l`
    of type `long[]` to `long`

    /tmp/tmpmgq9cpbk.d(71): Error: cannot implicitly convert expression `i` of type
    `double` to `ulong`

    /tmp/tmpmgq9cpbk.d(72): Error: cannot implicitly convert expression `l` of type
    `double[]` to `double`

    /tmp/tmpmgq9cpbk.d(82): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmpmgq9cpbk.d(83): Error: cannot implicitly convert expression `l` of type
    `float[]` to `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmgq9cpbk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\t\
    for (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin =\
    \ l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\ndouble sum_element_double(double[] l) \n{\n\t\
    double sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum +=\
    \ l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_element_double(double[] l) \n{\n\tdouble product\
    \ = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nfloat sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\tlong\
    \ i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    float product_element_float(float[] l) \n{\n\tfloat product = 1;\n\tlong i;\n\t\
    for (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nunittest\n{\n\
    \    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n\
    \    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; i++)\n\
    \t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    int i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\tlong product;\n\
    \tproduct = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn absolute value of all elements in the list.\n      \
    \      \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\
    \tfor (i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor (i =\
    \ 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\
    \t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong long abs_element(long long[] l)\
    \ \n{\n\tint i;\n\tlong long abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\
    \t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\ndouble abs_element(double[] l, int\
    \ size) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor (i = 0; i < size; i++)\n\
    \t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nfloat abs_element(float[] \nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq1pykc6o.d(99): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmpq1pykc6o.d(99): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpq1pykc6o.d(102): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpq1pykc6o.d(126): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1pykc6o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list divided\
    \ by number of elements in the list.\n            \n*/\ndouble sum_elements_divided_by_length(long[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i] / l.length;\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list divided by number of elements in the list.\n            \n*/\ndouble product_elements_divided_by_length(long[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i] / l.length;\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list divided by number of elements in the list.\n            \n*/\ndouble\
    \ sum_elements_divided_by_length(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tsum += l[i] / l.length;\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list divided by number of elements in the\
    \ list.\n            \n*/\ndouble product_elements_divided_by_length(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i] / l.length;\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list divided by number of elements in the list.\n            \n*/\ndouble\
    \ sum_elements_divided_by_length(float[] l) \n{\n\tdouble sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tsum += l[i] / l.length;\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list divided by number of elements in the\
    \ list.\n            \n*/\ndouble product_elements_divided_by_length\nunittest\n\
    {\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L])\
    \ == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9wxove75.d(108): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9wxove75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max;\n\t\n\tmax = l[0];\n\
    \tfor(i=1; i<l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\
    \t\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n\
    */\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\t\n\tmin = l[0];\n\
    \tfor(i=1; i<l.length; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\
    \t\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n          \
    \  \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\tlong sum;\n\t\n\tsum = 0;\n\
    \tfor(i=1; i<l.length; i++)\n\t\tsum += l[i];\n\t\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong prod;\n\t\n\tprod = 1;\n\tfor(i=1; i<l.length; i++)\n\
    \t\tprod *= l[i];\n\t\n\treturn prod;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\ndouble sum_elements_double(double[] l) \n{\n\tint i;\n\
    \tdouble sum;\n\t\n\tsum = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tsum += l[i];\n\
    \t\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n      \
    \      \n*/\ndouble product_elements_double(double[] l) \n{\n\tint i;\n\tdouble\
    \ prod;\n\t\n\tprod = 1;\n\tfor(i=1; i<l.length; i++)\n\t\tprod *= l[i];\n\t\n\
    \treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nfloat sum_elements_float(float[] l) \n{\n\tint i;\n\tfloat sum;\n\t\n\tsum\
    \ = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tsum += l[i];\n\t\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\nfloat product_elements_float(float[]\
    \ l) \n{\n\tint i;\n\tfloat prod;\n\t\n\tprod = 1;\n\tfor(i=1; i<l.length; i++)\n\
    \t\tprod *= l[i];\n\t\n\treturn prod;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tint i;\n\tlong max = l[0];\n\tfor (i\
    \ = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs\
    \ = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor\
    \ (i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs\
    \ = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nunittest\n{\n    alias candidate = max_element;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2xs4cv69.d(61): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp2xs4cv69.d(73): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp2xs4cv69.d(85): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2xs4cv69.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160783
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160781
- exit_code: 0
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\ndouble sum_elements_double(double[] l) \n{\n\tdouble sum = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\ndouble product_elements_double(double[]\
    \ l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\nfloat sum_elements_float(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements_float(float[]\
    \ l) \n{\n\tfloat prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660160782
- exit_code: 1
  program: "import std.math;\n/*\nReturn maximum element in the list.\n          \
    \  \n*/\nlong max_element(long[] l) \n{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn mean of all elements in the list.\n   \
    \         \n*/\ndouble mean_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn (double)sum / l.length;\n\
    }\n/*\nReturn standard deviation of all elements in the list.\n            \n\
    */\ndouble std_dev_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn (double)Math.sqrt((double)l.length\
    \ / sum);\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    double sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i <\
    \ l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all\
    \ elements in the list.\n            \n*/\ndouble product_elements(double[] l)\
    \ \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\
    \treturn prod;\n}\n/*\nReturn mean of all elements in the list.\n            \n\
    */\ndouble mean_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn (double)sum / l.length;\n}\n\
    /*\nReturn standard deviation of all elements in the list.\n            \n*/\n\
    double std_dev_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn (double)Math.sqrt((double)l.length\
    \ / sum);\n}\n/*\n\nunittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
    \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi1q7e_2k.d(57): Error: C style cast illegal, use `cast(double)sum`

    /tmp/tmpi1q7e_2k.d(68): Error: C style cast illegal, use `cast(double)l.length`

    /tmp/tmpi1q7e_2k.d(68): Error: C style cast illegal, use `cast(double)Math.sqrt(cast(double)l.length
    / sum)`

    /tmp/tmpi1q7e_2k.d(101): Error: C style cast illegal, use `cast(double)sum`

    /tmp/tmpi1q7e_2k.d(112): Error: C style cast illegal, use `cast(double)l.length`

    /tmp/tmpi1q7e_2k.d(112): Error: C style cast illegal, use `cast(double)Math.sqrt(cast(double)l.length
    / sum)`

    /tmp/tmpi1q7e_2k.d(114): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi1q7e_2k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160782
