language: d
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring))\n            result[i] = strings[i];\n  \
    \      else if(!caseSensitive && !strings[i].contains(substring))\n          \
    \  result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring, ignoreCase))\n            result[i] = strings[i];\n\
    \        else if(!caseSensitive && !strings[i].contains(substring, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!caseSensitive && strings[i].contains(substring, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n        else if(!caseSensitive\
    \ && !strings[i].contains(substring, ignoreCase, ignoreCase))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n    \nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz3k5hvzd.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3k5hvzd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmqt5o9do.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqt5o9do.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].matches(regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].matches(regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string regex) \n{\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplan8b9it.d(108): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplan8b9it.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer the question at all.\
    \ He wants to filter out all strings that don't contain `substring`, not just\
    \ ones that do contain it.\n<|/ c |>\n<| c |>\nI believe that he wants to filter\
    \ out all strings that don't contain `substring`, not just ones that do contain\
    \ it.\n<|/ c |>\n<| c |>\nYes, I believe that he wants to filter out all strings\
    \ that don't contain `substring`, not just ones that do contain it.\n<|/ c |>\n\
    <| c |>\nI believe that he wants to filter out all strings that don't contain\
    \ `substring`, not just ones that do contain it.\n<|/ c |>\n<| c |>\nI believe\
    \ that he wants to filter out all strings that don't contain `substring`, not\
    \ just ones that do contain it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring substring = \"a\";\nstring[]\
    \ filteredArray = stringArray.Where(x => x.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer the question at all.\
    \ He wants to filter out all strings that don't contain `substring`, not just\
    \ ones that do contain it.\n<|/ c |>\n<| c |>\nI believe that he wants to filter\
    \ out all strings that don't contain `substring`, not just ones that do contain\
    \ it.\n<|/ c |>\n<| c |>\nI believe that he wants to filter out all strings that\
    \ don't contain `substring`, not just ones that do contain it.\n<|/ c |>\n<| c\
    \ |>\nI believe that he wants to filter out all strings that don't contain `substring`,\
    \ not just ones that do contain it.\n<|/ c |>\n<| c |>\nI believe that he wants\
    \ to filter out all strings that don't contain `substring`, not just ones that\
    \ do contain it.\n<|/ c |>\n<| a dscore=0 |>\n\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9atapcek.d(17): Error: declaration expected, not `<`

    /tmp/tmp9atapcek.d(20): Error: unterminated character constant

    /tmp/tmp9atapcek.d(20): Error: unterminated character constant

    /tmp/tmp9atapcek.d(23): Error: unterminated character constant

    /tmp/tmp9atapcek.d(26): Error: unterminated character constant

    /tmp/tmp9atapcek.d(29): Error: unterminated character constant

    /tmp/tmp9atapcek.d(32): Error: unterminated character constant

    /tmp/tmp9atapcek.d(39): Error: declaration expected, not `<`

    /tmp/tmp9atapcek.d(42): Error: unterminated character constant

    /tmp/tmp9atapcek.d(42): Error: unterminated character constant

    /tmp/tmp9atapcek.d(45): Error: unterminated character constant

    /tmp/tmp9atapcek.d(48): Error: unterminated character constant

    /tmp/tmp9atapcek.d(51): Error: unterminated character constant

    /tmp/tmp9atapcek.d(54): Error: unterminated character constant

    /tmp/tmp9atapcek.d(62): Error: declaration expected, not `assert`

    /tmp/tmp9atapcek.d(63): Error: declaration expected, not `assert`

    /tmp/tmp9atapc'
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd5jz4n9.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd5jz4n9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6p45mcpp.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6p45mcpp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbdbi5a0.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbdbi5a0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu8vbejfv.d(85): Error: found `unittest` instead of statement

    /tmp/tmpu8vbejfv.d(94): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8vbejfv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt_yool6t.d(97): Error: expression expected, not `unittest`

    /tmp/tmpt_yool6t.d(98): Error: found `{` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `alias`

    /tmp/tmpt_yool6t.d(99): Error: found `candidate` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `=`

    /tmp/tmpt_yool6t.d(99): Error: found `filter_by_substring` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `;`

    /tmp/tmpt_yool6t.d(101): Error: found `assert` when expecting `,`

    /tmp/tmpt_yool6t.d(101): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(102): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(103): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(104): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(105): Error: expression expected, not `}`

    /tmp/tmpt_yool6t.d(106): Error: found `void` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: found `{` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: expression expected, not `}`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `)`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `)`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_yool6t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase,\
    \ ignoreCase, ignoreCase))\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdchxeky_.d(83): Error: found `unittest` instead of statement

    /tmp/tmpdchxeky_.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdchxeky_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex, endIndex) : !strings[i].contains(substring, startIndex, endIndex,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex, bool caseSensitive, int startIndexInclusive,\
    \ int endIndexInclusive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring, startIndex, endIndex, startIndexInclusive,\
    \ endIndexInclusive) : !strings[i].contains(sub\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz0r2ypk6.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmpz0r2ypk6.d(92): Error: found `void` when expecting `,`

    /tmp/tmpz0r2ypk6.d(92): Error: found `{` when expecting `,`

    /tmp/tmpz0r2ypk6.d(92): Error: expression expected, not `}`

    /tmp/tmpz0r2ypk6.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmpz0r2ypk6.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmpz0r2ypk6.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmpz0r2ypk6.d(92): Error: found `End of File` instead of statement

    /tmp/tmpz0r2ypk6.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpz0r2ypk6.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0r2ypk6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjacu16y.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjacu16y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.List;\nunittest\n{\n    alias candidate = filter_by_substring;\n\n\
    \    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplqbsv2x4.d(17): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplqbsv2x4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmqt5o9do.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqt5o9do.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring\n    \
    \        \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2sn0zk1w.d(106): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2sn0zk1w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbdbi5a0.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbdbi5a0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring))\n            result[i] = strings[i];\n  \
    \      else if(!caseSensitive && !strings[i].contains(substring))\n          \
    \  result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring, partialMatch))\n            result[i] = strings[i];\n\
    \        else if(!caseSensitive && !strings[i].contains(substring, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive && strings[i].contains(substring, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n       \
    \ else if(!caseSensitive && !strings[i].contains(substring, partialMatch, partialMatchCaseInsensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatch\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp574oehf.d(84): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp574oehf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7iq63un.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `void` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `{` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: expression expected, not `}`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` instead of statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7iq63un.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for the answer. I am not allowed to use any\
    \ libraries. I only need to use basic libraries.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that uses only basic libraries.\n<|/ c |>\n<| c |>\nThanks for the\
    \ answer. I tried your solution and it works perfectly. I just had to change `string[]\
    \ result = new string[strings.length];` to `string[] result = new string[strings.length\
    \ - 1];` because I only want to return the last element of the array.\n<|/ c |>\n\
    <| c |>\nOh, I see. Yes, I forgot that `string[]` has `length` property. Thanks\
    \ for the reminder!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbkwnwrd6.d(17): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkwnwrd6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3u491cv.d(92): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3u491cv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu8vbejfv.d(85): Error: found `unittest` instead of statement

    /tmp/tmpu8vbejfv.d(94): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8vbejfv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex) \n{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(!s.contains(substring, startIndex, endIndex))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex) \n{\n    string[] result = new string[strings.length];\n   \
    \ int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring,\
    \ startIndex))\n        {\n            result[i++] = s;\n        }\n    }\n  \
    \  return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex) \n{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(!s.contains(substring, startIndex, endIndex))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, \nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptlwwmyz9.d(11): Error: found `in` when expecting `;`

    /tmp/tmptlwwmyz9.d(28): Error: found `in` when expecting `;`

    /tmp/tmptlwwmyz9.d(45): Error: found `in` when expecting `;`

    /tmp/tmptlwwmyz9.d(62): Error: found `in` when expecting `;`

    /tmp/tmptlwwmyz9.d(79): Error: found `in` when expecting `;`

    /tmp/tmptlwwmyz9.d(96): Error: found `in` when expecting `;`

    /tmp/tmptlwwmyz9.d(110): Error: basic type expected, not `unittest`

    /tmp/tmptlwwmyz9.d(110): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptlwwmyz9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ true))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase: ignoreCase, ignoreCase: ignoreCase))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !string\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzyunw6dk.d(40): Error: found `:` when expecting `,`

    /tmp/tmpzyunw6dk.d(54): Error: found `:` when expecting `,`

    /tmp/tmpzyunw6dk.d(68): Error: found `:` when expecting `,`

    /tmp/tmpzyunw6dk.d(68): Error: found `:` when expecting `,`

    /tmp/tmpzyunw6dk.d(83): Error: found `unittest` when expecting `:`

    /tmp/tmpzyunw6dk.d(92): Error: found `void` when expecting `)`

    /tmp/tmpzyunw6dk.d(92): Error: found `{` when expecting `;` following statement

    /tmp/tmpzyunw6dk.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyunw6dk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ui3x2un.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ui3x2un.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3u491cv.d(92): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3u491cv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg8q00imq.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg8q00imq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring\n    \
    \        \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp5rz3tu9.d(106): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5rz3tu9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, allowEmpty))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool allowEmpty, bool allowEmptyString) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, allowEmpty,\
    \ allowEmptyString))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty, bool allowEmptyString,\
    \ bool allowEmptyStrings) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, allowEmpty, allowEmptyString, allowEmptyStrings))\n         \
    \   result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1z_dvezw.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1z_dvezw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkxqyd4vc.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxqyd4vc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution and\
    \ it works fine, but I still don't understand why my code didn't work. Can you\
    \ please explain why my code didn't work?\n<|/ c |>\n<| c |>\nThe reason why your\
    \ code didn't work is that your `filter_by_substring` function doesn't return\
    \ anything (it returns `null`). So the compiler doesn't know what to do with the\
    \ return value. And since you didn't assign the return value to anything, it just\
    \ gets discarded. Your code works because you assign the return value to `result`,\
    \ so it's assigned to `result`. The compiler knows what to do with that return\
    \ value.\n<|/ c |>\n<| c |>\nOh I see. Thanks for your explanation. I didn't know\
    \ that compiler doesn't know what to do with the return value. Now I understand\
    \ why my code didn't work.\n<|/ c |>\n<| c |>\nThe compiler knows what to do with\
    \ the return value because you assigned it to `result`. So the compiler knows\
    \ what to do with that return value.\n<|/ c |>\n<| c |>\nOh I see. Thanks for\
    \ your explanation. I didn't know that compiler doesn't know what to do with the\
    \ return value. Now I understand why my code didn't work.\n<|/ c |>\n<| a tags=c++,arrays\
    \ |>\nThe reason why your code didn't work is that your filter_by_substring function\
    \ doesn't return anything (it returns null). So the compiler doesn't know what\
    \ to do with the return value. And since you didn't assign the return value to\
    \ anything, it just gets discarded. Your code works because you assign the return\
    \ value to result, so it's assigned to result. The compiler knows what to do with\
    \ that return value.\nThe compiler knows what to do with that return value because\
    \ you assigned it to result. So the compiler knows what to do with that return\
    \ value.\nThe compiler knows what to do with that return value because you assigned\
    \ it to result. So the compiler knows what to do with that return value.\nThe\
    \ compiler knows what to do with that return value because you assigned it to\
    \ result. So the compiler knows what to do with that return value.\nThe compiler\
    \ knows what to do with that return value because you assigned it to result. So\
    \ the compiler knows what to do with that return value.\nThe compiler knows what\
    \ to do with that return value because you assigned it to result. So \nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe3ltlmd5.d(17): Error: declaration expected, not `<`

    /tmp/tmpe3ltlmd5.d(20): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(20): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(20): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(23): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(23): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(23): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(23): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(23): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(26): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(26): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(26): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(32): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(32): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(32): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d(35): Error: unterminated character constant

    /tmp/tmpe3ltlmd5.d'
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchCaseInsensitiveCaseInsensitive)\
    \ \n{\n    \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2s3uma7h.d(80): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2s3uma7h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your answer, but I'm getting a syntax error\
    \ on the `string[] result = new string[strings.length];` line. Can you explain\
    \ why?\n<|/ c |>\n<| c |>\nI got it working by changing `string[] result = new\
    \ string[strings.length];` to `string[] result = new string[strings.length - 1];`\n\
    <|/ c |>\n<| c |>\nOops, I forgot to add the `-1` to the `string.length` call.\
    \ Fixed now.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < string\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5pndset8.d(17): Error: declaration expected, not `<`

    /tmp/tmp5pndset8.d(20): Error: unterminated character constant

    /tmp/tmp5pndset8.d(33): Error: declaration expected, not `for`

    /tmp/tmp5pndset8.d(33): Error: no identifier for declarator `i`

    /tmp/tmp5pndset8.d(33): Error: declaration expected, not `<`

    /tmp/tmp5pndset8.d(33): Error: declaration expected, not `++`

    /tmp/tmp5pndset8.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5pndset8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, startIndex, endIndex))\n  \
    \      {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, startIndex, endIndex))\n  \
    \      {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex) \n{\n    string\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpflw209lf.d(106): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpflw209lf.d(115): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflw209lf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3u491cv.d(92): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3u491cv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt_yool6t.d(97): Error: expression expected, not `unittest`

    /tmp/tmpt_yool6t.d(98): Error: found `{` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `alias`

    /tmp/tmpt_yool6t.d(99): Error: found `candidate` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `=`

    /tmp/tmpt_yool6t.d(99): Error: found `filter_by_substring` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `;`

    /tmp/tmpt_yool6t.d(101): Error: found `assert` when expecting `,`

    /tmp/tmpt_yool6t.d(101): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(102): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(103): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(104): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(105): Error: expression expected, not `}`

    /tmp/tmpt_yool6t.d(106): Error: found `void` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: found `{` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: expression expected, not `}`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `)`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `)`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_yool6t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchIgnoreCase)\
    \ \n{\n    string[] result = new \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil4lin3u.d(80): Error: basic type expected, not `unittest`

    /tmp/tmpil4lin3u.d(80): Error: semicolon expected, not `unittest`

    /tmp/tmpil4lin3u.d(80): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil4lin3u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3hc_mn9.d(83): Error: expression expected, not `unittest`

    /tmp/tmpm3hc_mn9.d(84): Error: found `{` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `alias`

    /tmp/tmpm3hc_mn9.d(85): Error: found `candidate` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `=`

    /tmp/tmpm3hc_mn9.d(85): Error: found `filter_by_substring` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `;`

    /tmp/tmpm3hc_mn9.d(87): Error: found `assert` when expecting `,`

    /tmp/tmpm3hc_mn9.d(87): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(88): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(89): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(90): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(91): Error: expression expected, not `}`

    /tmp/tmpm3hc_mn9.d(92): Error: found `void` when expecting `,`

    /tmp/tmpm3hc_mn9.d(92): Error: found `{` when expecting `,`

    /tmp/tmpm3hc_mn9.d(92): Error: expression expected, not `}`

    /tmp/tmpm3hc_mn9.d('
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbdbi5a0.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbdbi5a0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmqt5o9do.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqt5o9do.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question. He\
    \ wants to filter out all strings that don't contain `substring`.\n<|/ c |>\n\
    <| c |>\n: I see your point. I missed that part. I'll update my answer.\n<|/ c\
    \ |>\n<| c |>\nI updated my answer to include a solution that does exactly what\
    \ he asked for.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that does exactly what he asked for.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ stringArray = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring substring\
    \ = \"a\";\nstring[] filteredArray = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring substring\
    \ = \"a\";\nstring[] filteredArray = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring substring = \"a\";\n\
    string[] filteredArray = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvv9tdmru.d(17): Error: declaration expected, not `<`

    /tmp/tmpvv9tdmru.d(20): Error: unterminated character constant

    /tmp/tmpvv9tdmru.d(20): Error: unterminated character constant

    /tmp/tmpvv9tdmru.d(23): Error: unterminated character constant

    /tmp/tmpvv9tdmru.d(36): Error: declaration expected, not `<`

    /tmp/tmpvv9tdmru.d(43): Error: declaration expected, not `<`

    /tmp/tmpvv9tdmru.d(50): Error: declaration expected, not `<`

    /tmp/tmpvv9tdmru.d(62): Error: unterminated string constant starting at /tmp/tmpvv9tdmru.d(62)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv9tdmru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring, ignoreCase) : !strings[i].contains(substring,\
    \ ignoreCase, caseSensitive))\n            result[i] = strings[i];\n    }\n  \
    \  return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring,\
    \ ignoreCase) : !strings[i].contains(substring, ignoreCase, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring, ignoreCase\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphg5bbal9.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmphg5bbal9.d(92): Error: found `void` when expecting `,`

    /tmp/tmphg5bbal9.d(92): Error: found `{` when expecting `,`

    /tmp/tmphg5bbal9.d(92): Error: expression expected, not `}`

    /tmp/tmphg5bbal9.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmphg5bbal9.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmphg5bbal9.d(92): Error: found `End of File` when expecting `:`

    /tmp/tmphg5bbal9.d(92): Error: expression expected, not `End of File`

    /tmp/tmphg5bbal9.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmphg5bbal9.d(92): Error: found `End of File` instead of statement

    /tmp/tmphg5bbal9.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmphg5bbal9.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphg5bbal9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nI used your solution and\
    \ it worked perfectly. Thank you very much!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring\
    \ search = \"def\";\nstring[] result = strings.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"def\"\
    ;\nstring[] result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"def\";\n\
    string[] result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"def\";\nstring[]\
    \ result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"\
    abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"def\";\nstring[] result\
    \ = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"def\";\nstring[] result\
    \ = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"\nunittest\n{\n   \
    \ alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp20ao_dwa.d(11): Error: found `in` when expecting `;`

    /tmp/tmp20ao_dwa.d(20): Error: declaration expected, not `<`

    /tmp/tmp20ao_dwa.d(30): Error: declaration expected, not `<`

    /tmp/tmp20ao_dwa.d(37): Error: declaration expected, not `<`

    /tmp/tmp20ao_dwa.d(44): Error: declaration expected, not `<`

    /tmp/tmp20ao_dwa.d(51): Error: declaration expected, not `<`

    /tmp/tmp20ao_dwa.d(58): Error: declaration expected, not `<`

    /tmp/tmp20ao_dwa.d(65): Error: declaration expected, not `<`

    /tmp/tmp20ao_dwa.d(75): Error: semicolon expected, not `john`

    /tmp/tmp20ao_dwa.d(75): Error: no identifier for declarator `john`

    /tmp/tmp20ao_dwa.d(75): Error: declaration expected, not `") == []);\x0a    assert(candidate(["`

    /tmp/tmp20ao_dwa.d(78): Error: unterminated string constant starting at /tmp/tmp20ao_dwa.d(78)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20ao_dwa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6413ytm.d(92): Error: no identifier for declarator `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6413ytm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3u491cv.d(92): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3u491cv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8zf_0tw8.d(92): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8zf_0tw8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThank you very much for your\
    \ answer! I appreciate it!\n<|/ c |>\n<| c |>\nI added a more efficient solution\
    \ that doesn't require a loop.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThank you very much for your answer! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| c |>\nThank you very much for your answer! I appreciate it!\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n\
    string search = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\n\
    string\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvaq8yqv2.d(11): Error: found `in` when expecting `;`

    /tmp/tmpvaq8yqv2.d(20): Error: declaration expected, not `<`

    /tmp/tmpvaq8yqv2.d(26): Error: unterminated character constant

    /tmp/tmpvaq8yqv2.d(33): Error: declaration expected, not `<`

    /tmp/tmpvaq8yqv2.d(43): Error: declaration expected, not `<`

    /tmp/tmpvaq8yqv2.d(53): Error: declaration expected, not `<`

    /tmp/tmpvaq8yqv2.d(60): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvaq8yqv2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbdbi5a0.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbdbi5a0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use\
    \ any external libraries. I edited my question to make it more clear.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that uses only built-in libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any external\
    \ libraries. I edited my question to make it more clear.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a solution that uses only built-in libraries.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6lijfnn6.d(17): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lijfnn6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, int startIndex, int endIndex)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex, endIndex) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, int startIndex, int endIndex,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring, startIndex, endIndex) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, end\nunittest\n{\n    alias candidate = filter_by_substring;\n\n\
    \    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6xeo4y88.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmp6xeo4y88.d(92): Error: found `void` when expecting `,`

    /tmp/tmp6xeo4y88.d(92): Error: found `{` when expecting `,`

    /tmp/tmp6xeo4y88.d(92): Error: expression expected, not `}`

    /tmp/tmp6xeo4y88.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmp6xeo4y88.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp6xeo4y88.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp6xeo4y88.d(92): Error: found `End of File` instead of statement

    /tmp/tmp6xeo4y88.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp6xeo4y88.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xeo4y88.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3u491cv.d(92): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3u491cv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring) : !s.contains(substring, ignoreCase: true))\n     \
    \   {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that do not contain given substring\n            \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring, int startIndex,\
    \ int endIndex, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring, startIndex: startIndex, endIndex: endIndex) : !s.contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex, ignoreCase: true))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex, bool caseSensitive, int limit) \n{\n    string[]\
    \ result = new \nunittest\n{\n    alias candidate = filter_by_substring;\n\n \
    \   assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbw3orvx4.d(11): Error: found `in` when expecting `;`

    /tmp/tmpbw3orvx4.d(28): Error: found `in` when expecting `;`

    /tmp/tmpbw3orvx4.d(45): Error: found `in` when expecting `;`

    /tmp/tmpbw3orvx4.d(47): Error: found `:` when expecting `,`

    /tmp/tmpbw3orvx4.d(62): Error: found `in` when expecting `;`

    /tmp/tmpbw3orvx4.d(64): Error: found `:` when expecting `,`

    /tmp/tmpbw3orvx4.d(64): Error: found `:` when expecting `,`

    /tmp/tmpbw3orvx4.d(79): Error: found `in` when expecting `;`

    /tmp/tmpbw3orvx4.d(81): Error: found `:` when expecting `,`

    /tmp/tmpbw3orvx4.d(81): Error: found `:` when expecting `,`

    /tmp/tmpbw3orvx4.d(81): Error: found `:` when expecting `,`

    /tmp/tmpbw3orvx4.d(81): Error: found `:` when expecting `,`

    /tmp/tmpbw3orvx4.d(81): Error: found `:` when expecting `,`

    /tmp/tmpbw3orvx4.d(95): Error: basic type expected, not `unittest`

    /tmp/tmpbw3orvx4.d(95): Error: semicolon expected, not `unittest`

    /tmp/tmpbw3orvx4.d(95): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-'
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5v7zavw3.d(91): Error: expression expected, not `unittest`

    /tmp/tmp5v7zavw3.d(92): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp5v7zavw3.d(93): Error: expression expected, not `alias`

    /tmp/tmp5v7zavw3.d(93): Error: found `candidate` when expecting `)`

    /tmp/tmp5v7zavw3.d(93): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5v7zavw3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool allowEmpty, bool allowEmptyString) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty,\
    \ allowEmptyString))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty, bool allowEmptyString,\
    \ bool allowEmptySubstring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, allowEmpty, allowEmptyString, allowEmptySubstring))\n       \
    \     result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp59ev_fs1.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp59ev_fs1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd5jz4n9.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd5jz4n9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| c |>\nThe `Contains` method is not case\
    \ sensitive, so `Contains(\"abc\")` will return `true` for `\"ABC\"`.\n<|/ c |>\n\
    <| c |>\nI know, but I assumed that OP wanted to match substrings case-insensitively.\n\
    <|/ c |>\n<| c |>\nYes, I do want to match substrings case-insensitively.\n<|/\
    \ c |>\n<| c |>\nI added a case insensitive version that uses `IndexOf` instead\
    \ of `Contains`.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm going to try\
    \ it out and see how it goes. I do want to match substrings case-insensitively.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\" };\nstring search = \"abc\";\nvar result = strings.Where(s\
    \ => s.IndexOf(search, StringComparison.OrdinalIgnoreCase) >= 0);\n</code>\n<|/\
    \ a tags=c#,linq,.net,string |>\n<| c |>\nThis doesn't work. `s.IndexOf(search,\
    \ StringComparison.OrdinalIgnoreCase) >= 0` returns `true` for `\"ABC\"`.\n<|/\
    \ c |>\n<| c |>\nI added a case insensitive version that uses `IndexOf` instead\
    \ of `Contains`.\n<|/ c |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search\
    \ = \"abc\";\nvar result = strings.Where(s => s.IndexOf(search, StringComparison.OrdinalIgnoreCase)\
    \ >= 0);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `s.IndexOf(search,\
    \ StringComparison.OrdinalIgnoreCase) >= 0` returns `true` for `\"ABC\"`.\n<|/\
    \ c |>\n<| c |>\nI added a case insensitive version that uses `IndexOf` instead\
    \ of `Contains`.\n<|/ c |>\n<| a tags=c#,linq,.net,string |>\n<code>\n\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwefdoza.d(17): Error: declaration expected, not `<`

    /tmp/tmptwefdoza.d(32): Error: unterminated character constant

    /tmp/tmptwefdoza.d(39): Error: declaration expected, not `<`

    /tmp/tmptwefdoza.d(42): Error: unterminated character constant

    /tmp/tmptwefdoza.d(52): Error: declaration expected, not `<`

    /tmp/tmptwefdoza.d(55): Error: unterminated character constant

    /tmp/tmptwefdoza.d(67): Error: declaration expected, not `assert`

    /tmp/tmptwefdoza.d(68): Error: declaration expected, not `assert`

    /tmp/tmptwefdoza.d(69): Error: declaration expected, not `assert`

    /tmp/tmptwefdoza.d(70): Error: declaration expected, not `assert`

    /tmp/tmptwefdoza.d(71): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwefdoza.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfnl0z5aj.d(106): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnl0z5aj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7ow34px.d(98): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp_7ow34px.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_7ow34px.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7ow34px.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `string[] strings = { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\" };\n    string substring = \"a\";\n    string[] result = filter_by_substring(strings,\
    \ substring);\n    \n    for(int i = 0; i < result.length; ++i)\n    {\n     \
    \   Console.WriteLine(result[i]);\n    }` prints `a`, `b`, `c`, `d`, `e`, `f`,\
    \ `g`, `h`, `i`, `j`, `k`, `l`, `m`, `n`, `o`, `p`, `q`, `r`, `s`, `t`, `u`, `v`,\
    \ `w`, `x`, `y`, `z`\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| a dscore=0 |>\nThe solution I came up with is as\
    \ follows:\n<code>\nsub filter_by_substring {\n    my ($strings, $substring) =;\n\
    \    my %seen;\n    my $i = 0;\n    foreach my $string ($strings) {\n        my\
    \ $found = 0;\n        foreach my $char (split //, $string) {\n            next\
    \ if $char eq $substring;\n            $found = 1;\n            last;\n      \
    \  }\n        next unless $found;\n        $seen{$i} = $string;\n        $i++;\n\
    \    }\n    return values %seen;\n}\n</code>\n<|/ a tags=raku,string |>\n<| c\
    \ |>\nThis doesn't work. `string[] \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_6wblpow.d(17): Error: declaration expected, not `<`

    /tmp/tmp_6wblpow.d(20): Error: unterminated character constant

    /tmp/tmp_6wblpow.d(46): Error: no identifier for declarator `my`

    /tmp/tmp_6wblpow.d(46): Error: declaration expected, not `%`

    /tmp/tmp_6wblpow.d(47): Error: no identifier for declarator `my`

    /tmp/tmp_6wblpow.d(47): Error: declaration expected, not `$`

    /tmp/tmp_6wblpow.d(48): Error: declaration expected, not `foreach`

    /tmp/tmp_6wblpow.d(50): Error: declaration expected, not `foreach`

    /tmp/tmp_6wblpow.d(52): Error: declaration expected, not `$`

    /tmp/tmp_6wblpow.d(53): Error: no identifier for declarator `last`

    /tmp/tmp_6wblpow.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_6wblpow.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd5jz4n9.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd5jz4n9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n\
    <| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\" };\nstring substring = \"def\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\" };\nstring substring = \"def\";\nstring[] result =\
    \ strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring\
    \ substring = \"def\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks so much for the help!\n\
    <|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring substring = \"def\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\" };\nstring substring = \"def\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks so much for the help!\n\
    <|/ c |>\n<| a dscore=0 \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp12m86hwk.d(17): Error: declaration expected, not `<`

    /tmp/tmp12m86hwk.d(30): Error: declaration expected, not `<`

    /tmp/tmp12m86hwk.d(40): Error: declaration expected, not `<`

    /tmp/tmp12m86hwk.d(50): Error: declaration expected, not `<`

    /tmp/tmp12m86hwk.d(60): Error: declaration expected, not `<`

    /tmp/tmp12m86hwk.d(70): Error: declaration expected, not `<`

    /tmp/tmp12m86hwk.d(80): Error: declaration expected, not `assert`

    /tmp/tmp12m86hwk.d(81): Error: declaration expected, not `assert`

    /tmp/tmp12m86hwk.d(82): Error: declaration expected, not `assert`

    /tmp/tmp12m86hwk.d(83): Error: declaration expected, not `assert`

    /tmp/tmp12m86hwk.d(84): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp12m86hwk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3u491cv.d(92): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3u491cv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI didn't downvote, but this doesn't answer the question.\
    \ OP wants to filter out all strings that don't contain `substring`, not just\
    \ those that contain it.\n<|/ c |>\n<| c |>\nI agree with you, but I thought that\
    \ OP wants to filter out all strings that don't contain `substring`, not just\
    \ those that contain it.\n<|/ c |>\n<| c |>\nI agree, but I thought that OP wants\
    \ to filter out all strings that don't contain `substring`, not just those that\
    \ contain it.\n<|/ c |>\n<| c |>\nI agree, but I thought that OP wants to filter\
    \ out all strings that don't contain `substring`, not just those that contain\
    \ it.\n<|/ c |>\n<| c |>\nI agree, but I thought that OP wants to filter out all\
    \ strings that don't contain `substring`, not just those that contain it.\n<|/\
    \ c |>\n<| a tags=string,c# |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring\
    \ substring = \"abc\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"\
    yz\" };\nstring substring = \"abc\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c# |>\n<| a |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"\
    yz\" };\nstring substring = \"abc\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c# dscore=1 |>\n<| a tags=string,c# |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"\
    , \"stu\", \"v\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxzral2n3.d(17): Error: declaration expected, not `<`

    /tmp/tmpxzral2n3.d(20): Error: unterminated character constant

    /tmp/tmpxzral2n3.d(20): Error: unterminated character constant

    /tmp/tmpxzral2n3.d(20): Error: unterminated character constant

    /tmp/tmpxzral2n3.d(23): Error: unterminated character constant

    /tmp/tmpxzral2n3.d(26): Error: unterminated character constant

    /tmp/tmpxzral2n3.d(29): Error: unterminated character constant

    /tmp/tmpxzral2n3.d(32): Error: unterminated character constant

    /tmp/tmpxzral2n3.d(39): Error: declaration expected, not `<`

    /tmp/tmpxzral2n3.d(46): Error: declaration expected, not `<`

    /tmp/tmpxzral2n3.d(53): Error: declaration expected, not `<`

    /tmp/tmpxzral2n3.d(65): Error: unterminated string constant starting at /tmp/tmpxzral2n3.d(65)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxzral2n3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use LINQ as my project is using .NET 2.0. I'm looking for a solution\
    \ that doesn't require LINQ.\n<|/ c |>\n<| c |>\n: I added a solution without\
    \ LINQ. Hope it helps.\n<|/ c |>\n<| a tags=c#,string,.net,string-comparison |>\n\
    <code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\",\
    \ \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring search = \"abc\";\nvar\
    \ result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use LINQ as my project\
    \ is using .NET 2.0. I'm looking for a solution that doesn't require LINQ.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring\
    \ search = \"abc\";\nvar result = strings.Where(s => s.IndexOf(search) > -1).ToArray();\n\
    </code>\n<|/ a tags=c#,string,.net,string-comparison |>\n<| c |>\nThanks for your\
    \ answer. Unfortunately I cannot use LINQ as my project is using .NET 2.0. I'm\
    \ looking for a solution that doesn't require LINQ.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\",\
    \ \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring search = \"abc\";\nvar\
    \ result = strings.Where(s => s.IndexOf(search) > -1).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,.net,string-comparison |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately I cannot use LINQ as my project is using .NET 2.0. I'm looking\
    \ for a solution that doesn't require LINQ.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"def\", \"ghi\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1bxhwk2a.d(11): Error: found `in` when expecting `;`

    /tmp/tmp1bxhwk2a.d(20): Error: declaration expected, not `<`

    /tmp/tmp1bxhwk2a.d(23): Error: unterminated character constant

    /tmp/tmp1bxhwk2a.d(23): Error: unterminated character constant

    /tmp/tmp1bxhwk2a.d(33): Error: declaration expected, not `<`

    /tmp/tmp1bxhwk2a.d(36): Error: unterminated character constant

    /tmp/tmp1bxhwk2a.d(36): Error: unterminated character constant

    /tmp/tmp1bxhwk2a.d(43): Error: declaration expected, not `<`

    /tmp/tmp1bxhwk2a.d(46): Error: unterminated character constant

    /tmp/tmp1bxhwk2a.d(46): Error: unterminated character constant

    /tmp/tmp1bxhwk2a.d(53): Error: declaration expected, not `<`

    /tmp/tmp1bxhwk2a.d(56): Error: unterminated character constant

    /tmp/tmp1bxhwk2a.d(56): Error: unterminated character constant

    /tmp/tmp1bxhwk2a.d(68): Error: unterminated string constant starting at /tmp/tmp1bxhwk2a.d(68)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bxhwk2a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_regex(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not match given regex\n            \n*/\nstring[] filter_by_not_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex and are longer\
    \ than given length\n            \n*/\nstring[] filter_by_regex_and_longer_than(string[]\
    \ strings, string regex, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex)\
    \ && strings[i].length() > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings \nunittest\n{\n \
    \   alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphm1m7c6p.d(101): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphm1m7c6p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseInsensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive, partialMatchCaseInsensitiveCaseInsensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo1f_gong.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1f_gong.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxotlskw.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxotlskw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7iq63un.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `void` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `{` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: expression expected, not `}`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` instead of statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7iq63un.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbdbi5a0.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbdbi5a0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3u491cv.d(92): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3u491cv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_regex(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not match given regex\n            \n*/\nstring[] filter_by_not_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_regex(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].matches(regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not match given regex\n            \n*/\nstring[] filter_by_not_regex(string[]\
    \ strings, string regex) \n{\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuf2tq0ew.d(107): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuf2tq0ew.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd5jz4n9.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd5jz4n9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer. I'm\
    \ sorry but I'm a beginner at C#. Can you please explain to me what this line\
    \ is doing? `string[] result = new string[strings.length];`\n<|/ c |>\n<| c |>\n\
    It creates an array of strings with the same length as the input array. `string[]\
    \ result = new string[strings.length];` creates an array with the length of the\
    \ input array. `result[i++] = s;` adds the string to the result array at the position\
    \ `i`. `i++` increments `i` by one and `s` becomes the new value of the `i`th\
    \ element of the result array. `result[i++] = s;` adds the string to the result\
    \ array at the position `i`. `i++` increments `i` by one and `s` becomes the new\
    \ value of the `i`th element of the result array. `result[i++] = s;` adds the\
    \ string to the result array at the position `i`. `i++` increments `i` by one\
    \ and `s` becomes the new value of the `i`th element of the result array. `result[i++]\
    \ = s;` adds the string to the result array at the position `i`. `i++` increments\
    \ `i` by one and `s` becomes the new value of the `i`th element of the result\
    \ array. `result[i++] = s;` adds the string to the result array at the position\
    \ `i`. `i++` increments `i` by one and `s` becomes the new value of the `i`th\
    \ element of the result array. `result[i++] = s;` adds the string to the result\
    \ array at the position `i`. `i++` increments `i` by one and `s` becomes the new\
    \ value of the `i`th element of the result array. `result[i++] = s;` adds the\
    \ string to the result array at the position `i`. `i++` increments `i` by one\
    \ and `s` becomes the new value of the `i`th element of the result array. `result[i++]\
    \ = s;` adds the string to the result array at the position `i`. `i++` increments\
    \ `i` by one and `s` becomes the new value of the `i`th element of the result\
    \ array. `result[i++] = s;` adds the string to the result array at the position\
    \ `i`. `i++` increments `i` by one and \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp610fbiw_.d(11): Error: found `in` when expecting `;`

    /tmp/tmp610fbiw_.d(20): Error: declaration expected, not `<`

    /tmp/tmp610fbiw_.d(23): Error: unterminated character constant

    /tmp/tmp610fbiw_.d(23): Error: unterminated character constant

    /tmp/tmp610fbiw_.d(31): Error: declaration expected, not `assert`

    /tmp/tmp610fbiw_.d(32): Error: declaration expected, not `assert`

    /tmp/tmp610fbiw_.d(33): Error: declaration expected, not `assert`

    /tmp/tmp610fbiw_.d(34): Error: declaration expected, not `assert`

    /tmp/tmp610fbiw_.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp610fbiw_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do it without using LINQ. I'm still learning C# and I haven't\
    \ learned LINQ yet, so I wanted to see if I could do it without it.\n<|/ c |>\n\
    <| c |>\nI added a solution without LINQ\n<|/ c |>\n<| c |>\nI added a solution\
    \ without LINQ\n<|/ c |>\n<| c |>\nI added a solution without LINQ\n<|/ c |>\n\
    <| a |>\n<code>\nstring[] strings = new string[] { \"one\", \"two\", \"three\"\
    , \"four\", \"five\" };\nstring substring = \"o\";\nvar result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1 tags=c#,arrays,string\
    \ |>\n<| a tags=c#,arrays,string |>\n<code>\nstring[] strings = new string[] {\
    \ \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring = \"o\"\
    ;\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,arrays,string |>\n<code>\nstring[] strings = new\
    \ string[] { \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring\
    \ = \"o\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring = \"\
    o\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new\
    \ string[] { \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring\
    \ = \"o\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\n\
    string[] strings = new string[] { \"one\", \"two\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppbb9ugcq.d(11): Error: found `in` when expecting `;`

    /tmp/tmppbb9ugcq.d(20): Error: declaration expected, not `<`

    /tmp/tmppbb9ugcq.d(23): Error: unterminated character constant

    /tmp/tmppbb9ugcq.d(23): Error: unterminated character constant

    /tmp/tmppbb9ugcq.d(39): Error: declaration expected, not `<`

    /tmp/tmppbb9ugcq.d(46): Error: declaration expected, not `<`

    /tmp/tmppbb9ugcq.d(53): Error: declaration expected, not `<`

    /tmp/tmppbb9ugcq.d(60): Error: declaration expected, not `<`

    /tmp/tmppbb9ugcq.d(67): Error: declaration expected, not `<`

    /tmp/tmppbb9ugcq.d(79): Error: unterminated string constant starting at /tmp/tmppbb9ugcq.d(79)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppbb9ugcq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with given substring\n\
    \            \n*/\nstring[] \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7gsmry33.d(106): Error: no identifier for declarator `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7gsmry33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd5jz4n9.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd5jz4n9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu8vbejfv.d(85): Error: found `unittest` instead of statement

    /tmp/tmpu8vbejfv.d(94): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8vbejfv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive))\n        {\n     \
    \       result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n        {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n        {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchCaseInsensitiveCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, case\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2rip35af.d(92): Error: expression expected, not `case`

    /tmp/tmp2rip35af.d(93): Error: found `unittest` when expecting `,`

    /tmp/tmp2rip35af.d(102): Error: found `void` when expecting `,`

    /tmp/tmp2rip35af.d(102): Error: found `{` when expecting `,`

    /tmp/tmp2rip35af.d(102): Error: expression expected, not `}`

    /tmp/tmp2rip35af.d(102): Error: found `End of File` when expecting `,`

    /tmp/tmp2rip35af.d(102): Error: found `End of File` when expecting `)`

    /tmp/tmp2rip35af.d(102): Error: found `End of File` when expecting `)`

    /tmp/tmp2rip35af.d(102): Error: found `End of File` instead of statement

    /tmp/tmp2rip35af.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp2rip35af.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2rip35af.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a |>\n<code>\nstring[] stringArray = { \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\" };\nstring searchString = \"a\";\nstring[] filteredArray\
    \ = stringArray.Where(x => x.Contains(searchString)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays dscore=2 |>\n<| a |>\n<code>\nstring[] stringArray =\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" };\nstring searchString = \"a\";\nstring[] filteredArray\
    \ = stringArray.Where(x => x.Contains(searchString)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray\
    \ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\" };\nstring searchString = \"a\";\nstring[] filteredArray\
    \ = stringArray.Where(x => x.Contains(searchString)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring searchString = \"a\";\n\
    string[] filteredArray = stringArray.Where(x => x.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpob2byh72.d(17): Error: declaration expected, not `<`

    /tmp/tmpob2byh72.d(24): Error: declaration expected, not `<`

    /tmp/tmpob2byh72.d(31): Error: declaration expected, not `<`

    /tmp/tmpob2byh72.d(38): Error: declaration expected, not `<`

    /tmp/tmpob2byh72.d(45): Error: declaration expected, not `<`

    /tmp/tmpob2byh72.d(57): Error: unterminated string constant starting at /tmp/tmpob2byh72.d(57)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpob2byh72.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            bool found = false;\n            for(int j = 0; j < result.length;\
    \ ++j)\n            {\n                if(result[j].contains(substring))\n   \
    \             {\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if(!found)\n                result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            bool found = false;\n            for(int j = 0; j < result.length;\
    \ ++j)\n            {\n                if(result[j].contains(substring))\n   \
    \             {\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if(!found)\n            {\n   \
    \             bool foundCaseInsensitive = false;\n                for(int j =\
    \ 0; j < result.length; ++j)\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0p282kyz.d(96): Error: found `unittest` instead of statement

    /tmp/tmp0p282kyz.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp0p282kyz.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp0p282kyz.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0p282kyz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer. I'm a beginner\
    \ at C# and I didn't know about LINQ. I'll look into it.\n<|/ c |>\n<| c |>\n\
    LINQ is very powerful and very easy to use. LINQ is also very easy to read and\
    \ understand. LINQ also has some nice features like deferred execution and lazy\
    \ evaluation. LINQ is also very easy to write in C#.\n<|/ c |>\n<| c |>\nLINQ\
    \ is also very easy to write in C#. LINQ is also very easy to read and understand.\
    \ LINQ also has some nice features like deferred execution and lazy evaluation.\
    \ LINQ is also very easy to write in C#.\n<|/ c |>\n<| c |>\nLINQ is also very\
    \ easy to write in C#. LINQ is also very easy to read and understand. LINQ also\
    \ has some nice features like deferred execution and lazy evaluation. LINQ is\
    \ also very easy to write in C#.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nstring[] substrings = new string[] { \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring[] result = new string[substrings.Length];\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp64rfw6df.d(17): Error: declaration expected, not `<`

    /tmp/tmp64rfw6df.d(20): Error: unterminated character constant

    /tmp/tmp64rfw6df.d(20): Error: unterminated character constant

    /tmp/tmp64rfw6df.d(20): Error: unterminated character constant

    /tmp/tmp64rfw6df.d(34): Error: semicolon expected, not `{`

    /tmp/tmp64rfw6df.d(34): Error: declaration expected, not `{`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64rfw6df.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbdbi5a0.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbdbi5a0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchCaseInsensitiveCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpis5s07ce.d(80): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpis5s07ce.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool allowEmpty, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty, bool ignoreCase, bool\
    \ allowEmptyStrings) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, allowEmpty, ignoreCase, allowEmptyStrings))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9dry037a.d(12): Error: no property `contains` for type `string`

    /tmp/tmp9dry037a.d(26): Error: no property `contains` for type `string`

    /tmp/tmp9dry037a.d(40): Error: no property `contains` for type `string`

    /tmp/tmp9dry037a.d(54): Error: no property `contains` for type `string`

    /tmp/tmp9dry037a.d(68): Error: no property `contains` for type `string`

    /tmp/tmp9dry037a.d(82): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9dry037a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ui3x2un.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ui3x2un.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5v7zavw3.d(91): Error: expression expected, not `unittest`

    /tmp/tmp5v7zavw3.d(92): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp5v7zavw3.d(93): Error: expression expected, not `alias`

    /tmp/tmp5v7zavw3.d(93): Error: found `candidate` when expecting `)`

    /tmp/tmp5v7zavw3.d(93): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5v7zavw3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring) : !s.contains(substring, caseSensitive))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring, partialMatch) : !s.contains(substring, caseSensitive,\
    \ partialMatch))\n        {\n            result[i++] = s;\n        }\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(!caseSensitive ? !s.contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !s.contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that do not contain given substring\n            \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring, bool caseSensi\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3by7e1b.d(11): Error: found `in` when expecting `;`

    /tmp/tmpg3by7e1b.d(28): Error: found `in` when expecting `;`

    /tmp/tmpg3by7e1b.d(45): Error: found `in` when expecting `;`

    /tmp/tmpg3by7e1b.d(62): Error: found `in` when expecting `;`

    /tmp/tmpg3by7e1b.d(79): Error: found `in` when expecting `;`

    /tmp/tmpg3by7e1b.d(93): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3by7e1b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partial) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partial))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partial) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwaxpowi9.d(97): Error: found `unittest` instead of statement

    /tmp/tmpwaxpowi9.d(106): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwaxpowi9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            if(partialMatch)\n            {\n                bool\
    \ found = false;\n                for(int j = 0; j < result.length; ++j)\n   \
    \             {\n                    if(result[j].contains(substring))\n     \
    \               {\n                        found = true;\n                   \
    \     break;\n                    }\n                }\n                if(!found)\n\
    \                    result[i] = strings[i];\n            }\n            else\n\
    \                result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n        {\n\
    \            if(partialMatch)\n            {\n                bool found = false;\n\
    \                for(int j = 0; j < result.length; ++j)\n                {\n \
    \                   if(result[j].contains(substring))\n                    {\n\
    \                        found = true;\n                        \nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfgj37ow5.d(96): Error: found `unittest` instead of statement

    /tmp/tmpfgj37ow5.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpfgj37ow5.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpfgj37ow5.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpfgj37ow5.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpfgj37ow5.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfgj37ow5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbdbi5a0.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbdbi5a0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays,list |>\n<| c |>\nThanks for your answer. I am not\
    \ allowed to use any built in functions. I should also mention that I am not allowed\
    \ to use any built in libraries. I should also mention that I am not allowed to\
    \ use any built in libraries. I should also mention that I am not allowed to use\
    \ any built in libraries. I should also mention that I am not allowed to use any\
    \ built in libraries. I should also mention that I am not allowed to use any built\
    \ in libraries. I should also mention that I am not allowed to use any built in\
    \ libraries. I should also mention that I am not allowed to use any built in libraries.\
    \ I should also mention that I am not allowed to use any built in libraries. I\
    \ should also mention that I am not allowed to use any built in libraries. I should\
    \ also mention that I am not allowed to use any built in libraries. I should also\
    \ mention that I am not allowed to use any built in libraries. I should also mention\
    \ that I am not allowed to use any built in libraries. I should also mention that\
    \ I am not allowed to use any built in libraries. I should also mention that I\
    \ am not allowed to use any built in libraries. I should also mention that I am\
    \ not allowed to use any built in libraries. I should also mention that I am not\
    \ allowed to use any built in libraries. I should also mention that I am not allowed\
    \ to use any built in libraries. I should also mention that I am not allowed to\
    \ use any built in libraries. I should also mention that I am not allowed to use\
    \ any built in libraries. I should also mention that I am not allowed to use any\
    \ built in libraries. I should also mention that I am not allowed to use any built\
    \ in libraries. I should also mention that I am not allowed to use any built in\
    \ libraries. I should also mention that I am not allowed to use any built in libraries.\
    \ I should also mention that I am not allowed to use any built in libraries. I\
    \ should also mention that I am not allowed to use any built in libraries. I should\
    \ also mention that I am not allowed to use any built in libraries. I should also\
    \ mention that I am not allowed to use any built in libraries. I should also mention\
    \ that I am not allowed to use any built in libraries. I should also mention that\
    \ I am not allowed to use any built in libraries. I should also mention that I\
    \ am not allowed to use any built in libraries. I should also mention that I am\
    \ not allowed to use any built in libraries. I should also \nunittest\n{\n   \
    \ alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq6po_gym.d(17): Error: declaration expected, not `<`

    /tmp/tmpq6po_gym.d(25): Error: declaration expected, not `assert`

    /tmp/tmpq6po_gym.d(26): Error: declaration expected, not `assert`

    /tmp/tmpq6po_gym.d(27): Error: declaration expected, not `assert`

    /tmp/tmpq6po_gym.d(28): Error: declaration expected, not `assert`

    /tmp/tmpq6po_gym.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq6po_gym.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase: true))\n        {\n            result[i] = strings[i];\n       \
    \ }\n    }\n    return result;\n}\n/*\n Filter an input list of strings only for\
    \ ones that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, startIndex: startIndex, endIndex:\
    \ endIndex))\n        {\n            result[i] = strings[i];\n        }\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex) : !strings[i].contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex, ignoreCase: true))\n        {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex, bool caseSensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < string\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2k92au0.d(44): Error: found `:` when expecting `,`

    /tmp/tmpd2k92au0.d(60): Error: found `:` when expecting `,`

    /tmp/tmpd2k92au0.d(60): Error: found `:` when expecting `,`

    /tmp/tmpd2k92au0.d(76): Error: found `:` when expecting `,`

    /tmp/tmpd2k92au0.d(76): Error: found `:` when expecting `,`

    /tmp/tmpd2k92au0.d(76): Error: found `:` when expecting `,`

    /tmp/tmpd2k92au0.d(76): Error: found `:` when expecting `,`

    /tmp/tmpd2k92au0.d(76): Error: found `:` when expecting `,`

    /tmp/tmpd2k92au0.d(91): Error: found `unittest` when expecting `;` following `for`
    condition

    /tmp/tmpd2k92au0.d(100): Error: found `void` when expecting `)`

    /tmp/tmpd2k92au0.d(100): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2k92au0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp93mpa12p.d(106): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93mpa12p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3hc_mn9.d(83): Error: expression expected, not `unittest`

    /tmp/tmpm3hc_mn9.d(84): Error: found `{` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `alias`

    /tmp/tmpm3hc_mn9.d(85): Error: found `candidate` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `=`

    /tmp/tmpm3hc_mn9.d(85): Error: found `filter_by_substring` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `;`

    /tmp/tmpm3hc_mn9.d(87): Error: found `assert` when expecting `,`

    /tmp/tmpm3hc_mn9.d(87): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(88): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(89): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(90): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(91): Error: expression expected, not `}`

    /tmp/tmpm3hc_mn9.d(92): Error: found `void` when expecting `,`

    /tmp/tmpm3hc_mn9.d(92): Error: found `{` when expecting `,`

    /tmp/tmpm3hc_mn9.d(92): Error: expression expected, not `}`

    /tmp/tmpm3hc_mn9.d('
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjacu16y.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjacu16y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex, endIndex) : !strings[i].contains(substring, startIndex, endIndex,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex, bool caseSensitive) \n{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring, startIndex,\
    \ endIndex) : !strings[i].contains(substring, startIndex, endIndex, caseSen\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy6fqsalo.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmpy6fqsalo.d(92): Error: found `void` when expecting `,`

    /tmp/tmpy6fqsalo.d(92): Error: found `{` when expecting `,`

    /tmp/tmpy6fqsalo.d(92): Error: expression expected, not `}`

    /tmp/tmpy6fqsalo.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmpy6fqsalo.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmpy6fqsalo.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmpy6fqsalo.d(92): Error: found `End of File` instead of statement

    /tmp/tmpy6fqsalo.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpy6fqsalo.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6fqsalo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work. `string[]\
    \ result = new string[strings.length];` will throw an `ArgumentOutOfRangeException`\
    \ because `strings.length` is `0`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n\
    <|/ c |>\n<| c |>\nThis code doesn't work. `string[] result = new string[strings.length];`\
    \ will throw an `ArgumentOutOfRangeException` because `strings.length` is `0`.\n\
    <|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\nThis code doesn't\
    \ work. `string[] result = new string[strings.length];` will throw an `ArgumentOutOfRangeException`\
    \ because `strings.length` is `0`.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\n</code>\nThis line is wrong.\
    \ strings.length is 0, so you get an ArgumentOutOfRangeException.\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0, so you get an ArgumentOutOfRangeException.\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0, so you get an ArgumentOutOfRangeException.\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\n</code>\nThis line is wrong. strings.length is 0, so\
    \ you get an ArgumentOutOfRangeException.\n<|/ a tags=c#,string,arrays |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0, so you get an ArgumentOutOfRangeException.\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new\
    \ string[\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpljj3jqoa.d(11): Error: found `in` when expecting `;`

    /tmp/tmpljj3jqoa.d(20): Error: declaration expected, not `<`

    /tmp/tmpljj3jqoa.d(23): Error: unterminated character constant

    /tmp/tmpljj3jqoa.d(29): Error: unterminated character constant

    /tmp/tmpljj3jqoa.d(35): Error: unterminated character constant

    /tmp/tmpljj3jqoa.d(40): Error: declaration expected, not `<`

    /tmp/tmpljj3jqoa.d(46): Error: declaration expected, not `<`

    /tmp/tmpljj3jqoa.d(52): Error: declaration expected, not `<`

    /tmp/tmpljj3jqoa.d(58): Error: declaration expected, not `<`

    /tmp/tmpljj3jqoa.d(64): Error: declaration expected, not `<`

    /tmp/tmpljj3jqoa.d(74): Error: declaration expected, not `assert`

    /tmp/tmpljj3jqoa.d(75): Error: declaration expected, not `assert`

    /tmp/tmpljj3jqoa.d(76): Error: declaration expected, not `assert`

    /tmp/tmpljj3jqoa.d(77): Error: declaration expected, not `assert`

    /tmp/tmpljj3jqoa.d(78): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpljj3jqoa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3u491cv.d(92): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3u491cv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ strings = new string[] { \"one\", \"two\", \"three\", \"four\", \"five\" };\n\
    string[] substrings = new string[] { \"one\", \"two\" };\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcy_1j05u.d(17): Error: declaration expected, not `<`

    /tmp/tmpcy_1j05u.d(22): Error: semicolon expected, not `{`

    /tmp/tmpcy_1j05u.d(22): Error: declaration expected, not `{`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcy_1j05u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer the question. OP\
    \ wants to remove all strings that don't contain `substring`, not just those that\
    \ contain it.\n<|/ c |>\n<| c |>\nI misunderstood the question. I'll update my\
    \ answer.\n<|/ c |>\n<| c |>\nI updated my answer to reflect your comment. Thanks.\n\
    <|/ c |>\n<| c |>\nI updated my answer to reflect your comment. Thanks.\n<|/ c\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] {\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't answer the question. OP wants to remove all strings that don't contain\
    \ `substring`, not just those that contain it.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n\
    string[] result = new string[strings.Length];\nfor (int i = 0; i < strings.Length;\
    \ i++)\n{\n    if (strings[i].Contains(\"a\"))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to remove all strings that don't contain `substring`, not just those that contain\
    \ it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\" };\nstring[] result = new string[\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3p81wca1.d(17): Error: declaration expected, not `<`

    /tmp/tmp3p81wca1.d(20): Error: unterminated character constant

    /tmp/tmp3p81wca1.d(20): Error: unterminated character constant

    /tmp/tmp3p81wca1.d(23): Error: unterminated character constant

    /tmp/tmp3p81wca1.d(35): Error: declaration expected, not `for`

    /tmp/tmp3p81wca1.d(35): Error: no identifier for declarator `i`

    /tmp/tmp3p81wca1.d(35): Error: declaration expected, not `<`

    /tmp/tmp3p81wca1.d(35): Error: no identifier for declarator `i`

    /tmp/tmp3p81wca1.d(35): Error: declaration expected, not `++`

    /tmp/tmp3p81wca1.d(39): Error: unrecognized declaration

    /tmp/tmp3p81wca1.d(43): Error: unterminated character constant

    /tmp/tmp3p81wca1.d(43): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3p81wca1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ true))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase: ignoreCase, ignoreCase: ignoreCase))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !string\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzyunw6dk.d(40): Error: found `:` when expecting `,`

    /tmp/tmpzyunw6dk.d(54): Error: found `:` when expecting `,`

    /tmp/tmpzyunw6dk.d(68): Error: found `:` when expecting `,`

    /tmp/tmpzyunw6dk.d(68): Error: found `:` when expecting `,`

    /tmp/tmpzyunw6dk.d(83): Error: found `unittest` when expecting `:`

    /tmp/tmpzyunw6dk.d(92): Error: found `void` when expecting `)`

    /tmp/tmpzyunw6dk.d(92): Error: found `{` when expecting `;` following statement

    /tmp/tmpzyunw6dk.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyunw6dk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt_yool6t.d(97): Error: expression expected, not `unittest`

    /tmp/tmpt_yool6t.d(98): Error: found `{` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `alias`

    /tmp/tmpt_yool6t.d(99): Error: found `candidate` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `=`

    /tmp/tmpt_yool6t.d(99): Error: found `filter_by_substring` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `;`

    /tmp/tmpt_yool6t.d(101): Error: found `assert` when expecting `,`

    /tmp/tmpt_yool6t.d(101): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(102): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(103): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(104): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(105): Error: expression expected, not `}`

    /tmp/tmpt_yool6t.d(106): Error: found `void` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: found `{` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: expression expected, not `}`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `)`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `)`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_yool6t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmqt5o9do.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqt5o9do.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3hc_mn9.d(83): Error: expression expected, not `unittest`

    /tmp/tmpm3hc_mn9.d(84): Error: found `{` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `alias`

    /tmp/tmpm3hc_mn9.d(85): Error: found `candidate` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `=`

    /tmp/tmpm3hc_mn9.d(85): Error: found `filter_by_substring` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `;`

    /tmp/tmpm3hc_mn9.d(87): Error: found `assert` when expecting `,`

    /tmp/tmpm3hc_mn9.d(87): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(88): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(89): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(90): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(91): Error: expression expected, not `}`

    /tmp/tmpm3hc_mn9.d(92): Error: found `void` when expecting `,`

    /tmp/tmpm3hc_mn9.d(92): Error: found `{` when expecting `,`

    /tmp/tmpm3hc_mn9.d(92): Error: expression expected, not `}`

    /tmp/tmpm3hc_mn9.d('
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase())\
    \ && !ignoreCase ? !strings[i].toLowerCase().contains(substring.toLowerCase())\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()) && !ignoreCase)\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()) && !ignoreCase\
    \ ? !strings[i].toLowerCase().contains(substring.toLowerCase()) : !strings[i].toLowerCase().contains(substring.toLowerCase())\
    \ && !ignoreCase)\n        {\n            result[i] = strings[i];\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] \nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmparoonsnm.d(88): Error: no identifier for declarator `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmparoonsnm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8zf_0tw8.d(92): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8zf_0tw8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm4b4zsqm.d(106): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm4b4zsqm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7iq63un.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `void` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `{` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: expression expected, not `}`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` instead of statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7iq63un.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nI added a more generic solution that should\
    \ work for any type of string\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\n\
    string[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\nstring[] result =\
    \ stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray\
    \ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\nstring[] result =\
    \ stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\",\
    \ \"d\", \"\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5t6r49zo.d(11): Error: found `in` when expecting `;`

    /tmp/tmp5t6r49zo.d(20): Error: declaration expected, not `<`

    /tmp/tmp5t6r49zo.d(33): Error: declaration expected, not `<`

    /tmp/tmp5t6r49zo.d(40): Error: declaration expected, not `<`

    /tmp/tmp5t6r49zo.d(47): Error: declaration expected, not `<`

    /tmp/tmp5t6r49zo.d(54): Error: declaration expected, not `<`

    /tmp/tmp5t6r49zo.d(66): Error: unterminated string constant starting at /tmp/tmp5t6r49zo.d(66)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5t6r49zo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjacu16y.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjacu16y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ this error `The method filter_by_substring(String[], String) in the type Main\
    \ is not applicable for the arguments (String[], String)`\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a full working example. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I tried your code, but I got this error `The\
    \ method filter_by_substring(String[], String) in the type Main is not applicable\
    \ for the arguments (String[], String)`\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a full working example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I tried your code, but I got this error `The method filter_by_substring(String[],\
    \ String) in the type Main is not applicable for the arguments (String[], String)`\n\
    <|/ c |>\n<| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\n\
    import java.util.Scanner;\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4dduuwzz.d(17): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4dduuwzz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseInsensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive, partialMatchCaseInsensitiveCaseIn\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3btoo6te.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmp3btoo6te.d(92): Error: found `void` when expecting `,`

    /tmp/tmp3btoo6te.d(92): Error: found `{` when expecting `,`

    /tmp/tmp3btoo6te.d(92): Error: expression expected, not `}`

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` instead of statement

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3btoo6te.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjacu16y.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjacu16y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThank you very much for your answer!\
    \ I really appreciate it! I really appreciate your help! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpchg80ya4.d(17): Error: declaration expected, not `<`

    /tmp/tmpchg80ya4.d(25): Error: declaration expected, not `assert`

    /tmp/tmpchg80ya4.d(26): Error: declaration expected, not `assert`

    /tmp/tmpchg80ya4.d(27): Error: declaration expected, not `assert`

    /tmp/tmpchg80ya4.d(28): Error: declaration expected, not `assert`

    /tmp/tmpchg80ya4.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchg80ya4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmlda4jvz.d(11): Error: found `s` when expecting `;` following statement

    /tmp/tmpmlda4jvz.d(11): Error: expression expected, not `:`

    /tmp/tmpmlda4jvz.d(11): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmlda4jvz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int start) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ start))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int start, int end) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ start, end))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int start, int end, int length) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(!strings[i].contains(substring, start, end, length))\n     \
    \       result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain given substring\n  \
    \          \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int start, int end, int length, int startIndex) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, start, end, length, startIndex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int start, int end, int length, int startIndex, int endIndex) \n{\n    string[]\
    \ result = new string[strings.length];\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph8lfy512.d(95): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8lfy512.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            if(partialMatch)\n            {\n                bool\
    \ found = false;\n                for(int j = 0; j < strings[i].length(); ++j)\n\
    \                {\n                    if(strings[i].charAt(j) == substring.charAt(j))\n\
    \                    {\n                        found = true;\n              \
    \          break;\n                    }\n                }\n                if(!found)\n\
    \                    result[i] = strings[i];\n            }\n            else\n\
    \                result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n        {\n\
    \            if(partialMatch)\n            {\n                bool found = false;\n\
    \                for(int j = 0; j < strings[i].length(); ++j)\n              \
    \  {\n                    if(strings[i].charAt(j) == sub\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5fp_qyuj.d(93): Error: found `unittest` when expecting `)`

    /tmp/tmp5fp_qyuj.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp5fp_qyuj.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp5fp_qyuj.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp5fp_qyuj.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp5fp_qyuj.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fp_qyuj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchIgnoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpapqlddvq.d(80): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpapqlddvq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer! I didn't know\
    \ about `Contains`. However, I still don't understand why my code doesn't work.\
    \ Can you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added\
    \ a comment to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I still don't understand why my code doesn't work. Can you please explain why\
    \ my code doesn't work?\n<|/ c |>\n<| c |>\nI added a comment to my answer. Hope\
    \ it helps.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\" };\nstring substring = \"2\";\nstring[] result = strings.Where(x => x.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I didn't know about\
    \ `Contains`. However, I still don't understand why my code doesn't work. Can\
    \ you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nThe code you\
    \ posted doesn't work because you didn't assign the result of the `Where` call\
    \ to a variable. `Where` returns a `IEnumerable<T>`, which you then need to convert\
    \ to an array using `ToArray`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\" };\nstring substring = \"2\";\nstring[] result = strings.Where(x => x.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer! I didn't\
    \ know about `Contains`. However, I still don't understand why my code doesn't\
    \ work. Can you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\n\
    The code you posted doesn't work because you didn't assign the result of the `Where`\
    \ call to a variable. `Where` returns a `IEnumerable<T>`, which you then need\
    \ to convert to an array using `ToArray\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpimwpx1ty.d(17): Error: declaration expected, not `<`

    /tmp/tmpimwpx1ty.d(20): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(20): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(20): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(20): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(26): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(26): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(26): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(36): Error: declaration expected, not `<`

    /tmp/tmpimwpx1ty.d(39): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(39): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(39): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(39): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(42): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(42): Error: unterminated character constant

    /tmp/tmpimwpx1ty.d(49): Error: declaration expected, not `<`

    /tmp/tmpimwpx1ty.d(52)'
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis code doesn't compile for me. `string[]\
    \ result = new string[strings.length];` gives an error `Cannot implicitly convert\
    \ type 'string[]' to 'string'`\n<|/ c |>\n<| c |>\nIt compiles fine for me. Are\
    \ you sure you copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it exactly\
    \ as you wrote it. I'm running it on Visual Studio 2015.\n<|/ c |>\n<| c |>\n\
    I see it now. `string[] result = new string[strings.length];` should be `string[]\
    \ result = new string[strings.length - 1];`\n<|/ c |>\n<| c |>\nYes, I see it\
    \ now. `string[] result = new string[strings.length];` should be `string[] result\
    \ = new string[strings.length - 1];`\n<|/ c |>\n<| a |>\n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is wrong. strings is an array\
    \ of strings, so strings.length will return the number of strings in the array.\
    \ \nYou probably meant to write:\n<code>\nstring[] result = new string[strings.length\
    \ - 1];\n</code>\n<|/ a tags=c#,string,arrays dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings is an array of strings, so strings.length will return the\
    \ number of strings in the array. You probably meant to write:\n<code>\nstring[]\
    \ result = new string[strings.length - 1];\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings is an array of strings, so strings.length will return the\
    \ number of strings in the array. You probably meant to write:\n<code>\nstring[]\
    \ result = new string[strings.length - 1];\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings is an array of strings, so strings.length\
    \ will return the number of strings in the array. You probably meant to write:\n\
    <code>\nstring[] result = new \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx1vrd1j3.d(17): Error: declaration expected, not `<`

    /tmp/tmpx1vrd1j3.d(20): Error: unterminated character constant

    /tmp/tmpx1vrd1j3.d(26): Error: unterminated character constant

    /tmp/tmpx1vrd1j3.d(37): Error: declaration expected, not `<`

    /tmp/tmpx1vrd1j3.d(42): Error: declaration expected, not `<`

    /tmp/tmpx1vrd1j3.d(47): Error: declaration expected, not `<`

    /tmp/tmpx1vrd1j3.d(51): Error: declaration expected, not `<`

    /tmp/tmpx1vrd1j3.d(56): Error: declaration expected, not `<`

    /tmp/tmpx1vrd1j3.d(60): Error: declaration expected, not `<`

    /tmp/tmpx1vrd1j3.d(65): Error: declaration expected, not `<`

    /tmp/tmpx1vrd1j3.d(73): Error: declaration expected, not `assert`

    /tmp/tmpx1vrd1j3.d(74): Error: declaration expected, not `assert`

    /tmp/tmpx1vrd1j3.d(75): Error: declaration expected, not `assert`

    /tmp/tmpx1vrd1j3.d(76): Error: declaration expected, not `assert`

    /tmp/tmpx1vrd1j3.d(77): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx1vrd1j3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7iq63un.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `void` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `{` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: expression expected, not `}`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` instead of statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7iq63un.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3u491cv.d(92): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3u491cv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive))\n        {\n     \
    \       result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase))\n        {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool ignoreCase, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase))\n        {\n            result[i] =\
    \ strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain given substring\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring, bool\
    \ caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase, ignoreCase))\n        {\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdlqiy1y6.d(94): Error: found `unittest` instead of statement

    /tmp/tmpdlqiy1y6.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpdlqiy1y6.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdlqiy1y6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string,list |>\n<| c |>\nThanks for your answer! I appreciate\
    \ it! I didn't know about `Contains`. However, I still have a question: why does\
    \ `string[] result = new string[strings.length];` work? I thought that `string[]\
    \ result = new string[strings.length];` would create a new array and copy the\
    \ contents of `strings` into it? Why does it not work if I do `string[] result\
    \ = strings;`?\n<|/ c |>\n<| c |>\nBecause strings are reference types. When you\
    \ do `string[] result = strings;` you just copy the references to the same strings.\
    \ So when you change `result[0]` you also change `strings[0]`. When you do `string[]\
    \ result = new string[strings.length];` you create a new array and copy the references\
    \ to the same strings. So when you change `result[0]` you also change `strings[0]`.\n\
    <|/ c |>\n<| c |>\nOh I see. So `string[] result = strings;` would create a new\
    \ array and copy the references to the same strings. But `string[] result = new\
    \ string[strings.length];` would create a new array and copy the references to\
    \ the same strings. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\n</code>\nThis line creates a new array\
    \ and copies the contents of strings into it. strings is just a reference to the\
    \ original array, so when you change result[0], you are changing strings[0] as\
    \ well. \n<code>\nstring[] result = strings;\n</code>\nThis line creates a new\
    \ array and copies the references to the same strings into it. strings is just\
    \ a reference to the original array, so when you change result[0], you are changing\
    \ strings[0] as well.\n<|/ a tags=arrays,c#,string,list |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\n</code>\nThis line creates\
    \ a new array and copies the contents of strings into it. strings is just a reference\
    \ to the original array, so when you change result[0], you are changing strings[0]\
    \ as well. \n<code>\nstring[] result = strings;\n</code>\nThis line creates a\
    \ new array and copies the references to the same strings into it. strings is\
    \ just a reference to the original array, so when you change result[0], you are\
    \ changing strings[0] as well.\n<|/ a tags=arrays,c\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplnpfxeq5.d(17): Error: declaration expected, not `<`

    /tmp/tmplnpfxeq5.d(20): Error: unterminated character constant

    /tmp/tmplnpfxeq5.d(31): Error: declaration expected, not `<`

    /tmp/tmplnpfxeq5.d(35): Error: declaration expected, not `<`

    /tmp/tmplnpfxeq5.d(41): Error: declaration expected, not `<`

    /tmp/tmplnpfxeq5.d(45): Error: declaration expected, not `<`

    /tmp/tmplnpfxeq5.d(52): Error: declaration expected, not `assert`

    /tmp/tmplnpfxeq5.d(53): Error: declaration expected, not `assert`

    /tmp/tmplnpfxeq5.d(54): Error: declaration expected, not `assert`

    /tmp/tmplnpfxeq5.d(55): Error: declaration expected, not `assert`

    /tmp/tmplnpfxeq5.d(56): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplnpfxeq5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd5jz4n9.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd5jz4n9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbdbi5a0.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbdbi5a0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7iq63un.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `void` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `{` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: expression expected, not `}`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` instead of statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7iq63un.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search\
    \ = \"you\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = { \"hello\"\
    , \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search\
    \ = \"you\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tag\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxe3fd71k.d(17): Error: declaration expected, not `<`

    /tmp/tmpxe3fd71k.d(24): Error: declaration expected, not `<`

    /tmp/tmpxe3fd71k.d(31): Error: declaration expected, not `<`

    /tmp/tmpxe3fd71k.d(38): Error: declaration expected, not `<`

    /tmp/tmpxe3fd71k.d(45): Error: declaration expected, not `<`

    /tmp/tmpxe3fd71k.d(52): Error: declaration expected, not `<`

    /tmp/tmpxe3fd71k.d(59): Error: declaration expected, not `<`

    /tmp/tmpxe3fd71k.d(66): Error: declaration expected, not `<`

    /tmp/tmpxe3fd71k.d(73): Error: declaration expected, not `assert`

    /tmp/tmpxe3fd71k.d(74): Error: declaration expected, not `assert`

    /tmp/tmpxe3fd71k.d(75): Error: declaration expected, not `assert`

    /tmp/tmpxe3fd71k.d(76): Error: declaration expected, not `assert`

    /tmp/tmpxe3fd71k.d(77): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxe3fd71k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ true))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].contains(substring, ignoreCase: ignoreCase, ignoreCase: ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].contains(substring, ignore\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmparudmgdu.d(40): Error: found `:` when expecting `,`

    /tmp/tmparudmgdu.d(54): Error: found `:` when expecting `,`

    /tmp/tmparudmgdu.d(68): Error: found `:` when expecting `,`

    /tmp/tmparudmgdu.d(68): Error: found `:` when expecting `,`

    /tmp/tmparudmgdu.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmparudmgdu.d(92): Error: found `void` when expecting `,`

    /tmp/tmparudmgdu.d(92): Error: found `{` when expecting `,`

    /tmp/tmparudmgdu.d(92): Error: expression expected, not `}`

    /tmp/tmparudmgdu.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmparudmgdu.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmparudmgdu.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmparudmgdu.d(92): Error: found `End of File` instead of statement

    /tmp/tmparudmgdu.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmparudmgdu.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmparu'
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n    {\n        if (s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer. I'm new to C# and\
    \ I didn't know about LINQ. I'll look into it.\n<|/ c |>\n<| c |>\nI added a solution\
    \ using LINQ. Hope it helps.\n<|/ c |>\n<| c |>\nThanks again. I'll look into\
    \ LINQ. I'm still a beginner at C#.\n<|/ c |>\n<| c |>\nI added a solution using\
    \ LINQ. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.IO;\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3y13hsn3.d(11): Error: found `s` when expecting `;` following statement

    /tmp/tmp3y13hsn3.d(11): Error: expression expected, not `:`

    /tmp/tmp3y13hsn3.d(11): Error: found `strings` when expecting `;` following `for`
    condition

    /tmp/tmp3y13hsn3.d(20): Error: declaration expected, not `<`

    /tmp/tmp3y13hsn3.d(23): Error: unterminated character constant

    /tmp/tmp3y13hsn3.d(23): Error: unterminated character constant

    /tmp/tmp3y13hsn3.d(23): Error: unterminated character constant

    /tmp/tmp3y13hsn3.d(29): Error: unterminated character constant

    /tmp/tmp3y13hsn3.d(29): Error: unterminated character constant

    /tmp/tmp3y13hsn3.d(37): Error: semicolon expected, not `.`

    /tmp/tmp3y13hsn3.d(37): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmp3y13hsn3.d(38): Error: semicolon expected, not `.`

    /tmp/tmp3y13hsn3.d(38): Error: no identifier for declarator `.Linq`

    /tmp/tmp3y13hsn3.d(39): Error: semicolon expected, not `.`

    /tmp/tmp3y13hsn3.d(39): Error: no identifier for declarator `.Text`

    /tmp/tmp3y13hsn3.d(4'
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6413ytm.d(92): Error: no identifier for declarator `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6413ytm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6413ytm.d(92): Error: no identifier for declarator `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6413ytm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7iq63un.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `void` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `{` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: expression expected, not `}`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` instead of statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_7iq63un.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7iq63un.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd5jz4n9.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd5jz4n9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptynl8ik7.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `void` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `{` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: expression expected, not `}`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` instead of statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmptynl8ik7.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptynl8ik7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmqt5o9do.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqt5o9do.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works fine. However I wanted to know if there is a way to do it with\
    \ LINQ. Thanks again.\n<|/ c |>\n<| c |>\nI added a LINQ solution to my answer\n\
    <|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works fine. However I wanted to know if there is a way to do it with\
    \ LINQ. Thanks again.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings =\
    \ new string[] { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"\
    , \"vwx\", \"yz\" };\nstring substring = \"abc\";\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThanks\
    \ for your answer. I tried your solution and it works fine. However I wanted to\
    \ know if there is a way to do it with LINQ. Thanks again.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring substring = \"abc\"\
    ;\nvar result = strings.Where(s => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| c |>\nThanks for your answer. I tried your solution and it works fine.\
    \ However I wanted to know if there is a way to do it with LINQ. Thanks again.\n\
    <|/ c |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring\
    \ substring = \"abc\";\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works fine. \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcvl7qifk.d(11): Error: found `in` when expecting `;`

    /tmp/tmpcvl7qifk.d(20): Error: declaration expected, not `<`

    /tmp/tmpcvl7qifk.d(31): Error: declaration expected, not `<`

    /tmp/tmpcvl7qifk.d(41): Error: declaration expected, not `<`

    /tmp/tmpcvl7qifk.d(51): Error: declaration expected, not `<`

    /tmp/tmpcvl7qifk.d(61): Error: declaration expected, not `<`

    /tmp/tmpcvl7qifk.d(69): Error: declaration expected, not `assert`

    /tmp/tmpcvl7qifk.d(70): Error: declaration expected, not `assert`

    /tmp/tmpcvl7qifk.d(71): Error: declaration expected, not `assert`

    /tmp/tmpcvl7qifk.d(72): Error: declaration expected, not `assert`

    /tmp/tmpcvl7qifk.d(73): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcvl7qifk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3u491cv.d(92): Error: no identifier for declarator `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3u491cv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseInsensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive, partialMatchCaseInsensitiveCaseIn\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3btoo6te.d(83): Error: found `unittest` when expecting `,`

    /tmp/tmp3btoo6te.d(92): Error: found `void` when expecting `,`

    /tmp/tmp3btoo6te.d(92): Error: found `{` when expecting `,`

    /tmp/tmp3btoo6te.d(92): Error: expression expected, not `}`

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` when expecting `,`

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` when expecting `)`

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` instead of statement

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp3btoo6te.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3btoo6te.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd5jz4n9.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd5jz4n9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however I cannot use any\
    \ external libraries. I should have mentioned that in my original question. Sorry\
    \ about that.\n<|/ c |>\n<| c |>\nI added a solution without external libraries.\n\
    <|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq |>\n<| a |>\n<code>\n\
    var result = strings.Where(s => s.Contains(substring));\n</code>\n<|/ a dscore=2\
    \ tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nvar\
    \ result = strings.Where(s => s.Contains(substring));\n</code>\n<|/ a dscore=2\
    \ tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    var result = strings.Where(s => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n\
    <code>\nvar result = strings.Where(s => s.Contains(substring));\n</code>\n<|/\
    \ a tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s =>\
    \ s.Contains(substring));\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,lin\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3pf3med.d(11): Error: found `in` when expecting `;`

    /tmp/tmpa3pf3med.d(20): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(31): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(36): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(41): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(46): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(51): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(56): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(61): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(66): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(71): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(76): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(81): Error: declaration expected, not `<`

    /tmp/tmpa3pf3med.d(88): Error: declaration expected, not `assert`

    /tmp/tmpa3pf3med.d(89): Error: declaration expected, not `assert`

    /tmp/tmpa3pf3med.d(90): Error: declaration expected, not `assert`

    /tmp/tmpa3pf3med.d(91): Error: de'
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, but I believe it would be better to use\
    \ a `foreach` loop to avoid the extra array allocations.\n<|/ c |>\n<| c |>\n\
    I agree, I'll add that to my answer.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't use any extra arrays. I believe it would be more efficient than using\
    \ an extra array and `foreach`.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use any extra arrays. I believe it would be more efficient than using an extra\
    \ array and `foreach`.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use\
    \ any extra arrays. I believe it would be more efficient than using an extra array\
    \ and `foreach`.\n<|/ c |>\n<| a tags=string,c#,linq |>\n<code>\nvar result =\
    \ strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to return an array of\
    \ the strings that contain the substring.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to return an array of the strings that contain the substring.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to return an array\
    \ of the strings that contain the substring.\n<|/ c |>\n<| a tags=string,c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=string,c#,linq |>\n\
    <| a tags=string,c#,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=string,c#,linq |>\n<code>\nvar result =\
    \ strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=string,c#,linq |>\n<code>\nunittest\n{\n    alias candidate =\
    \ filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwhq57ehc.d(17): Error: declaration expected, not `<`

    /tmp/tmpwhq57ehc.d(23): Error: unterminated character constant

    /tmp/tmpwhq57ehc.d(26): Error: unterminated character constant

    /tmp/tmpwhq57ehc.d(29): Error: unterminated character constant

    /tmp/tmpwhq57ehc.d(32): Error: unterminated character constant

    /tmp/tmpwhq57ehc.d(37): Error: declaration expected, not `<`

    /tmp/tmpwhq57ehc.d(40): Error: unterminated character constant

    /tmp/tmpwhq57ehc.d(43): Error: unterminated character constant

    /tmp/tmpwhq57ehc.d(46): Error: unterminated character constant

    /tmp/tmpwhq57ehc.d(51): Error: declaration expected, not `<`

    /tmp/tmpwhq57ehc.d(56): Error: declaration expected, not `<`

    /tmp/tmpwhq57ehc.d(61): Error: declaration expected, not `<`

    /tmp/tmpwhq57ehc.d(66): Error: declaration expected, not `<`

    /tmp/tmpwhq57ehc.d(74): Error: declaration expected, not `assert`

    /tmp/tmpwhq57ehc.d(75): Error: declaration expected, not `assert`

    /tmp/tmpwhq57ehc.d(76): Error: declaration expected, not `assert`

    /tmp/tmpwhq57ehc.d('
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxotlskw.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxotlskw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt_yool6t.d(97): Error: expression expected, not `unittest`

    /tmp/tmpt_yool6t.d(98): Error: found `{` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `alias`

    /tmp/tmpt_yool6t.d(99): Error: found `candidate` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `=`

    /tmp/tmpt_yool6t.d(99): Error: found `filter_by_substring` when expecting `,`

    /tmp/tmpt_yool6t.d(99): Error: expression expected, not `;`

    /tmp/tmpt_yool6t.d(101): Error: found `assert` when expecting `,`

    /tmp/tmpt_yool6t.d(101): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(102): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(103): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(104): Error: found `;` when expecting `,`

    /tmp/tmpt_yool6t.d(105): Error: expression expected, not `}`

    /tmp/tmpt_yool6t.d(106): Error: found `void` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: found `{` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: expression expected, not `}`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `,`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `)`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` when expecting `)`

    /tmp/tmpt_yool6t.d(106): Error: found `End of File` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_yool6t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5v7zavw3.d(91): Error: expression expected, not `unittest`

    /tmp/tmp5v7zavw3.d(92): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp5v7zavw3.d(93): Error: expression expected, not `alias`

    /tmp/tmp5v7zavw3.d(93): Error: found `candidate` when expecting `)`

    /tmp/tmp5v7zavw3.d(93): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5v7zavw3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThank you for\
    \ helping me out. I am new to C# and I really appreciate your help. I really appreciate\
    \ your help.\n<|/ c |>\n<| c |>\nNo problem. I'm glad I could help. If you found\
    \ this answer helpful, please consider marking it as accepted by clicking the\
    \ check mark next to it. Thanks!\n<|/ c |>\n<| c |>\nI did but since I am new\
    \ it says I have to wait 8 minutes before I can accept the answer. Thanks again\
    \ for your help.\n<|/ c |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"Hello\", \"World\"\
    , \"!\" };\nstring[] substrings = new string[] { \"World\", \"!\" };\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substrings[i]))\n    {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThank you for helping\
    \ me out. I am new to C# and I really appreciate your help. I really appreciate\
    \ your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[]\
    \ { \"Hello\", \"World\", \"!\" };\nstring[] substrings = new string[] { \"World\"\
    , \"!\" };\nstring[] result = new string[strings.length];\nfor (int i = 0; i <\
    \ strings.length; i++)\n{\n    if (strings[i].Contains(substrings[i]))\n    {\n\
    \        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThank you for helping me out. I am new to C# and I really appreciate\
    \ your help. I really appreciate your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"Hello\", \"World\", \"!\" };\nstring[] substrings\
    \ = new string[] { \"World\", \"!\" };\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substrings[i]))\n\
    \    {\n        result[i] = strings[i];\n\nunittest\n{\n    alias candidate =\
    \ filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfmr3po6v.d(19): Error: declaration expected, not `<`

    /tmp/tmpfmr3po6v.d(25): Error: unterminated character constant

    /tmp/tmpfmr3po6v.d(36): Error: semicolon expected, not `{`

    /tmp/tmpfmr3po6v.d(36): Error: declaration expected, not `{`

    /tmp/tmpfmr3po6v.d(38): Error: declaration expected, not `for`

    /tmp/tmpfmr3po6v.d(38): Error: no identifier for declarator `i`

    /tmp/tmpfmr3po6v.d(38): Error: declaration expected, not `<`

    /tmp/tmpfmr3po6v.d(38): Error: no identifier for declarator `i`

    /tmp/tmpfmr3po6v.d(38): Error: declaration expected, not `++`

    /tmp/tmpfmr3po6v.d(43): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfmr3po6v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqgth6vb.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqgth6vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpny2a0x.d(83): Error: expression expected, not `unittest`

    /tmp/tmprpny2a0x.d(84): Error: found `{` when expecting `)`

    /tmp/tmprpny2a0x.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpny2a0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex and are longer than given length\n    \
    \        \n*/\nstring[] filter_by_not_substring(string[] strings, string regex,\
    \ int length) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex)\
    \ && strings[i].length() > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ match given regex and are longer than given length\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string regex, int length) \n{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex) && strings[i].length() >\
    \ length)\n            result[i] = strings[i];\n    }\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu70vu0q4.d(99): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu70vu0q4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3hc_mn9.d(83): Error: expression expected, not `unittest`

    /tmp/tmpm3hc_mn9.d(84): Error: found `{` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `alias`

    /tmp/tmpm3hc_mn9.d(85): Error: found `candidate` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `=`

    /tmp/tmpm3hc_mn9.d(85): Error: found `filter_by_substring` when expecting `,`

    /tmp/tmpm3hc_mn9.d(85): Error: expression expected, not `;`

    /tmp/tmpm3hc_mn9.d(87): Error: found `assert` when expecting `,`

    /tmp/tmpm3hc_mn9.d(87): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(88): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(89): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(90): Error: found `;` when expecting `,`

    /tmp/tmpm3hc_mn9.d(91): Error: expression expected, not `}`

    /tmp/tmpm3hc_mn9.d(92): Error: found `void` when expecting `,`

    /tmp/tmpm3hc_mn9.d(92): Error: found `{` when expecting `,`

    /tmp/tmpm3hc_mn9.d(92): Error: expression expected, not `}`

    /tmp/tmpm3hc_mn9.d('
  stdout: ''
  timestamp: 1660164214
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4jwpp_hd.d(92): Error: found `unittest` instead of statement

    /tmp/tmp4jwpp_hd.d(101): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4jwpp_hd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however it only works if\
    \ you know how many substrings there are. Is there a way to do this without knowing\
    \ the number of substrings?\n<|/ c |>\n<| c |>\n: Yes, you can use a `List<string>`\
    \ instead of a `string[]` and then use `result.AddRange(strings)` instead of `result[i++]\
    \ = s`.\n<|/ c |>\n<| c |>\n: I added a version that doesn't require knowing the\
    \ number of substrings.\n<|/ c |>\n<| c |>\n: I added a version that doesn't require\
    \ knowing the number of substrings.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ doesn't require knowing the number of substrings.\n<|/ c |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"substring\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are multiple substrings\
    \ in the string. For example, if the string contains \"substring1\" and \"substring2\"\
    , only \"substring1\" will be returned.\n<|/ c |>\n<| c |>\n: Yes, it does. `Where`\
    \ will stop at the first match.\n<|/ c |>\n<| c |>\n: It does, but only if the\
    \ string contains \"substring1\". Try it with a string that contains \"substring1\"\
    \ and \"substring2\".\n<|/ c |>\n<| c |>\n: It does, but only if the string contains\
    \ \"substring1\". Try it with a string that contains \"substring1\" and \"substring2\"\
    .\n<|/ c |>\n<| c |>\n: It does, but only if the string contains \"substring1\"\
    . Try it with a string that contains \"substring1\" and \"substring2\".\n<|/ c\
    \ |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[] { \"substring1\"\
    , \"substring2\", \"substring3\" };\nvar result = strings.Where(s => s.Contains(\"\
    substring1\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if there are multiple substrings in the string. For example, if the string contains\
    \ \"substring1\" and \"substring2\", only \"substring1\" will be returned.\n<|/\
    \ c |>\n<| c |>\nunittest\n{\n    alias candidate = filter_by_substring;\n\n \
    \   assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo94a4xzo.d(11): Error: found `in` when expecting `;`

    /tmp/tmpo94a4xzo.d(20): Error: declaration expected, not `<`

    /tmp/tmpo94a4xzo.d(29): Error: unterminated character constant

    /tmp/tmpo94a4xzo.d(32): Error: unterminated character constant

    /tmp/tmpo94a4xzo.d(35): Error: unterminated character constant

    /tmp/tmpo94a4xzo.d(40): Error: declaration expected, not `<`

    /tmp/tmpo94a4xzo.d(43): Error: unterminated character constant

    /tmp/tmpo94a4xzo.d(61): Error: declaration expected, not `<`

    /tmp/tmpo94a4xzo.d(64): Error: unterminated character constant

    /tmp/tmpo94a4xzo.d(71): Error: declaration expected, not `assert`

    /tmp/tmpo94a4xzo.d(72): Error: declaration expected, not `assert`

    /tmp/tmpo94a4xzo.d(73): Error: declaration expected, not `assert`

    /tmp/tmpo94a4xzo.d(74): Error: declaration expected, not `assert`

    /tmp/tmpo94a4xzo.d(75): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo94a4xzo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164215
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd5jz4n9.d(12): Error: no property `contains` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd5jz4n9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164214
