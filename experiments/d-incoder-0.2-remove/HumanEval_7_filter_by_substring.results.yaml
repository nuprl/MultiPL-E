language: d
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring))\n            result[i] = strings[i];\n  \
    \      else if(!caseSensitive && !strings[i].contains(substring))\n          \
    \  result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring, ignoreCase))\n            result[i] = strings[i];\n\
    \        else if(!caseSensitive && !strings[i].contains(substring, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!caseSensitive && strings[i].contains(substring, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n        else if(!caseSensitive\
    \ && !strings[i].contains(substring, ignoreCase, ignoreCase))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n    \nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnchvpx7_.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnchvpx7_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1h2cg5ll.d(100): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1h2cg5ll.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].matches(regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].matches(regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string regex) \n{\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgqc0131y.d(108): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgqc0131y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer the question at all.\
    \ He wants to filter out all strings that don't contain `substring`, not just\
    \ ones that do contain it.\n<|/ c |>\n<| c |>\nI believe that he wants to filter\
    \ out all strings that don't contain `substring`, not just ones that do contain\
    \ it.\n<|/ c |>\n<| c |>\nYes, I believe that he wants to filter out all strings\
    \ that don't contain `substring`, not just ones that do contain it.\n<|/ c |>\n\
    <| c |>\nI believe that he wants to filter out all strings that don't contain\
    \ `substring`, not just ones that do contain it.\n<|/ c |>\n<| c |>\nI believe\
    \ that he wants to filter out all strings that don't contain `substring`, not\
    \ just ones that do contain it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring substring = \"a\";\nstring[]\
    \ filteredArray = stringArray.Where(x => x.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer the question at all.\
    \ He wants to filter out all strings that don't contain `substring`, not just\
    \ ones that do contain it.\n<|/ c |>\n<| c |>\nI believe that he wants to filter\
    \ out all strings that don't contain `substring`, not just ones that do contain\
    \ it.\n<|/ c |>\n<| c |>\nI believe that he wants to filter out all strings that\
    \ don't contain `substring`, not just ones that do contain it.\n<|/ c |>\n<| c\
    \ |>\nI believe that he wants to filter out all strings that don't contain `substring`,\
    \ not just ones that do contain it.\n<|/ c |>\n<| c |>\nI believe that he wants\
    \ to filter out all strings that don't contain `substring`, not just ones that\
    \ do contain it.\n<|/ c |>\n<| a dscore=0 |>\n\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmcm1tvoz.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmpmcm1tvoz.d(20):
    Error: unterminated character constant\n/tmp/tmpmcm1tvoz.d(20): Error: unterminated
    character constant\n/tmp/tmpmcm1tvoz.d(23): Error: unterminated character constant\n/tmp/tmpmcm1tvoz.d(26):
    Error: unterminated character constant\n/tmp/tmpmcm1tvoz.d(29): Error: unterminated
    character constant\n/tmp/tmpmcm1tvoz.d(32): Error: unterminated character constant\n/tmp/tmpmcm1tvoz.d(39):
    Error: Declaration expected, not \''<\''\n/tmp/tmpmcm1tvoz.d(42): Error: unterminated
    character constant\n/tmp/tmpmcm1tvoz.d(42): Error: unterminated character constant\n/tmp/tmpmcm1tvoz.d(45):
    Error: unterminated character constant\n/tmp/tmpmcm1tvoz.d(48): Error: unterminated
    character constant\n/tmp/tmpmcm1tvoz.d(51): Error: unterminated character constant\n/tmp/tmpmcm1tvoz.d(54):
    Error: unterminated character constant\n/tmp/tmpmcm1tvoz.d(62): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpmcm1tvoz.d(63): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpmcm1tvoz.d(64): Error: Declaration expected, not \''assert\''\n/tmp/tmpmcm1tvoz.d(65):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpmcm1tvoz.d(66): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmcm1tvoz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1og__zl2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppzrg_m3z.d(87): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppzrg_m3z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_qbe6uh.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_qbe6uh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuzg81ork.d(85): Error: found \''unittest\'' instead of statement\n/tmp/tmpuzg81ork.d(94):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuzg81ork.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4twue2l0.d(97): Error: expression expected, not \''unittest\''\n/tmp/tmp4twue2l0.d(98):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression
    expected, not \''alias\''\n/tmp/tmp4twue2l0.d(99): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression expected, not
    \''=\''\n/tmp/tmp4twue2l0.d(99): Error: found \''filter_by_substring\'' when expecting
    \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression expected, not \'';\''\n/tmp/tmp4twue2l0.d(101):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(101): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(102): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(103): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmp4twue2l0.d(104): Error: found \'';\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(105):
    Error: expression expected, not \''}\''\n/tmp/tmp4twue2l0.d(106): Error: found
    \''void\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(106): Error: found \''{\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(106): Error: expression expected, not
    \''}\''\n/tmp/tmp4twue2l0.d(106): Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(106):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmp4twue2l0.d(106): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmp4twue2l0.d(106): Error: found
    \''EOF\'' instead of statement\n/tmp/tmp4twue2l0.d(106): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4twue2l0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase,\
    \ ignoreCase, ignoreCase))\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_bo1m9rb.d(83): Error: found \''unittest\'' instead of statement\n/tmp/tmp_bo1m9rb.d(92):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_bo1m9rb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex, endIndex) : !strings[i].contains(substring, startIndex, endIndex,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex, bool caseSensitive, int startIndexInclusive,\
    \ int endIndexInclusive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring, startIndex, endIndex, startIndexInclusive,\
    \ endIndexInclusive) : !strings[i].contains(sub\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph9how04y.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmph9how04y.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmph9how04y.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmph9how04y.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmph9how04y.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmph9how04y.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmph9how04y.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmph9how04y.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmph9how04y.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmph9how04y.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph9how04y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps6yji0ey.d(87): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps6yji0ey.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.List;\nunittest\n{\n    alias candidate = filter_by_substring;\n\n\
    \    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1kae8d11.d(17): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1kae8d11.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1h2cg5ll.d(100): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1h2cg5ll.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring\n    \
    \        \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwhyvspkk.d(106): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwhyvspkk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_qbe6uh.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_qbe6uh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring))\n            result[i] = strings[i];\n  \
    \      else if(!caseSensitive && !strings[i].contains(substring))\n          \
    \  result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ && strings[i].contains(substring, partialMatch))\n            result[i] = strings[i];\n\
    \        else if(!caseSensitive && !strings[i].contains(substring, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive && strings[i].contains(substring, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n       \
    \ else if(!caseSensitive && !strings[i].contains(substring, partialMatch, partialMatchCaseInsensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatch\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuq45b8va.d(84): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuq45b8va.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv81onro1.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpv81onro1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for the answer. I am not allowed to use any\
    \ libraries. I only need to use basic libraries.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that uses only basic libraries.\n<|/ c |>\n<| c |>\nThanks for the\
    \ answer. I tried your solution and it works perfectly. I just had to change `string[]\
    \ result = new string[strings.length];` to `string[] result = new string[strings.length\
    \ - 1];` because I only want to return the last element of the array.\n<|/ c |>\n\
    <| c |>\nOh, I see. Yes, I forgot that `string[]` has `length` property. Thanks\
    \ for the reminder!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppxt1rob7.d(17): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxt1rob7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jivrad9.d(92): Error: no identifier for declarator string\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jivrad9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuzg81ork.d(85): Error: found \''unittest\'' instead of statement\n/tmp/tmpuzg81ork.d(94):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuzg81ork.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex) \n{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(!s.contains(substring, startIndex, endIndex))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex) \n{\n    string[] result = new string[strings.length];\n   \
    \ int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring,\
    \ startIndex))\n        {\n            result[i++] = s;\n        }\n    }\n  \
    \  return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex) \n{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(!s.contains(substring, startIndex, endIndex))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, \nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp316i_pe6.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp316i_pe6.d(28):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp316i_pe6.d(45): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp316i_pe6.d(62): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp316i_pe6.d(79): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp316i_pe6.d(96): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp316i_pe6.d(110):
    Error: basic type expected, not unittest\n/tmp/tmp316i_pe6.d(110): Error: found
    \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp316i_pe6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ true))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase: ignoreCase, ignoreCase: ignoreCase))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !string\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdq154emf.d(40): Error: found \'':\'' when expecting \'',\''\n/tmp/tmpdq154emf.d(54):
    Error: found \'':\'' when expecting \'',\''\n/tmp/tmpdq154emf.d(68): Error: found
    \'':\'' when expecting \'',\''\n/tmp/tmpdq154emf.d(68): Error: found \'':\'' when
    expecting \'',\''\n/tmp/tmpdq154emf.d(83): Error: found \''unittest\'' when expecting
    \'':\''\n/tmp/tmpdq154emf.d(92): Error: found \''void\'' when expecting \'')\''\n/tmp/tmpdq154emf.d(92):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmpdq154emf.d(92):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdq154emf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_sppir1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jivrad9.d(92): Error: no identifier for declarator string\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jivrad9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqo_rtaub.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring\n    \
    \        \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkvthem_s.d(106): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkvthem_s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, allowEmpty))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool allowEmpty, bool allowEmptyString) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, allowEmpty,\
    \ allowEmptyString))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty, bool allowEmptyString,\
    \ bool allowEmptyStrings) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, allowEmpty, allowEmptyString, allowEmptyStrings))\n         \
    \   result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmparvcf9qh.d(87): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmparvcf9qh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprlhe9kq3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution and\
    \ it works fine, but I still don't understand why my code didn't work. Can you\
    \ please explain why my code didn't work?\n<|/ c |>\n<| c |>\nThe reason why your\
    \ code didn't work is that your `filter_by_substring` function doesn't return\
    \ anything (it returns `null`). So the compiler doesn't know what to do with the\
    \ return value. And since you didn't assign the return value to anything, it just\
    \ gets discarded. Your code works because you assign the return value to `result`,\
    \ so it's assigned to `result`. The compiler knows what to do with that return\
    \ value.\n<|/ c |>\n<| c |>\nOh I see. Thanks for your explanation. I didn't know\
    \ that compiler doesn't know what to do with the return value. Now I understand\
    \ why my code didn't work.\n<|/ c |>\n<| c |>\nThe compiler knows what to do with\
    \ the return value because you assigned it to `result`. So the compiler knows\
    \ what to do with that return value.\n<|/ c |>\n<| c |>\nOh I see. Thanks for\
    \ your explanation. I didn't know that compiler doesn't know what to do with the\
    \ return value. Now I understand why my code didn't work.\n<|/ c |>\n<| a tags=c++,arrays\
    \ |>\nThe reason why your code didn't work is that your filter_by_substring function\
    \ doesn't return anything (it returns null). So the compiler doesn't know what\
    \ to do with the return value. And since you didn't assign the return value to\
    \ anything, it just gets discarded. Your code works because you assign the return\
    \ value to result, so it's assigned to result. The compiler knows what to do with\
    \ that return value.\nThe compiler knows what to do with that return value because\
    \ you assigned it to result. So the compiler knows what to do with that return\
    \ value.\nThe compiler knows what to do with that return value because you assigned\
    \ it to result. So the compiler knows what to do with that return value.\nThe\
    \ compiler knows what to do with that return value because you assigned it to\
    \ result. So the compiler knows what to do with that return value.\nThe compiler\
    \ knows what to do with that return value because you assigned it to result. So\
    \ the compiler knows what to do with that return value.\nThe compiler knows what\
    \ to do with that return value because you assigned it to result. So \nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_x6o9jk7.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmp_x6o9jk7.d(20):
    Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(20): Error: unterminated
    character constant\n/tmp/tmp_x6o9jk7.d(20): Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(23):
    Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(23): Error: unterminated
    character constant\n/tmp/tmp_x6o9jk7.d(23): Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(23):
    Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(23): Error: unterminated
    character constant\n/tmp/tmp_x6o9jk7.d(26): Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(26):
    Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(26): Error: unterminated
    character constant\n/tmp/tmp_x6o9jk7.d(32): Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(32):
    Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(32): Error: unterminated
    character constant\n/tmp/tmp_x6o9jk7.d(35): Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(35):
    Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(35): Error: unterminated
    character constant\n/tmp/tmp_x6o9jk7.d(35): Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(35):
    Error: unterminated character constant\n/tmp/tmp_x6o9jk7.d(45): Error: Declaration
    expected, not \''assert\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_x6o9jk7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchCaseInsensitiveCaseInsensitive)\
    \ \n{\n    \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu1z400hq.d(80): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu1z400hq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your answer, but I'm getting a syntax error\
    \ on the `string[] result = new string[strings.length];` line. Can you explain\
    \ why?\n<|/ c |>\n<| c |>\nI got it working by changing `string[] result = new\
    \ string[strings.length];` to `string[] result = new string[strings.length - 1];`\n\
    <|/ c |>\n<| c |>\nOops, I forgot to add the `-1` to the `string.length` call.\
    \ Fixed now.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < string\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzfzym4u9.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmpzfzym4u9.d(20):
    Error: unterminated character constant\n/tmp/tmpzfzym4u9.d(33): Error: Declaration
    expected, not \''for\''\n/tmp/tmpzfzym4u9.d(33): Error: no identifier for declarator
    i\n/tmp/tmpzfzym4u9.d(33): Error: Declaration expected, not \''<\''\n/tmp/tmpzfzym4u9.d(33):
    Error: Declaration expected, not \''++\''\n/tmp/tmpzfzym4u9.d(37): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzfzym4u9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, startIndex, endIndex))\n  \
    \      {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, startIndex, endIndex))\n  \
    \      {\n            result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex) \n{\n    string\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr5iq16jp.d(106): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpr5iq16jp.d(115): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr5iq16jp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jivrad9.d(92): Error: no identifier for declarator string\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jivrad9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4twue2l0.d(97): Error: expression expected, not \''unittest\''\n/tmp/tmp4twue2l0.d(98):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression
    expected, not \''alias\''\n/tmp/tmp4twue2l0.d(99): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression expected, not
    \''=\''\n/tmp/tmp4twue2l0.d(99): Error: found \''filter_by_substring\'' when expecting
    \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression expected, not \'';\''\n/tmp/tmp4twue2l0.d(101):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(101): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(102): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(103): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmp4twue2l0.d(104): Error: found \'';\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(105):
    Error: expression expected, not \''}\''\n/tmp/tmp4twue2l0.d(106): Error: found
    \''void\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(106): Error: found \''{\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(106): Error: expression expected, not
    \''}\''\n/tmp/tmp4twue2l0.d(106): Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(106):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmp4twue2l0.d(106): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmp4twue2l0.d(106): Error: found
    \''EOF\'' instead of statement\n/tmp/tmp4twue2l0.d(106): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4twue2l0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchIgnoreCase)\
    \ \n{\n    string[] result = new \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkzoyk2vk.d(80): Error: basic type expected, not unittest\n/tmp/tmpkzoyk2vk.d(80):
    Error: semicolon expected, not \''unittest\''\n/tmp/tmpkzoyk2vk.d(80): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpkzoyk2vk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2k5jesg.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpk2k5jesg.d(84):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression
    expected, not \''alias\''\n/tmp/tmpk2k5jesg.d(85): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression expected, not
    \''=\''\n/tmp/tmpk2k5jesg.d(85): Error: found \''filter_by_substring\'' when expecting
    \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression expected, not \'';\''\n/tmp/tmpk2k5jesg.d(87):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(87): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(88): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(89): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpk2k5jesg.d(90): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(91):
    Error: expression expected, not \''}\''\n/tmp/tmpk2k5jesg.d(92): Error: found
    \''void\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''{\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92): Error: expression expected, not
    \''}\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpk2k5jesg.d(92): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\''
    instead of statement\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpk2k5jesg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_qbe6uh.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_qbe6uh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1h2cg5ll.d(100): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1h2cg5ll.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't answer the question. He\
    \ wants to filter out all strings that don't contain `substring`.\n<|/ c |>\n\
    <| c |>\n: I see your point. I missed that part. I'll update my answer.\n<|/ c\
    \ |>\n<| c |>\nI updated my answer to include a solution that does exactly what\
    \ he asked for.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that does exactly what he asked for.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ stringArray = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring substring\
    \ = \"a\";\nstring[] filteredArray = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring substring\
    \ = \"a\";\nstring[] filteredArray = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring substring = \"a\";\n\
    string[] filteredArray = stringArray.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5yh3rj29.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmp5yh3rj29.d(20):
    Error: unterminated character constant\n/tmp/tmp5yh3rj29.d(20): Error: unterminated
    character constant\n/tmp/tmp5yh3rj29.d(23): Error: unterminated character constant\n/tmp/tmp5yh3rj29.d(36):
    Error: Declaration expected, not \''<\''\n/tmp/tmp5yh3rj29.d(43): Error: Declaration
    expected, not \''<\''\n/tmp/tmp5yh3rj29.d(50): Error: Declaration expected, not
    \''<\''\n/tmp/tmp5yh3rj29.d(62): Error: unterminated string constant starting
    at /tmp/tmp5yh3rj29.d(62)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yh3rj29.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring, ignoreCase) : !strings[i].contains(substring,\
    \ ignoreCase, caseSensitive))\n            result[i] = strings[i];\n    }\n  \
    \  return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring,\
    \ ignoreCase) : !strings[i].contains(substring, ignoreCase, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring, ignoreCase\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2h0dlzrf.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmp2h0dlzrf.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmp2h0dlzrf.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmp2h0dlzrf.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmp2h0dlzrf.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmp2h0dlzrf.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmp2h0dlzrf.d(92):
    Error: found \''EOF\'' when expecting \'':\''\n/tmp/tmp2h0dlzrf.d(92): Error:
    expression expected, not \''EOF\''\n/tmp/tmp2h0dlzrf.d(92): Error: found \''EOF\''
    when expecting \'')\''\n/tmp/tmp2h0dlzrf.d(92): Error: found \''EOF\'' instead
    of statement\n/tmp/tmp2h0dlzrf.d(92): Error: found \''EOF\'' when expecting \''}\''
    following compound statement\n/tmp/tmp2h0dlzrf.d(92): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp2h0dlzrf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nI used your solution and\
    \ it worked perfectly. Thank you very much!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring\
    \ search = \"def\";\nstring[] result = strings.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"def\"\
    ;\nstring[] result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new\
    \ string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"def\";\n\
    string[] result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"def\";\nstring[]\
    \ result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"\
    abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"def\";\nstring[] result\
    \ = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"def\";\nstring[] result\
    \ = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search = \"\nunittest\n{\n   \
    \ alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyl2djjer.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpyl2djjer.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmpyl2djjer.d(30): Error: Declaration
    expected, not \''<\''\n/tmp/tmpyl2djjer.d(37): Error: Declaration expected, not
    \''<\''\n/tmp/tmpyl2djjer.d(44): Error: Declaration expected, not \''<\''\n/tmp/tmpyl2djjer.d(51):
    Error: Declaration expected, not \''<\''\n/tmp/tmpyl2djjer.d(58): Error: Declaration
    expected, not \''<\''\n/tmp/tmpyl2djjer.d(65): Error: Declaration expected, not
    \''<\''\n/tmp/tmpyl2djjer.d(75): Error: semicolon expected, not \''john\''\n/tmp/tmpyl2djjer.d(75):
    Error: no identifier for declarator john\n/tmp/tmpyl2djjer.d(75): Error: Declaration
    expected, not \''") == []);\\x0a    assert(candidate(["\''\n/tmp/tmpyl2djjer.d(78):
    Error: unterminated string constant starting at /tmp/tmpyl2djjer.d(78)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyl2djjer.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7br81wvh.d(92): Error: no identifier for declarator string[]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7br81wvh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jivrad9.d(92): Error: no identifier for declarator string\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jivrad9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprq80m2jm.d(92): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprq80m2jm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThank you very much for your\
    \ answer! I appreciate it!\n<|/ c |>\n<| c |>\nI added a more efficient solution\
    \ that doesn't require a loop.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\n\
    string[] result = stringArray.Where(s => s.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThank you very much for your answer! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(s\
    \ => s.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| c |>\nThank you very much for your answer! I appreciate it!\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n\
    string search = \"a\";\nstring[] result = stringArray.Where(s => s.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\n\
    string\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbtmxyy74.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpbtmxyy74.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmpbtmxyy74.d(26): Error: unterminated
    character constant\n/tmp/tmpbtmxyy74.d(33): Error: Declaration expected, not \''<\''\n/tmp/tmpbtmxyy74.d(43):
    Error: Declaration expected, not \''<\''\n/tmp/tmpbtmxyy74.d(53): Error: Declaration
    expected, not \''<\''\n/tmp/tmpbtmxyy74.d(60): Error: no identifier for declarator
    string\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbtmxyy74.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_qbe6uh.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_qbe6uh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use\
    \ any external libraries. I edited my question to make it more clear.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that uses only built-in libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any external\
    \ libraries. I edited my question to make it more clear.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a solution that uses only built-in libraries.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6k12cc3j.d(17): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6k12cc3j.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, int startIndex, int endIndex)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex, endIndex) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, int startIndex, int endIndex,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring, startIndex, endIndex) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, end\nunittest\n{\n    alias candidate = filter_by_substring;\n\n\
    \    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpijfh2ccp.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpijfh2ccp.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpijfh2ccp.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpijfh2ccp.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpijfh2ccp.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpijfh2ccp.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpijfh2ccp.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpijfh2ccp.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpijfh2ccp.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpijfh2ccp.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpijfh2ccp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jivrad9.d(92): Error: no identifier for declarator string\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jivrad9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring) : !s.contains(substring, ignoreCase: true))\n     \
    \   {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that do not contain given substring\n            \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring, int startIndex,\
    \ int endIndex, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring, startIndex: startIndex, endIndex: endIndex) : !s.contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex, ignoreCase: true))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex, bool caseSensitive, int limit) \n{\n    string[]\
    \ result = new \nunittest\n{\n    alias candidate = filter_by_substring;\n\n \
    \   assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptr9nsc2e.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmptr9nsc2e.d(28):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmptr9nsc2e.d(45): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmptr9nsc2e.d(47): Error: found \'':\''
    when expecting \'',\''\n/tmp/tmptr9nsc2e.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmptr9nsc2e.d(64): Error: found \'':\'' when expecting \'',\''\n/tmp/tmptr9nsc2e.d(64):
    Error: found \'':\'' when expecting \'',\''\n/tmp/tmptr9nsc2e.d(79): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmptr9nsc2e.d(81): Error: found \'':\''
    when expecting \'',\''\n/tmp/tmptr9nsc2e.d(81): Error: found \'':\'' when expecting
    \'',\''\n/tmp/tmptr9nsc2e.d(81): Error: found \'':\'' when expecting \'',\''\n/tmp/tmptr9nsc2e.d(81):
    Error: found \'':\'' when expecting \'',\''\n/tmp/tmptr9nsc2e.d(81): Error: found
    \'':\'' when expecting \'',\''\n/tmp/tmptr9nsc2e.d(95): Error: basic type expected,
    not unittest\n/tmp/tmptr9nsc2e.d(95): Error: semicolon expected, not \''unittest\''\n/tmp/tmptr9nsc2e.d(95):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmptr9nsc2e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx4m579we.d(91): Error: expression expected, not \''unittest\''\n/tmp/tmpx4m579we.d(92):
    Error: found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpx4m579we.d(93):
    Error: expression expected, not \''alias\''\n/tmp/tmpx4m579we.d(93): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpx4m579we.d(93): Error: found \''=\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4m579we.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool allowEmpty, bool allowEmptyString) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty,\
    \ allowEmptyString))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty, bool allowEmptyString,\
    \ bool allowEmptySubstring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, allowEmpty, allowEmptyString, allowEmptySubstring))\n       \
    \     result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fn8j083.d(87): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3fn8j083.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1og__zl2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq,.net,string |>\n<| c |>\nThe `Contains` method is not case\
    \ sensitive, so `Contains(\"abc\")` will return `true` for `\"ABC\"`.\n<|/ c |>\n\
    <| c |>\nI know, but I assumed that OP wanted to match substrings case-insensitively.\n\
    <|/ c |>\n<| c |>\nYes, I do want to match substrings case-insensitively.\n<|/\
    \ c |>\n<| c |>\nI added a case insensitive version that uses `IndexOf` instead\
    \ of `Contains`.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm going to try\
    \ it out and see how it goes. I do want to match substrings case-insensitively.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\" };\nstring search = \"abc\";\nvar result = strings.Where(s\
    \ => s.IndexOf(search, StringComparison.OrdinalIgnoreCase) >= 0);\n</code>\n<|/\
    \ a tags=c#,linq,.net,string |>\n<| c |>\nThis doesn't work. `s.IndexOf(search,\
    \ StringComparison.OrdinalIgnoreCase) >= 0` returns `true` for `\"ABC\"`.\n<|/\
    \ c |>\n<| c |>\nI added a case insensitive version that uses `IndexOf` instead\
    \ of `Contains`.\n<|/ c |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring search\
    \ = \"abc\";\nvar result = strings.Where(s => s.IndexOf(search, StringComparison.OrdinalIgnoreCase)\
    \ >= 0);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `s.IndexOf(search,\
    \ StringComparison.OrdinalIgnoreCase) >= 0` returns `true` for `\"ABC\"`.\n<|/\
    \ c |>\n<| c |>\nI added a case insensitive version that uses `IndexOf` instead\
    \ of `Contains`.\n<|/ c |>\n<| a tags=c#,linq,.net,string |>\n<code>\n\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa4wykjta.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmpa4wykjta.d(32):
    Error: unterminated character constant\n/tmp/tmpa4wykjta.d(39): Error: Declaration
    expected, not \''<\''\n/tmp/tmpa4wykjta.d(42): Error: unterminated character constant\n/tmp/tmpa4wykjta.d(52):
    Error: Declaration expected, not \''<\''\n/tmp/tmpa4wykjta.d(55): Error: unterminated
    character constant\n/tmp/tmpa4wykjta.d(67): Error: Declaration expected, not \''assert\''\n/tmp/tmpa4wykjta.d(68):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpa4wykjta.d(69): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpa4wykjta.d(70): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpa4wykjta.d(71): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4wykjta.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex\n            \n*/\nstring[] filter_by_\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsrsj9m0r.d(106): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsrsj9m0r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2q6rwclc.d(98): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmp2q6rwclc.d(107): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmp2q6rwclc.d(107): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp2q6rwclc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `string[] strings = { \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\" };\n    string substring = \"a\";\n    string[] result = filter_by_substring(strings,\
    \ substring);\n    \n    for(int i = 0; i < result.length; ++i)\n    {\n     \
    \   Console.WriteLine(result[i]);\n    }` prints `a`, `b`, `c`, `d`, `e`, `f`,\
    \ `g`, `h`, `i`, `j`, `k`, `l`, `m`, `n`, `o`, `p`, `q`, `r`, `s`, `t`, `u`, `v`,\
    \ `w`, `x`, `y`, `z`\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution\
    \ that works with your test cases. I tested it with the latest version of Raku\
    \ and it works.\n<|/ c |>\n<| a dscore=0 |>\nThe solution I came up with is as\
    \ follows:\n<code>\nsub filter_by_substring {\n    my ($strings, $substring) =;\n\
    \    my %seen;\n    my $i = 0;\n    foreach my $string ($strings) {\n        my\
    \ $found = 0;\n        foreach my $char (split //, $string) {\n            next\
    \ if $char eq $substring;\n            $found = 1;\n            last;\n      \
    \  }\n        next unless $found;\n        $seen{$i} = $string;\n        $i++;\n\
    \    }\n    return values %seen;\n}\n</code>\n<|/ a tags=raku,string |>\n<| c\
    \ |>\nThis doesn't work. `string[] \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps89v11mo.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmps89v11mo.d(20):
    Error: unterminated character constant\n/tmp/tmps89v11mo.d(46): Error: no identifier
    for declarator my\n/tmp/tmps89v11mo.d(46): Error: Declaration expected, not \''%\''\n/tmp/tmps89v11mo.d(47):
    Error: no identifier for declarator my\n/tmp/tmps89v11mo.d(47): Error: Declaration
    expected, not \''$\''\n/tmp/tmps89v11mo.d(48): Error: Declaration expected, not
    \''foreach\''\n/tmp/tmps89v11mo.d(50): Error: Declaration expected, not \''foreach\''\n/tmp/tmps89v11mo.d(52):
    Error: Declaration expected, not \''$\''\n/tmp/tmps89v11mo.d(53): Error: no identifier
    for declarator last\n/tmp/tmps89v11mo.d(54): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps89v11mo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1og__zl2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n\
    <| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\" };\nstring substring = \"def\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n\
    <| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\" };\nstring substring = \"def\";\nstring[] result =\
    \ strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring\
    \ substring = \"def\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks so much for the help!\n\
    <|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring substring = \"def\";\nstring[]\
    \ result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks so much for the help!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\" };\nstring substring = \"def\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks so much for the help!\n\
    <|/ c |>\n<| a dscore=0 \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7ckm8dq4.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmp7ckm8dq4.d(30):
    Error: Declaration expected, not \''<\''\n/tmp/tmp7ckm8dq4.d(40): Error: Declaration
    expected, not \''<\''\n/tmp/tmp7ckm8dq4.d(50): Error: Declaration expected, not
    \''<\''\n/tmp/tmp7ckm8dq4.d(60): Error: Declaration expected, not \''<\''\n/tmp/tmp7ckm8dq4.d(70):
    Error: Declaration expected, not \''<\''\n/tmp/tmp7ckm8dq4.d(80): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp7ckm8dq4.d(81): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp7ckm8dq4.d(82): Error: Declaration expected, not \''assert\''\n/tmp/tmp7ckm8dq4.d(83):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp7ckm8dq4.d(84): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ckm8dq4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jivrad9.d(92): Error: no identifier for declarator string\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jivrad9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI didn't downvote, but this doesn't answer the question.\
    \ OP wants to filter out all strings that don't contain `substring`, not just\
    \ those that contain it.\n<|/ c |>\n<| c |>\nI agree with you, but I thought that\
    \ OP wants to filter out all strings that don't contain `substring`, not just\
    \ those that contain it.\n<|/ c |>\n<| c |>\nI agree, but I thought that OP wants\
    \ to filter out all strings that don't contain `substring`, not just those that\
    \ contain it.\n<|/ c |>\n<| c |>\nI agree, but I thought that OP wants to filter\
    \ out all strings that don't contain `substring`, not just those that contain\
    \ it.\n<|/ c |>\n<| c |>\nI agree, but I thought that OP wants to filter out all\
    \ strings that don't contain `substring`, not just those that contain it.\n<|/\
    \ c |>\n<| a tags=string,c# |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring\
    \ substring = \"abc\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"\
    yz\" };\nstring substring = \"abc\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c# |>\n<| a |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"\
    yz\" };\nstring substring = \"abc\";\nstring[] result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c# dscore=1 |>\n<| a tags=string,c# |>\n<code>\nstring[]\
    \ strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"\
    , \"stu\", \"v\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbpv63kus.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmpbpv63kus.d(20):
    Error: unterminated character constant\n/tmp/tmpbpv63kus.d(20): Error: unterminated
    character constant\n/tmp/tmpbpv63kus.d(20): Error: unterminated character constant\n/tmp/tmpbpv63kus.d(23):
    Error: unterminated character constant\n/tmp/tmpbpv63kus.d(26): Error: unterminated
    character constant\n/tmp/tmpbpv63kus.d(29): Error: unterminated character constant\n/tmp/tmpbpv63kus.d(32):
    Error: unterminated character constant\n/tmp/tmpbpv63kus.d(39): Error: Declaration
    expected, not \''<\''\n/tmp/tmpbpv63kus.d(46): Error: Declaration expected, not
    \''<\''\n/tmp/tmpbpv63kus.d(53): Error: Declaration expected, not \''<\''\n/tmp/tmpbpv63kus.d(65):
    Error: unterminated string constant starting at /tmp/tmpbpv63kus.d(65)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbpv63kus.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use LINQ as my project is using .NET 2.0. I'm looking for a solution\
    \ that doesn't require LINQ.\n<|/ c |>\n<| c |>\n: I added a solution without\
    \ LINQ. Hope it helps.\n<|/ c |>\n<| a tags=c#,string,.net,string-comparison |>\n\
    <code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\",\
    \ \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring search = \"abc\";\nvar\
    \ result = strings.Where(s => s.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use LINQ as my project\
    \ is using .NET 2.0. I'm looking for a solution that doesn't require LINQ.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[] { \"abc\", \"\
    def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring\
    \ search = \"abc\";\nvar result = strings.Where(s => s.IndexOf(search) > -1).ToArray();\n\
    </code>\n<|/ a tags=c#,string,.net,string-comparison |>\n<| c |>\nThanks for your\
    \ answer. Unfortunately I cannot use LINQ as my project is using .NET 2.0. I'm\
    \ looking for a solution that doesn't require LINQ.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\",\
    \ \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring search = \"abc\";\nvar\
    \ result = strings.Where(s => s.IndexOf(search) > -1).ToArray();\n</code>\n<|/\
    \ a tags=c#,string,.net,string-comparison |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately I cannot use LINQ as my project is using .NET 2.0. I'm looking\
    \ for a solution that doesn't require LINQ.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    string[] strings = new string[] { \"abc\", \"def\", \"ghi\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzvcgx407.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpzvcgx407.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmpzvcgx407.d(23): Error: unterminated
    character constant\n/tmp/tmpzvcgx407.d(23): Error: unterminated character constant\n/tmp/tmpzvcgx407.d(33):
    Error: Declaration expected, not \''<\''\n/tmp/tmpzvcgx407.d(36): Error: unterminated
    character constant\n/tmp/tmpzvcgx407.d(36): Error: unterminated character constant\n/tmp/tmpzvcgx407.d(43):
    Error: Declaration expected, not \''<\''\n/tmp/tmpzvcgx407.d(46): Error: unterminated
    character constant\n/tmp/tmpzvcgx407.d(46): Error: unterminated character constant\n/tmp/tmpzvcgx407.d(53):
    Error: Declaration expected, not \''<\''\n/tmp/tmpzvcgx407.d(56): Error: unterminated
    character constant\n/tmp/tmpzvcgx407.d(56): Error: unterminated character constant\n/tmp/tmpzvcgx407.d(68):
    Error: unterminated string constant starting at /tmp/tmpzvcgx407.d(68)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzvcgx407.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_regex(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not match given regex\n            \n*/\nstring[] filter_by_not_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex and are longer\
    \ than given length\n            \n*/\nstring[] filter_by_regex_and_longer_than(string[]\
    \ strings, string regex, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex)\
    \ && strings[i].length() > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings \nunittest\n{\n \
    \   alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfpkcevpc.d(101): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpkcevpc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseInsensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive, partialMatchCaseInsensitiveCaseInsensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppb6x8_zp.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppb6x8_zp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxz_q6htd.d(87): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxz_q6htd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv81onro1.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpv81onro1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_qbe6uh.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_qbe6uh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jivrad9.d(92): Error: no identifier for declarator string\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jivrad9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_regex(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not match given regex\n            \n*/\nstring[] filter_by_not_regex(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_regex(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].matches(regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not match given regex\n            \n*/\nstring[] filter_by_not_regex(string[]\
    \ strings, string regex) \n{\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4dqevwmh.d(107): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4dqevwmh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1og__zl2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer. I'm\
    \ sorry but I'm a beginner at C#. Can you please explain to me what this line\
    \ is doing? `string[] result = new string[strings.length];`\n<|/ c |>\n<| c |>\n\
    It creates an array of strings with the same length as the input array. `string[]\
    \ result = new string[strings.length];` creates an array with the length of the\
    \ input array. `result[i++] = s;` adds the string to the result array at the position\
    \ `i`. `i++` increments `i` by one and `s` becomes the new value of the `i`th\
    \ element of the result array. `result[i++] = s;` adds the string to the result\
    \ array at the position `i`. `i++` increments `i` by one and `s` becomes the new\
    \ value of the `i`th element of the result array. `result[i++] = s;` adds the\
    \ string to the result array at the position `i`. `i++` increments `i` by one\
    \ and `s` becomes the new value of the `i`th element of the result array. `result[i++]\
    \ = s;` adds the string to the result array at the position `i`. `i++` increments\
    \ `i` by one and `s` becomes the new value of the `i`th element of the result\
    \ array. `result[i++] = s;` adds the string to the result array at the position\
    \ `i`. `i++` increments `i` by one and `s` becomes the new value of the `i`th\
    \ element of the result array. `result[i++] = s;` adds the string to the result\
    \ array at the position `i`. `i++` increments `i` by one and `s` becomes the new\
    \ value of the `i`th element of the result array. `result[i++] = s;` adds the\
    \ string to the result array at the position `i`. `i++` increments `i` by one\
    \ and `s` becomes the new value of the `i`th element of the result array. `result[i++]\
    \ = s;` adds the string to the result array at the position `i`. `i++` increments\
    \ `i` by one and `s` becomes the new value of the `i`th element of the result\
    \ array. `result[i++] = s;` adds the string to the result array at the position\
    \ `i`. `i++` increments `i` by one and \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe8w5rjh3.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpe8w5rjh3.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmpe8w5rjh3.d(23): Error: unterminated
    character constant\n/tmp/tmpe8w5rjh3.d(23): Error: unterminated character constant\n/tmp/tmpe8w5rjh3.d(31):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpe8w5rjh3.d(32): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpe8w5rjh3.d(33): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpe8w5rjh3.d(34): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpe8w5rjh3.d(35): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8w5rjh3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do it without using LINQ. I'm still learning C# and I haven't\
    \ learned LINQ yet, so I wanted to see if I could do it without it.\n<|/ c |>\n\
    <| c |>\nI added a solution without LINQ\n<|/ c |>\n<| c |>\nI added a solution\
    \ without LINQ\n<|/ c |>\n<| c |>\nI added a solution without LINQ\n<|/ c |>\n\
    <| a |>\n<code>\nstring[] strings = new string[] { \"one\", \"two\", \"three\"\
    , \"four\", \"five\" };\nstring substring = \"o\";\nvar result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=1 tags=c#,arrays,string\
    \ |>\n<| a tags=c#,arrays,string |>\n<code>\nstring[] strings = new string[] {\
    \ \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring = \"o\"\
    ;\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=c#,arrays,string |>\n<code>\nstring[] strings = new\
    \ string[] { \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring\
    \ = \"o\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring = \"\
    o\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n\
    <|/ a tags=c#,arrays,string |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new\
    \ string[] { \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring substring\
    \ = \"o\";\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string |>\n<code>\n\
    string[] strings = new string[] { \"one\", \"two\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpadwd9vz6.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpadwd9vz6.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmpadwd9vz6.d(23): Error: unterminated
    character constant\n/tmp/tmpadwd9vz6.d(23): Error: unterminated character constant\n/tmp/tmpadwd9vz6.d(39):
    Error: Declaration expected, not \''<\''\n/tmp/tmpadwd9vz6.d(46): Error: Declaration
    expected, not \''<\''\n/tmp/tmpadwd9vz6.d(53): Error: Declaration expected, not
    \''<\''\n/tmp/tmpadwd9vz6.d(60): Error: Declaration expected, not \''<\''\n/tmp/tmpadwd9vz6.d(67):
    Error: Declaration expected, not \''<\''\n/tmp/tmpadwd9vz6.d(79): Error: unterminated
    string constant starting at /tmp/tmpadwd9vz6.d(79)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpadwd9vz6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with given substring\n\
    \            \n*/\nstring[] \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpic9m0az3.d(106): Error: no identifier for declarator string[]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpic9m0az3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1og__zl2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuzg81ork.d(85): Error: found \''unittest\'' instead of statement\n/tmp/tmpuzg81ork.d(94):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuzg81ork.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive))\n        {\n     \
    \       result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n        {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n        {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchCaseInsensitiveCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring, case\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmdh2kyy2.d(92): Error: expression expected, not \''case\''\n/tmp/tmpmdh2kyy2.d(93):
    Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpmdh2kyy2.d(102): Error:
    found \''void\'' when expecting \'',\''\n/tmp/tmpmdh2kyy2.d(102): Error: found
    \''{\'' when expecting \'',\''\n/tmp/tmpmdh2kyy2.d(102): Error: expression expected,
    not \''}\''\n/tmp/tmpmdh2kyy2.d(102): Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmpmdh2kyy2.d(102):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpmdh2kyy2.d(102): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmpmdh2kyy2.d(102): Error: found
    \''EOF\'' instead of statement\n/tmp/tmpmdh2kyy2.d(102): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpmdh2kyy2.d(102):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmdh2kyy2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a |>\n<code>\nstring[] stringArray = { \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\" };\nstring searchString = \"a\";\nstring[] filteredArray\
    \ = stringArray.Where(x => x.Contains(searchString)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays dscore=2 |>\n<| a |>\n<code>\nstring[] stringArray =\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" };\nstring searchString = \"a\";\nstring[] filteredArray\
    \ = stringArray.Where(x => x.Contains(searchString)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray\
    \ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\" };\nstring searchString = \"a\";\nstring[] filteredArray\
    \ = stringArray.Where(x => x.Contains(searchString)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring searchString = \"a\";\n\
    string[] filteredArray = stringArray.Where(x => x.Contains(searchString)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5vszixga.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmp5vszixga.d(24):
    Error: Declaration expected, not \''<\''\n/tmp/tmp5vszixga.d(31): Error: Declaration
    expected, not \''<\''\n/tmp/tmp5vszixga.d(38): Error: Declaration expected, not
    \''<\''\n/tmp/tmp5vszixga.d(45): Error: Declaration expected, not \''<\''\n/tmp/tmp5vszixga.d(57):
    Error: unterminated string constant starting at /tmp/tmp5vszixga.d(57)\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5vszixga.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            bool found = false;\n            for(int j = 0; j < result.length;\
    \ ++j)\n            {\n                if(result[j].contains(substring))\n   \
    \             {\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if(!found)\n                result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            bool found = false;\n            for(int j = 0; j < result.length;\
    \ ++j)\n            {\n                if(result[j].contains(substring))\n   \
    \             {\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if(!found)\n            {\n   \
    \             bool foundCaseInsensitive = false;\n                for(int j =\
    \ 0; j < result.length; ++j)\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9xspdehh.d(96): Error: found \''unittest\'' instead of statement\n/tmp/tmp9xspdehh.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp9xspdehh.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp9xspdehh.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xspdehh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer. I'm a beginner\
    \ at C# and I didn't know about LINQ. I'll look into it.\n<|/ c |>\n<| c |>\n\
    LINQ is very powerful and very easy to use. LINQ is also very easy to read and\
    \ understand. LINQ also has some nice features like deferred execution and lazy\
    \ evaluation. LINQ is also very easy to write in C#.\n<|/ c |>\n<| c |>\nLINQ\
    \ is also very easy to write in C#. LINQ is also very easy to read and understand.\
    \ LINQ also has some nice features like deferred execution and lazy evaluation.\
    \ LINQ is also very easy to write in C#.\n<|/ c |>\n<| c |>\nLINQ is also very\
    \ easy to write in C#. LINQ is also very easy to read and understand. LINQ also\
    \ has some nice features like deferred execution and lazy evaluation. LINQ is\
    \ also very easy to write in C#.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\" };\nstring[] substrings = new string[] { \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\" };\nstring[] result = new string[substrings.Length];\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpot0kid8h.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmpot0kid8h.d(20):
    Error: unterminated character constant\n/tmp/tmpot0kid8h.d(20): Error: unterminated
    character constant\n/tmp/tmpot0kid8h.d(20): Error: unterminated character constant\n/tmp/tmpot0kid8h.d(34):
    Error: semicolon expected, not \''{\''\n/tmp/tmpot0kid8h.d(34): Error: Declaration
    expected, not \''{\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpot0kid8h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_qbe6uh.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_qbe6uh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchCaseInsensitiveCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0h0_3sia.d(80): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0h0_3sia.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool allowEmpty, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, allowEmpty,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool allowEmpty, bool ignoreCase, bool\
    \ allowEmptyStrings) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, allowEmpty, ignoreCase, allowEmptyStrings))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9mn0d40v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_sppir1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx4m579we.d(91): Error: expression expected, not \''unittest\''\n/tmp/tmpx4m579we.d(92):
    Error: found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpx4m579we.d(93):
    Error: expression expected, not \''alias\''\n/tmp/tmpx4m579we.d(93): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpx4m579we.d(93): Error: found \''=\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4m579we.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring) : !s.contains(substring, caseSensitive))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(!caseSensitive\
    \ ? !s.contains(substring, partialMatch) : !s.contains(substring, caseSensitive,\
    \ partialMatch))\n        {\n            result[i++] = s;\n        }\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(!caseSensitive ? !s.contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !s.contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that do not contain given substring\n            \n*/\n\
    string[] filter_by_not_substring(string[] strings, string substring, bool caseSensi\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoe4tw6_z.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpoe4tw6_z.d(28):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpoe4tw6_z.d(45): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpoe4tw6_z.d(62): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpoe4tw6_z.d(79): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpoe4tw6_z.d(93): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoe4tw6_z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partial) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partial))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partial) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcmwvqnb0.d(97): Error: found \''unittest\'' instead of statement\n/tmp/tmpcmwvqnb0.d(106):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmwvqnb0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            if(partialMatch)\n            {\n                bool\
    \ found = false;\n                for(int j = 0; j < result.length; ++j)\n   \
    \             {\n                    if(result[j].contains(substring))\n     \
    \               {\n                        found = true;\n                   \
    \     break;\n                    }\n                }\n                if(!found)\n\
    \                    result[i] = strings[i];\n            }\n            else\n\
    \                result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n        {\n\
    \            if(partialMatch)\n            {\n                bool found = false;\n\
    \                for(int j = 0; j < result.length; ++j)\n                {\n \
    \                   if(result[j].contains(substring))\n                    {\n\
    \                        found = true;\n                        \nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkfw3rlth.d(96): Error: found \''unittest\'' instead of statement\n/tmp/tmpkfw3rlth.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpkfw3rlth.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpkfw3rlth.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpkfw3rlth.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpkfw3rlth.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfw3rlth.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_qbe6uh.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_qbe6uh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays,list |>\n<| c |>\nThanks for your answer. I am not\
    \ allowed to use any built in functions. I should also mention that I am not allowed\
    \ to use any built in libraries. I should also mention that I am not allowed to\
    \ use any built in libraries. I should also mention that I am not allowed to use\
    \ any built in libraries. I should also mention that I am not allowed to use any\
    \ built in libraries. I should also mention that I am not allowed to use any built\
    \ in libraries. I should also mention that I am not allowed to use any built in\
    \ libraries. I should also mention that I am not allowed to use any built in libraries.\
    \ I should also mention that I am not allowed to use any built in libraries. I\
    \ should also mention that I am not allowed to use any built in libraries. I should\
    \ also mention that I am not allowed to use any built in libraries. I should also\
    \ mention that I am not allowed to use any built in libraries. I should also mention\
    \ that I am not allowed to use any built in libraries. I should also mention that\
    \ I am not allowed to use any built in libraries. I should also mention that I\
    \ am not allowed to use any built in libraries. I should also mention that I am\
    \ not allowed to use any built in libraries. I should also mention that I am not\
    \ allowed to use any built in libraries. I should also mention that I am not allowed\
    \ to use any built in libraries. I should also mention that I am not allowed to\
    \ use any built in libraries. I should also mention that I am not allowed to use\
    \ any built in libraries. I should also mention that I am not allowed to use any\
    \ built in libraries. I should also mention that I am not allowed to use any built\
    \ in libraries. I should also mention that I am not allowed to use any built in\
    \ libraries. I should also mention that I am not allowed to use any built in libraries.\
    \ I should also mention that I am not allowed to use any built in libraries. I\
    \ should also mention that I am not allowed to use any built in libraries. I should\
    \ also mention that I am not allowed to use any built in libraries. I should also\
    \ mention that I am not allowed to use any built in libraries. I should also mention\
    \ that I am not allowed to use any built in libraries. I should also mention that\
    \ I am not allowed to use any built in libraries. I should also mention that I\
    \ am not allowed to use any built in libraries. I should also mention that I am\
    \ not allowed to use any built in libraries. I should also \nunittest\n{\n   \
    \ alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnqg949iu.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmpnqg949iu.d(25):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpnqg949iu.d(26): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpnqg949iu.d(27): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpnqg949iu.d(28): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpnqg949iu.d(29): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnqg949iu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase: true))\n        {\n            result[i] = strings[i];\n       \
    \ }\n    }\n    return result;\n}\n/*\n Filter an input list of strings only for\
    \ ones that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, startIndex: startIndex, endIndex:\
    \ endIndex))\n        {\n            result[i] = strings[i];\n        }\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex) : !strings[i].contains(substring,\
    \ startIndex: startIndex, endIndex: endIndex, ignoreCase: true))\n        {\n\
    \            result[i] = strings[i];\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex, bool caseSensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < string\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpegvxar2h.d(44): Error: found \'':\'' when expecting \'',\''\n/tmp/tmpegvxar2h.d(60):
    Error: found \'':\'' when expecting \'',\''\n/tmp/tmpegvxar2h.d(60): Error: found
    \'':\'' when expecting \'',\''\n/tmp/tmpegvxar2h.d(76): Error: found \'':\'' when
    expecting \'',\''\n/tmp/tmpegvxar2h.d(76): Error: found \'':\'' when expecting
    \'',\''\n/tmp/tmpegvxar2h.d(76): Error: found \'':\'' when expecting \'',\''\n/tmp/tmpegvxar2h.d(76):
    Error: found \'':\'' when expecting \'',\''\n/tmp/tmpegvxar2h.d(76): Error: found
    \'':\'' when expecting \'',\''\n/tmp/tmpegvxar2h.d(91): Error: found \''unittest\''
    when expecting \'';\'' following for condition\n/tmp/tmpegvxar2h.d(100): Error:
    found \''void\'' when expecting \'')\''\n/tmp/tmpegvxar2h.d(100): Error: found
    \''{\'' when expecting \'';\'' following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpegvxar2h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa82wmj0o.d(106): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa82wmj0o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2k5jesg.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpk2k5jesg.d(84):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression
    expected, not \''alias\''\n/tmp/tmpk2k5jesg.d(85): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression expected, not
    \''=\''\n/tmp/tmpk2k5jesg.d(85): Error: found \''filter_by_substring\'' when expecting
    \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression expected, not \'';\''\n/tmp/tmpk2k5jesg.d(87):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(87): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(88): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(89): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpk2k5jesg.d(90): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(91):
    Error: expression expected, not \''}\''\n/tmp/tmpk2k5jesg.d(92): Error: found
    \''void\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''{\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92): Error: expression expected, not
    \''}\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpk2k5jesg.d(92): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\''
    instead of statement\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpk2k5jesg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps6yji0ey.d(87): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps6yji0ey.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ startIndex, endIndex) : !strings[i].contains(substring, startIndex, endIndex,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int startIndex, int endIndex, bool caseSensitive) \n{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring, startIndex,\
    \ endIndex) : !strings[i].contains(substring, startIndex, endIndex, caseSen\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp49jurqwz.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmp49jurqwz.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmp49jurqwz.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmp49jurqwz.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmp49jurqwz.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmp49jurqwz.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmp49jurqwz.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmp49jurqwz.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmp49jurqwz.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmp49jurqwz.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp49jurqwz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nThis doesn't work. `string[]\
    \ result = new string[strings.length];` will throw an `ArgumentOutOfRangeException`\
    \ because `strings.length` is `0`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n\
    <|/ c |>\n<| c |>\nThis code doesn't work. `string[] result = new string[strings.length];`\
    \ will throw an `ArgumentOutOfRangeException` because `strings.length` is `0`.\n\
    <|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\nThis code doesn't\
    \ work. `string[] result = new string[strings.length];` will throw an `ArgumentOutOfRangeException`\
    \ because `strings.length` is `0`.\n<|/ c |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\n</code>\nThis line is wrong.\
    \ strings.length is 0, so you get an ArgumentOutOfRangeException.\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0, so you get an ArgumentOutOfRangeException.\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0, so you get an ArgumentOutOfRangeException.\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] result = new\
    \ string[strings.length];\n</code>\nThis line is wrong. strings.length is 0, so\
    \ you get an ArgumentOutOfRangeException.\n<|/ a tags=c#,string,arrays |>\n<|\
    \ a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings.length is 0, so you get an ArgumentOutOfRangeException.\n\
    <|/ a dscore=1 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result = new\
    \ string[\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqdhwpnxe.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpqdhwpnxe.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmpqdhwpnxe.d(23): Error: unterminated
    character constant\n/tmp/tmpqdhwpnxe.d(29): Error: unterminated character constant\n/tmp/tmpqdhwpnxe.d(35):
    Error: unterminated character constant\n/tmp/tmpqdhwpnxe.d(40): Error: Declaration
    expected, not \''<\''\n/tmp/tmpqdhwpnxe.d(46): Error: Declaration expected, not
    \''<\''\n/tmp/tmpqdhwpnxe.d(52): Error: Declaration expected, not \''<\''\n/tmp/tmpqdhwpnxe.d(58):
    Error: Declaration expected, not \''<\''\n/tmp/tmpqdhwpnxe.d(64): Error: Declaration
    expected, not \''<\''\n/tmp/tmpqdhwpnxe.d(74): Error: Declaration expected, not
    \''assert\''\n/tmp/tmpqdhwpnxe.d(75): Error: Declaration expected, not \''assert\''\n/tmp/tmpqdhwpnxe.d(76):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpqdhwpnxe.d(77): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpqdhwpnxe.d(78): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdhwpnxe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jivrad9.d(92): Error: no identifier for declarator string\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jivrad9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ strings = new string[] { \"one\", \"two\", \"three\", \"four\", \"five\" };\n\
    string[] substrings = new string[] { \"one\", \"two\" };\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp681uniqo.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmp681uniqo.d(22):
    Error: semicolon expected, not \''{\''\n/tmp/tmp681uniqo.d(22): Error: Declaration
    expected, not \''{\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp681uniqo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThis doesn't answer the question. OP\
    \ wants to remove all strings that don't contain `substring`, not just those that\
    \ contain it.\n<|/ c |>\n<| c |>\nI misunderstood the question. I'll update my\
    \ answer.\n<|/ c |>\n<| c |>\nI updated my answer to reflect your comment. Thanks.\n\
    <|/ c |>\n<| c |>\nI updated my answer to reflect your comment. Thanks.\n<|/ c\
    \ |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[] {\
    \ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\" };\nstring[] result = new string[strings.Length];\n\
    for (int i = 0; i < strings.Length; i++)\n{\n    if (strings[i].Contains(\"a\"\
    ))\n        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't answer the question. OP wants to remove all strings that don't contain\
    \ `substring`, not just those that contain it.\n<|/ c |>\n<| a tags=string,c#,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n\
    string[] result = new string[strings.Length];\nfor (int i = 0; i < strings.Length;\
    \ i++)\n{\n    if (strings[i].Contains(\"a\"))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to remove all strings that don't contain `substring`, not just those that contain\
    \ it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\" };\nstring[] result = new string[\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp13lqol_9.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmp13lqol_9.d(20):
    Error: unterminated character constant\n/tmp/tmp13lqol_9.d(20): Error: unterminated
    character constant\n/tmp/tmp13lqol_9.d(23): Error: unterminated character constant\n/tmp/tmp13lqol_9.d(35):
    Error: Declaration expected, not \''for\''\n/tmp/tmp13lqol_9.d(35): Error: no
    identifier for declarator i\n/tmp/tmp13lqol_9.d(35): Error: Declaration expected,
    not \''<\''\n/tmp/tmp13lqol_9.d(35): Error: no identifier for declarator i\n/tmp/tmp13lqol_9.d(35):
    Error: Declaration expected, not \''++\''\n/tmp/tmp13lqol_9.d(39): Error: unrecognized
    declaration\n/tmp/tmp13lqol_9.d(43): Error: unterminated character constant\n/tmp/tmp13lqol_9.d(43):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp13lqol_9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ true))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].contains(substring,\
    \ ignoreCase: ignoreCase, ignoreCase: ignoreCase))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !string\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdq154emf.d(40): Error: found \'':\'' when expecting \'',\''\n/tmp/tmpdq154emf.d(54):
    Error: found \'':\'' when expecting \'',\''\n/tmp/tmpdq154emf.d(68): Error: found
    \'':\'' when expecting \'',\''\n/tmp/tmpdq154emf.d(68): Error: found \'':\'' when
    expecting \'',\''\n/tmp/tmpdq154emf.d(83): Error: found \''unittest\'' when expecting
    \'':\''\n/tmp/tmpdq154emf.d(92): Error: found \''void\'' when expecting \'')\''\n/tmp/tmpdq154emf.d(92):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmpdq154emf.d(92):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdq154emf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4twue2l0.d(97): Error: expression expected, not \''unittest\''\n/tmp/tmp4twue2l0.d(98):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression
    expected, not \''alias\''\n/tmp/tmp4twue2l0.d(99): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression expected, not
    \''=\''\n/tmp/tmp4twue2l0.d(99): Error: found \''filter_by_substring\'' when expecting
    \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression expected, not \'';\''\n/tmp/tmp4twue2l0.d(101):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(101): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(102): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(103): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmp4twue2l0.d(104): Error: found \'';\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(105):
    Error: expression expected, not \''}\''\n/tmp/tmp4twue2l0.d(106): Error: found
    \''void\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(106): Error: found \''{\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(106): Error: expression expected, not
    \''}\''\n/tmp/tmp4twue2l0.d(106): Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(106):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmp4twue2l0.d(106): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmp4twue2l0.d(106): Error: found
    \''EOF\'' instead of statement\n/tmp/tmp4twue2l0.d(106): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4twue2l0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1h2cg5ll.d(100): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1h2cg5ll.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2k5jesg.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpk2k5jesg.d(84):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression
    expected, not \''alias\''\n/tmp/tmpk2k5jesg.d(85): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression expected, not
    \''=\''\n/tmp/tmpk2k5jesg.d(85): Error: found \''filter_by_substring\'' when expecting
    \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression expected, not \'';\''\n/tmp/tmpk2k5jesg.d(87):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(87): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(88): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(89): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpk2k5jesg.d(90): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(91):
    Error: expression expected, not \''}\''\n/tmp/tmpk2k5jesg.d(92): Error: found
    \''void\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''{\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92): Error: expression expected, not
    \''}\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpk2k5jesg.d(92): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\''
    instead of statement\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpk2k5jesg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase())\
    \ && !ignoreCase ? !strings[i].toLowerCase().contains(substring.toLowerCase())\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()) && !ignoreCase)\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()) && !ignoreCase\
    \ ? !strings[i].toLowerCase().contains(substring.toLowerCase()) : !strings[i].toLowerCase().contains(substring.toLowerCase())\
    \ && !ignoreCase)\n        {\n            result[i] = strings[i];\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] \nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw9s75x5c.d(88): Error: no identifier for declarator string[]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9s75x5c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprq80m2jm.d(92): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprq80m2jm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain given substring\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpna5riv7x.d(106): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpna5riv7x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv81onro1.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpv81onro1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much for your help! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nI added a more generic solution that should\
    \ work for any type of string\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\n\
    string[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\nstring[] result =\
    \ stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\" };\nstring search = \"a\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] stringArray\
    \ = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\" };\nstring search = \"a\";\nstring[] result =\
    \ stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = { \"a\", \"b\", \"c\",\
    \ \"d\", \"\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw0dzf8pe.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpw0dzf8pe.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmpw0dzf8pe.d(33): Error: Declaration
    expected, not \''<\''\n/tmp/tmpw0dzf8pe.d(40): Error: Declaration expected, not
    \''<\''\n/tmp/tmpw0dzf8pe.d(47): Error: Declaration expected, not \''<\''\n/tmp/tmpw0dzf8pe.d(54):
    Error: Declaration expected, not \''<\''\n/tmp/tmpw0dzf8pe.d(66): Error: unterminated
    string constant starting at /tmp/tmpw0dzf8pe.d(66)\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpw0dzf8pe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps6yji0ey.d(87): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps6yji0ey.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your code, but I got\
    \ this error `The method filter_by_substring(String[], String) in the type Main\
    \ is not applicable for the arguments (String[], String)`\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a full working example. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I tried your code, but I got this error `The\
    \ method filter_by_substring(String[], String) in the type Main is not applicable\
    \ for the arguments (String[], String)`\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a full working example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I tried your code, but I got this error `The method filter_by_substring(String[],\
    \ String) in the type Main is not applicable for the arguments (String[], String)`\n\
    <|/ c |>\n<| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;\n\
    import java.util.Scanner;\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt1_023z7.d(17): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1_023z7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseInsensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive, partialMatchCaseInsensitiveCaseIn\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpys2tlzm6.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpys2tlzm6.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpys2tlzm6.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpys2tlzm6.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpys2tlzm6.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpys2tlzm6.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpys2tlzm6.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpys2tlzm6.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpys2tlzm6.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpys2tlzm6.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpys2tlzm6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for one\nunittest\n{\n    alias candidate = filter_by_substring;\n\n  \
    \  assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps6yji0ey.d(87): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps6yji0ey.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThank you very much for your answer!\
    \ I really appreciate it! I really appreciate your help! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really appreciate it! I really appreciate it! I really\
    \ appreciate it! I really appreciate it! I really appreciate it! I really appreciate\
    \ it! I really appreciate it! I really appreciate it! I really appreciate it!\
    \ I really appreciate it! I really \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxie61m3o.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmpxie61m3o.d(25):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpxie61m3o.d(26): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpxie61m3o.d(27): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpxie61m3o.d(28): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpxie61m3o.d(29): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxie61m3o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0xbmzlec.d(11): Error: found \''s\'' when expecting \'';\''
    following statement\n/tmp/tmp0xbmzlec.d(11): Error: expression expected, not \'':\''\n/tmp/tmp0xbmzlec.d(11):
    Error: found \''strings\'' when expecting \'';\'' following for condition\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0xbmzlec.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int start) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ start))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int start, int end) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ start, end))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, int start, int end, int length) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(!strings[i].contains(substring, start, end, length))\n     \
    \       result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain given substring\n  \
    \          \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int start, int end, int length, int startIndex) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, start, end, length, startIndex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int start, int end, int length, int startIndex, int endIndex) \n{\n    string[]\
    \ result = new string[strings.length];\n\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8qp6pe1z.d(95): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qp6pe1z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            if(partialMatch)\n            {\n                bool\
    \ found = false;\n                for(int j = 0; j < strings[i].length(); ++j)\n\
    \                {\n                    if(strings[i].charAt(j) == substring.charAt(j))\n\
    \                    {\n                        found = true;\n              \
    \          break;\n                    }\n                }\n                if(!found)\n\
    \                    result[i] = strings[i];\n            }\n            else\n\
    \                result[i] = strings[i];\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n        {\n\
    \            if(partialMatch)\n            {\n                bool found = false;\n\
    \                for(int j = 0; j < strings[i].length(); ++j)\n              \
    \  {\n                    if(strings[i].charAt(j) == sub\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkatd1c4a.d(93): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpkatd1c4a.d(102):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpkatd1c4a.d(102):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpkatd1c4a.d(102):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpkatd1c4a.d(102):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpkatd1c4a.d(102):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkatd1c4a.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, caseSensitive))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring, partialMatch) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring,\
    \ partialMatch, partialMatchCaseInsensitive) : !strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool partialMatch, bool partialMatchCaseInsensitive, bool partialMatchIgnoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvgvjxozb.d(80): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvgvjxozb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer! I didn't know\
    \ about `Contains`. However, I still don't understand why my code doesn't work.\
    \ Can you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added\
    \ a comment to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I still don't understand why my code doesn't work. Can you please explain why\
    \ my code doesn't work?\n<|/ c |>\n<| c |>\nI added a comment to my answer. Hope\
    \ it helps.\n<|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\" };\nstring substring = \"2\";\nstring[] result = strings.Where(x => x.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I didn't know about\
    \ `Contains`. However, I still don't understand why my code doesn't work. Can\
    \ you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nThe code you\
    \ posted doesn't work because you didn't assign the result of the `Where` call\
    \ to a variable. `Where` returns a `IEnumerable<T>`, which you then need to convert\
    \ to an array using `ToArray`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings\
    \ = new string[] { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\" };\nstring substring = \"2\";\nstring[] result = strings.Where(x => x.Contains(substring)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThanks for your answer! I didn't\
    \ know about `Contains`. However, I still don't understand why my code doesn't\
    \ work. Can you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\n\
    The code you posted doesn't work because you didn't assign the result of the `Where`\
    \ call to a variable. `Where` returns a `IEnumerable<T>`, which you then need\
    \ to convert to an array using `ToArray\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3wl_ia3l.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmp3wl_ia3l.d(20):
    Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(20): Error: unterminated
    character constant\n/tmp/tmp3wl_ia3l.d(20): Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(20):
    Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(26): Error: unterminated
    character constant\n/tmp/tmp3wl_ia3l.d(26): Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(26):
    Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(36): Error: Declaration
    expected, not \''<\''\n/tmp/tmp3wl_ia3l.d(39): Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(39):
    Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(39): Error: unterminated
    character constant\n/tmp/tmp3wl_ia3l.d(39): Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(42):
    Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(42): Error: unterminated
    character constant\n/tmp/tmp3wl_ia3l.d(49): Error: Declaration expected, not \''<\''\n/tmp/tmp3wl_ia3l.d(52):
    Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(52): Error: unterminated
    character constant\n/tmp/tmp3wl_ia3l.d(52): Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(52):
    Error: unterminated character constant\n/tmp/tmp3wl_ia3l.d(55): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wl_ia3l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThis code doesn't compile for me. `string[]\
    \ result = new string[strings.length];` gives an error `Cannot implicitly convert\
    \ type 'string[]' to 'string'`\n<|/ c |>\n<| c |>\nIt compiles fine for me. Are\
    \ you sure you copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it exactly\
    \ as you wrote it. I'm running it on Visual Studio 2015.\n<|/ c |>\n<| c |>\n\
    I see it now. `string[] result = new string[strings.length];` should be `string[]\
    \ result = new string[strings.length - 1];`\n<|/ c |>\n<| c |>\nYes, I see it\
    \ now. `string[] result = new string[strings.length];` should be `string[] result\
    \ = new string[strings.length - 1];`\n<|/ c |>\n<| a |>\n<code>\nstring[] result\
    \ = new string[strings.length];\n</code>\nThis line is wrong. strings is an array\
    \ of strings, so strings.length will return the number of strings in the array.\
    \ \nYou probably meant to write:\n<code>\nstring[] result = new string[strings.length\
    \ - 1];\n</code>\n<|/ a tags=c#,string,arrays dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings is an array of strings, so strings.length will return the\
    \ number of strings in the array. You probably meant to write:\n<code>\nstring[]\
    \ result = new string[strings.length - 1];\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nstring[] result = new string[strings.length];\n</code>\nThis line\
    \ is wrong. strings is an array of strings, so strings.length will return the\
    \ number of strings in the array. You probably meant to write:\n<code>\nstring[]\
    \ result = new string[strings.length - 1];\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line is wrong. strings is an array of strings, so strings.length\
    \ will return the number of strings in the array. You probably meant to write:\n\
    <code>\nstring[] result = new \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppxfw5fq6.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmppxfw5fq6.d(20):
    Error: unterminated character constant\n/tmp/tmppxfw5fq6.d(26): Error: unterminated
    character constant\n/tmp/tmppxfw5fq6.d(37): Error: Declaration expected, not \''<\''\n/tmp/tmppxfw5fq6.d(42):
    Error: Declaration expected, not \''<\''\n/tmp/tmppxfw5fq6.d(47): Error: Declaration
    expected, not \''<\''\n/tmp/tmppxfw5fq6.d(51): Error: Declaration expected, not
    \''<\''\n/tmp/tmppxfw5fq6.d(56): Error: Declaration expected, not \''<\''\n/tmp/tmppxfw5fq6.d(60):
    Error: Declaration expected, not \''<\''\n/tmp/tmppxfw5fq6.d(65): Error: Declaration
    expected, not \''<\''\n/tmp/tmppxfw5fq6.d(73): Error: Declaration expected, not
    \''assert\''\n/tmp/tmppxfw5fq6.d(74): Error: Declaration expected, not \''assert\''\n/tmp/tmppxfw5fq6.d(75):
    Error: Declaration expected, not \''assert\''\n/tmp/tmppxfw5fq6.d(76): Error:
    Declaration expected, not \''assert\''\n/tmp/tmppxfw5fq6.d(77): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxfw5fq6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv81onro1.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpv81onro1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jivrad9.d(92): Error: no identifier for declarator string\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jivrad9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive))\n        {\n     \
    \       result[i] = strings[i];\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase))\n        {\n            result[i] = strings[i];\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool caseSensitive,\
    \ bool ignoreCase, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase))\n        {\n            result[i] =\
    \ strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain given substring\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring, bool\
    \ caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase, ignoreCase))\n        {\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ww2sbnd.d(94): Error: found \''unittest\'' instead of statement\n/tmp/tmp4ww2sbnd.d(103):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp4ww2sbnd.d(103):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ww2sbnd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=arrays,c#,string,list |>\n<| c |>\nThanks for your answer! I appreciate\
    \ it! I didn't know about `Contains`. However, I still have a question: why does\
    \ `string[] result = new string[strings.length];` work? I thought that `string[]\
    \ result = new string[strings.length];` would create a new array and copy the\
    \ contents of `strings` into it? Why does it not work if I do `string[] result\
    \ = strings;`?\n<|/ c |>\n<| c |>\nBecause strings are reference types. When you\
    \ do `string[] result = strings;` you just copy the references to the same strings.\
    \ So when you change `result[0]` you also change `strings[0]`. When you do `string[]\
    \ result = new string[strings.length];` you create a new array and copy the references\
    \ to the same strings. So when you change `result[0]` you also change `strings[0]`.\n\
    <|/ c |>\n<| c |>\nOh I see. So `string[] result = strings;` would create a new\
    \ array and copy the references to the same strings. But `string[] result = new\
    \ string[strings.length];` would create a new array and copy the references to\
    \ the same strings. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\n</code>\nThis line creates a new array\
    \ and copies the contents of strings into it. strings is just a reference to the\
    \ original array, so when you change result[0], you are changing strings[0] as\
    \ well. \n<code>\nstring[] result = strings;\n</code>\nThis line creates a new\
    \ array and copies the references to the same strings into it. strings is just\
    \ a reference to the original array, so when you change result[0], you are changing\
    \ strings[0] as well.\n<|/ a tags=arrays,c#,string,list |>\n<| a dscore=0 |>\n\
    <code>\nstring[] result = new string[strings.length];\n</code>\nThis line creates\
    \ a new array and copies the contents of strings into it. strings is just a reference\
    \ to the original array, so when you change result[0], you are changing strings[0]\
    \ as well. \n<code>\nstring[] result = strings;\n</code>\nThis line creates a\
    \ new array and copies the references to the same strings into it. strings is\
    \ just a reference to the original array, so when you change result[0], you are\
    \ changing strings[0] as well.\n<|/ a tags=arrays,c\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppqage90u.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmppqage90u.d(20):
    Error: unterminated character constant\n/tmp/tmppqage90u.d(31): Error: Declaration
    expected, not \''<\''\n/tmp/tmppqage90u.d(35): Error: Declaration expected, not
    \''<\''\n/tmp/tmppqage90u.d(41): Error: Declaration expected, not \''<\''\n/tmp/tmppqage90u.d(45):
    Error: Declaration expected, not \''<\''\n/tmp/tmppqage90u.d(52): Error: Declaration
    expected, not \''assert\''\n/tmp/tmppqage90u.d(53): Error: Declaration expected,
    not \''assert\''\n/tmp/tmppqage90u.d(54): Error: Declaration expected, not \''assert\''\n/tmp/tmppqage90u.d(55):
    Error: Declaration expected, not \''assert\''\n/tmp/tmppqage90u.d(56): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppqage90u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1og__zl2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCaseSensitive))\n            result[i] = strings[i];\n\
    \    }\nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_qbe6uh.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_qbe6uh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv81onro1.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpv81onro1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search\
    \ = \"you\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] stringArray\
    \ = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\"\
    ;\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] stringArray = { \"hello\"\
    , \"world\", \"how\", \"are\", \"you\" };\nstring search = \"you\";\nstring[]\
    \ result = stringArray.Where(x => x.Contains(search)).ToArray();\n</code>\n<|/\
    \ a tags=string,c#,arrays |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[]\
    \ stringArray = { \"hello\", \"world\", \"how\", \"are\", \"you\" };\nstring search\
    \ = \"you\";\nstring[] result = stringArray.Where(x => x.Contains(search)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tag\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf4u9gh0p.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmpf4u9gh0p.d(24):
    Error: Declaration expected, not \''<\''\n/tmp/tmpf4u9gh0p.d(31): Error: Declaration
    expected, not \''<\''\n/tmp/tmpf4u9gh0p.d(38): Error: Declaration expected, not
    \''<\''\n/tmp/tmpf4u9gh0p.d(45): Error: Declaration expected, not \''<\''\n/tmp/tmpf4u9gh0p.d(52):
    Error: Declaration expected, not \''<\''\n/tmp/tmpf4u9gh0p.d(59): Error: Declaration
    expected, not \''<\''\n/tmp/tmpf4u9gh0p.d(66): Error: Declaration expected, not
    \''<\''\n/tmp/tmpf4u9gh0p.d(73): Error: Declaration expected, not \''assert\''\n/tmp/tmpf4u9gh0p.d(74):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpf4u9gh0p.d(75): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpf4u9gh0p.d(76): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpf4u9gh0p.d(77): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4u9gh0p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ true))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].contains(substring, ignoreCase:\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].contains(substring, ignoreCase: ignoreCase, ignoreCase: ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].contains(substring, ignore\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvkzudpco.d(40): Error: found \'':\'' when expecting \'',\''\n/tmp/tmpvkzudpco.d(54):
    Error: found \'':\'' when expecting \'',\''\n/tmp/tmpvkzudpco.d(68): Error: found
    \'':\'' when expecting \'',\''\n/tmp/tmpvkzudpco.d(68): Error: found \'':\'' when
    expecting \'',\''\n/tmp/tmpvkzudpco.d(83): Error: found \''unittest\'' when expecting
    \'',\''\n/tmp/tmpvkzudpco.d(92): Error: found \''void\'' when expecting \'',\''\n/tmp/tmpvkzudpco.d(92):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpvkzudpco.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpvkzudpco.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpvkzudpco.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpvkzudpco.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpvkzudpco.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpvkzudpco.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpvkzudpco.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpvkzudpco.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings)\n    {\n        if (s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer. I'm new to C# and\
    \ I didn't know about LINQ. I'll look into it.\n<|/ c |>\n<| c |>\nI added a solution\
    \ using LINQ. Hope it helps.\n<|/ c |>\n<| c |>\nThanks again. I'll look into\
    \ LINQ. I'm still a beginner at C#.\n<|/ c |>\n<| c |>\nI added a solution using\
    \ LINQ. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.IO;\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpng8lc0pt.d(11): Error: found \''s\'' when expecting \'';\''
    following statement\n/tmp/tmpng8lc0pt.d(11): Error: expression expected, not \'':\''\n/tmp/tmpng8lc0pt.d(11):
    Error: found \''strings\'' when expecting \'';\'' following for condition\n/tmp/tmpng8lc0pt.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmpng8lc0pt.d(23): Error: unterminated
    character constant\n/tmp/tmpng8lc0pt.d(23): Error: unterminated character constant\n/tmp/tmpng8lc0pt.d(23):
    Error: unterminated character constant\n/tmp/tmpng8lc0pt.d(29): Error: unterminated
    character constant\n/tmp/tmpng8lc0pt.d(29): Error: unterminated character constant\n/tmp/tmpng8lc0pt.d(37):
    Error: semicolon expected, not \''.\''\n/tmp/tmpng8lc0pt.d(37): Error: no identifier
    for declarator .Collections.Generic\n/tmp/tmpng8lc0pt.d(38): Error: semicolon
    expected, not \''.\''\n/tmp/tmpng8lc0pt.d(38): Error: no identifier for declarator
    .Linq\n/tmp/tmpng8lc0pt.d(39): Error: semicolon expected, not \''.\''\n/tmp/tmpng8lc0pt.d(39):
    Error: no identifier for declarator .Text\n/tmp/tmpng8lc0pt.d(40): Error: semicolon
    expected, not \''.\''\n/tmp/tmpng8lc0pt.d(40): Error: no identifier for declarator
    .IO\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpng8lc0pt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7br81wvh.d(92): Error: no identifier for declarator string[]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7br81wvh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool case_insensitive, bool ignore_case) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool case_insensitive, bool ignore_case, bool ignore_whitespace) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, case_insensitive, ignore_case,\
    \ ignore_whitespace))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool case_insensitive, bool ignore_case, bool ignore_whitespace,\
    \ bool ignore_newlines) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ case_insensitive, ignore_case, ignore_whitespace, ignore_newlines))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain given substring\n        \
    \    \n*/\nstring[] \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7br81wvh.d(92): Error: no identifier for declarator string[]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7br81wvh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!strings[i].contains(substring, caseSensitive, partialMatch, partialMatchCaseInsensitive,\
    \ partialMatchCaseInsensitiveCase\nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv81onro1.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpv81onro1.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpv81onro1.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpv81onro1.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpv81onro1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1og__zl2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (!caseSensitive ? !strings[i].contains(substring) :\
    \ !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpggjoajeo.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpggjoajeo.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpggjoajeo.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpggjoajeo.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpggjoajeo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n\nunittest\n{\n  \
    \  alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1h2cg5ll.d(100): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1h2cg5ll.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works fine. However I wanted to know if there is a way to do it with\
    \ LINQ. Thanks again.\n<|/ c |>\n<| c |>\nI added a LINQ solution to my answer\n\
    <|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works fine. However I wanted to know if there is a way to do it with\
    \ LINQ. Thanks again.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings =\
    \ new string[] { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"\
    , \"vwx\", \"yz\" };\nstring substring = \"abc\";\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThanks\
    \ for your answer. I tried your solution and it works fine. However I wanted to\
    \ know if there is a way to do it with LINQ. Thanks again.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring substring = \"abc\"\
    ;\nvar result = strings.Where(s => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| c |>\nThanks for your answer. I tried your solution and it works fine.\
    \ However I wanted to know if there is a way to do it with LINQ. Thanks again.\n\
    <|/ c |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[] { \"abc\"\
    , \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\" };\nstring\
    \ substring = \"abc\";\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works fine. \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpree85mcq.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpree85mcq.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmpree85mcq.d(31): Error: Declaration
    expected, not \''<\''\n/tmp/tmpree85mcq.d(41): Error: Declaration expected, not
    \''<\''\n/tmp/tmpree85mcq.d(51): Error: Declaration expected, not \''<\''\n/tmp/tmpree85mcq.d(61):
    Error: Declaration expected, not \''<\''\n/tmp/tmpree85mcq.d(69): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpree85mcq.d(70): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpree85mcq.d(71): Error: Declaration expected, not \''assert\''\n/tmp/tmpree85mcq.d(72):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpree85mcq.d(73): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpree85mcq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, ignoreCase,\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase, bool\
    \ ignoreCase) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, ignoreCase, ignoreCase, ignoreCase))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not contain given substring\n            \n*/\nstring\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5jivrad9.d(92): Error: no identifier for declarator string\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jivrad9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchCaseInsensitiveCaseInsensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(!strings[i].contains(substring, caseSensitive, partialMatch,\
    \ partialMatchCaseInsensitive, partialMatchCaseInsensitiveCaseIn\nunittest\n{\n\
    \    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpys2tlzm6.d(83): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpys2tlzm6.d(92):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpys2tlzm6.d(92): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpys2tlzm6.d(92): Error: expression
    expected, not \''}\''\n/tmp/tmpys2tlzm6.d(92): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpys2tlzm6.d(92): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpys2tlzm6.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpys2tlzm6.d(92): Error:
    found \''EOF\'' instead of statement\n/tmp/tmpys2tlzm6.d(92): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpys2tlzm6.d(92): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpys2tlzm6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1og__zl2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however I cannot use any\
    \ external libraries. I should have mentioned that in my original question. Sorry\
    \ about that.\n<|/ c |>\n<| c |>\nI added a solution without external libraries.\n\
    <|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq |>\n<| a |>\n<code>\n\
    var result = strings.Where(s => s.Contains(substring));\n</code>\n<|/ a dscore=2\
    \ tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nvar\
    \ result = strings.Where(s => s.Contains(substring));\n</code>\n<|/ a dscore=2\
    \ tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    var result = strings.Where(s => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.Contains(substring));\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring));\n</code>\n<|/ a tags=c#,linq |>\n<| a dscore=1 |>\n\
    <code>\nvar result = strings.Where(s => s.Contains(substring));\n</code>\n<|/\
    \ a tags=c#,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s =>\
    \ s.Contains(substring));\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,lin\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu__z2_2l.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpu__z2_2l.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmpu__z2_2l.d(31): Error: Declaration
    expected, not \''<\''\n/tmp/tmpu__z2_2l.d(36): Error: Declaration expected, not
    \''<\''\n/tmp/tmpu__z2_2l.d(41): Error: Declaration expected, not \''<\''\n/tmp/tmpu__z2_2l.d(46):
    Error: Declaration expected, not \''<\''\n/tmp/tmpu__z2_2l.d(51): Error: Declaration
    expected, not \''<\''\n/tmp/tmpu__z2_2l.d(56): Error: Declaration expected, not
    \''<\''\n/tmp/tmpu__z2_2l.d(61): Error: Declaration expected, not \''<\''\n/tmp/tmpu__z2_2l.d(66):
    Error: Declaration expected, not \''<\''\n/tmp/tmpu__z2_2l.d(71): Error: Declaration
    expected, not \''<\''\n/tmp/tmpu__z2_2l.d(76): Error: Declaration expected, not
    \''<\''\n/tmp/tmpu__z2_2l.d(81): Error: Declaration expected, not \''<\''\n/tmp/tmpu__z2_2l.d(88):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpu__z2_2l.d(89): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpu__z2_2l.d(90): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpu__z2_2l.d(91): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpu__z2_2l.d(92): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu__z2_2l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, but I believe it would be better to use\
    \ a `foreach` loop to avoid the extra array allocations.\n<|/ c |>\n<| c |>\n\
    I agree, I'll add that to my answer.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't use any extra arrays. I believe it would be more efficient than using\
    \ an extra array and `foreach`.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ use any extra arrays. I believe it would be more efficient than using an extra\
    \ array and `foreach`.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use\
    \ any extra arrays. I believe it would be more efficient than using an extra array\
    \ and `foreach`.\n<|/ c |>\n<| a tags=string,c#,linq |>\n<code>\nvar result =\
    \ strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to return an array of\
    \ the strings that contain the substring.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to return an array of the strings that contain the substring.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to return an array\
    \ of the strings that contain the substring.\n<|/ c |>\n<| a tags=string,c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s\
    \ => s.Contains(substring)).ToArray();\n</code>\n<|/ a tags=string,c#,linq |>\n\
    <| a tags=string,c#,linq |>\n<code>\nvar result = strings.Where(s => s.Contains(substring)).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=string,c#,linq |>\n<code>\nvar result =\
    \ strings.Where(s => s.Contains(substring)).ToArray();\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=string,c#,linq |>\n<code>\nunittest\n{\n    alias candidate =\
    \ filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1edx50sv.d(17): Error: Declaration expected, not \''<\''\n/tmp/tmp1edx50sv.d(23):
    Error: unterminated character constant\n/tmp/tmp1edx50sv.d(26): Error: unterminated
    character constant\n/tmp/tmp1edx50sv.d(29): Error: unterminated character constant\n/tmp/tmp1edx50sv.d(32):
    Error: unterminated character constant\n/tmp/tmp1edx50sv.d(37): Error: Declaration
    expected, not \''<\''\n/tmp/tmp1edx50sv.d(40): Error: unterminated character constant\n/tmp/tmp1edx50sv.d(43):
    Error: unterminated character constant\n/tmp/tmp1edx50sv.d(46): Error: unterminated
    character constant\n/tmp/tmp1edx50sv.d(51): Error: Declaration expected, not \''<\''\n/tmp/tmp1edx50sv.d(56):
    Error: Declaration expected, not \''<\''\n/tmp/tmp1edx50sv.d(61): Error: Declaration
    expected, not \''<\''\n/tmp/tmp1edx50sv.d(66): Error: Declaration expected, not
    \''<\''\n/tmp/tmp1edx50sv.d(74): Error: Declaration expected, not \''assert\''\n/tmp/tmp1edx50sv.d(75):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp1edx50sv.d(76): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp1edx50sv.d(77): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp1edx50sv.d(78): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1edx50sv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].contains(substring, caseSensitive, partialMatch))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].contains(substring, caseSensitive,\
    \ partialMatch, partialMatchCaseInsensitive))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool partialMatch, bool partialMatchCaseInsensitive,\
    \ bool partialMatchIgnoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring,\
    \ caseSensitive, partialMatch, partialMatchCaseInsensitive, partialMatchIgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an \nunittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxz_q6htd.d(87): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxz_q6htd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(\n\
    unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4twue2l0.d(97): Error: expression expected, not \''unittest\''\n/tmp/tmp4twue2l0.d(98):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression
    expected, not \''alias\''\n/tmp/tmp4twue2l0.d(99): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression expected, not
    \''=\''\n/tmp/tmp4twue2l0.d(99): Error: found \''filter_by_substring\'' when expecting
    \'',\''\n/tmp/tmp4twue2l0.d(99): Error: expression expected, not \'';\''\n/tmp/tmp4twue2l0.d(101):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(101): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(102): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(103): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmp4twue2l0.d(104): Error: found \'';\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(105):
    Error: expression expected, not \''}\''\n/tmp/tmp4twue2l0.d(106): Error: found
    \''void\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(106): Error: found \''{\''
    when expecting \'',\''\n/tmp/tmp4twue2l0.d(106): Error: expression expected, not
    \''}\''\n/tmp/tmp4twue2l0.d(106): Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmp4twue2l0.d(106):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmp4twue2l0.d(106): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmp4twue2l0.d(106): Error: found
    \''EOF\'' instead of statement\n/tmp/tmp4twue2l0.d(106): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4twue2l0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx4m579we.d(91): Error: expression expected, not \''unittest\''\n/tmp/tmpx4m579we.d(92):
    Error: found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpx4m579we.d(93):
    Error: expression expected, not \''alias\''\n/tmp/tmpx4m579we.d(93): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpx4m579we.d(93): Error: found \''=\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4m579we.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; i++)\n    {\n        if (strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThank you for\
    \ helping me out. I am new to C# and I really appreciate your help. I really appreciate\
    \ your help.\n<|/ c |>\n<| c |>\nNo problem. I'm glad I could help. If you found\
    \ this answer helpful, please consider marking it as accepted by clicking the\
    \ check mark next to it. Thanks!\n<|/ c |>\n<| c |>\nI did but since I am new\
    \ it says I have to wait 8 minutes before I can accept the answer. Thanks again\
    \ for your help.\n<|/ c |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nstring[] strings = new string[] { \"Hello\", \"World\"\
    , \"!\" };\nstring[] substrings = new string[] { \"World\", \"!\" };\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; i++)\n\
    {\n    if (strings[i].Contains(substrings[i]))\n    {\n        result[i] = strings[i];\n\
    \    }\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nThank you for helping\
    \ me out. I am new to C# and I really appreciate your help. I really appreciate\
    \ your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] strings = new string[]\
    \ { \"Hello\", \"World\", \"!\" };\nstring[] substrings = new string[] { \"World\"\
    , \"!\" };\nstring[] result = new string[strings.length];\nfor (int i = 0; i <\
    \ strings.length; i++)\n{\n    if (strings[i].Contains(substrings[i]))\n    {\n\
    \        result[i] = strings[i];\n    }\n}\n</code>\n<|/ a tags=string,c#,arrays\
    \ |>\n<| c |>\nThank you for helping me out. I am new to C# and I really appreciate\
    \ your help. I really appreciate your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string[] strings = new string[] { \"Hello\", \"World\", \"!\" };\nstring[] substrings\
    \ = new string[] { \"World\", \"!\" };\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; i++)\n{\n    if (strings[i].Contains(substrings[i]))\n\
    \    {\n        result[i] = strings[i];\n\nunittest\n{\n    alias candidate =\
    \ filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps8jvcwbs.d(19): Error: Declaration expected, not \''<\''\n/tmp/tmps8jvcwbs.d(25):
    Error: unterminated character constant\n/tmp/tmps8jvcwbs.d(36): Error: semicolon
    expected, not \''{\''\n/tmp/tmps8jvcwbs.d(36): Error: Declaration expected, not
    \''{\''\n/tmp/tmps8jvcwbs.d(38): Error: Declaration expected, not \''for\''\n/tmp/tmps8jvcwbs.d(38):
    Error: no identifier for declarator i\n/tmp/tmps8jvcwbs.d(38): Error: Declaration
    expected, not \''<\''\n/tmp/tmps8jvcwbs.d(38): Error: no identifier for declarator
    i\n/tmp/tmps8jvcwbs.d(38): Error: Declaration expected, not \''++\''\n/tmp/tmps8jvcwbs.d(43):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8jvcwbs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gmk6loa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : \nunittest\n{\n    alias candidate = filter_by_substring;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxumrkcwd.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpxumrkcwd.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpxumrkcwd.d(92): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxumrkcwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with given substring\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with given substring\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match given regex\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string regex) \n{\n   \
    \ string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match given regex and are longer than given length\n    \
    \        \n*/\nstring[] filter_by_not_substring(string[] strings, string regex,\
    \ int length) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex)\
    \ && strings[i].length() > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ match given regex and are longer than given length\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string regex, int length) \n{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex) && strings[i].length() >\
    \ length)\n            result[i] = strings[i];\n    }\nunittest\n{\n    alias\
    \ candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuv5fdqvm.d(99): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuv5fdqvm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain given substring\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive\
    \ ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain given\
    \ substring\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\n        if(!caseSensitive ?\
    \ !strings[i].contains(substring) : !strings[i].toLowerCase().contains(\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk2k5jesg.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmpk2k5jesg.d(84):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression
    expected, not \''alias\''\n/tmp/tmpk2k5jesg.d(85): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression expected, not
    \''=\''\n/tmp/tmpk2k5jesg.d(85): Error: found \''filter_by_substring\'' when expecting
    \'',\''\n/tmp/tmpk2k5jesg.d(85): Error: expression expected, not \'';\''\n/tmp/tmpk2k5jesg.d(87):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(87): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(88): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(89): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpk2k5jesg.d(90): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(91):
    Error: expression expected, not \''}\''\n/tmp/tmpk2k5jesg.d(92): Error: found
    \''void\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''{\''
    when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92): Error: expression expected, not
    \''}\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\'' when expecting \'',\''\n/tmp/tmpk2k5jesg.d(92):
    Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpk2k5jesg.d(92): Error:
    found \''EOF\'' when expecting \'')\''\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\''
    instead of statement\n/tmp/tmpk2k5jesg.d(92): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpk2k5jesg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; i++)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; i++)\n    {\n\
    \        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring) : !strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n        {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; i++)\n    {\n        if(!caseSensitive ? !strings[i].contains(substring)\
    \ : !strings[i].toLowerCase().contains(substring.toLowerCase(), ignoreCase, ignoreCase))\n\
    \        {\n            result[i] = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not contain\
    \ given substring\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive, bool ignoreCase, bool ignoreCase,\
    \ bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; i++)\n    {\nunittest\n{\n    alias candidate\
    \ = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"\
    ], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp43ypjf7i.d(92): Error: found \''unittest\'' instead of statement\n/tmp/tmp43ypjf7i.d(101):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp43ypjf7i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(var s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however it only works if\
    \ you know how many substrings there are. Is there a way to do this without knowing\
    \ the number of substrings?\n<|/ c |>\n<| c |>\n: Yes, you can use a `List<string>`\
    \ instead of a `string[]` and then use `result.AddRange(strings)` instead of `result[i++]\
    \ = s`.\n<|/ c |>\n<| c |>\n: I added a version that doesn't require knowing the\
    \ number of substrings.\n<|/ c |>\n<| c |>\n: I added a version that doesn't require\
    \ knowing the number of substrings.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ doesn't require knowing the number of substrings.\n<|/ c |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.Contains(\"substring\")).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are multiple substrings\
    \ in the string. For example, if the string contains \"substring1\" and \"substring2\"\
    , only \"substring1\" will be returned.\n<|/ c |>\n<| c |>\n: Yes, it does. `Where`\
    \ will stop at the first match.\n<|/ c |>\n<| c |>\n: It does, but only if the\
    \ string contains \"substring1\". Try it with a string that contains \"substring1\"\
    \ and \"substring2\".\n<|/ c |>\n<| c |>\n: It does, but only if the string contains\
    \ \"substring1\". Try it with a string that contains \"substring1\" and \"substring2\"\
    .\n<|/ c |>\n<| c |>\n: It does, but only if the string contains \"substring1\"\
    . Try it with a string that contains \"substring1\" and \"substring2\".\n<|/ c\
    \ |>\n<| a tags=c#,linq |>\n<code>\nstring[] strings = new string[] { \"substring1\"\
    , \"substring2\", \"substring3\" };\nvar result = strings.Where(s => s.Contains(\"\
    substring1\")).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if there are multiple substrings in the string. For example, if the string contains\
    \ \"substring1\" and \"substring2\", only \"substring1\" will be returned.\n<|/\
    \ c |>\n<| c |>\nunittest\n{\n    alias candidate = filter_by_substring;\n\n \
    \   assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n\
    \    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"\
    ) == [\"grunt\", \"prune\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptov676n6.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmptov676n6.d(20):
    Error: Declaration expected, not \''<\''\n/tmp/tmptov676n6.d(29): Error: unterminated
    character constant\n/tmp/tmptov676n6.d(32): Error: unterminated character constant\n/tmp/tmptov676n6.d(35):
    Error: unterminated character constant\n/tmp/tmptov676n6.d(40): Error: Declaration
    expected, not \''<\''\n/tmp/tmptov676n6.d(43): Error: unterminated character constant\n/tmp/tmptov676n6.d(61):
    Error: Declaration expected, not \''<\''\n/tmp/tmptov676n6.d(64): Error: unterminated
    character constant\n/tmp/tmptov676n6.d(71): Error: Declaration expected, not \''assert\''\n/tmp/tmptov676n6.d(72):
    Error: Declaration expected, not \''assert\''\n/tmp/tmptov676n6.d(73): Error:
    Declaration expected, not \''assert\''\n/tmp/tmptov676n6.d(74): Error: Declaration
    expected, not \''assert\''\n/tmp/tmptov676n6.d(75): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptov676n6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
    \ only for ones that contain given substring\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"\
    trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1og__zl2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014531
