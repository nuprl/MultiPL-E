language: d
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor(int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t\tif(l[i] > max)\n\t\t\t\
    max = l[i];\n\t}\n\treturn (min <= max);\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeb_z6kus.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpeb_z6kus.__unittest_L20_C1() [0x427f47]

    ??:? void tmpeb_z6kus.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = 0;\n\tlong min = 0;\n\tbool isMonotonic = true;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax =\
    \ l[i];\n\t\t}\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ != max && l[i] != min)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn\
    \ isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyzhkgka.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmpoyzhkgka.__unittest_L29_C1() [0x427f9d]

    ??:? void tmpoyzhkgka.__modtest() [0x428120]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tlong l3 = l[2];\n\tlong l4 =\
    \ l[3];\n\tlong l5 = l[4];\n\tlong l6 = l[5];\n\tlong l7 = l[6];\n\tlong l8 =\
    \ l[7];\n\tlong l9 = l[8];\n\tlong l10 = l[9];\n\tlong l11 = l[10];\n\tlong l12\
    \ = l[11];\n\tlong l13 = l[12];\n\tlong l14 = l[13];\n\tlong l15 = l[14];\n\t\
    long l16 = l[15];\n\tlong l17 = l[16];\n\tlong l18 = l[17];\n\tlong l19 = l[18];\n\
    \tlong l20 = l[19];\n\tlong l21 = l[20];\n\tlong l22 = l[21];\n\tlong l23 = l[22];\n\
    \tlong l24 = l[23];\n\tlong l25 = l[24];\n\tlong l26 = l[25];\n\tlong l27 = l[26];\n\
    \tlong l28 = l[27];\n\tlong l29 = l[28];\n\tlong l30 = l[29];\n\tlong l31 = l[30];\n\
    \tlong l32 = l[31];\n\tlong l33 = l[32];\n\tlong l34 = l[33];\n\tlong l35 = l[34];\n\
    \tlong l36 = l[35];\n\tlong l37 = l[36];\n\tlong l38 = l[37];\n\tlong l39 = l[38];\n\
    \tlong l40 = l[39];\n\tlong l41 = l[40];\n\tlong l42 = l[41];\n\tlong l43 = l[42];\n\
    \tlong l44 = l[43];\n\tlong l45 = l[44];\n\tlong l46 = l[45];\n\tlong l47 = l[46];\n\
    \tlong l48 = l[47];\n\tlong l49 = l[48];\n\tlong l50 = l[49];\n\tlong l51 = l[50];\n\
    \tlong l52 = l[51];\n\tlong l53 = l[52];\n\tlong l54 = l[53];\n\tlong l\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4awynn3f.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmp4awynn3f.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4awynn3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164437
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool increasing = true;\n\t\
    bool decreasing = true;\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i]\
    \ < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if (l[i] > max)\n\t\t{\n\t\
    \t\tmax = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tincreasing = false;\n\t\t\tdecreasing\
    \ = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n \
    \   alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1dzhf872.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283bd]

    ??:? void tmp1dzhf872.__unittest_L31_C1() [0x428011]

    ??:? void tmp1dzhf872.__modtest() [0x42813c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c43f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430465]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430914]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]

    ??:? runModuleUnitTests [0x42c215]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428880]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong minv = l[0];\n\tlong maxv = l[0];\n\tfor(int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif(l[i] < minv)\n\t\t{\n\t\t\tminv = l[i];\n\t\t}\n\t\telse if(l[i]\
    \ > maxv)\n\t\t{\n\t\t\tmaxv = l[i];\n\t\t}\n\t}\n\treturn minv < maxv;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpckcdf4fk.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmpckcdf4fk.__unittest_L24_C1() [0x427f4b]

    ??:? void tmpckcdf4fk.__modtest() [0x42811c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isIncreasing = true;\n\t\
    bool isDecreasing = true;\n\tfor(int i = 1; i < l.length; i++)\n\t{\n\t\tlong\
    \ x = l[i];\n\t\tif(x == r)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse\
    \ if(x == l)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\
    \tisIncreasing = isDecreasing = true;\n\t\t}\n\t\tr = x;\n\t}\n\treturn isIncreasing\
    \ || isDecreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd904fmn3.d(9): Error: variable `l` is shadowing variable `tmpd904fmn3.monotonic.l`

    /tmp/tmpd904fmn3.d(10): Error: only one index allowed to index `long`

    /tmp/tmpd904fmn3.d(13): Error: no property `length` for type `long`

    /tmp/tmpd904fmn3.d(15): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd904fmn3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isIncreasing = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\t\
    if (l[i] < min)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\tif (l[i] > max)\n\
    \t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgpspos_f.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283fd]

    ??:? void tmpgpspos_f.__unittest_L33_C1() [0x427faf]

    ??:? void tmpgpspos_f.__modtest() [0x428180]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c47f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b312]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430954]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430431]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e9]

    ??:? runModuleUnitTests [0x42c255]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isMonotonic = true;\n\tfor\
    \ (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > r)\n\t\t{\n\t\t\tisMonotonic\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\telse if (l[i] < r)\n\t\t{\n\t\t\tisMonotonic\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = l[i];\n\t\t}\n\t}\n\
    \treturn isMonotonic;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1f9yp92j.d(9): Error: variable `l` is shadowing variable `tmp1f9yp92j.monotonic.l`

    /tmp/tmp1f9yp92j.d(10): Error: only one index allowed to index `long`

    /tmp/tmp1f9yp92j.d(12): Error: no property `length` for type `long`

    /tmp/tmp1f9yp92j.d(14): Error: only one index allowed to index `long`

    /tmp/tmp1f9yp92j.d(19): Error: only one index allowed to index `long`

    /tmp/tmp1f9yp92j.d(26): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f9yp92j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tbool result = false;\n\tfor\
    \ (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < curr)\n\t\t{\n\t\t\tresult\
    \ = true;\n\t\t\tbreak;\n\t\t}\n\t\telse if (l[i] > prev)\n\t\t{\n\t\t\tresult\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\tprev = curr;\n\t\tcurr = l[i];\n\t}\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfxaa4nry.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428355]

    ??:? void tmpfxaa4nry.__unittest_L29_C1() [0x427e6c]

    ??:? void tmpfxaa4nry.__modtest() [0x4280d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b26a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430389]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b241]

    ??:? runModuleUnitTests [0x42c1ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428818]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isIncreasing = true;\n\t\
    bool isDecreasing = true;\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i]\
    \ < r)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse if (l[i] > r)\n\t\t\
    {\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tisDecreasing = true;\n\
    \t\t\tisIncreasing = true;\n\t\t}\n\t\tr = l[i];\n\t}\n\treturn isIncreasing ||\
    \ isDecreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8uczgmfx.d(9): Error: variable `l` is shadowing variable `tmp8uczgmfx.monotonic.l`

    /tmp/tmp8uczgmfx.d(10): Error: only one index allowed to index `long`

    /tmp/tmp8uczgmfx.d(13): Error: no property `length` for type `long`

    /tmp/tmp8uczgmfx.d(15): Error: only one index allowed to index `long`

    /tmp/tmp8uczgmfx.d(19): Error: only one index allowed to index `long`

    /tmp/tmp8uczgmfx.d(28): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uczgmfx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool increasing = true;\n\t\
    bool decreasing = true;\n\tfor(int i=1; i<l.length; ++i)\n\t{\n\t\tif(l[i] > max)\n\
    \t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\telse if(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tincreasing = false;\n\t\t\tdecreasing = false;\n\
    \t\t}\n\t}\n\treturn increasing || decreasing;\n}\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmhog1525.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283bd]

    ??:? void tmpmhog1525.__unittest_L35_C1() [0x428011]

    ??:? void tmpmhog1525.__modtest() [0x42813c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c43f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430465]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430914]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]

    ??:? runModuleUnitTests [0x42c215]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428880]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \treturn isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L,\
    \ 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n \
    \   assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf1jylfsq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpf1jylfsq.__unittest_L25_C1() [0x427f33]

    ??:? void tmpf1jylfsq.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c407]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b29a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43042d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]

    ??:? runModuleUnitTests [0x42c1dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428848]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\t\
    if (l[i] < min)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t\tif (l[i] > max)\n\
    \t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n}\n/*\n\
    Return True is list elements are monotonically increasing or decreasing.\n   \
    \             \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3lc5a59_.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283e5]

    ??:? void tmp3lc5a59_.__unittest_L37_C1() [0x427f97]

    ??:? void tmp3lc5a59_.__modtest() [0x428168]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c467]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43048d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43093c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430419]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d1]

    ??:? runModuleUnitTests [0x42c23d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long min = l[0];\n    long max = l[0];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < min)\n            min = l[i];\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return min < max;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqixm02hx.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqixm02hx.__unittest_L20_C1() [0x427f47]

    ??:? void tmpqixm02hx.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tbool l3 = false;\n\tbool l4\
    \ = false;\n\tbool l5 = false;\n\tbool l6 = false;\n\tbool l7 = false;\n\tbool\
    \ l8 = false;\n\tbool l9 = false;\n\tbool l10 = false;\n\tbool l11 = false;\n\t\
    bool l12 = false;\n\tbool l13 = false;\n\tbool l14 = false;\n\tbool l15 = false;\n\
    \tbool l16 = false;\n\tbool l17 = false;\n\tbool l18 = false;\n\tbool l19 = false;\n\
    \tbool l20 = false;\n\tbool l21 = false;\n\tbool l22 = false;\n\tbool l23 = false;\n\
    \tbool l24 = false;\n\tbool l25 = false;\n\tbool l26 = false;\n\tbool l27 = false;\n\
    \tbool l28 = false;\n\tbool l29 = false;\n\tbool l30 = false;\n\tbool l31 = false;\n\
    \tbool l32 = false;\n\tbool l33 = false;\n\tbool l34 = false;\n\tbool l35 = false;\n\
    \tbool l36 = false;\n\tbool l37 = false;\n\tbool l38 = false;\n\tbool l39 = false;\n\
    \tbool l40 = false;\n\tbool l41 = false;\n\tbool l42 = false;\n\tbool l43 = false;\n\
    \tbool l44 = false;\n\tbool l45 = false;\n\tbool l46 = false;\n\tbool l47 = false;\n\
    \tbool l48 = false;\n\tbool l49 = false;\n\tbool l50 = false;\n\tbool l51 = false;\n\
    \tbool l52 = false;\n\tbool l53 = false;\n\tbool l54 = false;\n\tbool l55 = false;\n\
    \tbool l56 = false;\n\tbool l57 = false;\n\tbool l58 = false;\n\tbool l59 = false;\n\
    \tbool l60 = false;\n\tbool l61 = false;\n\tbool l62 = false;\n\tbool l63 = false;\n\
    \tbool l64 = false;\n\tbool l65 = false;\n\tbool l66 = false;\n\tbool l67 = false;\n\
    \tbool l68 = false;\n\tbool l69 = false;\n\tbool l70 = false;\n\tbool l71 = false;\n\
    \tbool l72 = false;\n\tbool l73 = false;\n\tbool l74 = false;\n\tbool l75 = false;\n\
    \tbool l76 = false;\n\tbool l77 = false;\n\tbool l78 = false;\n\tbool l79 = false;\n\
    \tbool l80 = false;\n\tbool l81 = false;\n\tbool l82 = \nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppovco0o4.d(91): Error: expression expected, not `unittest`

    /tmp/tmppovco0o4.d(92): Error: semicolon expected, not `{`

    /tmp/tmppovco0o4.d(104): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppovco0o4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\tif (l[i]\
    \ < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn (max < min);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp41mnk_7z.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp41mnk_7z.__unittest_L24_C1() [0x427eac]

    ??:? void tmp41mnk_7z.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif\
    \ (l[i] > max)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t\tmax = l[i];\n\t\t}\n\
    \t\telse if (l[i] < min)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t\tmin = l[i];\n\
    \t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgpt88t8d.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283a5]

    ??:? void tmpgpt88t8d.__unittest_L28_C1() [0x427f57]

    ??:? void tmpgpt88t8d.__modtest() [0x428128]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c427]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43044d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b291]

    ??:? runModuleUnitTests [0x42c1fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428868]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\tlong l = l[0];\n\twhile\
    \ (i < l.length && j < l.length) {\n\t\tif (l[i] < l[j]) {\n\t\t\tk = i;\n\t\t\
    \ti = j;\n\t\t\tj = k;\n\t\t}\n\t\telse {\n\t\t\tk = i;\n\t\t\ti = j;\n\t\t\t\
    j = k;\n\t\t}\n\t}\n\tif (i < l.length) {\n\t\treturn false;\n\t}\n\telse {\n\t\
    \treturn true;\n\t}\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv7vdslse.d(12): Error: variable `l` is shadowing variable `tmpv7vdslse.monotonic.l`

    /tmp/tmpv7vdslse.d(13): Error: no property `length` for type `long`

    /tmp/tmpv7vdslse.d(13): Error: no property `length` for type `long`

    /tmp/tmpv7vdslse.d(14): Error: only one index allowed to index `long`

    /tmp/tmpv7vdslse.d(14): Error: only one index allowed to index `long`

    /tmp/tmpv7vdslse.d(25): Error: no property `length` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7vdslse.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tbool isMonotonic = true;\n\twhile (i\
    \ < l.length && j < l.length) \n\t{\n\t\tif (l[i] < l[j]) \n\t\t{\n\t\t\tisMonotonic\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\telse if (l[i] > l[j]) \n\t\t{\n\t\t\tj++;\n\
    \t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp14v3trsh.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428355]

    ??:? void tmp14v3trsh.__unittest_L31_C1() [0x427e68]

    ??:? void tmp14v3trsh.__modtest() [0x4280d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b26a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430389]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b241]

    ??:? runModuleUnitTests [0x42c1ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428818]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong minVal = l[0];\n\tlong maxVal = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < minVal)\n\t\t{\n\t\t\
    \tminVal = l[i];\n\t\t}\n\t\tif (l[i] > maxVal)\n\t\t{\n\t\t\tmaxVal = l[i];\n\
    \t\t}\n\t}\n\tif (minVal < maxVal)\n\t{\n\t\tisMonotonic = false;\n\t}\n\treturn\
    \ isMonotonic;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptv29yx2b.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmptv29yx2b.__unittest_L33_C1() [0x427ea8]

    ??:? void tmptv29yx2b.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if\
    \ (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn min <= max;\n}\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppvmm_6d7.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmppvmm_6d7.__unittest_L24_C1() [0x427f4b]

    ??:? void tmppvmm_6d7.__modtest() [0x42811c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tbool result = false;\n\twhile (i < l.length\
    \ && j < l.length) \n\t{\n\t\tif (l[i] < l[j]) {\n\t\t\tresult = true;\n\t\t\t\
    break;\n\t\t}\n\t\telse if (l[i] > l[j]) {\n\t\t\tresult = false;\n\t\t\tbreak;\n\
    \t\t}\n\t\ti++;\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpic25pqbz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42834d]

    ??:? void tmpic25pqbz.__unittest_L27_C1() [0x427eff]

    ??:? void tmpic25pqbz.__modtest() [0x4280d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b262]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430381]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b239]

    ??:? runModuleUnitTests [0x42c1a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428810]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tfor(int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif(l[i] > max)\n\t\t\treturn false;\n\t\tif(l[i] < min)\n\t\t\
    \treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2jhbo9os.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x428345]

    ??:? void tmp2jhbo9os.__unittest_L20_C1() [0x427e58]

    ??:? void tmp2jhbo9os.__modtest() [0x4280c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b25a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303ed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43089c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430379]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b231]

    ??:? runModuleUnitTests [0x42c19d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428808]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor(int i = 1; i < l.length;\
    \ i++)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif(l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4l1hwbi.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpc4l1hwbi.__unittest_L24_C1() [0x427f37]

    ??:? void tmpc4l1hwbi.__modtest() [0x428108]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c407]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b29a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43042d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]

    ??:? runModuleUnitTests [0x42c1dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428848]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \tif (min > max)\n\t{\n\t\tisMonotonic = false;\n\t}\n\treturn isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp4rfae0a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283a5]

    ??:? void tmpp4rfae0a.__unittest_L29_C1() [0x427f53]

    ??:? void tmpp4rfae0a.__modtest() [0x428124]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c427]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43044d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b291]

    ??:? runModuleUnitTests [0x42c1fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428868]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tlong next = 1;\n\tbool result\
    \ = false;\n\t\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tcurr = next;\n\t\
    \tnext = l[i];\n\t\tif (curr < prev)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\
    \t\t}\n\t\tprev = curr;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptez0usrz.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42830d]

    ??:? void tmptez0usrz.__unittest_L28_C1() [0x427e20]

    ??:? void tmptez0usrz.__modtest() [0x42808c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c38f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b222]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430864]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430341]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f9]

    ??:? runModuleUnitTests [0x42c165]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min=0;\n\tlong max=l[0];\n\tfor(int i=1;i<l.length;i++)\n\t{\n\
    \t\tif(l[i]<min)\n\t\t\tmin=l[i];\n\t\tif(l[i]>max)\n\t\t\tmax=l[i];\n\t}\n\t\
    return (min>max);\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcb_3nqvg.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428375]

    ??:? void tmpcb_3nqvg.__unittest_L24_C1() [0x427e88]

    ??:? void tmpcb_3nqvg.__modtest() [0x4280f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b28a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43041d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b261]

    ??:? runModuleUnitTests [0x42c1cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428838]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\tfor(int i = 1; i < l.length; ++i)\n\t{\n\t\tif(l[i]\
    \ < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\
    \tmax = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(l[i] < min)\n\t\t\t{\n\t\t\t\t\
    isDecreasing = false;\n\t\t\t}\n\t\t\telse if(l[i] > max)\n\t\t\t{\n\t\t\t\tisIncreasing\
    \ = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wyhy0os.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428425]

    ??:? void tmp5wyhy0os.__unittest_L37_C1() [0x427fd3]

    ??:? void tmp5wyhy0os.__modtest() [0x4281a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43097c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430459]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]

    ??:? runModuleUnitTests [0x42c27d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long i = 0;\n    long j = 1;\n    bool result = false;\n    while(i\
    \ < l.length && j < l.length) \n    {\n        if(l[i] < l[j]) {\n           \
    \ result = true;\n            break;\n        }\n        else if(l[i] > l[j])\
    \ {\n            result = false;\n            break;\n        }\n        i++;\n\
    \        j++;\n    }\n    return result;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkcp_3sg5.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42834d]

    ??:? void tmpkcp_3sg5.__unittest_L31_C1() [0x427eff]

    ??:? void tmpkcp_3sg5.__modtest() [0x4280d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b262]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430381]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b239]

    ??:? runModuleUnitTests [0x42c1a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428810]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor(int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t\tif(l[i] > max)\n\t\t\t\
    max = l[i];\n\t}\n\treturn (min <= max);\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeb_z6kus.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpeb_z6kus.__unittest_L20_C1() [0x427f47]

    ??:? void tmpeb_z6kus.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long x0 = l[0];\n    long x1 = l[1];\n    long x2 = l[2];\n    long\
    \ x3 = l[3];\n    long x4 = l[4];\n    long x5 = l[5];\n    long x6 = l[6];\n\
    \    long x7 = l[7];\n    long x8 = l[8];\n    long x9 = l[9];\n    long x10 =\
    \ l[10];\n    long x11 = x[11];\n    long x12 = x[12];\n    long x13 = x[13];\n\
    \    long x14 = x[14];\n    long x15 = x[15];\n    long x16 = x[16];\n    long\
    \ x17 = x[17];\n    long x18 = x[18];\n    long x19 = x[19];\n    long x20 = x[20];\n\
    \    long x21 = x[21];\n    long x22 = x[22];\n    long x23 = x[23];\n    long\
    \ x24 = x[24];\n    long x25 = x[25];\n    long x26 = x[26];\n    long x27 = x[27];\n\
    \    long x28 = x[28];\n    long x29 = x[29];\n    long x30 = x[28];\n    long\
    \ x31 = x[29];\n    long x32 = x[28];\n    long x33 = x[29];\n    long x34 = x[28];\n\
    \    long x35 = x[29];\n    long x36 = x[28];\n    long x37 = x[29];\n    long\
    \ x38 = x[28];\n    long x39 = x[29];\n    long x40 = x[28];\n    long x41 = x[29];\n\
    \    long x42 = x[28];\n    long x43 = x[29];\n    long x44 = x[28];\n    long\
    \ x45 = x[29];\n    long x46 = x[28];\n    long x47 = x[29];\n    long x48 = x[28];\n\
    \    long x49 = x[29];\n    long x50 = x[28];\n    long x51 = x[29];\n    long\
    \ x52 = x[28];\n    long x53 = x[29];\n    long x54 = x[28];\n    long x55 = x[29];\n\
    \    long x56 = x[28];\n    long x57 = x[29];\n    long x58 = x[28];\n    long\
    \ x59\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgiq12w_q.d(69): Error: semicolon expected, not `unittest`

    /tmp/tmpgiq12w_q.d(69): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgiq12w_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\tlong l = l[0];\n\tlong\
    \ m = l[1];\n\twhile (i < l.length) \n\t{\n\t\tk = l;\n\t\tl = m;\n\t\tm = k;\n\
    \t\ti++;\n\t}\n\tif (l < m) return true;\n\telse return false;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzibn1caw.d(12): Error: variable `l` is shadowing variable `tmpzibn1caw.monotonic.l`

    /tmp/tmpzibn1caw.d(13): Error: only one index allowed to index `long`

    /tmp/tmpzibn1caw.d(14): Error: no property `length` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzibn1caw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long a = l[0];\n    long b = l[1];\n    long c = l[2];\n    long\
    \ d = l[3];\n    long e = l[4];\n    long f = l[5];\n    long g = l[6];\n    long\
    \ h = l[7];\n    long i = l[8];\n    long j = l[9];\n    long k = l[10];\n   \
    \ long l = l[11];\n    long m = l[12];\n    long n = l[13];\n    long o = l[14];\n\
    \    long p = l[15];\n    long q = l[16];\n    long r = l[17];\n    long s = l[18];\n\
    \    long t = l[19];\n    long u = l[20];\n    long v = l[21];\n    long w = l[22];\n\
    \    long x = l[23];\n    long y = l[24];\n    long z = l[25];\n    long a = l[26];\n\
    \    long b = l[27];\n    long c = l[28];\n    long d = l[29];\n    long e = l[30];\n\
    \    long f = l[31];\n    long g = l[32];\n    long h = l[33];\n    long i = l[34];\n\
    \    long j = l[35];\n    long k = l[36];\n    long l = l[37];\n    long m = l[38];\n\
    \    long n = l[39];\n    long o = l[40];\n    long p = l[41];\n    long q = l[42];\n\
    \    long r = l[43];\n    long s = l[44];\n    long t = l[45];\n    long u = l[46];\n\
    \    long v = l[47];\n    long w = l[48];\n    long x = l[49];\n    long y = l[50];\n\
    \    long z = l[51];\n    long a = l[52];\n    long b = l[53];\n    long c = l[54];\n\
    \    long d = l[55];\n    long e = l[56];\n    long f = l[57];\n    long g = l[58];\n\
    \    long h = l[59];\n    long i = l[60];\n    long j = l[61];\n    long k = l[62];\n\
    \    long l = l[63];\n    long m = l[64];\n    long n = l[65];\n    long o = \n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe6bju5pu.d(76): Error: expression expected, not `unittest`

    /tmp/tmpe6bju5pu.d(77): Error: semicolon expected, not `{`

    /tmp/tmpe6bju5pu.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe6bju5pu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tlong l3 = l[2];\n\tlong l4 =\
    \ l[3];\n\tlong l5 = l[4];\n\tlong l6 = l[5];\n\tlong l7 = l[6];\n\tlong l8 =\
    \ l[7];\n\tlong l9 = l[8];\n\tlong l10 = l[9];\n\tlong l11 = l[10];\n\tlong l12\
    \ = l[11];\n\tlong l13 = l[12];\n\tlong l14 = l[13];\n\tlong l15 = l[14];\n\t\
    long l16 = l[15];\n\tlong l17 = l[16];\n\tlong l18 = l[17];\n\tlong l19 = l[18];\n\
    \tlong l20 = l[19];\n\tlong l21 = l[20];\n\tlong l22 = l[21];\n\tlong l23 = l[22];\n\
    \tlong l24 = l[23];\n\tlong l25 = l[24];\n\tlong l26 = l[25];\n\tlong l27 = l[26];\n\
    \tlong l28 = l[27];\n\tlong l29 = l[28];\n\tlong l30 = l[29];\n\tlong l31 = l[30];\n\
    \tlong l32 = l[31];\n\tlong l33 = l[32];\n\tlong l34 = l[33];\n\tlong l35 = l[34];\n\
    \tlong l36 = l[35];\n\tlong l37 = l[36];\n\tlong l38 = l[37];\n\tlong l39 = l[38];\n\
    \tlong l40 = l[39];\n\tlong l41 = l[40];\n\tlong l42 = l[41];\n\tlong l43 = l[42];\n\
    \tlong l44 = l[43];\n\tlong l45 = l[44];\n\tlong l46 = l[45];\n\tlong l47 = l[46];\n\
    \tlong l48 = l[47];\n\tlong l49 = l[48];\n\tlong l50 = l[49];\n\tlong l51 = l[50];\n\
    \tlong l52 = l[51];\n\tlong l53 = l[52];\n\tlong l54 = l[53];\n\tlong l\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4awynn3f.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmp4awynn3f.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4awynn3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164437
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tbool isIncreasing = true;\n\tbool isDecreasing\
    \ = true;\n\twhile (i < l.length && j < l.length) {\n\t\tif (l[i] < l[j]) {\n\t\
    \t\tisIncreasing = false;\n\t\t}\n\t\telse if (l[i] > l[j]) {\n\t\t\tisDecreasing\
    \ = false;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn isIncreasing\
    \ || isDecreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164453
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\twhile(i < l.length && j < l.length) \n\t{\n\t\t\
    if(l[i] < l[j]) \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t\tbreak;\n\t\t}\n\t\t\
    else if(l[i] > l[j]) \n\t\t{\n\t\t\tisDecreasing = false;\n\t\t\tbreak;\n\t\t\
    }\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\tif(isIncreasing &&\
    \ isDecreasing) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\
    \t}\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdqbt42vu.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x428365]

    ??:? void tmpdqbt42vu.__unittest_L41_C1() [0x427e7c]

    ??:? void tmpdqbt42vu.__modtest() [0x4280e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3e7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43040d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430399]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b251]

    ??:? runModuleUnitTests [0x42c1bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428828]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isMonotonic = true;\n\tfor\
    \ (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > r)\n\t\t{\n\t\t\tisMonotonic\
    \ = false;\n\t\t}\n\t\telse if (l[i] < r)\n\t\t{\n\t\t\tisMonotonic = false;\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tr = l[i];\n\t\t}\n\t}\n\treturn isMonotonic;\n}\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph6t_rx6s.d(9): Error: variable `l` is shadowing variable `tmph6t_rx6s.monotonic.l`

    /tmp/tmph6t_rx6s.d(10): Error: only one index allowed to index `long`

    /tmp/tmph6t_rx6s.d(12): Error: no property `length` for type `long`

    /tmp/tmph6t_rx6s.d(14): Error: only one index allowed to index `long`

    /tmp/tmph6t_rx6s.d(18): Error: only one index allowed to index `long`

    /tmp/tmph6t_rx6s.d(24): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph6t_rx6s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tlong next = 1;\n\tbool result\
    \ = false;\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tcurr = next;\n\t\t\
    next = l[i];\n\t\tif (curr < prev)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\
    \t\t}\n\t\telse if (curr > prev)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\
    \t\t}\n\t\tprev = curr;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3wb_yrma.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428315]

    ??:? void tmp3wb_yrma.__unittest_L31_C1() [0x427e2c]

    ??:? void tmp3wb_yrma.__modtest() [0x428098]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c397]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b22a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b201]

    ??:? runModuleUnitTests [0x42c16d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tlong mid = 0;\n\tbool isIncreasing\
    \ = true;\n\tbool isDecreasing = true;\n\tfor(int i = 1; i < l.length; ++i)\n\t\
    {\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\
    \t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tisIncreasing = false;\n\
    \t\t\tisDecreasing = false;\n\t\t}\n\t\tmid = l[i];\n\t}\n\tif(isIncreasing &&\
    \ isDecreasing)\n\t{\n\t\treturn true;\n\t}\n\telse if(isIncreasing && !isDecreasing)\n\
    \t{\n\t\treturn false;\n\t}\n\telse if(!isIncreasing && isDecreasing)\n\t{\n\t\
    \treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\n/*\nReturn True if\
    \ list elements are monotonically increasing or decreasing.\n                \n\
    */\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi_5u1s_u.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x428415]

    ??:? void tmpi_5u1s_u.__unittest_L52_C1() [0x427fc7]

    ??:? void tmpi_5u1s_u.__modtest() [0x428198]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c497]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b32a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43096c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430449]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]

    ??:? runModuleUnitTests [0x42c26d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tbool result = true;\n\tfor\
    \ (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < curr)\n\t\t{\n\t\t\tresult\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\telse if (l[i] > prev)\n\t\t{\n\t\t\tresult\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\tprev = curr;\n\t\tcurr = l[i];\n\t}\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbt6x7mea.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428355]

    ??:? void tmpbt6x7mea.__unittest_L29_C1() [0x427e6c]

    ??:? void tmpbt6x7mea.__modtest() [0x4280d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b26a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430389]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b241]

    ??:? runModuleUnitTests [0x42c1ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428818]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \treturn isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L,\
    \ 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n \
    \   assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf1jylfsq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpf1jylfsq.__unittest_L25_C1() [0x427f33]

    ??:? void tmpf1jylfsq.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c407]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b29a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43042d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]

    ??:? runModuleUnitTests [0x42c1dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428848]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = std.array.length(l);\n\tlong l2 = l / 2;\n\tlong l3 = l -\
    \ l2;\n\tlong l4 = l3 - l2;\n\tlong l5 = l4 - l2;\n\tlong l6 = l5 - l2;\n\tlong\
    \ l7 = l6 - l2;\n\tlong l8 = l7 - l2;\n\tlong l9 = l8 - l2;\n\tlong l10 = l9 -\
    \ l2;\n\tlong l11 = l10 - l2;\n\tlong l12 = l11 - l2;\n\tlong l13 = l12 - l2;\n\
    \tlong l14 = l13 - l2;\n\tlong l15 = l14 - l2;\n\tlong l16 = l15 - l2;\n\tlong\
    \ l17 = l16 - l2;\n\tlong l18 = l17 - l2;\n\tlong l19 = l18 - l2;\n\tlong l20\
    \ = l19 - l2;\n\tlong l21 = l20 - l2;\n\tlong l22 = l21 - l2;\n\tlong l23 = l22\
    \ - l2;\n\tlong l24 = l23 - l2;\n\tlong l25 = l24 - l2;\n\tlong l26 = l25 - l2;\n\
    \tlong l27 = l26 - l2;\n\tlong l28 = l27 - l2;\n\tlong l29 = l28 - l2;\n\tlong\
    \ l30 = l29 - l2;\n\tlong l31 = l30 - l2;\n\tlong l32 = l31 - l2;\n\tlong l33\
    \ = l32 - l2;\n\tlong l34 = l33 - l2;\n\tlong l35 = l34 - l2;\n\tlong l36 = l35\
    \ - l2;\n\tlong l37 = l36 - l2;\n\tlong l38 = l37 - l2;\n\tlong l39 = l38 - l2;\n\
    \tlong l40 = l39 - l2;\n\tlong l41 = l40 - l2;\n\tlong l42 = l41 - l2;\n\tlong\
    \ l43 = l42 - l2;\n\tlong l44 = l43 - l2;\n\tlong l45 = l44 - l2;\n\tlong l46\
    \ = l45 - l2;\n\tlong l47 = l46 - l2;\n\tlong l48 = l47 - l2;\n\t\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1s1bqa1m.d(58): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s1bqa1m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool result = true;\n\tfor(int\
    \ i = 1; i < l.length; ++i)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\tresult = false;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5_hxj07f.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmp5_hxj07f.__unittest_L29_C1() [0x427ff1]

    ??:? void tmp5_hxj07f.__modtest() [0x42811c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tbool isMonotonic = true;\n\twhile (i\
    \ < l.length && j > 0) {\n\t\tif (l[i] < l[j]) {\n\t\t\tisMonotonic = false;\n\
    \t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn isMonotonic;\n}\n/*\nReturn True is list\
    \ elements are monotonically increasing or decreasing.\n                \n*/\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjb8lo8o7.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282ed]

    ??:? void tmpjb8lo8o7.__unittest_L25_C1() [0x427e04]

    ??:? void tmpjb8lo8o7.__modtest() [0x428070]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c36f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b202]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430395]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430844]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430321]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]

    ??:? runModuleUnitTests [0x42c145]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tlong i = 0;\n\tbool isIncreasing\
    \ = true;\n\tbool isDecreasing = true;\n\tbool isMonotonic = true;\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > r)\n\t\t{\n\t\t\tisIncreasing\
    \ = false;\n\t\t}\n\t\telse if (l[i] < r)\n\t\t{\n\t\t\tisDecreasing = false;\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t\tr = l[i];\n\t}\n\
    \treturn isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L,\
    \ 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n \
    \   assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp57jsux05.d(9): Error: variable `l` is shadowing variable `tmp57jsux05.monotonic.l`

    /tmp/tmp57jsux05.d(10): Error: only one index allowed to index `long`

    /tmp/tmp57jsux05.d(15): Error: variable `i` is shadowing variable `tmp57jsux05.monotonic.i`

    /tmp/tmp57jsux05.d(15): Error: no property `length` for type `long`

    /tmp/tmp57jsux05.d(17): Error: only one index allowed to index `long`

    /tmp/tmp57jsux05.d(21): Error: only one index allowed to index `long`

    /tmp/tmp57jsux05.d(29): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57jsux05.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor(int i=1; i<l.length; i++)\n\
    \t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\
    \t}\n\treturn (min <= max);\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3xd5sdrq.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmp3xd5sdrq.__unittest_L20_C1() [0x427f37]

    ??:? void tmp3xd5sdrq.__modtest() [0x428108]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c407]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b29a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43042d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]

    ??:? runModuleUnitTests [0x42c1dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428848]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long min = l[0];\n    long max = l[0];\n    for(int i=1; i<l.length;\
    \ ++i)\n    {\n        if(l[i] < min)\n            min = l[i];\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return min <= max;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4ey36dl3.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp4ey36dl3.__unittest_L20_C1() [0x427f47]

    ??:? void tmp4ey36dl3.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long prev=l[0];\n    bool isMonotonic=true;\n    for(int i=1;i<l.length;i++)\n\
    \    {\n        if(l[i]<prev)\n        {\n            isMonotonic=false;\n   \
    \         break;\n        }\n        prev=l[i];\n    }\n    return isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6mrufaxe.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42830d]

    ??:? void tmp6mrufaxe.__unittest_L22_C1() [0x427f09]

    ??:? void tmp6mrufaxe.__modtest() [0x42808c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c38f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b222]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430864]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430341]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f9]

    ??:? runModuleUnitTests [0x42c165]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\tlong l = l[0];\n\tbool\
    \ isIncreasing = true;\n\tbool isDecreasing = true;\n\twhile (i < l.length &&\
    \ j < l.length) \n\t{\n\t\tif (l[i] < l[j]) \n\t\t{\n\t\t\tisIncreasing = false;\n\
    \t\t\tbreak;\n\t\t}\n\t\telse if (l[i] > l[j]) \n\t\t{\n\t\t\tisDecreasing = false;\n\
    \t\t\tbreak;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\t\
    return isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15o8kw54.d(12): Error: variable `l` is shadowing variable `tmp15o8kw54.monotonic.l`

    /tmp/tmp15o8kw54.d(15): Error: no property `length` for type `long`

    /tmp/tmp15o8kw54.d(15): Error: no property `length` for type `long`

    /tmp/tmp15o8kw54.d(17): Error: only one index allowed to index `long`

    /tmp/tmp15o8kw54.d(17): Error: only one index allowed to index `long`

    /tmp/tmp15o8kw54.d(22): Error: only one index allowed to index `long`

    /tmp/tmp15o8kw54.d(22): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15o8kw54.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long m = l[0];\n    long n = l[1];\n    long k = l[2];\n    long\
    \ l = l[3];\n    long m = std.math.rem(m, k);\n    long n = std.math.rem(n, k);\n\
    \    long k = std.math.rem(k, l);\n    long l = std.math.rem(l, l);\n    long\
    \ m = std.math.rem(m, l);\n    long n = std.math.rem(n, l);\n    long k = std.math.rem(k,\
    \ l);\n    long l = std.math.rem(l, l);\n    long m = std.math.rem(m, l);\n  \
    \  long n = std.math.rem(n, l);\n    long k = std.math.rem(k, l);\n    long l\
    \ = std.math.rem(l, l);\n    long m = std.math.rem(m, l);\n    long n = std.math.rem(n,\
    \ l);\n    long k = std.math.rem(k, l);\n    long l = std.math.rem(l, l);\n  \
    \  long m = std.math.rem(m, l);\n    long n = std.math.rem(n, l);\n    long k\
    \ = std.math.rem(k, l);\n    long l = std.math.rem(l, l);\n    long m = std.math.rem(m,\
    \ l);\n    long n = std.math.rem(n, l);\n    long k = std.math.rem(k, l);\n  \
    \  long l = std.math.rem(l, l);\n    long m = std.math.rem(m, l);\n    long n\
    \ = std.math.rem(n, l);\n    long k = std.math.rem(k, l);\n    long l = std.math.rem(l,\
    \ l);\n    long m = std.math.rem(m, l);\n    long n = std.math.rem(n, l);\n  \
    \  long k = std.math.rem(k, l);\n    long l = std.math.rem(l, l);\n    long m\
    \ = std.math.rem(m, l);\n    long n = std.math.rem(n, l);\n    long k = std.math.rem(k,\
    \ l);\n    long l = std.math.rem(l, l);\n    long m = std.math.rem(m, l);\n  \
    \  long n = std.math.rem(n, l);\n    long k = std.math.rem(k, l);\n    long l\
    \ = std.math.rem(l, l);\n    long m = std.math.rem(m, l);\n    long n = std.math.rem(n,\
    \ l);\n    long k = std.math.rem(k, l);\n    long l = std.math.rem(l, l);\n\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpluu0a48y.d(58): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpluu0a48y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tbool result = false;\n\twhile (i < l.length\
    \ && j < l.length) \n\t{\n\t\tif (l[i] < l[j]) {\n\t\t\tresult = true;\n\t\t\t\
    break;\n\t\t}\n\t\telse if (l[i] > l[j]) {\n\t\t\tresult = false;\n\t\t\tbreak;\n\
    \t\t}\n\t\ti++;\n\t\tj++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpic25pqbz.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42834d]

    ??:? void tmpic25pqbz.__unittest_L27_C1() [0x427eff]

    ??:? void tmpic25pqbz.__modtest() [0x4280d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b262]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430381]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b239]

    ??:? runModuleUnitTests [0x42c1a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428810]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min < max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprp0gt7dl.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmprp0gt7dl.__unittest_L24_C1() [0x427f47]

    ??:? void tmprp0gt7dl.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor(int i=1; i<l.length; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnwngbrof.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42838d]

    ??:? void tmpnwngbrof.__unittest_L29_C1() [0x427fe1]

    ??:? void tmpnwngbrof.__modtest() [0x42810c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c40f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430435]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]

    ??:? runModuleUnitTests [0x42c1e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428850]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long l1 = l[0];\n    long l2 = l[1];\n    long l3 = l[2];\n    long\
    \ l4 = l[3];\n    long l5 = l[4];\n    long l6 = l[5];\n    long l7 = l[6];\n\
    \    long l8 = l[7];\n    long l9 = l[8];\n    long l10 = l[9];\n    long l11\
    \ = l[10];\n    long l12 = l[11];\n    long l13 = l[12];\n    long l14 = l[13];\n\
    \    long l15 = l[14];\n    long l16 = l[15];\n    long l17 = l[16];\n    long\
    \ l18 = l[17];\n    long l19 = l[18];\n    long l20 = l[19];\n    long l21 = l[20];\n\
    \    long l22 = l[21];\n    long l23 = l[22];\n    long l24 = l[23];\n    long\
    \ l25 = l[24];\n    long l26 = l[25];\n    long l27 = l[26];\n    long l28 = l[27];\n\
    \    long l29 = l[28];\n    long l30 = l[29];\n    long l31 = l[30];\n    long\
    \ l32 = l[31];\n    long l33 = l[32];\n    long l34 = l[33];\n    long l35 = l[34];\n\
    \    long l36 = l[35];\n    long l37 = l[36];\n    long l38 = l[37];\n    long\
    \ l39 = l[38];\n    long l40 = l[39];\n    long l41 = l[40];\n    long l42 = l[41];\n\
    \    long l43 = l[42];\n    long l44 = l[43];\n    long l45 = l[44];\n    long\
    \ l46 = l[45];\n    long l47 = l[46];\n    long l48 = l[47];\n    long l49 = l[48];\n\
    \    long l50 = l[49];\n    long l51 = l[50];\n    long l52 = l[51];\n    long\
    \ l53 = l[52];\n    long l54 = l[53];\n    long l\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdki1o4u_.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmpdki1o4u_.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdki1o4u_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long l = l[0];\n    for(int i=1; i<l.length; i++)\n    {\n     \
    \   if(l[i] > l)\n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd4ef8a4p.d(9): Error: variable `l` is shadowing variable `tmpd4ef8a4p.monotonic.l`

    /tmp/tmpd4ef8a4p.d(10): Error: no property `length` for type `long`

    /tmp/tmpd4ef8a4p.d(12): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd4ef8a4p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t{\n\t\t\t\
    max = l[i];\n\t\t}\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\t\
    if (max < min)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcyaa6eh6.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpcyaa6eh6.__unittest_L29_C1() [0x427f43]

    ??:? void tmpcyaa6eh6.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tfor(int i = 1; i < l.length; i++)\n\
    \t{\n\t\tlong x = l[i];\n\t\tif((r - x) > 0) return false;\n\t\tr = x;\n\t}\n\t\
    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ry5_wid.d(9): Error: variable `l` is shadowing variable `tmp9ry5_wid.monotonic.l`

    /tmp/tmp9ry5_wid.d(10): Error: only one index allowed to index `long`

    /tmp/tmp9ry5_wid.d(11): Error: no property `length` for type `long`

    /tmp/tmp9ry5_wid.d(13): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ry5_wid.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong i\
    \ = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n =\
    \ 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\
    \tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\t\
    long y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong\
    \ z = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w\
    \ = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong x =\
    \ 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\
    \tlong z = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\t\
    long w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong\
    \ x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y\
    \ = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z =\
    \ 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\
    \tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong x = 0;\n\t\
    long y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong\
    \ z = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w\
    \ = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong x =\
    \ 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\
    \tlong z = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\t\
    long w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnmr_j2zv.d(112): Error: semicolon expected, not `unittest`

    /tmp/tmpnmr_j2zv.d(112): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnmr_j2zv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tbool result = true;\n\tfor (int i = 1; i < l.length;\
    \ i++)\n\t{\n\t\tif (l[i] < l)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\
    \t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd3obcchi.d(9): Error: variable `l` is shadowing variable `tmpd3obcchi.monotonic.l`

    /tmp/tmpd3obcchi.d(11): Error: no property `length` for type `long`

    /tmp/tmpd3obcchi.d(13): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd3obcchi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\t\
    if (min > max)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx6par9rx.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283a5]

    ??:? void tmpx6par9rx.__unittest_L29_C1() [0x427f53]

    ??:? void tmpx6par9rx.__modtest() [0x428124]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c427]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43044d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b291]

    ??:? runModuleUnitTests [0x42c1fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428868]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isIncreasing = true;\n\
    \tfor(int i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin\
    \ = l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t\tisIncreasing\
    \ = false;\n\t\t}\n\t}\n\treturn isIncreasing;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9zzhgvz5.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42838d]

    ??:? void tmp9zzhgvz5.__unittest_L26_C1() [0x427ea0]

    ??:? void tmp9zzhgvz5.__modtest() [0x42810c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c40f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430435]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]

    ??:? runModuleUnitTests [0x42c1e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428850]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tbool isIncreasing = true;\n\tbool isDecreasing =\
    \ true;\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < l)\n\t\t{\n\
    \t\t\tisIncreasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tisDecreasing = false;\n\
    \t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}\n/*\nReturn True if all\
    \ elements are equal.\n*/\nunittest\n{\n    alias candidate = monotonic;\n\n \
    \   assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L,\
    \ 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n \
    \   assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfltv57_u.d(9): Error: variable `l` is shadowing variable `tmpfltv57_u.monotonic.l`

    /tmp/tmpfltv57_u.d(12): Error: no property `length` for type `long`

    /tmp/tmpfltv57_u.d(14): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfltv57_u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tlong\
    \ next = l[i];\n\t\tif (curr < next)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t\
    }\n\t\telse if (curr > next)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\t\
    else if (curr == next)\n\t\t{\n\t\t\tisIncreasing = true;\n\t\t\tisDecreasing\
    \ = true;\n\t\t}\n\t\telse if (curr < prev)\n\t\t{\n\t\t\tisIncreasing = false;\n\
    \t\t}\n\t\telse if (curr > prev)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t\
    \tprev = curr;\n\t\tcurr = next;\n\t}\n\treturn isIncreasing || isDecreasing;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tlong mid = 0;\n\tfor (int\
    \ i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\tmid = (min +\
    \ max) / 2;\n\t\tif (mid > l[i])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n/*\nReturn True is list elements are monotonically increasing or decreasing.\n\
    \                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4k3jhl6o.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283dd]

    ??:? void tmp4k3jhl6o.__unittest_L34_C1() [0x427fd9]

    ??:? void tmp4k3jhl6o.__modtest() [0x42815c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c45f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430485]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430934]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430411]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2c9]

    ??:? runModuleUnitTests [0x42c235]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tlong l3 = l[2];\n\tlong l4 =\
    \ l[3];\n\tlong l5 = l[4];\n\tlong l6 = l[5];\n\tlong l7 = l[6];\n\tlong l8 =\
    \ l[7];\n\tlong l9 = l[8];\n\tlong l10 = l[9];\n\tlong l11 = l[10];\n\tlong l12\
    \ = l[11];\n\tlong l13 = l[12];\n\tlong l14 = l[13];\n\tlong l15 = l[14];\n\t\
    long l16 = l[15];\n\tlong l17 = l[16];\n\tlong l18 = l[17];\n\tlong l19 = l[18];\n\
    \tlong l20 = l[19];\n\tlong l21 = l[20];\n\tlong l22 = l[21];\n\tlong l23 = l[22];\n\
    \tlong l24 = l[23];\n\tlong l25 = l[24];\n\tlong l26 = l[25];\n\tlong l27 = l[26];\n\
    \tlong l28 = l[27];\n\tlong l29 = l[28];\n\tlong l30 = l[29];\n\tlong l31 = l[30];\n\
    \tlong l32 = l[31];\n\tlong l33 = l[32];\n\tlong l34 = l[33];\n\tlong l35 = l[34];\n\
    \tlong l36 = l[35];\n\tlong l37 = l[36];\n\tlong l38 = l[37];\n\tlong l39 = l[38];\n\
    \tlong l40 = l[39];\n\tlong l41 = l[40];\n\tlong l42 = l[41];\n\tlong l43 = l[42];\n\
    \tlong l44 = l[43];\n\tlong l45 = l[44];\n\tlong l46 = l[45];\n\tlong l47 = l[46];\n\
    \tlong l48 = l[47];\n\tlong l49 = l[48];\n\tlong l50 = l[49];\n\tlong l51 = l[50];\n\
    \tlong l52 = l[51];\n\tlong l53 = l[52];\n\tlong l54 = l[53];\n\tlong l\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4awynn3f.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmp4awynn3f.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4awynn3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164437
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tfor(int i = 1; i < l.length; i++)\n\
    \t{\n\t\tlong c = l[i];\n\t\tif(c < r)\n\t\t\treturn false;\n\t\tr = c;\n\t}\n\
    \treturn true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpriyrzwvu.d(9): Error: variable `l` is shadowing variable `tmpriyrzwvu.monotonic.l`

    /tmp/tmpriyrzwvu.d(10): Error: only one index allowed to index `long`

    /tmp/tmpriyrzwvu.d(11): Error: no property `length` for type `long`

    /tmp/tmpriyrzwvu.d(13): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpriyrzwvu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev=l[0];\n\tbool isMonotonic=true;\n\tfor(int i=1;i<l.length;++i)\n\
    \t{\n\t\tlong cur=l[i];\n\t\tif(cur<prev)\n\t\t{\n\t\t\tisMonotonic=false;\n\t\
    \t\tbreak;\n\t\t}\n\t\tprev=cur;\n\t}\n\treturn isMonotonic;\n}\nunittest\n{\n\
    \    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps2pqwkqv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282f5]

    ??:? void tmps2pqwkqv.__unittest_L23_C1() [0x427ef1]

    ??:? void tmps2pqwkqv.__modtest() [0x428074]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c377]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b20a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43039d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43084c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430329]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e1]

    ??:? runModuleUnitTests [0x42c14d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287b8]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660164439
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool increasing = true;\n\t\
    bool decreasing = true;\n\tfor(int i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin\
    \ = l[i];\n\t\t}\n\t\tif(l[i] < max)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\
    \t\tif(l[i] > min)\n\t\t{\n\t\t\tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing\
    \ || decreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = 0;\n\tlong min = l[0];\n\tbool flag = false;\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t\tflag = true;\n\t\t}\n\t\telse if (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t\tflag = false;\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnxeggapc.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428375]

    ??:? void tmpnxeggapc.__unittest_L27_C1() [0x427f27]

    ??:? void tmpnxeggapc.__modtest() [0x4280f8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b28a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43041d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b261]

    ??:? runModuleUnitTests [0x42c1cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428838]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\t\
    if (l[i] < min)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t\tif (l[i] > max)\n\
    \t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0080zel0.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283e5]

    ??:? void tmp0080zel0.__unittest_L33_C1() [0x427f97]

    ??:? void tmp0080zel0.__modtest() [0x428168]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c467]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43048d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43093c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430419]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d1]

    ??:? runModuleUnitTests [0x42c23d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\
    }\n\tif (min > max) \n\t{\n\t\tisMonotonic = false;\n\t}\n\treturn isMonotonic;\n\
    }\n/*\nReturn True is list elements are monotonically increasing or decreasing.\n\
    \                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwux1tq0j.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpwux1tq0j.__unittest_L33_C1() [0x427f43]

    ??:? void tmpwux1tq0j.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 0;\n\tbool isIncreasing = true;\n\tbool isDecreasing\
    \ = true;\n\twhile (i < l.length && j < l.length) \n\t{\n\t\tif (l[i] < l[j])\
    \ {\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse if (l[i] > l[j]) {\n\t\t\tisDecreasing\
    \ = false;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn isIncreasing\
    \ || isDecreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_isr4ryy.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428365]

    ??:? void tmp_isr4ryy.__unittest_L28_C1() [0x427f17]

    ??:? void tmp_isr4ryy.__modtest() [0x4280e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3e7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43040d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430399]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b251]

    ??:? runModuleUnitTests [0x42c1bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428828]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long l = l[0];\n    long r = l[0];\n    for(int i = 1; i < l.length;\
    \ i++)\n    {\n        if(l[i] < r)\n        {\n            return false;\n  \
    \      }\n        if(l[i] > r)\n        {\n            r = l[i];\n        }\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2_3hj56e.d(9): Error: variable `l` is shadowing variable `tmp2_3hj56e.monotonic.l`

    /tmp/tmp2_3hj56e.d(10): Error: only one index allowed to index `long`

    /tmp/tmp2_3hj56e.d(11): Error: no property `length` for type `long`

    /tmp/tmp2_3hj56e.d(13): Error: only one index allowed to index `long`

    /tmp/tmp2_3hj56e.d(17): Error: only one index allowed to index `long`

    /tmp/tmp2_3hj56e.d(19): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_3hj56e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong a = l[0];\n\tlong b = l[1];\n\tlong c = l[2];\n\tlong d = l[3];\n\
    \tlong e = l[4];\n\tlong f = l[5];\n\tlong g = l[6];\n\tlong h = l[7];\n\tlong\
    \ i = l[8];\n\tlong j = l[9];\n\tlong k = l[10];\n\tlong l = l[11];\n\tlong m\
    \ = l[12];\n\tlong n = l[13];\n\tlong o = l[14];\n\tlong p = l[15];\n\tlong q\
    \ = l[16];\n\tlong r = l[17];\n\tlong s = l[18];\n\tlong t = l[19];\n\tlong u\
    \ = l[20];\n\tlong v = l[21];\n\tlong w = l[22];\n\tlong x = l[23];\n\tlong y\
    \ = l[24];\n\tlong z = l[25];\n\tlong a = l[26];\n\tlong b = l[27];\n\tlong c\
    \ = l[28];\n\tlong d = l[29];\n\tlong e = l[30];\n\tlong f = l[31];\n\tlong g\
    \ = l[32];\n\tlong h = l[33];\n\tlong i = l[34];\n\tlong j = l[35];\n\tlong k\
    \ = l[36];\n\tlong l = l[37];\n\tlong m = l[38];\n\tlong n = l[39];\n\tlong o\
    \ = l[40];\n\tlong p = l[41];\n\tlong q = l[42];\n\tlong r = l[43];\n\tlong s\
    \ = l[44];\n\tlong t = l[45];\n\tlong u = l[46];\n\tlong v = l[47];\n\tlong w\
    \ = l[48];\n\tlong x = l[49];\n\tlong y = l[50];\n\tlong z = l[51];\n\tlong a\
    \ = l[52];\n\tlong b = l[53];\n\tlong c = l[54];\n\tlong d = l[55];\n\tlong e\
    \ = l[56];\n\tlong f = l[57];\n\tlong g = l[58];\n\tlong h = l[59];\n\tlong i\
    \ = l[60];\n\tlong j = l[61];\n\tlong k = l[62];\n\tlong l = l[63];\n\tlong m\
    \ = l[64];\n\tlong n = l[65];\n\tlong o = \nunittest\n{\n    alias candidate =\
    \ monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhms9bdz.d(76): Error: expression expected, not `unittest`

    /tmp/tmphhms9bdz.d(77): Error: semicolon expected, not `{`

    /tmp/tmphhms9bdz.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhms9bdz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tlong cur = l[0];\n\tbool isIncreasing\
    \ = true;\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\
    {\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\
    \t}\n\t\tif (l[i] < cur)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\tcur =\
    \ l[i];\n\t}\n\treturn isIncreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgvx6qcrk.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x428415]

    ??:? void tmpgvx6qcrk.__unittest_L31_C1() [0x428015]

    ??:? void tmpgvx6qcrk.__modtest() [0x428198]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c497]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b32a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43096c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430449]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]

    ??:? runModuleUnitTests [0x42c26d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max=0;\n\tlong min=l[0];\n\tbool isMonotonic=true;\n\tfor(int\
    \ i=1;i<l.length;i++)\n\t{\n\t\tif(l[i]<min)\n\t\t{\n\t\t\tmin=l[i];\n\t\t}\n\t\
    \telse if(l[i]>max)\n\t\t{\n\t\t\tmax=l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tisMonotonic=false;\n\
    \t\t}\n\t}\n\treturn isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkd8m6cya.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x428375]

    ??:? void tmpkd8m6cya.__unittest_L29_C1() [0x4280de]

    ??:? void tmpkd8m6cya.__modtest() [0x4280f8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b28a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43041d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b261]

    ??:? runModuleUnitTests [0x42c1cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428838]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\t\
    if (l[i] < min || l[i] > max)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\
    \treturn isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L,\
    \ 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n \
    \   assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprfpj6k7s.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ed]

    ??:? void tmprfpj6k7s.__unittest_L29_C1() [0x427f9f]

    ??:? void tmprfpj6k7s.__modtest() [0x428170]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c46f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b302]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430495]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430944]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430421]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d9]

    ??:? runModuleUnitTests [0x42c245]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isMonotonic = true;\n\tfor(int\
    \ i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i] < r)\n\t\t{\n\t\t\tisMonotonic =\
    \ false;\n\t\t}\n\t\telse if(l[i] > r)\n\t\t{\n\t\t\tisMonotonic = true;\n\t\t\
    }\n\t\tr = l[i];\n\t}\n\treturn isMonotonic;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprq_gqnos.d(9): Error: variable `l` is shadowing variable `tmprq_gqnos.monotonic.l`

    /tmp/tmprq_gqnos.d(10): Error: only one index allowed to index `long`

    /tmp/tmprq_gqnos.d(12): Error: no property `length` for type `long`

    /tmp/tmprq_gqnos.d(14): Error: only one index allowed to index `long`

    /tmp/tmprq_gqnos.d(18): Error: only one index allowed to index `long`

    /tmp/tmprq_gqnos.d(22): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprq_gqnos.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tlong cur = l[0];\n\tfor(int\
    \ i=1; i<l.length; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\
    \t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\tif(cur < min)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(cur\
    \ > max)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tcur = l[i];\n\t\
    }\n\treturn true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2141gji5.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283f5]

    ??:? void tmp2141gji5.__unittest_L37_C1() [0x427fa3]

    ??:? void tmp2141gji5.__modtest() [0x428174]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c477]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b30a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43049d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43094c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430429]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e1]

    ??:? runModuleUnitTests [0x42c24d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool isMonotonic = true;\n\
    \tfor(int i = 1; i < l.length; ++i)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin\
    \ = l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\
    \telse\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmv49_cd0.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmpmv49_cd0.__unittest_L29_C1() [0x427ff1]

    ??:? void tmpmv49_cd0.__modtest() [0x42811c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long l1 = l[0];\n    long l2 = l[1];\n    long l3 = l[2];\n    long\
    \ l4 = l[3];\n    long l5 = l[4];\n    long l6 = l[5];\n    long l7 = l[6];\n\
    \    long l8 = l[7];\n    long l9 = l[8];\n    long l10 = l[9];\n    long l11\
    \ = l[10];\n    long l12 = l[11];\n    long l13 = l[12];\n    long l14 = l[13];\n\
    \    long l15 = l[14];\n    long l16 = l[15];\n    long l17 = l[16];\n    long\
    \ l18 = l[17];\n    long l19 = l[18];\n    long l20 = l[19];\n    long l21 = l[20];\n\
    \    long l22 = l[21];\n    long l23 = l[22];\n    long l24 = l[23];\n    long\
    \ l25 = l[24];\n    long l26 = l[25];\n    long l27 = l[26];\n    long l28 = l[27];\n\
    \    long l29 = l[28];\n    long l30 = l[29];\n    long l31 = l[30];\n    long\
    \ l32 = l[31];\n    long l33 = l[32];\n    long l34 = l[33];\n    long l35 = l[34];\n\
    \    long l36 = l[35];\n    long l37 = l[36];\n    long l38 = l[37];\n    long\
    \ l39 = l[38];\n    long l40 = l[39];\n    long l41 = l[40];\n    long l42 = l[41];\n\
    \    long l43 = l[42];\n    long l44 = l[43];\n    long l45 = l[44];\n    long\
    \ l46 = l[45];\n    long l47 = l[46];\n    long l48 = l[47];\n    long l49 = l[48];\n\
    \    long l50 = l[49];\n    long l51 = l[50];\n    long l52 = l[51];\n    long\
    \ l53 = l[52];\n    long l54 = l[53];\n    long l\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdki1o4u_.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmpdki1o4u_.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdki1o4u_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tbool result = true;\n\tfor(int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tbool isIncreasing = l[i] > l;\n\t\tbool isDecreasing = l[i] <\
    \ l;\n\t\tbool isMonotonic = isIncreasing || isDecreasing;\n\t\tresult = result\
    \ && isMonotonic;\n\t\tl = l[i];\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzzeowzbr.d(9): Error: variable `l` is shadowing variable `tmpzzeowzbr.monotonic.l`

    /tmp/tmpzzeowzbr.d(11): Error: no property `length` for type `long`

    /tmp/tmpzzeowzbr.d(13): Error: only one index allowed to index `long`

    /tmp/tmpzzeowzbr.d(14): Error: only one index allowed to index `long`

    /tmp/tmpzzeowzbr.d(17): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzeowzbr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = std.length(l);\n\tlong i;\n\tbool isIncreasing = true;\n\t\
    bool isDecreasing = true;\n\t\n\tfor(i = 1; i < l; ++i)\n\t{\n\t\tif(l[i-1] >\
    \ l[i])\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse if(l[i-1] < l[i])\n\
    \t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t}\n\t\n\treturn isIncreasing || isDecreasing;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphz0nt12q.d(9): Error: undefined identifier `length` in package
    `std`

    /tmp/tmphz0nt12q.d(9): Error: variable `l` is shadowing variable `tmphz0nt12q.monotonic.l`

    /tmp/tmphz0nt12q.d(16): Error: only one index allowed to index `long`

    /tmp/tmphz0nt12q.d(16): Error: only one index allowed to index `long`

    /tmp/tmphz0nt12q.d(20): Error: only one index allowed to index `long`

    /tmp/tmphz0nt12q.d(20): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphz0nt12q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\tif (l[i] > max)\n\t\t\
    \tmax = l[i];\n\t}\n\treturn (min <= max);\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptw0p0ijb.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmptw0p0ijb.__unittest_L20_C1() [0x427f47]

    ??:? void tmptw0p0ijb.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor(int i = 1; i < l.length; ++i)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin\
    \ = l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\
    \telse\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfy5t_51g.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmpfy5t_51g.__unittest_L29_C1() [0x427ff1]

    ??:? void tmpfy5t_51g.__modtest() [0x42811c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isIncreasing = true;\n\t\
    for (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > r)\n\t\t{\n\t\t\tisIncreasing\
    \ = false;\n\t\t}\n\t\telse if (l[i] < r)\n\t\t{\n\t\t\tisIncreasing = true;\n\
    \t\t}\n\t\tr = l[i];\n\t}\n\treturn isIncreasing;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppjwoo3_n.d(9): Error: variable `l` is shadowing variable `tmppjwoo3_n.monotonic.l`

    /tmp/tmppjwoo3_n.d(10): Error: only one index allowed to index `long`

    /tmp/tmppjwoo3_n.d(12): Error: no property `length` for type `long`

    /tmp/tmppjwoo3_n.d(14): Error: only one index allowed to index `long`

    /tmp/tmppjwoo3_n.d(18): Error: only one index allowed to index `long`

    /tmp/tmppjwoo3_n.d(22): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjwoo3_n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor(int i=1; i<l.length; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnwngbrof.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42838d]

    ??:? void tmpnwngbrof.__unittest_L29_C1() [0x427fe1]

    ??:? void tmpnwngbrof.__modtest() [0x42810c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c40f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430435]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]

    ??:? runModuleUnitTests [0x42c1e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428850]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\t\
    if (l[i] < min || l[i] > max)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\
    \treturn isMonotonic;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgjgs7vad.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ed]

    ??:? void tmpgjgs7vad.__unittest_L33_C1() [0x427f9f]

    ??:? void tmpgjgs7vad.__modtest() [0x428170]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c46f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b302]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430495]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430944]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430421]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d9]

    ??:? runModuleUnitTests [0x42c245]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong a = l[0];\n\tlong b = l[1];\n\tlong c = l[2];\n\tlong d = l[3];\n\
    \tlong e = l[4];\n\tlong f = l[5];\n\tlong g = l[6];\n\tlong h = l[7];\n\tlong\
    \ i = l[8];\n\tlong j = l[9];\n\tlong k = l[10];\n\tlong l = l[11];\n\tlong m\
    \ = l[12];\n\tlong n = l[13];\n\tlong o = l[14];\n\tlong p = l[15];\n\tlong q\
    \ = l[16];\n\tlong r = l[17];\n\tlong s = l[18];\n\tlong t = l[19];\n\tlong u\
    \ = l[20];\n\tlong v = l[21];\n\tlong w = l[22];\n\tlong x = l[23];\n\tlong y\
    \ = l[24];\n\tlong z = l[25];\n\tlong a = l[26];\n\tlong b = l[27];\n\tlong c\
    \ = l[28];\n\tlong d = l[29];\n\tlong e = l[30];\n\tlong f = l[31];\n\tlong g\
    \ = l[32];\n\tlong h = l[33];\n\tlong i = l[34];\n\tlong j = l[35];\n\tlong k\
    \ = l[36];\n\tlong l = l[37];\n\tlong m = l[38];\n\tlong n = l[39];\n\tlong o\
    \ = l[40];\n\tlong p = l[41];\n\tlong q = l[42];\n\tlong r = l[43];\n\tlong s\
    \ = l[44];\n\tlong t = l[45];\n\tlong u = l[46];\n\tlong v = l[47];\n\tlong w\
    \ = l[48];\n\tlong x = l[49];\n\tlong y = l[50];\n\tlong z = l[51];\n\tlong a\
    \ = l[52];\n\tlong b = l[53];\n\tlong c = l[54];\n\tlong d = l[55];\n\tlong e\
    \ = l[56];\n\tlong f = l[57];\n\tlong g = l[58];\n\tlong h = l[59];\n\tlong i\
    \ = l[60];\n\tlong j = l[61];\n\tlong k = l[62];\n\tlong l = l[63];\n\tlong m\
    \ = l[64];\n\tlong n = l[65];\n\tlong o = \nunittest\n{\n    alias candidate =\
    \ monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhms9bdz.d(76): Error: expression expected, not `unittest`

    /tmp/tmphhms9bdz.d(77): Error: semicolon expected, not `{`

    /tmp/tmphhms9bdz.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhms9bdz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong x = 0;\n\tlong y = 0;\n\tbool increasing = true;\n\tbool decreasing\
    \ = true;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tx = l[i];\n\t\ty = l[i+1];\n\
    \t\tif (x < y)\n\t\t{\n\t\t\tincreasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\
    \tdecreasing = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\n/*\n\
    Return True is list elements are monotonically increasing or decreasing.\n   \
    \             \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpkmluh1z8.d(16): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4283a6]

    ??:? bool tmpkmluh1z8.monotonic(long[]) [0x427d70]

    ??:? void tmpkmluh1z8.__unittest_L32_C1() [0x427df5]

    ??:? void tmpkmluh1z8.__modtest() [0x428078]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c377]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b20a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43039d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43084c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430329]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e1]

    ??:? runModuleUnitTests [0x42c14d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isIncreasing = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\t\
    if (l[i] < min)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\tif (l[i] > max)\n\
    \t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgpspos_f.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283fd]

    ??:? void tmpgpspos_f.__unittest_L33_C1() [0x427faf]

    ??:? void tmpgpspos_f.__modtest() [0x428180]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c47f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b312]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430954]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430431]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e9]

    ??:? runModuleUnitTests [0x42c255]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tbool isMonotonic = true;\n\t\
    for (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < curr)\n\t\t{\n\t\t\tisMonotonic\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\tif (l[i] > prev)\n\t\t{\n\t\t\tisMonotonic\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\tprev = curr;\n\t\tcurr = l[i];\n\t}\n\treturn\
    \ isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp148sy92o.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428355]

    ??:? void tmp148sy92o.__unittest_L29_C1() [0x427e6c]

    ??:? void tmp148sy92o.__modtest() [0x4280d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b26a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430389]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b241]

    ??:? runModuleUnitTests [0x42c1ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428818]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long x0 = l[0];\n    long x1 = l[1];\n    long x2 = l[2];\n    long\
    \ x3 = l[3];\n    long x4 = l[4];\n    long x5 = l[5];\n    long x6 = l[6];\n\
    \    long x7 = l[7];\n    long x8 = l[8];\n    long x9 = l[9];\n    long x10 =\
    \ l[10];\n    long x11 = x[11];\n    long x12 = x[12];\n    long x13 = x[13];\n\
    \    long x14 = x[14];\n    long x15 = x[15];\n    long x16 = x[16];\n    long\
    \ x17 = x[17];\n    long x18 = x[18];\n    long x19 = x[19];\n    long x20 = x[20];\n\
    \    long x21 = x[21];\n    long x22 = x[22];\n    long x23 = x[23];\n    long\
    \ x24 = x[24];\n    long x25 = x[25];\n    long x26 = x[26];\n    long x27 = x[27];\n\
    \    long x28 = x[28];\n    long x29 = x[29];\n    long x30 = l[30];\n    long\
    \ x31 = l[31];\n    long x32 = l[32];\n    long x33 = l[33];\n    long x34 = l[34];\n\
    \    long x35 = l[35];\n    long x36 = l[36];\n    long x37 = l[37];\n    long\
    \ x38 = l[38];\n    long x39 = l[39];\n    long x40 = l[40];\n    long x41 = l[41];\n\
    \    long x42 = l[42];\n    long x43 = l[43];\n    long x44 = l[44];\n    long\
    \ x45 = l[45];\n    long x46 = l[46];\n    long x47 = l[47];\n    long x48 = l[48];\n\
    \    long x49 = l[49];\n    long x50 = l[50];\n    long x51 = l[51];\n    long\
    \ x52 = l[52];\n    long x53 = l[53];\n    long x54 = l[54];\n    long x55 = l[55];\n\
    \    long x56 = l[56\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnt2rfic0.d(66): Error: found `unittest` when expecting `,`

    /tmp/tmpnt2rfic0.d(79): Error: found `void` when expecting `,`

    /tmp/tmpnt2rfic0.d(79): Error: found `{` when expecting `,`

    /tmp/tmpnt2rfic0.d(79): Error: expression expected, not `}`

    /tmp/tmpnt2rfic0.d(79): Error: found `End of File` when expecting `,`

    /tmp/tmpnt2rfic0.d(79): Error: found `End of File` when expecting `]`

    /tmp/tmpnt2rfic0.d(79): Error: semicolon expected, not `End of File`

    /tmp/tmpnt2rfic0.d(79): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnt2rfic0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong i\
    \ = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n =\
    \ 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\
    \tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\t\
    long y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong\
    \ k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p\
    \ = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u =\
    \ 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\
    \tlong w = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\t\
    long m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong\
    \ r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w\
    \ = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong i =\
    \ 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\
    \tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\t\
    long t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong\
    \ y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k\
    \ = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p =\
    \ 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\
    \tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\t\
    long w = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong\
    \ m = 0;\n\tlong n = 0;\n\t\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6q6yhh5a.d(115): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6q6yhh5a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isIncreasing = true;\n\t\
    bool isDecreasing = true;\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i]\
    \ > r)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse if (l[i] < r)\n\t\t\
    {\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse if (l[i] == r)\n\t\t{\n\t\t\t\
    isIncreasing = true;\n\t\t\tisDecreasing = true;\n\t\t}\n\t\telse if (l[i] < r)\n\
    \t\t{\n\t\t\tisIncreasing = true;\n\t\t}\n\t\telse if (l[i] > r)\n\t\t{\n\t\t\t\
    isDecreasing = true;\n\t\t}\n\t\tr = l[i];\n\t}\n\treturn isIncreasing || isDecreasing;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyrfd5i28.d(9): Error: variable `l` is shadowing variable `tmpyrfd5i28.monotonic.l`

    /tmp/tmpyrfd5i28.d(10): Error: only one index allowed to index `long`

    /tmp/tmpyrfd5i28.d(13): Error: no property `length` for type `long`

    /tmp/tmpyrfd5i28.d(15): Error: only one index allowed to index `long`

    /tmp/tmpyrfd5i28.d(19): Error: only one index allowed to index `long`

    /tmp/tmpyrfd5i28.d(23): Error: only one index allowed to index `long`

    /tmp/tmpyrfd5i28.d(28): Error: only one index allowed to index `long`

    /tmp/tmpyrfd5i28.d(32): Error: only one index allowed to index `long`

    /tmp/tmpyrfd5i28.d(36): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyrfd5i28.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tlong l3 = l[2];\n\tlong l4 =\
    \ l[3];\n\tlong l5 = l[4];\n\tlong l6 = l[5];\n\tlong l7 = l[6];\n\tlong l8 =\
    \ l[7];\n\tlong l9 = l[8];\n\tlong l10 = l[9];\n\tlong l11 = l[10];\n\tlong l12\
    \ = l[11];\n\tlong l13 = l[12];\n\tlong l14 = l[13];\n\tlong l15 = l[14];\n\t\
    long l16 = l[15];\n\tlong l17 = l[16];\n\tlong l18 = l[17];\n\tlong l19 = l[18];\n\
    \tlong l20 = l[19];\n\tlong l21 = l[20];\n\tlong l22 = l[21];\n\tlong l23 = l[22];\n\
    \tlong l24 = l[23];\n\tlong l25 = l[24];\n\tlong l26 = l[25];\n\tlong l27 = l[26];\n\
    \tlong l28 = l[27];\n\tlong l29 = l[28];\n\tlong l30 = l[29];\n\tlong l31 = l[30];\n\
    \tlong l32 = l[31];\n\tlong l33 = l[32];\n\tlong l34 = l[33];\n\tlong l35 = l[34];\n\
    \tlong l36 = l[35];\n\tlong l37 = l[36];\n\tlong l38 = l[37];\n\tlong l39 = l[38];\n\
    \tlong l40 = l[39];\n\tlong l41 = l[40];\n\tlong l42 = l[41];\n\tlong l43 = l[42];\n\
    \tlong l44 = l[43];\n\tlong l45 = l[44];\n\tlong l46 = l[45];\n\tlong l47 = l[46];\n\
    \tlong l48 = l[47];\n\tlong l49 = l[48];\n\tlong l50 = l[49];\n\tlong l51 = l[50];\n\
    \tlong l52 = l[51];\n\tlong l53 = l[52];\n\tlong l54 = l[53];\n\tlong l\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4awynn3f.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmp4awynn3f.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4awynn3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164437
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif\
    \ (l[i] < curr)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse if (l[i]\
    \ > curr)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\
    isIncreasing = isDecreasing = true;\n\t\t}\n\t\tif (isIncreasing && isDecreasing)\n\
    \t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (isIncreasing)\n\t\t{\n\t\t\tprev\
    \ = curr;\n\t\t\tcurr = l[i];\n\t\t}\n\t\telse if (isDecreasing)\n\t\t{\n\t\t\t\
    prev = curr;\n\t\t\tcurr = l[i];\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n\
    \    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbtfsdhkf.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ad]

    ??:? void tmpbtfsdhkf.__unittest_L44_C1() [0x427f5b]

    ??:? void tmpbtfsdhkf.__modtest() [0x42812c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c42f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430455]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430904]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303e1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b299]

    ??:? runModuleUnitTests [0x42c205]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428870]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong x0 = l[0];\n\tlong x1 = l[1];\n\tlong x2 = l[2];\n\tlong x3 =\
    \ l[3];\n\tlong x4 = l[4];\n\tlong x5 = l[5];\n\tlong x6 = l[6];\n\tlong x7 =\
    \ l[7];\n\tlong x8 = l[8];\n\tlong x9 = l[9];\n\tlong x10 = l[10];\n\tlong x11\
    \ = l[11];\n\tlong x12 = l[12];\n\tlong x13 = l[13];\n\tlong x14 = l[14];\n\t\
    long x15 = l[15];\n\tlong x16 = l[16];\n\tlong x17 = l[17];\n\tlong x18 = l[18];\n\
    \tlong x19 = l[19];\n\tlong x20 = l[20];\n\tlong x21 = l[21];\n\tlong x22 = l[22];\n\
    \tlong x23 = l[23];\n\tlong x24 = l[24];\n\tlong x25 = l[25];\n\tlong x26 = l[26];\n\
    \tlong x27 = l[27];\n\tlong x28 = l[28];\n\tlong x29 = l[29];\n\tlong x30 = l[30];\n\
    \tlong x31 = l[31];\n\tlong x32 = l[32];\n\tlong x33 = l[33];\n\tlong x34 = l[34];\n\
    \tlong x35 = l[35];\n\tlong x36 = l[36];\n\tlong x37 = l[37];\n\tlong x38 = l[38];\n\
    \tlong x39 = l[39];\n\tlong x40 = l[40];\n\tlong x41 = l[41];\n\tlong x42 = l[42];\n\
    \tlong x43 = l[43];\n\tlong x44 = l[44];\n\tlong x45 = l[45];\n\tlong x46 = l[46];\n\
    \tlong x47 = l[47];\n\tlong x48 = l[48];\n\tlong x49 = l[49];\n\tlong x50 = l[50];\n\
    \tlong x51 = l[51];\n\tlong x52 = l[52];\n\tlong x53 = l[53];\n\tlong x54 = l[54];\n\
    \t\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp414iztm8.d(65): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp414iztm8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool result = true;\n\tfor(int\
    \ i=1; i<l.length; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\
    \t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\tresult = false;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi5al092j.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42838d]

    ??:? void tmpi5al092j.__unittest_L29_C1() [0x427fe1]

    ??:? void tmpi5al092j.__modtest() [0x42810c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c40f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430435]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]

    ??:? runModuleUnitTests [0x42c1e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428850]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool result = true;\n\tfor(int\
    \ i = 1; i < l.length; i++) \n\t{\n\t\tif(l[i] < l[i-1]) \n\t\t{\n\t\t\tresult\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\telse if(l[i] > r) \n\t\t{\n\t\t\tresult =\
    \ false;\n\t\t\tbreak;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = l[i];\n\t\t}\n\t}\n\
    \treturn result;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0uei0kns.d(9): Error: variable `l` is shadowing variable `tmp0uei0kns.monotonic.l`

    /tmp/tmp0uei0kns.d(10): Error: only one index allowed to index `long`

    /tmp/tmp0uei0kns.d(12): Error: no property `length` for type `long`

    /tmp/tmp0uei0kns.d(14): Error: only one index allowed to index `long`

    /tmp/tmp0uei0kns.d(14): Error: only one index allowed to index `long`

    /tmp/tmp0uei0kns.d(19): Error: only one index allowed to index `long`

    /tmp/tmp0uei0kns.d(26): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0uei0kns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tlong l3 = l[2];\n\tlong l4 =\
    \ l[3];\n\tlong l5 = l[4];\n\tlong l6 = l[5];\n\tlong l7 = l[6];\n\tlong l8 =\
    \ l[7];\n\tlong l9 = l[8];\n\tlong l10 = l[9];\n\tlong l11 = l[10];\n\tlong l12\
    \ = l[11];\n\tlong l13 = l[12];\n\tlong l14 = l[13];\n\tlong l15 = l[14];\n\t\
    long l16 = l[15];\n\tlong l17 = l[16];\n\tlong l18 = l[17];\n\tlong l19 = l[18];\n\
    \tlong l20 = l[19];\n\tlong l21 = l[20];\n\tlong l22 = l[21];\n\tlong l23 = l[22];\n\
    \tlong l24 = l[23];\n\tlong l25 = l[24];\n\tlong l26 = l[25];\n\tlong l27 = l[26];\n\
    \tlong l28 = l[27];\n\tlong l29 = l[28];\n\tlong l30 = l[29];\n\tlong l31 = l[30];\n\
    \tlong l32 = l[31];\n\tlong l33 = l[32];\n\tlong l34 = l[33];\n\tlong l35 = l[34];\n\
    \tlong l36 = l[35];\n\tlong l37 = l[36];\n\tlong l38 = l[37];\n\tlong l39 = l[38];\n\
    \tlong l40 = l[39];\n\tlong l41 = l[40];\n\tlong l42 = l[41];\n\tlong l43 = l[42];\n\
    \tlong l44 = l[43];\n\tlong l45 = l[44];\n\tlong l46 = l[45];\n\tlong l47 = l[46];\n\
    \tlong l48 = l[47];\n\tlong l49 = l[48];\n\tlong l50 = l[49];\n\tlong l51 = l[50];\n\
    \tlong l52 = l[51];\n\tlong l53 = l[52];\n\tlong l54 = l[53];\n\tlong l\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4awynn3f.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmp4awynn3f.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4awynn3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164437
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isIncreasing = true;\n\t\
    bool isDecreasing = true;\n\tfor(int i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i]\
    \ < l)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse if(l[i] > r)\n\t\t\
    {\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse if(l[i] < r)\n\t\t{\n\t\t\tisDecreasing\
    \ = false;\n\t\t}\n\t\telse if(l[i] > l)\n\t\t{\n\t\t\tisIncreasing = false;\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tisIncreasing = true;\n\t\t}\n\t\tr = l[i];\n\t}\n\
    \treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate =\
    \ monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6x0u6s5o.d(9): Error: variable `l` is shadowing variable `tmp6x0u6s5o.monotonic.l`

    /tmp/tmp6x0u6s5o.d(10): Error: only one index allowed to index `long`

    /tmp/tmp6x0u6s5o.d(13): Error: no property `length` for type `long`

    /tmp/tmp6x0u6s5o.d(15): Error: only one index allowed to index `long`

    /tmp/tmp6x0u6s5o.d(19): Error: only one index allowed to index `long`

    /tmp/tmp6x0u6s5o.d(23): Error: only one index allowed to index `long`

    /tmp/tmp6x0u6s5o.d(27): Error: only one index allowed to index `long`

    /tmp/tmp6x0u6s5o.d(35): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6x0u6s5o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong minVal = l[0];\n\tlong maxVal = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < minVal)\n\t\t{\n\t\t\
    \tminVal = l[i];\n\t\t}\n\t\tif (l[i] > maxVal)\n\t\t{\n\t\t\tmaxVal = l[i];\n\
    \t\t}\n\t}\n\tif (minVal < maxVal)\n\t{\n\t\tisMonotonic = false;\n\t}\n\treturn\
    \ isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuneaetqr.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283a5]

    ??:? void tmpuneaetqr.__unittest_L29_C1() [0x427eb8]

    ??:? void tmpuneaetqr.__modtest() [0x428124]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c427]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43044d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b291]

    ??:? runModuleUnitTests [0x42c1fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428868]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tbool l3 = false;\n\tbool l4\
    \ = false;\n\tbool l5 = false;\n\tbool l6 = false;\n\tbool l7 = false;\n\tbool\
    \ l8 = false;\n\tbool l9 = false;\n\tbool l10 = false;\n\tbool l11 = false;\n\t\
    bool l12 = false;\n\tbool l13 = false;\n\tbool l14 = false;\n\tbool l15 = false;\n\
    \tbool l16 = false;\n\tbool l17 = false;\n\tbool l18 = false;\n\tbool l19 = false;\n\
    \tbool l20 = false;\n\tbool l21 = false;\n\tbool l22 = false;\n\tbool l23 = false;\n\
    \tbool l24 = false;\n\tbool l25 = false;\n\tbool l26 = false;\n\tbool l27 = false;\n\
    \tbool l28 = false;\n\tbool l29 = false;\n\tbool l30 = false;\n\tbool l31 = false;\n\
    \tbool l32 = false;\n\tbool l33 = false;\n\tbool l34 = false;\n\tbool l35 = false;\n\
    \tbool l36 = false;\n\tbool l37 = false;\n\tbool l38 = false;\n\tbool l39 = false;\n\
    \tbool l40 = false;\n\tbool l41 = false;\n\tbool l42 = false;\n\tbool l43 = false;\n\
    \tbool l44 = false;\n\tbool l45 = false;\n\tbool l46 = false;\n\tbool l47 = false;\n\
    \tbool l48 = false;\n\tbool l49 = false;\n\tbool l50 = false;\n\tbool l51 = false;\n\
    \tbool l52 = false;\n\tbool l53 = false;\n\tbool l54 = false;\n\tbool l55 = false;\n\
    \tbool l56 = false;\n\tbool l57 = false;\n\tbool l58 = false;\n\tbool l59 = false;\n\
    \tbool l60 = false;\n\tbool l61 = false;\n\tbool l62 = false;\n\tbool l63 = false;\n\
    \tbool l64 = false;\n\tbool l65 = false;\n\tbool l66 = false;\n\tbool l67 = false;\n\
    \tbool l68 = false;\n\tbool l69 = false;\n\tbool l70 = false;\n\tbool l71 = false;\n\
    \tbool l72 = false;\n\tbool l73 = false;\n\tbool l74 = false;\n\tbool l75 = false;\n\
    \tbool l76 = false;\n\tbool l77 = false;\n\tbool l78 = false;\n\tbool l79 = false;\n\
    \tbool l80 = false;\n\tbool l81 = false;\n\tbool l82 = \nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppovco0o4.d(91): Error: expression expected, not `unittest`

    /tmp/tmppovco0o4.d(92): Error: semicolon expected, not `{`

    /tmp/tmppovco0o4.d(104): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppovco0o4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif\
    \ (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if (l[i] > max)\n\t\t\
    {\n\t\t\tmax = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t\
    \tisDecreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpym623uml.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283bd]

    ??:? void tmpym623uml.__unittest_L31_C1() [0x428011]

    ??:? void tmpym623uml.__modtest() [0x42813c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c43f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430465]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430914]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2a9]

    ??:? runModuleUnitTests [0x42c215]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428880]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong minVal = l[0];\n\tlong maxVal = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < minVal)\n\t\t{\n\t\t\
    \tminVal = l[i];\n\t\t}\n\t\tif (l[i] > maxVal)\n\t\t{\n\t\t\tmaxVal = l[i];\n\
    \t\t}\n\t}\n\treturn isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdwcl4xwp.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpdwcl4xwp.__unittest_L25_C1() [0x427f43]

    ??:? void tmpdwcl4xwp.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tfor(int i=1; i<l.length; i++)\
    \ \n\t{\n\t\tif(l[i] > r) \n\t\t{\n\t\t\tr = l[i];\n\t\t}\n\t\telse if(l[i] <\
    \ r) \n\t\t{\n\t\t\tl = l[i];\n\t\t}\n\t}\n\treturn (r-l) < 0;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyht8_7g0.d(9): Error: variable `l` is shadowing variable `tmpyht8_7g0.monotonic.l`

    /tmp/tmpyht8_7g0.d(10): Error: only one index allowed to index `long`

    /tmp/tmpyht8_7g0.d(11): Error: no property `length` for type `long`

    /tmp/tmpyht8_7g0.d(13): Error: only one index allowed to index `long`

    /tmp/tmpyht8_7g0.d(15): Error: only one index allowed to index `long`

    /tmp/tmpyht8_7g0.d(17): Error: only one index allowed to index `long`

    /tmp/tmpyht8_7g0.d(19): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyht8_7g0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \treturn isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n  \
    \  assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L,\
    \ 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n \
    \   assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2te850dz.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp2te850dz.__unittest_L25_C1() [0x427f43]

    ??:? void tmp2te850dz.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\tlong l = l[0];\n\twhile\
    \ (i < l.length) \n\t{\n\t\tif (l[i] < l[j]) {\n\t\t\tk = i;\n\t\t}\n\t\telse\
    \ {\n\t\t\tk = j;\n\t\t}\n\t\tif (l[k] < l[i]) {\n\t\t\tj = k;\n\t\t}\n\t\telse\
    \ {\n\t\t\ti = k;\n\t\t}\n\t}\n\treturn (i == l.length);\n}\nunittest\n{\n   \
    \ alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwxyq7ik.d(12): Error: variable `l` is shadowing variable `tmpkwxyq7ik.monotonic.l`

    /tmp/tmpkwxyq7ik.d(13): Error: no property `length` for type `long`

    /tmp/tmpkwxyq7ik.d(15): Error: only one index allowed to index `long`

    /tmp/tmpkwxyq7ik.d(15): Error: only one index allowed to index `long`

    /tmp/tmpkwxyq7ik.d(21): Error: only one index allowed to index `long`

    /tmp/tmpkwxyq7ik.d(21): Error: only one index allowed to index `long`

    /tmp/tmpkwxyq7ik.d(28): Error: no property `length` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwxyq7ik.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long prev = 0;\n    long curr = l[0];\n    bool isIncreasing = true;\n\
    \    bool isDecreasing = true;\n    for(int i = 1; i < l.length; i++)\n    {\n\
    \        if(l[i] < curr)\n        {\n            isDecreasing = false;\n     \
    \   }\n        else if(l[i] > curr)\n        {\n            isIncreasing = false;\n\
    \        }\n        else if(l[i] == prev)\n        {\n            isDecreasing\
    \ = false;\n        }\n        else if(l[i] == prev)\n        {\n            isIncreasing\
    \ = false;\n        }\n        else\n        {\n            isDecreasing = true;\n\
    \        }\n        prev = l[i];\n        curr = l[i];\n    }\n    return isIncreasing\
    \ || isDecreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isIncreasing = true;\n\t\
    for (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < r)\n\t\t{\n\t\t\tisIncreasing\
    \ = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = l[i];\n\t\t}\n\t}\n\treturn isIncreasing;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp90dcqagr.d(9): Error: variable `l` is shadowing variable `tmp90dcqagr.monotonic.l`

    /tmp/tmp90dcqagr.d(10): Error: only one index allowed to index `long`

    /tmp/tmp90dcqagr.d(12): Error: no property `length` for type `long`

    /tmp/tmp90dcqagr.d(14): Error: only one index allowed to index `long`

    /tmp/tmp90dcqagr.d(20): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp90dcqagr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long prev = 0;\n    long curr = l[0];\n    long next = l[0];\n \
    \   for(int i = 1; i < l.length; ++i)\n    {\n        prev = curr;\n        curr\
    \ = next;\n        next = l[i];\n        if(curr < prev)\n        {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm52guzqy.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428315]

    ??:? void tmpm52guzqy.__unittest_L24_C1() [0x427f11]

    ??:? void tmpm52guzqy.__modtest() [0x428094]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c397]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b22a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b201]

    ??:? runModuleUnitTests [0x42c16d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tlong l3 = l[2];\n\tlong l4 =\
    \ l[3];\n\tlong l5 = l[4];\n\tlong l6 = l[5];\n\tlong l7 = l[6];\n\tlong l8 =\
    \ l[7];\n\tlong l9 = l[8];\n\tlong l10 = l[9];\n\tlong l11 = l[10];\n\tlong l12\
    \ = l[11];\n\tlong l13 = l[12];\n\tlong l14 = l[13];\n\tlong l15 = l[14];\n\t\
    long l16 = l[15];\n\tlong l17 = l[16];\n\tlong l18 = l[17];\n\tlong l19 = l[18];\n\
    \tlong l20 = l[19];\n\tlong l21 = l[20];\n\tlong l22 = l[21];\n\tlong l23 = l[22];\n\
    \tlong l24 = l[23];\n\tlong l25 = l[24];\n\tlong l26 = l[25];\n\tlong l27 = l[26];\n\
    \tlong l28 = l[27];\n\tlong l29 = l[28];\n\tlong l30 = l[29];\n\tlong l31 = l[30];\n\
    \tlong l32 = l[31];\n\tlong l33 = l[32];\n\tlong l34 = l[33];\n\tlong l35 = l[34];\n\
    \tlong l36 = l[35];\n\tlong l37 = l[36];\n\tlong l38 = l[37];\n\tlong l39 = l[38];\n\
    \tlong l40 = l[39];\n\tlong l41 = l[40];\n\tlong l42 = l[41];\n\tlong l43 = l[42];\n\
    \tlong l44 = l[43];\n\tlong l45 = l[44];\n\tlong l46 = l[45];\n\tlong l47 = l[46];\n\
    \tlong l48 = l[47];\n\tlong l49 = l[48];\n\tlong l50 = l[49];\n\tlong l51 = l[50];\n\
    \tlong l52 = l[51];\n\tlong l53 = l[52];\n\tlong l54 = l[53];\n\tlong l\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4awynn3f.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmp4awynn3f.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4awynn3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164437
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\tfor(int i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i]\
    \ < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\
    \tmax = l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t\tisDecreasing\
    \ = false;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4meh8m3c.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283a5]

    ??:? void tmp4meh8m3c.__unittest_L31_C1() [0x427ffd]

    ??:? void tmp4meh8m3c.__modtest() [0x428128]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c427]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43044d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b291]

    ??:? runModuleUnitTests [0x42c1fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428868]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\tbool monotonic = false;\n\
    \twhile (i < l.length && j < l.length) \n\t{\n\t\tif (l[i] < l[j]) \n\t\t{\n\t\
    \t\tk = j;\n\t\t\tj = i;\n\t\t\ti = k;\n\t\t}\n\t\telse if (l[i] > l[j]) \n\t\t\
    {\n\t\t\tk = j;\n\t\t\tj = i;\n\t\t\ti = k;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmonotonic\
    \ = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn monotonic;\n}\nunittest\n{\n   \
    \ alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164454
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool result = true;\n\tfor\
    \ (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin =\
    \ l[i];\n\t\t}\n\t\telse if (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\t\
    else\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp53xgjlt6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmp53xgjlt6.__unittest_L29_C1() [0x427ff1]

    ??:? void tmp53xgjlt6.__modtest() [0x42811c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\telse if (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\
    \t\telse\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkmo2ingu.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmpkmo2ingu.__unittest_L29_C1() [0x427ff1]

    ??:? void tmpkmo2ingu.__modtest() [0x42811c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long l = l[0];\n    long r = l[0];\n    for(int i = 1; i < l.length;\
    \ i++) \n    {\n        if(l[i] < r) \n        {\n            return false;\n\
    \        }\n        r = l[i];\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppd4maicj.d(9): Error: variable `l` is shadowing variable `tmppd4maicj.monotonic.l`

    /tmp/tmppd4maicj.d(10): Error: only one index allowed to index `long`

    /tmp/tmppd4maicj.d(11): Error: no property `length` for type `long`

    /tmp/tmppd4maicj.d(13): Error: only one index allowed to index `long`

    /tmp/tmppd4maicj.d(17): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppd4maicj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tbool result = true;\n\tfor\
    \ (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < curr)\n\t\t{\n\t\t\tresult\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\telse if (l[i] > curr)\n\t\t{\n\t\t\tresult\
    \ = true;\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurr = l[i];\n\t\t}\n\t\
    }\n\treturn result;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl6xwdo2t.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428355]

    ??:? void tmpl6xwdo2t.__unittest_L31_C1() [0x427f03]

    ??:? void tmpl6xwdo2t.__modtest() [0x4280d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b26a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430389]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b241]

    ??:? runModuleUnitTests [0x42c1ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428818]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif\
    \ (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\
    \t\tmax = l[i];\n\t\t}\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tisDecreasing = false;\n\
    \t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t}\n\t\
    return isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfl8iei89.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283fd]

    ??:? void tmpfl8iei89.__unittest_L34_C1() [0x427faf]

    ??:? void tmpfl8iei89.__modtest() [0x428180]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c47f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b312]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430954]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430431]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e9]

    ??:? runModuleUnitTests [0x42c255]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = 0;\n\tlong min = l[0];\n\tbool isMonotonic = true;\n\t\
    for (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tisMonotonic\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tisMonotonic\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isMonotonic;\n}\nunittest\n{\n\
    \    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7wywds7d.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42832d]

    ??:? void tmp7wywds7d.__unittest_L27_C1() [0x427e40]

    ??:? void tmp7wywds7d.__modtest() [0x4280ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b242]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430884]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430361]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b219]

    ??:? runModuleUnitTests [0x42c185]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tbool isIncreasing = true;\n\tbool isDecreasing\
    \ = true;\n\twhile (i < l.length && j < l.length) \n\t{\n\t\tif (l[i] < l[j])\
    \ \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse if (l[i] > l[j]) \n\t\t\
    {\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\
    \t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164454
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tlong i;\n\tfor(i=1; i<l.length;\
    \ i++){\n\t\tif(l[i] < min){\n\t\t\tmin = l[i];\n\t\t}\n\t\tif(l[i] > max){\n\t\
    \t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp_l0jscu.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpp_l0jscu.__unittest_L22_C1() [0x427f43]

    ??:? void tmpp_l0jscu.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \treturn isMonotonic;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3zc8uunx.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp3zc8uunx.__unittest_L29_C1() [0x427f43]

    ??:? void tmp3zc8uunx.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \tif (min < max)\n\t{\n\t\tisMonotonic = false;\n\t}\n\treturn isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo83gx893.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283a5]

    ??:? void tmpo83gx893.__unittest_L29_C1() [0x427eb8]

    ??:? void tmpo83gx893.__modtest() [0x428124]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c427]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43044d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b291]

    ??:? runModuleUnitTests [0x42c1fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428868]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long l = l[0];\n    long r = l[0];\n    for(int i = 1; i < l.length;\
    \ i++) \n    {\n        if(l[i] < r) \n        {\n            r = l[i];\n    \
    \    }\n        else \n        {\n            if(l[i] > r) \n            {\n \
    \               return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmta9c7rm.d(9): Error: variable `l` is shadowing variable `tmpmta9c7rm.monotonic.l`

    /tmp/tmpmta9c7rm.d(10): Error: only one index allowed to index `long`

    /tmp/tmpmta9c7rm.d(11): Error: no property `length` for type `long`

    /tmp/tmpmta9c7rm.d(13): Error: only one index allowed to index `long`

    /tmp/tmpmta9c7rm.d(15): Error: only one index allowed to index `long`

    /tmp/tmpmta9c7rm.d(19): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmta9c7rm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t{\n\t\t\t\
    max = l[i];\n\t\t}\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\t\
    if (max < min)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n\
    }\n/*\nReturn True is list elements are monotonically increasing or decreasing.\n\
    \                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyiy496_k.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283a5]

    ??:? void tmpyiy496_k.__unittest_L33_C1() [0x427f53]

    ??:? void tmpyiy496_k.__modtest() [0x428124]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c427]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43044d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b291]

    ??:? runModuleUnitTests [0x42c1fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428868]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long max = l[0];\n    long min = l[0];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] > max)\n            max = l[i];\n        if(l[i]\
    \ < min)\n            min = l[i];\n    }\n    return max >= min;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkdql3l_b.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpkdql3l_b.__unittest_L20_C1() [0x427f47]

    ??:? void tmpkdql3l_b.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn min <= max;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8qxh83_d.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp8qxh83_d.__unittest_L24_C1() [0x427f47]

    ??:? void tmp8qxh83_d.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long prev = 0;\n    long curr = l[0];\n    bool isIncreasing = true;\n\
    \    bool isDecreasing = true;\n    for(int i = 1; i < l.length; ++i)\n    {\n\
    \        if(l[i] < curr)\n        {\n            isDecreasing = false;\n     \
    \   }\n        else if(l[i] > curr)\n        {\n            isIncreasing = false;\n\
    \        }\n        else\n        {\n            isDecreasing = true;\n      \
    \      isIncreasing = true;\n        }\n        prev = curr;\n        curr = l[i];\n\
    \    }\n    return isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tfor(int i=1; i<l.length; i++)\n\
    \t{\n\t\tif(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\tif(l[i] < min)\n\
    \t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n{\n\
    \    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73xk7jvy.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmp73xk7jvy.__unittest_L24_C1() [0x427f37]

    ??:? void tmp73xk7jvy.__modtest() [0x428108]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c407]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b29a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43042d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]

    ??:? runModuleUnitTests [0x42c1dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428848]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \tif (min < max)\n\t{\n\t\tisMonotonic = false;\n\t}\n\treturn isMonotonic;\n\
    }\n/*\nReturn True is list elements are monotonically increasing or decreasing.\n\
    \                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqp_ll6og.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283a5]

    ??:? void tmpqp_ll6og.__unittest_L33_C1() [0x427eb8]

    ??:? void tmpqp_ll6og.__modtest() [0x428124]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c427]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43044d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b291]

    ??:? runModuleUnitTests [0x42c1fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428868]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tfor(int i = 1; i < l.length;\
    \ i++) \n\t{\n\t\tif(l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\tif(l[i]\
    \ < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn (max >= min);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqjlx2mzm.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpqjlx2mzm.__unittest_L24_C1() [0x427f37]

    ??:? void tmpqjlx2mzm.__modtest() [0x428108]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c407]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b29a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43042d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]

    ??:? runModuleUnitTests [0x42c1dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428848]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tlong l3 = l[2];\n\tlong l4 =\
    \ l[3];\n\tlong l5 = l[4];\n\tlong l6 = l[5];\n\tlong l7 = l[6];\n\tlong l8 =\
    \ l[7];\n\tlong l9 = l[8];\n\tlong l10 = l[9];\n\tlong l11 = l[10];\n\tlong l12\
    \ = l[11];\n\tlong l13 = l[12];\n\tlong l14 = l[13];\n\tlong l15 = l[14];\n\t\
    long l16 = l[15];\n\tlong l17 = l[16];\n\tlong l18 = l[17];\n\tlong l19 = l[18];\n\
    \tlong l20 = l[19];\n\tlong l21 = l[20];\n\tlong l22 = l[21];\n\tlong l23 = l[22];\n\
    \tlong l24 = l[23];\n\tlong l25 = l[24];\n\tlong l26 = l[25];\n\tlong l27 = l[26];\n\
    \tlong l28 = l[27];\n\tlong l29 = l[28];\n\tlong l30 = l[29];\n\tlong l31 = l[30];\n\
    \tlong l32 = l[31];\n\tlong l33 = l[32];\n\tlong l34 = l[33];\n\tlong l35 = l[34];\n\
    \tlong l36 = l[35];\n\tlong l37 = l[36];\n\tlong l38 = l[37];\n\tlong l39 = l[38];\n\
    \tlong l40 = l[39];\n\tlong l41 = l[40];\n\tlong l42 = l[41];\n\tlong l43 = l[42];\n\
    \tlong l44 = l[43];\n\tlong l45 = l[44];\n\tlong l46 = l[45];\n\tlong l47 = l[46];\n\
    \tlong l48 = l[47];\n\tlong l49 = l[48];\n\tlong l50 = l[49];\n\tlong l51 = l[50];\n\
    \tlong l52 = l[51];\n\tlong l53 = l[52];\n\tlong l54 = l[53];\n\tlong l\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4awynn3f.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmp4awynn3f.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4awynn3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164437
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor(int i = 1; i < l.length; ++i)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin\
    \ = l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\
    \telse\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfy5t_51g.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmpfy5t_51g.__unittest_L29_C1() [0x427ff1]

    ??:? void tmpfy5t_51g.__modtest() [0x42811c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\tfor (int i = 1; i < l.length; i++) \n\t{\n\t\t\
    if (l[i] < curr) \n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse if (l[i]\
    \ > curr) \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse \n\t\t{\n\t\t\t\
    if (isIncreasing && isDecreasing) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t\telse if (isIncreasing) \n\t\t\t{\n\t\t\t\tisIncreasing = false;\n\t\t\t}\n\
    \t\t\telse if (isDecreasing) \n\t\t\t{\n\t\t\t\tisDecreasing = false;\n\t\t\t\
    }\n\t\t}\n\t\tcurr = l[i];\n\t}\n\treturn true;\n}\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu9wig3zk.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x428375]

    ??:? void tmpu9wig3zk.__unittest_L46_C1() [0x427f27]

    ??:? void tmpu9wig3zk.__modtest() [0x4280f8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b28a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43041d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b261]

    ??:? runModuleUnitTests [0x42c1cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428838]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\tlong l = l[0];\n\twhile\
    \ (i < l.length) \n\t{\n\t\twhile (j < l.length && l[j] < l[i]) \n\t\t{\n\t\t\t\
    j++;\n\t\t}\n\t\twhile (k < l.length && l[k] > l[i]) \n\t\t{\n\t\t\tk++;\n\t\t\
    }\n\t\tif (j < k) \n\t\t{\n\t\t\ti = j;\n\t\t\tj = k;\n\t\t}\n\t\telse \n\t\t\
    {\n\t\t\ti = k;\n\t\t\tk = j;\n\t\t}\n\t}\n\treturn (j == l.length);\n}\n/*\n\
    Return True is list elements are monotonically increasing or decreasing.\n   \
    \             \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqq7ezi5w.d(12): Error: variable `l` is shadowing variable `tmpqq7ezi5w.monotonic.l`

    /tmp/tmpqq7ezi5w.d(13): Error: no property `length` for type `long`

    /tmp/tmpqq7ezi5w.d(15): Error: no property `length` for type `long`

    /tmp/tmpqq7ezi5w.d(15): Error: only one index allowed to index `long`

    /tmp/tmpqq7ezi5w.d(15): Error: only one index allowed to index `long`

    /tmp/tmpqq7ezi5w.d(19): Error: no property `length` for type `long`

    /tmp/tmpqq7ezi5w.d(19): Error: only one index allowed to index `long`

    /tmp/tmpqq7ezi5w.d(19): Error: only one index allowed to index `long`

    /tmp/tmpqq7ezi5w.d(34): Error: no property `length` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqq7ezi5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tfor(int i = 1; i < l.length; i++) \n\t{\n\t\tif(l[i]\
    \ < l[i-1]) return false; \n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeppdah2_.d(9): Error: variable `l` is shadowing variable `tmpeppdah2_.monotonic.l`

    /tmp/tmpeppdah2_.d(10): Error: no property `length` for type `long`

    /tmp/tmpeppdah2_.d(12): Error: only one index allowed to index `long`

    /tmp/tmpeppdah2_.d(12): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeppdah2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong i\
    \ = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n =\
    \ 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\
    \tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\t\
    long y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong\
    \ k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p\
    \ = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u =\
    \ 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\
    \tlong w = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\t\
    long m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong\
    \ r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w\
    \ = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong i =\
    \ 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\
    \tlong o = 0;\n\tlong p = 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\t\
    long t = 0;\n\tlong u = 0;\n\tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong\
    \ y = 0;\n\tlong z = 0;\n\tlong w = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k\
    \ = 0;\n\tlong l = 0;\n\tlong m = 0;\n\tlong n = 0;\n\tlong o = 0;\n\tlong p =\
    \ 0;\n\tlong q = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong t = 0;\n\tlong u = 0;\n\
    \tlong v = 0;\n\tlong w = 0;\n\tlong x = 0;\n\tlong y = 0;\n\tlong z = 0;\n\t\
    long w = 0;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong l = 0;\n\tlong\
    \ m = 0;\n\tlong n = 0;\n\t\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6q6yhh5a.d(115): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6q6yhh5a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164439
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tbool isMonotonic = true;\n\t\
    \n\tfor (int i = 2; i < l.length; i++)\n\t{\n\t\tlong l3 = l[i];\n\t\t\n\t\tif\
    \ (l3 > l2)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t\
    if (l3 < l1)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\
    \tl1 = l2;\n\t\tl2 = l3;\n\t}\n\t\n\treturn isMonotonic;\n}\nunittest\n{\n   \
    \ alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpexm2u9jn.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x428325]

    ??:? void tmpexm2u9jn.__unittest_L35_C1() [0x427e3c]

    ??:? void tmpexm2u9jn.__modtest() [0x4280a8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b23a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b211]

    ??:? runModuleUnitTests [0x42c17d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev=l[0];\n\tbool ret=true;\n\tfor(int i=1;i<l.length;i++)\n\
    \t{\n\t\tlong cur=l[i];\n\t\tif(cur<prev)\n\t\t{\n\t\t\tret=false;\n\t\t\tbreak;\n\
    \t\t}\n\t\tprev=cur;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp80m801fe.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282ed]

    ??:? void tmp80m801fe.__unittest_L23_C1() [0x427eed]

    ??:? void tmp80m801fe.__modtest() [0x428070]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c36f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b202]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430395]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430844]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430321]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1d9]

    ??:? runModuleUnitTests [0x42c145]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tfor(int i = 1; i < l.length; i++)\
    \ \n\t{\n\t\tif(l[i] > l[i-1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if(l[i]\
    \ < r) \n\t\t{\n\t\t\tr = l[i];\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n\
    \    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3v4gw8bf.d(9): Error: variable `l` is shadowing variable `tmp3v4gw8bf.monotonic.l`

    /tmp/tmp3v4gw8bf.d(10): Error: only one index allowed to index `long`

    /tmp/tmp3v4gw8bf.d(11): Error: no property `length` for type `long`

    /tmp/tmp3v4gw8bf.d(13): Error: only one index allowed to index `long`

    /tmp/tmp3v4gw8bf.d(13): Error: only one index allowed to index `long`

    /tmp/tmp3v4gw8bf.d(17): Error: only one index allowed to index `long`

    /tmp/tmp3v4gw8bf.d(19): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3v4gw8bf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool result = true;\n\tfor (int\
    \ i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < r)\n\t\t{\n\t\t\tresult = false;\n\
    \t\t\tbreak;\n\t\t}\n\t\tr = l[i];\n\t}\n\treturn result;\n}\nunittest\n{\n  \
    \  alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa4hsgvbl.d(9): Error: variable `l` is shadowing variable `tmpa4hsgvbl.monotonic.l`

    /tmp/tmpa4hsgvbl.d(10): Error: only one index allowed to index `long`

    /tmp/tmpa4hsgvbl.d(12): Error: no property `length` for type `long`

    /tmp/tmpa4hsgvbl.d(14): Error: only one index allowed to index `long`

    /tmp/tmpa4hsgvbl.d(19): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4hsgvbl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i] < min) {\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\tif (min == max)\
    \ {\n\t\treturn false;\n\t}\n\tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i]\
    \ < min || l[i] > max) {\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n\
    }\n/*\nReturn True is list elements are monotonically increasing or decreasing.\n\
    \                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph56dprt3.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x428415]

    ??:? void tmph56dprt3.__unittest_L34_C1() [0x427fc7]

    ??:? void tmph56dprt3.__modtest() [0x428198]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c497]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b32a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43096c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430449]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b301]

    ??:? runModuleUnitTests [0x42c26d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tlong l3 = l[2];\n\tlong l4 =\
    \ l[3];\n\tlong l5 = l[4];\n\tlong l6 = l[5];\n\tlong l7 = l[6];\n\tlong l8 =\
    \ l[7];\n\tlong l9 = l[8];\n\tlong l10 = l[9];\n\tlong l11 = l[10];\n\tlong l12\
    \ = l[11];\n\tlong l13 = l[12];\n\tlong l14 = l[13];\n\tlong l15 = l[14];\n\t\
    long l16 = l[15];\n\tlong l17 = l[16];\n\tlong l18 = l[17];\n\tlong l19 = l[18];\n\
    \tlong l20 = l[19];\n\tlong l21 = l[20];\n\tlong l22 = l[21];\n\tlong l23 = l[22];\n\
    \tlong l24 = l[23];\n\tlong l25 = l[24];\n\tlong l26 = l[25];\n\tlong l27 = l[26];\n\
    \tlong l28 = l[27];\n\tlong l29 = l[28];\n\tlong l30 = l[29];\n\tlong l31 = l[30];\n\
    \tlong l32 = l[31];\n\tlong l33 = l[32];\n\tlong l34 = l[33];\n\tlong l35 = l[34];\n\
    \tlong l36 = l[35];\n\tlong l37 = l[36];\n\tlong l38 = l[37];\n\tlong l39 = l[38];\n\
    \tlong l40 = l[39];\n\tlong l41 = l[40];\n\tlong l42 = l[41];\n\tlong l43 = l[42];\n\
    \tlong l44 = l[43];\n\tlong l45 = l[44];\n\tlong l46 = l[45];\n\tlong l47 = l[46];\n\
    \tlong l48 = l[47];\n\tlong l49 = l[48];\n\tlong l50 = l[49];\n\tlong l51 = l[50];\n\
    \tlong l52 = l[51];\n\tlong l53 = l[52];\n\tlong l54 = l[53];\n\tlong l\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4awynn3f.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmp4awynn3f.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4awynn3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164437
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long i = 0;\n    long j = 0;\n    bool isIncreasing = true;\n  \
    \  bool isDecreasing = true;\n    bool isMonotonic = true;\n    \n    while(i\
    \ < l.length && j < l.length)\n    {\n        if(l[i] < l[j])\n        {\n   \
    \         isIncreasing = false;\n        }\n        else if(l[i] > l[j])\n   \
    \     {\n            isDecreasing = false;\n        }\n        else if(l[i] ==\
    \ l[j])\n        {\n            isMonotonic = false;\n        }\n        i++;\n\
    \        j++;\n    }\n    return isMonotonic;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/19148062)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked if there\
    \ is a way to check if a list is monotonic and I provided a solution. He also\
    \ asked if there is a way to check if a list is monotonic and I provided a solution.\
    \ He also asked if there is a way to check if a list is monotonic and I provided\
    \ a solution. He also asked if there is a way to check if a list is monotonic\
    \ and I provided a solution. He also asked if there is a way to check if a list\
    \ is monotonic and I provided a solution. He also asked if there is a way to check\
    \ if a list is monotonic and I provided a solution. He also asked if there is\
    \ a way to check if a list is monotonic and I provided a solution. He also asked\
    \ if there is a way to check if a list is monotonic and I provided a solution.\
    \ He also asked if there is a way to check if a list is monotonic and I provided\
    \ a solution. He also asked if there is a way to check if a list is monotonic\
    \ and I provided a solution. He also asked if there is a way to check if a list\
    \ is monotonic and I provided a solution. He also asked if there is a way to check\
    \ if a list is monotonic and I provided a solution. He also asked if there is\
    \ a way to check if a list is monotonic and I provided a solution. He also asked\
    \ if there is a way to check if a list is monotonic and I provided a solution.\
    \ He also asked if there is a way to check if a list is monotonic and I provided\
    \ a solution. He also asked if there is a way to check if a list is monotonic\
    \ and I provided a solution. He also asked \nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj53obov5.d(34): Error: declaration expected, not `<`

    /tmp/tmpj53obov5.d(45): Error: declaration expected, not `assert`

    /tmp/tmpj53obov5.d(46): Error: declaration expected, not `assert`

    /tmp/tmpj53obov5.d(47): Error: declaration expected, not `assert`

    /tmp/tmpj53obov5.d(48): Error: declaration expected, not `assert`

    /tmp/tmpj53obov5.d(49): Error: declaration expected, not `assert`

    /tmp/tmpj53obov5.d(50): Error: declaration expected, not `assert`

    /tmp/tmpj53obov5.d(51): Error: declaration expected, not `assert`

    /tmp/tmpj53obov5.d(52): Error: declaration expected, not `assert`

    /tmp/tmpj53obov5.d(53): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj53obov5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor(int i=1; i<l.length; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t\
    \tif(l[i] > max)\n\t\t\tmax = l[i];\n\t\tif(min > max)\n\t\t\tisMonotonic = false;\n\
    \t}\n\treturn isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7y5ztd8r.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp7y5ztd8r.__unittest_L23_C1() [0x427f43]

    ??:? void tmp7y5ztd8r.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool isMonotonic = true;\n\
    \tfor(int i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t{\n\t\t\tmax\
    \ = l[i];\n\t\t}\n\t\telse if(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\
    \telse\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpotmt1l_z.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42838d]

    ??:? void tmpotmt1l_z.__unittest_L29_C1() [0x427fe1]

    ??:? void tmpotmt1l_z.__modtest() [0x42810c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c40f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430435]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]

    ??:? runModuleUnitTests [0x42c1e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428850]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\twhile (i < l.length && j < l.length) \n\t{\n\t\t\
    if (l[i] < l[j]) \n\t\t{\n\t\t\tisIncreasing = false;\n\t\t\tbreak;\n\t\t}\n\t\
    \telse if (l[i] > l[j]) \n\t\t{\n\t\t\tisDecreasing = false;\n\t\t\tbreak;\n\t\
    \t}\n\t\telse \n\t\t{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn isIncreasing\
    \ || isDecreasing;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdnxnszz8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x428365]

    ??:? void tmpdnxnszz8.__unittest_L38_C1() [0x427f17]

    ??:? void tmpdnxnszz8.__modtest() [0x4280e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3e7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b27a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43040d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430399]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b251]

    ??:? runModuleUnitTests [0x42c1bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428828]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isIncreasing = true;\n\
    \tfor(int i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin\
    \ = l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\
    \telse\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t}\n\treturn isIncreasing;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptta3br2k.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42838d]

    ??:? void tmptta3br2k.__unittest_L29_C1() [0x427fe1]

    ??:? void tmptta3br2k.__modtest() [0x42810c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c40f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430435]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]

    ??:? runModuleUnitTests [0x42c1e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428850]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tlong l3 = l[2];\n\tlong l4 =\
    \ l[3];\n\tlong l5 = l[4];\n\tlong l6 = l[5];\n\tlong l7 = l[6];\n\tlong l8 =\
    \ l[7];\n\tlong l9 = l[8];\n\tlong l10 = l[9];\n\tlong l11 = l[10];\n\tlong l12\
    \ = l[11];\n\tlong l13 = l[12];\n\tlong l14 = l[13];\n\tlong l15 = l[14];\n\t\
    long l16 = l[15];\n\tlong l17 = l[16];\n\tlong l18 = l[17];\n\tlong l19 = l[18];\n\
    \tlong l20 = l[19];\n\tlong l21 = l[20];\n\tlong l22 = l[21];\n\tlong l23 = l[22];\n\
    \tlong l24 = l[23];\n\tlong l25 = l[24];\n\tlong l26 = l[25];\n\tlong l27 = l[26];\n\
    \tlong l28 = l[27];\n\tlong l29 = l[28];\n\tlong l30 = l[29];\n\tlong l31 = l[30];\n\
    \tlong l32 = l[31];\n\tlong l33 = l[32];\n\tlong l34 = l[33];\n\tlong l35 = l[34];\n\
    \tlong l36 = l[35];\n\tlong l37 = l[36];\n\tlong l38 = l[37];\n\tlong l39 = l[38];\n\
    \tlong l40 = l[39];\n\tlong l41 = l[40];\n\tlong l42 = l[41];\n\tlong l43 = l[42];\n\
    \tlong l44 = l[43];\n\tlong l45 = l[44];\n\tlong l46 = l[45];\n\tlong l47 = l[46];\n\
    \tlong l48 = l[47];\n\tlong l49 = l[48];\n\tlong l50 = l[49];\n\tlong l51 = l[50];\n\
    \tlong l52 = l[51];\n\tlong l53 = l[52];\n\tlong l54 = l[53];\n\tlong l\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4awynn3f.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmp4awynn3f.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4awynn3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164437
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tfor(int i = 1; i < l.length; i++)\n\
    \t{\n\t\tif(l[i] > r)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if(l[i] < l)\n\
    \t\t{\n\t\t\treturn true;\n\t\t}\n\t\tr = l[i];\n\t}\n\treturn false;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1zqq9uqd.d(9): Error: variable `l` is shadowing variable `tmp1zqq9uqd.monotonic.l`

    /tmp/tmp1zqq9uqd.d(10): Error: only one index allowed to index `long`

    /tmp/tmp1zqq9uqd.d(11): Error: no property `length` for type `long`

    /tmp/tmp1zqq9uqd.d(13): Error: only one index allowed to index `long`

    /tmp/tmp1zqq9uqd.d(17): Error: only one index allowed to index `long`

    /tmp/tmp1zqq9uqd.d(21): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zqq9uqd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long max = 0;\n    long min = 0;\n    for(int i = 0; i < l.length;\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n       \
    \ if(l[i] < min){\n            min = l[i];\n        }\n    }\n    bool isMonotonic\
    \ = true;\n    if(max < min){\n        for(int i = 0; i < l.length; i++){\n  \
    \          if(l[i] > max){\n                isMonotonic = false;\n           \
    \ }\n            if(l[i] < min){\n                isMonotonic = false;\n     \
    \       }\n        }\n    }\n    return isMonotonic;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nI wrote a function that checks if a list is monotonically\
    \ increasing or decreasing. It also checks if it is strictly increasing or strictly\
    \ decreasing.\n<code>\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5dg9xy04.d(32): Error: declaration expected, not `<`

    /tmp/tmp5dg9xy04.d(41): Error: declaration expected, not `assert`

    /tmp/tmp5dg9xy04.d(42): Error: declaration expected, not `assert`

    /tmp/tmp5dg9xy04.d(43): Error: declaration expected, not `assert`

    /tmp/tmp5dg9xy04.d(44): Error: declaration expected, not `assert`

    /tmp/tmp5dg9xy04.d(45): Error: declaration expected, not `assert`

    /tmp/tmp5dg9xy04.d(46): Error: declaration expected, not `assert`

    /tmp/tmp5dg9xy04.d(47): Error: declaration expected, not `assert`

    /tmp/tmp5dg9xy04.d(48): Error: declaration expected, not `assert`

    /tmp/tmp5dg9xy04.d(49): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5dg9xy04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev=l[0];\n\tbool isIncreasing=true;\n\tfor(int i=1;i<l.length;i++)\n\
    \t{\n\t\tlong cur=l[i];\n\t\tif(cur<prev)\n\t\t{\n\t\t\tisIncreasing=false;\n\t\
    \t}\n\t\telse if(cur>prev)\n\t\t{\n\t\t\tisIncreasing=true;\n\t\t}\n\t\tprev=cur;\n\
    \t}\n\treturn isIncreasing;\n}\n/*\nReturn True is list elements are monotonically\
    \ increasing or decreasing.\n                \n*/\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph13mrw8i.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282fd]

    ??:? void tmph13mrw8i.__unittest_L30_C1() [0x427eab]

    ??:? void tmph13mrw8i.__modtest() [0x42807c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c37f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b212]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430854]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430331]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1e9]

    ??:? runModuleUnitTests [0x42c155]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tlong l3 = l[2];\n\tlong l4 =\
    \ l[3];\n\tlong l5 = l[4];\n\tlong l6 = l[5];\n\tlong l7 = l[6];\n\tlong l8 =\
    \ l[7];\n\tlong l9 = l[8];\n\tlong l10 = l[9];\n\tlong l11 = l[10];\n\tlong l12\
    \ = l[11];\n\tlong l13 = l[12];\n\tlong l14 = l[13];\n\tlong l15 = l[14];\n\t\
    long l16 = l[15];\n\tlong l17 = l[16];\n\tlong l18 = l[17];\n\tlong l19 = l[18];\n\
    \tlong l20 = l[19];\n\tlong l21 = l[20];\n\tlong l22 = l[21];\n\tlong l23 = l[22];\n\
    \tlong l24 = l[23];\n\tlong l25 = l[24];\n\tlong l26 = l[25];\n\tlong l27 = l[26];\n\
    \tlong l28 = l[27];\n\tlong l29 = l[28];\n\tlong l30 = l[29];\n\tlong l31 = l[30];\n\
    \tlong l32 = l[31];\n\tlong l33 = l[32];\n\tlong l34 = l[33];\n\tlong l35 = l[34];\n\
    \tlong l36 = l[35];\n\tlong l37 = l[36];\n\tlong l38 = l[37];\n\tlong l39 = l[38];\n\
    \tlong l40 = l[39];\n\tlong l41 = l[40];\n\tlong l42 = l[41];\n\tlong l43 = l[42];\n\
    \tlong l44 = l[43];\n\tlong l45 = l[44];\n\tlong l46 = l[45];\n\tlong l47 = l[46];\n\
    \tlong l48 = l[47];\n\tlong l49 = l[48];\n\tlong l50 = l[49];\n\tlong l51 = l[50];\n\
    \tlong l52 = l[51];\n\tlong l53 = l[52];\n\tlong l54 = l[53];\n\tlong l\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4awynn3f.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmp4awynn3f.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4awynn3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164437
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t{\n\t\t\t\
    max = l[i];\n\t\t}\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\t\
    if (l[i] != max && l[i] != min)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t\
    }\n\treturn isMonotonic;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long l = l[0];\n    for(int i = 1; i < l.length; i++)\n    {\n \
    \       if(l[i] > l)\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmx0_5hyc.d(9): Error: variable `l` is shadowing variable `tmpmx0_5hyc.monotonic.l`

    /tmp/tmpmx0_5hyc.d(10): Error: no property `length` for type `long`

    /tmp/tmpmx0_5hyc.d(12): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmx0_5hyc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isIncreasing = true;\n\t\
    bool isDecreasing = true;\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i]\
    \ < l)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse if (l[i] > r)\n\t\t\
    {\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tisIncreasing = true;\n\
    \t\t\tisDecreasing = true;\n\t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1dmyt0a.d(9): Error: variable `l` is shadowing variable `tmpg1dmyt0a.monotonic.l`

    /tmp/tmpg1dmyt0a.d(10): Error: only one index allowed to index `long`

    /tmp/tmpg1dmyt0a.d(13): Error: no property `length` for type `long`

    /tmp/tmpg1dmyt0a.d(15): Error: only one index allowed to index `long`

    /tmp/tmpg1dmyt0a.d(19): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1dmyt0a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tbool result = true;\n\tfor(int i = 1; i < l.length;\
    \ i++)\n\t{\n\t\tif(l[i-1] > l[i])\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t}\n\
    \treturn result;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo404o4_v.d(9): Error: variable `l` is shadowing variable `tmpo404o4_v.monotonic.l`

    /tmp/tmpo404o4_v.d(11): Error: no property `length` for type `long`

    /tmp/tmpo404o4_v.d(13): Error: only one index allowed to index `long`

    /tmp/tmpo404o4_v.d(13): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo404o4_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = 0;\n\tlong min = l[0];\n\tbool isIncreasing = true;\n\t\
    bool isDecreasing = true;\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i]\
    \ < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse\
    \ if (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t\tisIncreasing = false;\n\t\t\
    }\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg0bb7wdi.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x42838d]

    ??:? void tmpg0bb7wdi.__unittest_L28_C1() [0x427f3f]

    ??:? void tmpg0bb7wdi.__modtest() [0x428110]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c40f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430435]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]

    ??:? runModuleUnitTests [0x42c1e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428850]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong x = 0;\n\tbool isIncreasing = true;\n\tbool isDecreasing = true;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] < x)\n\t\t{\n\t\t\tisIncreasing\
    \ = false;\n\t\t}\n\t\telse if (l[i] > x)\n\t\t{\n\t\t\tisDecreasing = false;\n\
    \t\t}\n\t\tx = l[i];\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg8e9_5zy.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpg8e9_5zy.__unittest_L26_C1() [0x427f3d]

    ??:? void tmpg8e9_5zy.__modtest() [0x4280c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3bf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b252]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430894]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430371]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b229]

    ??:? runModuleUnitTests [0x42c195]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428800]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor(int i=1; i<l.length; i++)\n\
    \t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\
    \t}\n\treturn (min <= max);\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3xd5sdrq.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmp3xd5sdrq.__unittest_L20_C1() [0x427f37]

    ??:? void tmp3xd5sdrq.__modtest() [0x428108]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c407]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b29a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43042d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]

    ??:? runModuleUnitTests [0x42c1dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428848]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tbool result = false;\n\tfor(int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif(l[i] < l)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t\
    }\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n\
    \    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpom9ywn5c.d(9): Error: variable `l` is shadowing variable `tmpom9ywn5c.monotonic.l`

    /tmp/tmpom9ywn5c.d(11): Error: no property `length` for type `long`

    /tmp/tmpom9ywn5c.d(13): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpom9ywn5c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong i = 0;\n\tlong j = 1;\n\tbool result = true;\n\twhile (i < l.length\
    \ && j < l.length) \n\t{\n\t\tif (l[i] < l[j]) \n\t\t{\n\t\t\tresult = false;\n\
    \t\t\tbreak;\n\t\t}\n\t\telse if (l[i] > l[j]) \n\t\t{\n\t\t\tresult = true;\n\
    \t\t\tbreak;\n\t\t}\n\t\ti++;\n\t\tj++;\n\t}\n\treturn result;\n}\n/*\nReturn\
    \ True is list elements are monotonically increasing or decreasing.\n        \
    \        \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6_rcv9ww.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42834d]

    ??:? void tmp6_rcv9ww.__unittest_L33_C1() [0x427e64]

    ??:? void tmp6_rcv9ww.__modtest() [0x4280d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b262]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430381]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b239]

    ??:? runModuleUnitTests [0x42c1a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428810]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n    long min = l[0];\n    long max = l[0];\n    for(int i = 1; i < l.length;\
    \ ++i)\n    {\n        if(l[i] < min)\n            min = l[i];\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return min <= max;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work for me. `monotonic([1,2,3])` returns `true`\
    \ while `monotonic([3,2,1])` returns `false`.\n<|/ c |>\n<| c |>\nThe code works\
    \ fine for me. Try it here: https://ideone.com/uK4YGQ\n<|/ c |>\n<| c |>\nYes,\
    \ it does. I tested it on ideone.com. Maybe you forgot to copy the code from my\
    \ answer? The code I posted is exactly the same as yours.\n<|/ c |>\n<| c |>\n\
    I did copy the code from your answer. Maybe I forgot to copy the code from your\
    \ answer? The code I posted is exactly the same as yours.\n<|/ c |>\n<| c |>\n\
    I tested it on ideone.com. Maybe you forgot to copy the code from my answer? The\
    \ code I posted is exactly the same as yours.\n<|/ c |>\n<| a tags=c++,arrays,algorithm\
    \ |>\nI believe that your algorithm is correct. \nThe only thing that could be\
    \ improved is to use std::min and std::max instead of min and max to save some\
    \ time.\n<|/ a dscore=2 |>\n<| c |>\n`std::min` and `std::max` don't exist in\
    \ C++.\n<|/ c |>\n<| c |>\n: They do in C++11 and later.\n<|/ c |>\n<| c |>\n\
    : Yes, they do in C++11 and later. C++03 doesn't have them.\n<|/ c |>\n<| c |>\n\
    : Yes, they do in C++11 and later. C++03 doesn't have them.\n<|/ c |>\n<| c |>\n\
    : Yes, they do in C++11 and later. C++03 doesn't have them.\n<|/ c |>\n<| a tags=c++,arrays,algorithm\
    \ |>\nI believe that your algorithm is correct. \nThe only thing that could be\
    \ improved is to use std::min and std::max instead of min and max to save some\
    \ time.\n<|/ a dscore=2 |>\n<| c |>\n`std::min` and `std::max` don't exist in\
    \ C++.\n<|/ c \nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp37f7b1wk.d(20): Error: declaration expected, not `<`

    /tmp/tmp37f7b1wk.d(23): Error: unterminated character constant

    /tmp/tmp37f7b1wk.d(42): Error: unterminated character constant

    /tmp/tmp37f7b1wk.d(48): Error: unterminated character constant

    /tmp/tmp37f7b1wk.d(51): Error: unterminated character constant

    /tmp/tmp37f7b1wk.d(54): Error: unterminated character constant

    /tmp/tmp37f7b1wk.d(61): Error: unterminated character constant

    /tmp/tmp37f7b1wk.d(67): Error: declaration expected, not `assert`

    /tmp/tmp37f7b1wk.d(68): Error: declaration expected, not `assert`

    /tmp/tmp37f7b1wk.d(69): Error: declaration expected, not `assert`

    /tmp/tmp37f7b1wk.d(70): Error: declaration expected, not `assert`

    /tmp/tmp37f7b1wk.d(71): Error: declaration expected, not `assert`

    /tmp/tmp37f7b1wk.d(72): Error: declaration expected, not `assert`

    /tmp/tmp37f7b1wk.d(73): Error: declaration expected, not `assert`

    /tmp/tmp37f7b1wk.d(74): Error: declaration expected, not `assert`

    /tmp/tmp37f7b1wk.d(75): Error: unrecognized declaration

    F'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tlong mid = 0;\n\tbool isIncreasing\
    \ = true;\n\tbool isDecreasing = true;\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\
    \t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\tif (l[i] < mid)\n\t\t{\n\t\t\tisDecreasing\
    \ = false;\n\t\t}\n\t\tif (l[i] > mid)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\
    \t}\n\t\tmid = l[i];\n\t}\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpksdg_lfe.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x42844d]

    ??:? void tmpksdg_lfe.__unittest_L36_C1() [0x42804d]

    ??:? void tmpksdg_lfe.__modtest() [0x4281d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b362]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430481]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b339]

    ??:? runModuleUnitTests [0x42c2a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428910]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l1 = l[0];\n\tlong l2 = l[1];\n\tlong l3 = l[2];\n\tlong l4 =\
    \ l[3];\n\tlong l5 = l[4];\n\tlong l6 = l[5];\n\tlong l7 = l[6];\n\tlong l8 =\
    \ l[7];\n\tlong l9 = l[8];\n\tlong l10 = l[9];\n\tlong l11 = l[10];\n\tlong l12\
    \ = l[11];\n\tlong l13 = l[12];\n\tlong l14 = l[13];\n\tlong l15 = l[14];\n\t\
    long l16 = l[15];\n\tlong l17 = l[16];\n\tlong l18 = l[17];\n\tlong l19 = l[18];\n\
    \tlong l20 = l[19];\n\tlong l21 = l[20];\n\tlong l22 = l[21];\n\tlong l23 = l[22];\n\
    \tlong l24 = l[23];\n\tlong l25 = l[24];\n\tlong l26 = l[25];\n\tlong l27 = l[26];\n\
    \tlong l28 = l[27];\n\tlong l29 = l[28];\n\tlong l30 = l[29];\n\tlong l31 = l[30];\n\
    \tlong l32 = l[31];\n\tlong l33 = l[32];\n\tlong l34 = l[33];\n\tlong l35 = l[34];\n\
    \tlong l36 = l[35];\n\tlong l37 = l[36];\n\tlong l38 = l[37];\n\tlong l39 = l[38];\n\
    \tlong l40 = l[39];\n\tlong l41 = l[40];\n\tlong l42 = l[41];\n\tlong l43 = l[42];\n\
    \tlong l44 = l[43];\n\tlong l45 = l[44];\n\tlong l46 = l[45];\n\tlong l47 = l[46];\n\
    \tlong l48 = l[47];\n\tlong l49 = l[48];\n\tlong l50 = l[49];\n\tlong l51 = l[50];\n\
    \tlong l52 = l[51];\n\tlong l53 = l[52];\n\tlong l54 = l[53];\n\tlong l\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4awynn3f.d(64): Error: semicolon expected, not `unittest`

    /tmp/tmp4awynn3f.d(64): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4awynn3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164437
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong minv = l[0];\n\tlong maxv = l[0];\n\tfor(int i = 1; i < l.length;\
    \ i++)\n\t{\n\t\tif(l[i] < minv)\n\t\t{\n\t\t\tminv = l[i];\n\t\t}\n\t\telse if(l[i]\
    \ > maxv)\n\t\t{\n\t\t\tmaxv = l[i];\n\t\t}\n\t}\n\treturn (minv < maxv);\n}\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7t9x7hlx.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42838d]

    ??:? void tmp7t9x7hlx.__unittest_L24_C1() [0x427f3b]

    ??:? void tmp7t9x7hlx.__modtest() [0x42810c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c40f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430435]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]

    ??:? runModuleUnitTests [0x42c1e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428850]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool result = true;\n\tfor(int\
    \ i=1; i<l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\
    \t}\n\t\telse if(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\tresult = false;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqa_6b4v6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42838d]

    ??:? void tmpqa_6b4v6.__unittest_L29_C1() [0x427fe1]

    ??:? void tmpqa_6b4v6.__modtest() [0x42810c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c40f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430435]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]

    ??:? runModuleUnitTests [0x42c1e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428850]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool result = true;\n\tfor\
    \ (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax =\
    \ l[i];\n\t\t}\n\t\telse if (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\t\
    else\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbqz7ro7f.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmpbqz7ro7f.__unittest_L29_C1() [0x427ff1]

    ??:? void tmpbqz7ro7f.__modtest() [0x42811c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ i++)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\n/*\n\
    Return True is list elements are monotonically increasing or decreasing.\n   \
    \             \n*/\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpftqutg9k.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpftqutg9k.__unittest_L28_C1() [0x427f37]

    ??:? void tmpftqutg9k.__modtest() [0x428108]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c407]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b29a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43042d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b271]

    ??:? runModuleUnitTests [0x42c1dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428848]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = 0;\n\tlong min = 1;\n\tbool increasing = true;\n\tbool\
    \ decreasing = true;\n\tfor (int i = 0; i < l.length; ++i)\n\t{\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max && l[i] < min)\n\t\t{\n\t\t\tincreasing\
    \ = false;\n\t\t}\n\t\tif (l[i] < max && l[i] > min)\n\t\t{\n\t\t\tdecreasing\
    \ = false;\n\t\t}\n\t}\n\treturn increasing || decreasing;\n}\nunittest\n{\n \
    \   alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpin1q74p0.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x42842d]

    ??:? void tmpin1q74p0.__unittest_L34_C1() [0x427fdb]

    ??:? void tmpin1q74p0.__modtest() [0x4281ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b342]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430984]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430461]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b319]

    ??:? runModuleUnitTests [0x42c285]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tbool result = true;\n\tfor\
    \ (int i = 1; i < l.length; ++i)\n\t{\n\t\tlong next = l[i];\n\t\tif (curr < next)\n\
    \t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\telse if (curr > next)\n\
    \t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\tprev = curr;\n\t\tcurr =\
    \ next;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfsskfwx1.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428305]

    ??:? void tmpfsskfwx1.__unittest_L30_C1() [0x427e1c]

    ??:? void tmpfsskfwx1.__modtest() [0x428088]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c387]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b21a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43085c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430339]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f1]

    ??:? runModuleUnitTests [0x42c15d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\tfor(int i = 1; i < l.length; i++)\n\t{\n\t\tlong\
    \ next = l[i];\n\t\tif(curr > next)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t\
    }\n\t\telse if(curr < next)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse\
    \ if(curr == next)\n\t\t{\n\t\t\tisIncreasing = true;\n\t\t\tisDecreasing = true;\n\
    \t\t}\n\t\telse if(curr > prev)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t\
    \telse if(curr < prev)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse if(curr\
    \ == prev)\n\t\t{\n\t\t\tisIncreasing = true;\n\t\t\tisDecreasing = true;\n\t\t\
    }\n\t\telse if(curr < prev && curr > next)\n\t\t{\n\t\t\tisIncreasing = false;\n\
    \t\t}\n\t\telse if(curr > prev && curr < next)\n\t\t{\n\t\t\tisDecreasing = false;\n\
    \t\t}\n\t\telse if(curr == prev && curr == next)\n\t\t{\n\t\t\tisIncreasing =\
    \ true;\n\t\t\tisDecreasing = true;\n\t\t}\n\t\telse if(curr < prev && curr >\
    \ next)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse if(curr > prev &&\
    \ curr < next)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse if(curr ==\
    \ prev && curr == next)\n\t\t{\n\t\t\tisIncreasing = true;\n\t\t\tisDecreasing\
    \ = true;\n\t\t}\n\t\telse if(curr < prev && curr > next)\n\t\t{\n\t\t\tisIncreasing\
    \ = false;\n\t\t}\n\t\telse if(curr > prev && curr < next)\n\t\t{\n\t\t\tisDecreasing\
    \ = false;\n\t\t}\n\t\telse if(curr == prev && curr == next)\n\t\t{\n\t\t\tisIncreasing\
    \ = true;\n\t\t\tisDecreasing = true;\n\t\t}\n\t\telse if(curr < prev && curr\
    \ > next)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse if(curr > prev\
    \ && curr < next)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse if(curr\
    \ == prev && curr == next)\n\t\t{\n\t\t\tisIncreasing = true;\n\t\t\tisDecreasing\
    \ = true;\n\t\t}\n\t\telse if(curr < prev && curr > next)\n\t\t{\n\t\t\tisIncreasing\
    \ = false;\n\t\t}\n\t\telse if(curr > prev && curr < next)\n\t\t{\n\t\t\tisDecre\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp52yeg48u.d(101): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp52yeg48u.d(114): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp52yeg48u.d(114): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp52yeg48u.d(114): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52yeg48u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev = 0;\n\tlong curr = l[0];\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif\
    \ (l[i] < curr)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse if (l[i]\
    \ > curr)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\
    break;\n\t\t}\n\t\tprev = curr;\n\t\tcurr = l[i];\n\t}\n\treturn isIncreasing\
    \ || isDecreasing;\n}\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    isMonotonic = false;\n\t\t\tbreak;\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\t\
    isMonotonic = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isMonotonic;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8c74a20g.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428345]

    ??:? void tmp8c74a20g.__unittest_L27_C1() [0x427e58]

    ??:? void tmp8c74a20g.__modtest() [0x4280c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b25a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303ed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43089c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430379]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b231]

    ??:? runModuleUnitTests [0x42c19d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428808]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\t\
    if (l[i] < min)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t\tif (l[i] > max)\n\
    \t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpva3nw632.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283fd]

    ??:? void tmpva3nw632.__unittest_L33_C1() [0x427faf]

    ??:? void tmpva3nw632.__modtest() [0x428180]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c47f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b312]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430954]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430431]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e9]

    ??:? runModuleUnitTests [0x42c255]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\t\
    if (l[i] < min)\n\t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t\tif (l[i] > max)\n\
    \t\t{\n\t\t\tisMonotonic = false;\n\t\t}\n\t}\n\treturn isMonotonic;\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpva3nw632.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283fd]

    ??:? void tmpva3nw632.__unittest_L33_C1() [0x427faf]

    ??:? void tmpva3nw632.__modtest() [0x428180]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c47f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b312]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430954]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430431]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e9]

    ??:? runModuleUnitTests [0x42c255]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if\
    \ (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx8q2r_32.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmpx8q2r_32.__unittest_L24_C1() [0x427f4b]

    ??:? void tmpx8q2r_32.__modtest() [0x42811c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164441
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isMonotonic = true;\n\tfor(int\
    \ i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i] < r)\n\t\t{\n\t\t\tisMonotonic =\
    \ false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = l[i];\n\t\t}\n\t}\n\treturn isMonotonic;\n\
    }\nunittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
    \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n\
    \    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L,\
    \ 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n\
    \    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpog13s3c6.d(9): Error: variable `l` is shadowing variable `tmpog13s3c6.monotonic.l`

    /tmp/tmpog13s3c6.d(10): Error: only one index allowed to index `long`

    /tmp/tmpog13s3c6.d(12): Error: no property `length` for type `long`

    /tmp/tmpog13s3c6.d(14): Error: only one index allowed to index `long`

    /tmp/tmpog13s3c6.d(20): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpog13s3c6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong prev=l[0];\n\tlong cur=l[0];\n\tfor(int i=1;i<l.length;i++)\n\
    \t{\n\t\tif(l[i]<cur)\n\t\t\treturn false;\n\t\telse if(l[i]>cur)\n\t\t{\n\t\t\
    \tprev=cur;\n\t\t\tcur=l[i];\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n   \
    \ alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8zbslptj.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42835d]

    ??:? void tmp8zbslptj.__unittest_L23_C1() [0x427f59]

    ??:? void tmp8zbslptj.__modtest() [0x4280dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428820]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tbool isIncreasing = true;\n\t\
    bool isDecreasing = true;\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i]\
    \ > r)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t}\n\t\telse if (l[i] < r)\n\t\t\
    {\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse if (l[i] == r)\n\t\t{\n\t\t\t\
    isIncreasing = false;\n\t\t\tisDecreasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\
    \t\tisIncreasing = true;\n\t\t\tisDecreasing = true;\n\t\t}\n\t\tr = l[i];\n\t\
    }\n\treturn isIncreasing || isDecreasing;\n}\nunittest\n{\n    alias candidate\
    \ = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2bv_5k.d(9): Error: variable `l` is shadowing variable `tmp4y2bv_5k.monotonic.l`

    /tmp/tmp4y2bv_5k.d(10): Error: only one index allowed to index `long`

    /tmp/tmp4y2bv_5k.d(13): Error: no property `length` for type `long`

    /tmp/tmp4y2bv_5k.d(15): Error: only one index allowed to index `long`

    /tmp/tmp4y2bv_5k.d(19): Error: only one index allowed to index `long`

    /tmp/tmp4y2bv_5k.d(23): Error: only one index allowed to index `long`

    /tmp/tmp4y2bv_5k.d(33): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2bv_5k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isMonotonic = true;\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\t\
    min = l[i];\n\t\t}\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\
    \treturn isMonotonic;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n                \n*/\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3zc8uunx.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmp3zc8uunx.__unittest_L29_C1() [0x427f43]

    ??:? void tmp3zc8uunx.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tbool result = true;\n\tfor(int\
    \ i = 1; i < l.length; ++i)\n\t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\telse if(l[i] > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\tresult = false;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n\
    \    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd2nms69_.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42839d]

    ??:? void tmpd2nms69_.__unittest_L29_C1() [0x427ff1]

    ??:? void tmpd2nms69_.__modtest() [0x42811c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c41f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b289]

    ??:? runModuleUnitTests [0x42c1f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428860]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164441
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong l = l[0];\n\tlong r = l[0];\n\tfor(int i = 1; i < l.length; i++)\n\
    \t{\n\t\tlong x = l[i];\n\t\tif((r - x) > 0)\n\t\t{\n\t\t\treturn false;\n\t\t\
    }\n\t\tr = x;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = monotonic;\n\
    \n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp34hjjb5e.d(9): Error: variable `l` is shadowing variable `tmp34hjjb5e.monotonic.l`

    /tmp/tmp34hjjb5e.d(10): Error: only one index allowed to index `long`

    /tmp/tmp34hjjb5e.d(11): Error: no property `length` for type `long`

    /tmp/tmp34hjjb5e.d(13): Error: only one index allowed to index `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34hjjb5e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164440
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tbool isIncreasing = true;\n\
    \tbool isDecreasing = true;\n\tfor (int i = 1; i < l.length; ++i)\n\t{\n\t\tif\
    \ (l[i] < min)\n\t\t{\n\t\t\tisDecreasing = false;\n\t\t\tmin = l[i];\n\t\t}\n\
    \t\telse if (l[i] > max)\n\t\t{\n\t\t\tisIncreasing = false;\n\t\t\tmax = l[i];\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tisIncreasing = true;\n\t\t\tisDecreasing = true;\n\
    \t\t}\n\t}\n\treturn isIncreasing || isDecreasing;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing or decreasing.\n                \n*/\n\
    unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L,\
    \ 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n   \
    \ assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
    \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n   \
    \ assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeiglkkbs.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283c5]

    ??:? void tmpeiglkkbs.__unittest_L37_C1() [0x427f77]

    ??:? void tmpeiglkkbs.__modtest() [0x428148]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c447]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43046d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43091c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2b1]

    ??:? runModuleUnitTests [0x42c21d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428888]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164441
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n\
    {\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L])\
    \ == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqf0hzvbv.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpqf0hzvbv.__unittest_L24_C1() [0x427f47]

    ??:? void tmpqf0hzvbv.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164438
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong max = l[0];\n\tfor(int i=1; i<l.length; i++)\n\
    \t{\n\t\tif(l[i] < min)\n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\telse if(l[i] > max)\n\
    \t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn (min <= max);\n}\nunittest\n{\n\
    \    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) ==\
    \ true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L,\
    \ 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n\
    \    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L,\
    \ 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
    \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo4gc33i3.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42838d]

    ??:? void tmpo4gc33i3.__unittest_L24_C1() [0x427f3b]

    ??:? void tmpo4gc33i3.__modtest() [0x42810c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c40f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430435]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b279]

    ??:? runModuleUnitTests [0x42c1e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428850]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164441
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn True is list elements\
    \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
    \ l) \n{\n\tlong max = l[0];\n\tlong min = l[0];\n\tfor(int i = 1; i < l.length;\
    \ ++i)\n\t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t\tif(l[i] > max)\n\t\t\t\
    max = l[i];\n\t}\n\treturn (max < min);\n}\nunittest\n{\n    alias candidate =\
    \ monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L,\
    \ 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n\
    \    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L,\
    \ 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n\
    \    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L,\
    \ 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyj3apnk7.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpyj3apnk7.__unittest_L20_C1() [0x427eac]

    ??:? void tmpyj3apnk7.__modtest() [0x428118]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c417]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b2aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b281]

    ??:? runModuleUnitTests [0x42c1ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428858]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164441
