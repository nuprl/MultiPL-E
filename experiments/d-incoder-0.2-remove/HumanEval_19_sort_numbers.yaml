name: HumanEval_19_sort_numbers
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited string\
  \ of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two',\
  \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string\
  \ with numbers sorted from smallest to largest\n        \n*/\nstring sort_numbers(string\
  \ numbers) \n"
tests: "unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\
  \") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"\
  three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four\
  \ seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"\
  six five four three two one zero\") == \"zero one two three four five six\");\n\
  }\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0': result += \"zero\"\
    ; break;\n            case '1': result += \"one\"; break;\n            case '2':\
    \ result += \"two\"; break;\n            case '3': result += \"three\"; break;\n\
    \            case '4': result += \"four\"; break;\n            case '5': result\
    \ += \"five\"; break;\n            case '6': result += \"six\"; break;\n     \
    \       case '7': result += \"seven\"; break;\n            case '8': result +=\
    \ \"eight\"; break;\n            case '9': result += \"nine\"; break;\n      \
    \      default:\n                throw new Exception(\"Invalid input\");\n   \
    \     }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like your solution,\
    \ however it seems like it would be more efficient to just use a `std::map` instead\
    \ of a `std::vector`.\n<|/ c |>\n<| c |>\n: Yes, I agree. `std::map` would be\
    \ more efficient.\n<|/ c |>\n<| c |>\nI agree with you, however I wanted to show\
    \ an alternative to the OP who might not know about `std::map`.\n<|/ c |>\n<|\
    \ c |>\n: I agree, however I wanted to show an alternative to the OP who might\
    \ not know about `std::map`.\n<|/ c |>\n<| c |>\nI agree with you, however I wanted\
    \ to show an alternative to the OP who might not know about `std::map`.\n<|/ c\
    \ |>\n<| a tags=c++,sorting |>\nI like your solution, however it seems like it\
    \ would be more efficient to just use a std::map instead of a std::vector.", "{\n\
    \    string result = \"\";\n    \n    for(int i = 0; i < numbers.size(); i++)\n\
    \    {\n        if(numbers[i] == \"zero\")\n            result += \"0\";\n   \
    \     else if(numbers[i] == \"one\")\n            result += \"1\";\n        else\
    \ if(numbers[i] == \"two\")\n            result += \"2\";\n        else if(numbers[i]\
    \ == \"three\")\n            result += \"3\";\n        else if(numbers[i] == \"\
    four\")\n            result += \"4\";\n        else if(numbers[i] == \"five\"\
    )\n            result += \"5\";\n        else if(numbers[i] == \"six\")\n    \
    \        result += \"6\";\n        else if(numbers[i] == \"seven\")\n        \
    \    result += \"7\";\n        else if(numbers[i] == \"eight\")\n            result\
    \ += \"8\";\n        else if(numbers[i] == \"nine\")\n            result += \"\
    9\";\n        else\n            result += numbers[i];\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>", "{\n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        if(isdigit(c))\n\
    \        {\n            int num = std.atoi(c);\n            int min = num;\n \
    \           int max = num;\n            \n            for(int i = 1; i < numbers.length();\
    \ i++)\n            {\n                if(std.atoi(numbers[i]) < min)\n      \
    \              min = std.atoi(numbers[i]);\n                if(std.atoi(numbers[i])\
    \ > max)\n                    max = std.atoi(numbers[i]);\n            }\n   \
    \         \n            int diff = max - min;\n            \n            for(int\
    \ i = 0; i < diff; i++)\n                result += \"0\";\n            \n    \
    \        result += std.atoi(numbers[numbers.length() - 1]);\n        }\n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm |>\n<|\
    \ c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using strings. I mean the numbers are already in an array and I just need to\
    \ sort them.\n<|/ c |>\n<| c |>\nYes, you can do it without using strings. I'll\
    \ post an example in a minute.\n<|/ c |>\n<| c |>\nI added an example without\
    \ using strings.\n<|/ c |>\n<| c |>\nThanks, I appreciate it!\n<|/ c |>\n<| c\
    \ |>\nI added an example without using strings.\n<|/ c |>\n<| a |>\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>", "{\n\
    \    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,c++\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result += c;\n\
    \                break;\n            default:\n                throw runtime_error(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not\
    \ an answer to the question. He wants to sort a string, not an array.\n<|/ c |>\n\
    <| c |>\nThe question was \"how do I sort a string\", not \"how do I sort an array\"\
    .  I answered the question as asked.\n<|/ c |>\n<| c |>\nThe question was \"how\
    \ do I sort a string\", not \"how do I sort an array\". I answered the question\
    \ as asked.\n<|/ c |>\n<| c |>\nThe question was \"how do I sort a string\", not\
    \ \"how do I sort an array\". I answered the question as asked.\n<|/ c |>\n<|\
    \ c |>\nThe question was \"how do I sort a string\", not \"how do I sort an array\"\
    . I answered the question as asked.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c |>\nI didn't know about this\
    \ function! Thanks!\n<|/ c |>\n<| a tags=sorting,c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    int[] numbers_int = new int[numbers.length()];\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        numbers_int[i] = std.atoi(numbers[i]);\n    }\n    \n \
    \   std.sort(numbers_int, numbers_int.length);\n    \n    string result = \"\"\
    ;\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        result += numbers_int[i]\
    \ + \" \";\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm\
    \ |>\n<| c |>\nI didn't know about std.sort and std.atoi. Thanks for the tip.\n\
    <|/ c |>\n<| c |>\nI added a version that uses std.sort and std.atoi to my answer.\n\
    <|/ c |>\n<| a tags=sorting,c++,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>", "{\n    map<int, int> map;\n    map[0] = 0;\n\
    \    map[1] = 1;\n    map[2] = 2;\n    map[3] = 3;\n    map[4] = 4;\n    map[5]\
    \ = 5;\n    map[6] = 6;\n    map[7] = 7;\n    map[8] = 8;\n    map[9] = 9;\n \
    \   \n    string result = \"\";\n    \n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        int number = std.atoi(numbers[i]);\n        \n        if(map[number]\
    \ == 0)\n        {\n            map[number] = number;\n            result += number\
    \ + \" \";\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\
    #include <string>", "{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        result += numbers[i];\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n\
    <| c |>\nI guess you meant `std::sort` instead of `std::sort2`\n<|/ c |>\n<| c\
    \ |>\n`std::sort2` was a typo, thanks for pointing it out\n<|/ c |>\n<| c |>\n\
    `std::sort` was introduced in C++11 and `std::sort2` was introduced in C++14.\
    \ `std::sort2` was introduced in C++17 and `std::sort3` was introduced in C++20.\
    \ `std::sort` was introduced in C++11 and `std::sort2` was introduced in C++14.\
    \ `std::sort3` was introduced in C++17 and `std::sort4` was introduced in C++20.\
    \ `std::sort` was introduced in C++11 and `std::sort2` was introduced in C++14.\
    \ `std::sort3` was introduced in C++17 and `std::sort4` was introduced in C++20.\
    \ `std::sort` was introduced in C++11 and `std::sort2` was introduced in C++14.\
    \ `std::sort3` was introduced in C++17 and `std::sort4` was introduced in C++20.\
    \ `std::sort` was introduced in C++11 and `std::sort2` was introduced in C++14.\
    \ `std::sort3` was introduced in C++17 and `std::sort4` was introduced in C++20.\
    \ `std::sort` was introduced in C++11 and `std::sort2` was introduced in C++14.\
    \ `std::sort3` was introduced in C++17 and `std::sort4` was introduced in C++20.\
    \ `std::sort` was introduced in C++11 and `std::sort2` was introduced in C++14.\
    \ `std::sort3` was introduced in C++17 and `std::sort4` was introduced in C++20.\
    \ `std::sort` was introduced in C++11 and `std::sort2` was introduced in C++14.\
    \ `std::sort3` was introduced in C++17 and `std::sort4` was introduced in C++20.\
    \ `std::sort` was introduced in C++11 and `std::sort2` was introduced in C++14.\
    \ `std::sort3` was introduced in C++17 and `std::sort4` was introduced in C++20.\
    \ `std::sort` was introduced in C++11 and `std::sort2` was introduced in C++",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid input\");\n\
    \        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with\
    \ `\"one two three four five six seven eight nine\"`.\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it before posting. Try it with `\"one two three four five six seven\
    \ eight nine\"`\n<|/ c |>\n<| c |>\nYes, it works. But it also works with `\"\
    one two three four five six seven eight nine\"`. Try it with `\"one two three\
    \ four five six seven eight nine\"`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try\
    \ it with `\"one two three four five six seven eight nine\"`.\n<|/ c |>\n<| c\
    \ |>\nIt works. I tested it before posting. Try it with `\"one two three four\
    \ five six seven eight nine\"`\n<|/ c |>\n<| a tags=sorting,c++,string |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <string>", "{\n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++\
    \ |>\n<| a tags=sorting,c++ |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <vector>\n#include <string>", "{\n    string result = \"\";\n    foreach(char\
    \ c in numbers)\n    {\n        int number = std.atoi(c);\n        if(number >\
    \ 9) \n        {\n            string temp = std.to_string(number);\n         \
    \   result += temp;\n        }\n        else\n        {\n            result +=\
    \ std.to_string(number);\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| c |>\n`std.to_string` isn't a standard function\
    \ in C++.\n<|/ c |>\n<| c |>\nI didn't know that. Thanks for letting me know.\
    \ I'll update my answer.\n<|/ c |>\n<| c |>\n`std.to_string` isn't a standard\
    \ function in C++. `to_string` is.\n<|/ c |>\n<| c |>\nI didn't know that either.\
    \ Thanks for letting me know. I'll update my answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < numbers.size(); i++)\n    {\n\
    \        result += numbers[i];\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,c++ |>\n<| c |>\nI like your\
    \ solution, but I wonder if there is a way to do this without using std.\n<|/\
    \ c |>\n<| c |>\nI added a solution that doesn't use std.\n<|/ c |>\n<| a tags=sorting,c++\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>", "{\n    string sortedNumbers\
    \ = \"\";\n    \n    for(int i = 0; i < numbers.length(); i++)\n    {\n      \
    \  sortedNumbers += numbers[i];\n    }\n    \n    sortedNumbers = std.sort(sortedNumbers);\n\
    \    \n    return sortedNumbers;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm\
    \ |>\n<| c |>\nThe question states that \"the numbers are already in order\"\n\
    <|/ c |>\n<| c |>\nI missed that part, thanks for pointing it out. I've updated\
    \ my answer.\n<|/ c |>\n<| c |>\nThe question states that \"the numbers are already\
    \ in order\"\n<|/ c |>\n<| c |>\nI missed that part, thanks for pointing it out.\
    \ I've updated my answer.\n<|/ c |>\n<| a tags=sorting,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>",
  "{\n    string sortedNumbers = \"\";\n    \n    foreach(char c in numbers)\n   \
    \ {\n        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                sortedNumbers += c;\n         \
    \       break;\n            default:\n                sortedNumbers += \"0\";\n\
    \                break;\n        }\n    }\n    \n    sortedNumbers = std.sort(sortedNumbers);\n\
    \    \n    return sortedNumbers;\n}", "{\n    \n    string result = \"\";\n  \
    \  \n    foreach(char c in numbers)\n    {\n        \n        switch(c)\n    \
    \    {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        int number = to_integer(c);\n        \n        if(number < 10)\n\
    \        {\n            result += to_string(number);\n        }\n        else\n\
    \        {\n            result += to_string(number % 10);\n        }\n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like\
    \ your solution, but I believe that `std::sort` would be more efficient.\n<|/\
    \ c |>\n<| c |>\nI agree with you, `std::sort` would be more efficient. I've updated\
    \ my answer with my own solution that uses `std::sort`.\n<|/ c |>\n<| c |>\nI\
    \ like your solution, but I believe that `std::sort` would be more efficient.\n\
    <|/ c |>\n<| c |>\nI agree with you, `std::sort` would be more efficient. I've\
    \ updated my answer with my own solution that uses `std::sort`.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `sort` sorts lexicographically,\
    \ not numerically.\n<|/ c |>\n<| c |>\n: You're right. I was thinking of `std::sort`\
    \ which sorts lexicographically. I'll fix my answer.\n<|/ c |>\n<| c |>\n: I fixed\
    \ my answer to sort numerically now.\n<|/ c |>\n<| c |>\n: I fixed my answer to\
    \ sort numerically now.\n<|/ c |>\n<| c |>\n: I fixed my answer to sort numerically\
    \ now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    int[] numbers_int = new int[numbers.length()];\n\
    \    for(int i = 0; i < numbers.length(); i++)\n        numbers_int[i] = std.atoi(numbers[i]);\n\
    \    \n    sort(numbers_int, 0, numbers_int.length);\n    \n    string sorted_numbers\
    \ = \"\";\n    for(int i = 0; i < numbers_int.length; i++)\n        sorted_numbers\
    \ += numbers_int[i] + \" \";\n    \n    return sorted_numbers;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>\nimport java.util.*;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        result\
    \ += numbers[i];\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <string>", "{\n    map<string, int>\
    \ map;\n    map[\"zero\"] = 0;\n    map[\"one\"] = 1;\n    map[\"two\"] = 2;\n\
    \    map[\"three\"] = 3;\n    map[\"four\"] = 4;\n    map[\"five\"] = 5;\n   \
    \ map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n    map[\"eight\"] = 8;\n    map[\"\
    nine\"] = 9;\n    \n    string result = \"\";\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        string number = numbers[i];\n        int number = map[number];\n\
    \        result += number;\n    }\n    \n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,sorting,algorithm |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw runtime_error(\"Invalid input\");\n\
    \        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis doesn't work.\
    \ `sort_numbers(\"one\")` returns `\"one\"`, not `\"10\"`.\n<|/ c |>\n<| c |>\n\
    Yeah, I noticed that after I posted it. I fixed it now. Thanks.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work. `sort_numbers(\"one\")` returns `\"one\"`, not `\"\
    10\"`.\n<|/ c |>\n<| c |>\nIt works. I tested it before posting. What compiler\
    \ are you using?\n<|/ c |>\n<| c |>\nI'm using g++ (GCC) 4.4.7 20120313 (Red Hat\
    \ 4.4.7-4)\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n\
    \            case '0':\n            case '1':\n            case '2':\n       \
    \     case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                throw runtime_error(\"Invalid input\");\n        }\n    }\n \
    \   sort(result.begin(), result.end());\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>", "{\n    string result = \"\";\n    \n\
    \    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n       \
    \     case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27815274)\n\
    <|/ c |>\n<| c |>\nI thought it did provide an answer. He asked how to sort numbers\
    \ in ascending order. He didn't ask for an algorithm to sort numbers. He asked\
    \ how to sort numbers in ascending order. He didn't ask for an algorithm to sort\
    \ numbers. He asked how to sort numbers in ascending order. He didn't ask for\
    \ an algorithm to sort numbers. He asked how to sort numbers in ascending order.\
    \ He didn't ask for an algorithm to sort numbers. He asked how to sort numbers\
    \ in ascending order. He didn't ask for an algorithm to sort numbers. He asked\
    \ how to sort numbers in ascending order. He didn't ask for an algorithm to sort\
    \ numbers. He asked how to sort numbers in ascending order. He didn't ask for\
    \ an algorithm to sort numbers. He asked how to sort numbers in ascending order.\
    \ He didn't ask for an algorithm to sort numbers. He asked how to sort numbers\
    \ in ascending order. He didn't ask for an algorithm to sort numbers. He asked\
    \ how to sort numbers in ascending order. He didn't ask for an algorithm to sort\
    \ numbers. He asked how to sort numbers in ascending order. He didn't ask for\
    \ an algorithm to sort numbers. He asked how to sort numbers in ascending order.\
    \ He didn't ask for an algorithm to sort numbers. He asked how to sort numbers\
    \ in ascending order. He didn't ask for an algorithm to sort numbers. He asked\
    \ how to sort numbers in ascending order. He didn't ask for an algorithm to sort\
    \ numbers. He asked how to sort numbers in ascending order", "{\n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n  \
    \      {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ your solution, but I wouldn't call it \"elegant\". I would call it \"unreadable\"\
    .\n<|/ c |>\n<| c |>\nI agree with you, it's unreadable. I'm just trying to show\
    \ a way to solve the problem without using an array. I'm sure there are other\
    \ ways to solve the problem that would be more elegant.\n<|/ c |>\n<| c |>\nI\
    \ agree with you, it's unreadable. I'm just trying to show a way to solve the\
    \ problem without using an array. I'm sure there are other ways to solve the problem\
    \ that would be more elegant.\n<|/ c |>\n<| c |>\nI agree with you, it's unreadable.\
    \ I'm just trying to show a way to solve the problem without using an array. I'm\
    \ sure there are other ways to solve the problem that would be more elegant.\n\
    <|/ c |>\n<| c |>\nI agree with you, it's unreadable. I'm just trying to show\
    \ a way to solve the problem without using an array. I'm sure there are other\
    \ ways to solve the problem that would be more elegant.\n<|/ c |>\n<| a tags=c++,string,sorting\
    \ |>\nI like your solution, but I wouldn't call it \"elegant\". I would call it\
    \ \"unreadable\".\nI like your solution, but I wouldn't call it \"elegant\". I\
    \ would call it \"unreadable\".\nI like your solution, but I wouldn't call it\
    \ \"elegant\". I would call it \"unreadable\".\nI like your solution, but I wouldn't\
    \ call it \"elegant\". I would call it \"unreadable\".\nI like your solution,\
    \ but I wouldn't call it \"elegant\". I would call it \"unreadable\".\nI like\
    \ your solution, but I wouldn't call it \"elegant\". I would call it \"unreadable\"\
    .\nI like your solution, but I wouldn't call it \"elegant\". I would call ", "{\n\
    \    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n    \
    \    int number = std.atoi(c);\n        \n        if(number < 10)\n        {\n\
    \            result += \"0\";\n        }\n        \n        result += std.to_string(number);\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw runtime_error(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c\
    \ |>\nThanks for your answer. I am not allowed to use any libraries other than\
    \ std.\n<|/ c |>\n<| c |>\nI added a solution without using any libraries.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any libraries\
    \ other than std.\n<|/ c |>\n<| c |>\nI added a solution without using any libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any libraries\
    \ other than std.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        result\
    \ += numbers[i];\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <vector>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    int[] nums = to_int_array(numbers);\n\
    \    sort(nums, nums.length);\n    string result = \"\";\n    for(int i = 0; i\
    \ < nums.length; ++i)\n    {\n        result += to_string(nums[i]);\n    }\n \
    \   return result;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,c++,string |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n\
    \        switch(c)\n        {\n            case '0': result += \"zero\"; break;\n\
    \            case '1': result += \"one\"; break;\n            case '2': result\
    \ += \"two\"; break;\n            case '3': result += \"three\"; break;\n    \
    \        case '4': result += \"four\"; break;\n            case '5': result +=\
    \ \"five\"; break;\n            case '6': result += \"six\"; break;\n        \
    \    case '7': result += \"seven\"; break;\n            case '8': result += \"\
    eight\"; break;\n            case '9': result += \"nine\"; break;\n          \
    \  default: result += \"?\";\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}", "{\n    string result = \"\";\n    \n    foreach(char c\
    \ in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n  \
    \          case '1':\n            case '2':\n            case '3':\n         \
    \   case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw runtime_error(\"\
    Invalid choice\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis\
    \ doesn't answer the question. He wants to sort a string, not an array.\n<|/ c\
    \ |>\n<| c |>\nI believe this does answer the question. He wants to sort a string.\
    \ He doesn't want to sort an array. He wants to sort a string. He doesn't want\
    \ to sort an array. He wants to sort a string. He doesn't want to sort an array.\
    \ He wants to sort a string. He doesn't want to sort an array. He wants to sort\
    \ a string. He doesn't want to sort an array. He wants to sort a string. He doesn't\
    \ want to sort an array. He wants to sort a string. He doesn't want to sort an\
    \ array. He wants to sort a string. He doesn't want to sort an array. He wants\
    \ to sort a string. He doesn't want to sort an array. He wants to sort a string.\
    \ He doesn't want to sort an array. He wants to sort a string. He doesn't want\
    \ to sort an array. He wants to sort a string. He doesn't want to sort an array.\
    \ He wants to sort a string. He doesn't want to sort an array. He wants to sort\
    \ a string. He doesn't want to sort an array. He wants to sort a string. He doesn't\
    \ want to sort an array. He wants to sort a string. He doesn't want to sort an\
    \ array. He wants to sort a string. He doesn't want to sort an array. He wants\
    \ to sort a string. He doesn't want to sort an array. He wants to sort a string.\
    \ He doesn't want to sort an array. He wants to sort a string. He doesn't want\
    \ to sort an array. He wants to sort a string. He doesn't want to sort an array.\
    \ He wants to sort a string. He doesn't want to sort an array. He wants to sort\
    \ a string", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ however it only works with strings of length 9. With strings of length 10, it\
    \ fails. I modified it slightly to work with strings of any length. I'll post\
    \ the code in a minute.\n<|/ c |>\n<| c |>\nI modified the code so that it can\
    \ work with strings of any length.\n<|/ c |>\n<| a tags=sorting,c++,string |>\n\
    I like Jason's solution, but I wanted to see how it could be done without using\
    \ strings. I came up with this solution:\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <cctype>", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw new\
    \ Exception(\"Invalid input\");\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nI like your solution, however I do not understand how it works. I understand\
    \ that it is sorting numbers from smallest to largest, but how does it know to\
    \ only sort numbers from 0 to 9?\n<|/ c |>\n<| c |>\nIt doesn't know to only sort\
    \ numbers from 0 to 9. It knows to sort numbers from 0 to 9 and then from 10 to\
    \ 19 and so on. That's what the `switch` statement is doing. It checks the character\
    \ and if it is a number it adds it to the result string. If it's not a number\
    \ it throws an exception.\n<|/ c |>\n<| c |>\nI see, thank you for the explanation.\
    \ I am still a little confused though. How does it know to only sort numbers from\
    \ 0 to 9? I thought it was sorting numbers from smallest to largest.\n<|/ c |>\n\
    <| c |>\nIt doesn't know to only sort numbers from 0 to 9. It knows to sort numbers\
    \ from 0 to 9 and then from 10 to 19 and so on. That's what the `switch` statement\
    \ is doing. It checks the character and if it is a number it adds it to the result\
    \ string. If it's not a number it throws an exception.\n<|/ c |>\n<| c |>\nOkay,\
    \ I understand now. Thank you for the explanation!\n<|/ c |>\n<| a tags=sorting,c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result = result + c;\n\
    \                break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    \n    string sortedNumbers = result;\n\
    \    \n    for(int i = 0; i < sortedNumbers.length(); i++)\n    {\n        char\
    \ c = sortedNumbers[i];\n        \n        for(int j = i + 1; j < sortedNumbers.length();\
    \ j++)\n        {\n            char d = sortedNumbers[j];\n            \n    \
    \        if(c < d)\n            {\n                char temp = c;\n          \
    \      c = d;\n                d = temp;\n            }\n        }\n        \n\
    \        sortedNumbers[i] = c;\n    }\n    \n    return sortedNumbers;\n}\n</code>\n\
    <|/ a tags=sorting,c++,algorithm |>\n<| c |>\nThis doesn't work. Try it with `\"\
    1 2 3 4 5 6 7 8 9\"`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a\
    \ test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ a test case to my answer.\n<|/ c |>\n<| a |>\nThis can be done in O(n) time\
    \ complexity using std::sort and std::stable_sort:\n<code>\n#include <algorithm>\n\
    #include <iostream>\n#include <vector>\n#include <string>", "{\n    int[] numbers_int\
    \ = new int[numbers.length()];\n    for(int i = 0; i < numbers.length(); i++)\n\
    \    {\n        numbers_int[i] = std.atoi(numbers[i]);\n    }\n    \n    for(int\
    \ i = 0; i < numbers_int.length; i++)\n    {\n        for(int j = i + 1; j < numbers_int.length;\
    \ j++)\n        {\n            if(numbers_int[i] > numbers_int[j])\n         \
    \   {\n                int temp = numbers_int[i];\n                numbers_int[i]\
    \ = numbers_int[j];\n                numbers_int[j] = temp;\n            }\n \
    \       }\n    }\n    \n    string sorted_numbers = \"\";\n    for(int i = 0;\
    \ i < numbers_int.length; i++)\n    {\n        sorted_numbers += numbers_int[i]\
    \ + \" \";\n    }\n    \n    return sorted_numbers;\n}\n</code>\n<|/ a tags=sorting,c++,arrays\
    \ |>\n<| c |>\nI like your solution, but I feel like it could be improved. For\
    \ example, why not just use `std::sort`? Also, why not use `std::vector`?\n<|/\
    \ c |>\n<| c |>\nI agree with you, std::sort would be a better solution. I am\
    \ just trying to solve the problem as stated above. Also, std::vector would be\
    \ a better solution as well. I am just trying to solve the problem as stated above.\
    \ Also, std::vector would be a better solution as well. I am just trying to solve\
    \ the problem as stated above. Also, std::vector would be a better solution as\
    \ well. I am just trying to solve the problem as stated above. Also, std::vector\
    \ would be a better solution as well. I am just trying to solve the problem as\
    \ stated above. Also, std::vector would be a better solution as well. I am just\
    \ trying to solve the problem as stated above. Also, std::vector would be a better\
    \ solution as well. I am just trying to solve the problem as stated above. Also,\
    \ std::vector would be a better solution as well. I am just trying to solve the\
    \ problem as stated above.\n<|/ c |>\n<| c |>\nI agree with you, std::sort would\
    \ be a better solution. I am just trying to solve the problem as stated above.\
    \ Also, std::vector would be a better solution as well. I am just trying to solve\
    \ the problem as stated above. Also, std::vector would be a better solution as\
    \ well. I am just trying to solve the problem as stated above. Also, std::vector\
    \ would be a better solution as well. I am just trying to solve the problem as\
    \ stated above. Also, std::vector would be a better solution as well. I am just\
    \ trying to solve the problem as stated above. Also, std::vector would be a better\
    \ solution as ", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid input\");\n\
    \        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nThis doesn't\
    \ work. `sort` expects a `char*`, not a `string`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used the exact code you posted. I used the exact input you\
    \ posted. I used the exact output you posted. I used the exact input you posted.\
    \ I used the exact output you posted. I used the exact input you posted. I used\
    \ the exact output you posted. I used the exact input you posted. I used the exact\
    \ output you posted. I used the exact input you posted. I used the exact output\
    \ you posted. I used the exact input you posted. I used the exact output you posted.\
    \ I used the exact input you posted. I used the exact output you posted. I used\
    \ the exact input you posted. I used the exact output you posted. I used the exact\
    \ input you posted. I used the exact output you posted. I used the exact input\
    \ you posted. I used the exact output you posted. I used the exact input you posted.\
    \ I used the exact output you posted. I used the exact input you posted. I used\
    \ the exact output you posted. I used the exact input you posted. I used the exact\
    \ output you posted. I used the exact input you posted. I used the exact output\
    \ you posted. I used the exact input you posted. I used the exact output you posted.\
    \ I used the exact input you posted. I used the exact output you posted. I used\
    \ the exact input you posted. I used the exact output you posted. I used the exact\
    \ input you posted. I used the exact output you posted. I used the exact input\
    \ you posted. I used the exact output you posted. I used the exact input you posted.\
    \ I used the exact output you posted. I used the exact input you posted. I used\
    \ the exact output you posted. I used the exact input you posted. I used the exact\
    \ output you ", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0': result += \"zero\"; break;\n            case\
    \ '1': result += \"one\"; break;\n            case '2': result += \"two\"; break;\n\
    \            case '3': result += \"three\"; break;\n            case '4': result\
    \ += \"four\"; break;\n            case '5': result += \"five\"; break;\n    \
    \        case '6': result += \"six\"; break;\n            case '7': result +=\
    \ \"seven\"; break;\n            case '8': result += \"eight\"; break;\n     \
    \       case '9': result += \"nine\"; break;\n            default: result += c;\
    \ break;\n        }\n    }\n    sort(result.begin(), result.end());\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result = result + c;\n                break;\n       \
    \     default:\n                break;\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm\
    \ |>\n<| c |>\nThis is not an answer to the question. He wants to sort a string,\
    \ not an array of numbers.\n<|/ c |>\n<| c |>\nI see what you're saying. I misunderstood\
    \ the question. I'll edit my answer.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a solution that sorts a string.\n<|/ c |>\n<| c |>\nI see what you mean\
    \ now. Thanks for clarifying.\n<|/ c |>\n<| c |>\nI see what you mean now. Thanks\
    \ for clarifying.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <string>", "{\n    map<string, int> map;\n    map[\"zero\"\
    ] = 0;\n    map[\"one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n\
    \    map[\"four\"] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"\
    seven\"] = 7;\n    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        int num\
    \ = map[c];\n        result += to_string(num);\n    }\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n\
    \        int number = std.atoi(c);\n        \n        if(number < 10)\n      \
    \  {\n            result += number;\n        }\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. Try `sort_numbers(\"-2 -3 -5 0 1 2 3 4 5 6 7 8 9\")`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the negative number issue. Thanks for pointing that out.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `sort_numbers(\"\
    -2 -3 -5 0 1 2 3 4 5 6 7 8 9\")`.\n<|/ c |>\n<| c |>\nI fixed the negative number\
    \ issue. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. Try `sort_numbers(\"-2 -3 -5 0 1 2 3 4 5 6 7 8 9\")`.\n<|/\
    \ c |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>", "{\n    string result = \"\";\n    \n\
    \    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n       \
    \     case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        if(isdigit(c))\n        {\n            int number =\
    \ std.atoi(c);\n            \n            if(number < 10)\n            {\n   \
    \             result += number;\n            }\n            else\n           \
    \ {\n                result += \"0\" + number;\n            }\n        }\n   \
    \     else\n        {\n            result += c;\n        }\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\nimport java.util.*;\nimport\
    \ java.lang.*;\nimport java.io.*;\nclass Ideone\n{\n    public static void main\
    \ (String[] args) throws java.lang.Exception\n    {\n        Scanner sc = new\
    \ Scanner(System.in);\n        System.out.println(\"Enter the number\");\n   \
    \     int n = sc.nextInt();\n        sc.close();\n        \n        for(int i=0;i<n;i++)\n\
    \        {\n            int x = sc.nextInt();\n            if(x>9)\n         \
    \   {\n                System.out.println(x);\n            }\n            else\n\
    \            {\n                System.out.println(x+0);\n            }\n    \
    \    }\n    }\n}\n</code>\n<|/ a dscore=0 tags=java |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.*;\nimport java.lang.*;\nimport java.io.*;\nclass Ideone\n{\n\
    \    public static void main (String[] args) throws java.lang.Exception\n    {\n\
    \        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter\
    \ the number\");\n        int n = sc.nextInt();\n        sc.close();\n       \
    \ \n        for(int i=0;i<n;i++)\n        {\n            int x = sc.nextInt();\n\
    \            if(x>9)\n            {\n                System.out.println(x);\n\
    \            }\n            else\n            {\n                System.out.println(x+0);\n\
    \            }\n        }\n    }\n}\n</code>\n<|/ a tags=java |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\nclass\
    \ Ideone\n{\n    public static void main (String[] args) throws java.lang.Exception\n\
    \    {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"\
    Enter the number\");\n        int n = sc.nextInt();\n        sc.close();\n   \
    \     \n        for(int i=0;i<n;i++)\n        {\n            int x = sc.nextInt();\n\
    \            if(x>9)\n            {\n                System.out.println(x);\n\
    \            }\n            else\n            {\n                System.out.println(x+0);\n\
    \            }\n        }\n    }\n}\n</code>\n<|/ a tags=java |>\n<| c |>\nPlease\
    \ add ", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nThis\
    \ doesn't work if you have a string like \"10\" because it will sort \"10\" before\
    \ \"2\"\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if you have a string like \"10\" because it\
    \ will sort \"10\" before \"2\"\n<|/ c |>\n<| c |>\nIt doesn't work if you have\
    \ a string like \"10\" because it will sort \"10\" before \"2\"\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work if you have a string like \"10\" because it will sort\
    \ \"10\" before \"2\"\n<|/ c |>\n<| a tags=c++,sorting,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n \
    \   {\n        if(numbers[i] == 'nine')\n        {\n            result += numbers[i];\n\
    \        }\n        else\n        {\n            result += numbers[i] + \" \"\
    ;\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer. Unfortunately\
    \ I cannot use any library functions. I only can use std.algorithm.\n<|/ c |>\n\
    <| c |>\nI added a solution that uses std.algorithm.\n<|/ c |>\n<| c |>\nThank\
    \ you for your answer. Unfortunately I cannot use any library functions. I only\
    \ can use std.algorithm.\n<|/ c |>\n<| c |>\nI added a solution that uses std.algorithm.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nstring sort_numbers(string numbers) \n{\n\
    \    string result = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n  \
    \  {\n        if(numbers[i] == 'nine')\n        {\n            result += numbers[i];\n\
    \        }\n        else\n        {\n            result += numbers[i] + \" \"\
    ;\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThank you for your answer. Unfortunately\
    \ I cannot use any library functions. I only can use std.algorithm.\n<|/ c |>\n\
    <| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    foreach(char\
    \ c in numbers)\n    {\n        int number = std.atoi(c);\n        if(number >\
    \ 9)\n        {\n            string tmp = std.format(\"%0d\", number);\n     \
    \       result += tmp;\n        }\n        else\n        {\n            result\
    \ += std.format(\"%0d\", number);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=sorting,c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nI like this solution, although it does require a lot of extra code\
    \ (as opposed to just using std::sort).\n<|/ c |>\n<| c |>\nI agree, it's more\
    \ code, but it's also more flexible and extensible. For example, if you wanted\
    \ to sort by any arbitrary criteria, you could just add a new case to the switch\
    \ statement and sort by that criteria.\n<|/ c |>\n<| c |>\nI agree with you, it's\
    \ more flexible and extensible. But the extra code is not that much. Just a couple\
    \ of lines of code (which I believe is still better than std::sort).\n<|/ c |>\n\
    <| c |>\nI agree with you, it's more flexible and extensible. But the extra code\
    \ is not that much. Just a couple of lines of code (which I believe is still better\
    \ than std::sort).\n<|/ c |>\n<| c |>\nI agree with you, it's more flexible and\
    \ extensible. But the extra code is not that much. Just a couple of lines of code\
    \ (which I believe is still better than std::sort).\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\n#include <algorithm>\n#include <iostream>\n#include <vector>", "{\n  \
    \  string result = \"\";\n    foreach(char c in numbers)\n    {\n        result\
    \ += std.string.format(\"%c\", std.to_integer(c));\n    }\n    sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c |>\nI\
    \ like your solution, but I wonder if it would be faster to use `std::map` instead\
    \ of `std::vector`?\n<|/ c |>\n<| c |>\nI haven't benchmarked it, but I suspect\
    \ that `std::map` would be faster, since it requires less memory allocation. Also,\
    \ `std::map` would allow you to easily convert between strings and integers, which\
    \ is useful if you need to do any arithmetic on the numbers.\n<|/ c |>\n<| c |>\n\
    I agree with you. `std::map` would be better. But the OP asked for a solution\
    \ without using STL. :)\n<|/ c |>\n<| c |>\nI agree with you, but I wonder if\
    \ it would be faster to use `std::map` instead of `std::vector`?\n<|/ c |>\n<|\
    \ c |>\nI haven't benchmarked it, but I suspect that `std::map` would be faster,\
    \ since it requires less memory allocation. Also, `std::map` would allow you to\
    \ easily convert between strings and integers, which is useful if you need to\
    \ do any arithmetic on the numbers.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    int[]\
    \ numbers_int = new int[numbers.length()];\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        numbers_int[i] = std.atoi(numbers[i]);\n    }\n    \n \
    \   sort(numbers_int, numbers_int.length);\n    \n    string result = \"\";\n\
    \    for(int i = 0; i < numbers.length(); i++)\n    {\n        result += numbers_int[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport\
    \ java.util.stream.Collectors;\nimport java.util.stream.IntStream;", "{\n    string\
    \ result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n \
    \       {\n            case '0': result += \"zero\"; break;\n            case\
    \ '1': result += \"one\"; break;\n            case '2': result += \"two\"; break;\n\
    \            case '3': result += \"three\"; break;\n            case '4': result\
    \ += \"four\"; break;\n            case '5': result += \"five\"; break;\n    \
    \        case '6': result += \"six\"; break;\n            case '7': result +=\
    \ \"seven\"; break;\n            case '8': result += \"eight\"; break;\n     \
    \       case '9': result += \"nine\"; break;\n            default: result += \"\
    ?\";\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=c++,sorting,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n \
    \   foreach(char c in numbers)\n    {\n        switch(c)\n        {\n        \
    \    case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw new Exception(\"Invalid number\");\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n    \
    \    switch(c)\n        {\n            case '0':\n            case '1':\n    \
    \        case '2':\n            case '3':\n            case '4':\n           \
    \ case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }", "{\n    int[] numbers_int;\n    \n    numbers_int = new int[numbers.length()];\n\
    \    for(int i = 0; i < numbers.length(); i++)\n    {\n        numbers_int[i]\
    \ = std.atoi(numbers[i]);\n    }\n    \n    sort(numbers_int, numbers_int.length);\n\
    \    \n    string result = \"\";\n    for(int i = 0; i < numbers_int.length; i++)\n\
    \    {\n        result += numbers_int[i] + \" \";\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| a tags=c++,sorting |>\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;",
  "{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.length(); i++)\n\
    \    {\n        string num = numbers[i];\n        \n        if(num == \"zero\"\
    )\n        {\n            result += \"0\";\n        }\n        else if(num ==\
    \ \"one\")\n        {\n            result += \"1\";\n        }\n        else if(num\
    \ == \"two\")\n        {\n            result += \"2\";\n        }\n        else\
    \ if(num == \"three\")\n        {\n            result += \"3\";\n        }\n \
    \       else if(num == \"four\")\n        {\n            result += \"4\";\n  \
    \      }\n        else if(num == \"five\")\n        {\n            result += \"\
    5\";\n        }\n        else if(num == \"six\")\n        {\n            result\
    \ += \"6\";\n        }\n        else if(num == \"seven\")\n        {\n       \
    \     result += \"7\";\n        }\n        else if(num == \"eight\")\n       \
    \ {\n            result += \"8\";\n        }\n        else if(num == \"nine\"\
    )\n        {\n            result += \"9\";\n        }\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for me. I\
    \ get an error saying \"expected a declaration\" at the line \"string sort_numbers(string\
    \ numbers)\"\n<|/ c |>\n<| c |>\nI edited my answer to include a full working\
    \ program. Make sure you copy the code exactly as it is and save it as \"main.dart\"\
    \n<|/ c |>\n<| c |>\nI did exactly as you said and I still get the same error.\
    \ I'm running it on DartPad\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a full working program. Make sure you copy the code exactly as it is and save\
    \ it as \"main.dart\"\n<|/ c |>\n<| c |>\nI still get the same error. I'm running\
    \ it on DartPad\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport 'dart:io';", "{\n\
    \    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n\
    <| c |>\nI like your solution. Very elegant. Thanks!\n<|/ c |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <vector>\nusing namespace std;", "{\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "{\n    map<string, int> numbers_map;\n\
    \    foreach(char c in numbers)\n    {\n        numbers_map[c] = numbers_map[c]\
    \ + 1;\n    }\n    map<string, int>::iterator it;\n    map<string, int>::iterator\
    \ it2;\n    map<string, int>::iterator it3;\n    map<string, int>::iterator it4;\n\
    \    map<string, int>::iterator it5;\n    map<string, int>::iterator it6;\n  \
    \  map<string, int>::iterator it7;\n    map<string, int>::iterator it8;\n    map<string,\
    \ int>::iterator it9;\n    map<string, int>::iterator it10;\n    map<string, int>::iterator\
    \ it11;\n    map<string, int>::iterator it12;\n    map<string, int>::iterator\
    \ it13;\n    map<string, int>::iterator it14;\n    map<string, int>::iterator\
    \ it15;\n    map<string, int>::iterator it16;\n    map<string, int>::iterator\
    \ it17;\n    map<string, int>::iterator it18;\n    map<string, int>::iterator\
    \ it19;\n    map<string, int>::iterator it20;\n    map<string, int>::iterator\
    \ it21;\n    map<string, int>::iterator it22;\n    map<string, int>::iterator\
    \ it23;\n    map<string, int>::iterator it24;\n    map<string, int>::iterator\
    \ it25;\n    map<string, int>::iterator it26;\n    map<string, int>::iterator\
    \ it27;\n    map<string, int>::iterator it28;\n    map<string, int>::iterator\
    \ it29;\n    map<string, int>::iterator it30;\n    map<string, int>::iterator\
    \ it31;\n    map<string, int>::iterator it32;\n    map<string, int>::iterator\
    \ it33;\n    map<string, int>::iterator it34;\n    map<string, int>::iterator\
    \ it35;\n    map<string, int>::iterator it36;\n    map<string, int>::iterator\
    \ it37;\n    map<string, int>::iterator it38;\n    map<string, int>::iterator\
    \ it39;\n    map<string, int>::iterator it40;\n    map<string, int>::iterator\
    \ it41;\n    map<string, int>::iterator it42;\n    map<string, int>::iterator\
    \ it43;\n    map<string, int>::iterator it44;\n    map<string, int>::iterator\
    \ it45", "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n\
    \        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result = result + c;\n        \
    \        break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n    \
    \    switch(c)\n        {\n            case '0':\n            case '1':\n    \
    \        case '2':\n            case '3':\n            case '4':\n           \
    \ case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result = result + c;\n               \
    \ break;\n            default:\n                throw new Exception(\"Invalid\
    \ input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to sort a string, not an array. He wants to sort\
    \ a string, not an array. He wants to sort a string, not an array. He wants to\
    \ sort a string, not an array. He wants to sort a string, not an array. He wants\
    \ to sort a string, not an array. He wants to sort a string, not an array. He\
    \ wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort a string, not an array. He wants to sort a string, not an array.\
    \ He wants to sort ", "{\n    string result = \"\";\n    \n    foreach(char c\
    \ in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n  \
    \          case '1':\n            case '2':\n            case '3':\n         \
    \   case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result = result\
    \ + c;\n                break;\n            default:\n                throw new\
    \ Exception(\"Invalid input\");\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nThis code doesn't compile. `sort` doesn't exist in C++.\n<|/ c\
    \ |>\n<| c |>\nI didn't realize that `sort` was a function in C++. I've updated\
    \ my answer to include a solution that uses `std::sort`.\n<|/ c |>\n<| c |>\n\
    `std::sort` doesn't exist in C++.\n<|/ c |>\n<| c |>\nI didn't realize that `sort`\
    \ was a function in C++. I've updated my answer to include a solution that uses\
    \ `std::sort`.\n<|/ c |>\n<| c |>\nI didn't realize that `sort` was a function\
    \ in C++. I've updated my answer to include a solution that uses `std::sort`.\n\
    <|/ c |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n \
    \   \n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n  \
    \          case '0':\n            case '1':\n            case '2':\n         \
    \   case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result = result + c;\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid input\");\n        }\n    }\n \
    \   \n    sort(result.begin(), result.end());\n    \n    return result;\n}", "{\n\
    \    int[] nums = to<int>(numbers);\n    sort(nums, nums + nums.length);\n   \
    \ return to<string>(nums);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for\
    \ me. I'm getting \"Error: template std.algorithm.sort is not generic\" when I\
    \ try to compile it.\n<|/ c |>\n<| c |>\nI used the code from your question and\
    \ added a test case to my answer. Can you post the code you're using to compile\
    \ it?\n<|/ c |>\n<| c |>\nI used the code from your question and added a test\
    \ case to my answer. Can you post the code you're using to compile it?\n<|/ c\
    \ |>\n<| c |>\nI used the code from your question and added a test case to my\
    \ answer. Can you post the code you're using to compile it?\n<|/ c |>\n<| c |>\n\
    I used the code from your question and added a test case to my answer. Can you\
    \ post the code you're using to compile it?\n<|/ c |>\n<| a tags=sorting,c++,stl,algorithm\
    \ |>\nI believe that std::sort is what you are looking for. \n<code>\n#include\
    \ <algorithm>\n#include <vector>\n#include <iostream>\n#include <string>", "{\n\
    \    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    int[] nums = toints(numbers);\n    sort(nums, 0, nums.length - 1);\n    string\
    \ result = \"\";\n    for(int i = 0; i < nums.length; i++)\n        result +=\
    \ to_string(nums[i]);\n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"1 2 3 4 5 6 7 8 9\
    \ 10\"\n<|/ c |>\n<| c |>\n: I didn't see that requirement. I've updated my answer\
    \ to handle that case.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"1 2 3 4 5 6 7 8 9 10\"\n<|/ c |>\n<| c |>\n: I didn't see that requirement.\
    \ I've updated my answer to handle that case.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"1 2 3 4 5 6 7 8 9 10\"\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include\
    \ <string>", "{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        result += numbers[i];\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n\
    <| c |>\n`std::sort` doesn't work with `std::string`\n<|/ c |>\n<| c |>\nI know,\
    \ but I didn't want to change his code too much. He could just use `std::to_string`\
    \ instead of `std::to_string` but that would require a lot of changes to the rest\
    \ of the code\n<|/ c |>\n<| c |>\nI didn't want to change his code too much, but\
    \ I guess I should have. Thanks for your help.\n<|/ c |>\n<| c |>\nI didn't want\
    \ to change his code too much, but I guess I should have. Thanks for your help.\n\
    <|/ c |>\n<| c |>\nI didn't want to change his code too much, but I guess I should\
    \ have. Thanks for your help.\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        if(isdigit(c))\n        {\n            int number = std.atoi(c);\n\
    \            result += std.tostring(number);\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `std.atoi` returns 0 for negative numbers. `std.tostring` doesn't work\
    \ for negative numbers. `std.tostring` doesn't work for negative numbers. `std.tostring`\
    \ doesn't work for negative numbers. `std.tostring` doesn't work for negative\
    \ numbers. `std.tostring` doesn't work for negative numbers. `std.tostring` doesn't\
    \ work for negative numbers. `std.tostring` doesn't work for negative numbers.\
    \ `std.tostring` doesn't work for negative numbers. `std.tostring` doesn't work\
    \ for negative numbers. `std.tostring` doesn't work for negative numbers. `std.tostring`\
    \ doesn't work for negative numbers. `std.tostring` doesn't work for negative\
    \ numbers. `std.tostring` doesn't work for negative numbers. `std.tostring` doesn't\
    \ work for negative numbers. `std.tostring` doesn't work for negative numbers.\
    \ `std.tostring` doesn't work for negative numbers. `std.tostring` doesn't work\
    \ for negative numbers. `std.tostring` doesn't work for negative numbers. `std.tostring`\
    \ doesn't work for negative numbers. `std.tostring` doesn't work for negative\
    \ numbers. `std.tostring` doesn't work for negative numbers. `std.tostring` doesn't\
    \ work for negative numbers. `std.tostring` doesn't work for negative numbers.\
    \ `std.tostring` doesn't work for negative numbers. `std.tostring` doesn't work\
    \ for negative numbers. `std.tostring` doesn't work for negative numbers. `std.tostring`\
    \ doesn't work for negative numbers. `std.tostring` doesn't work for negative\
    \ numbers. `std.tostring` doesn't work for negative numbers. `std.tostring` doesn't\
    \ work for negative numbers. `std.tostring` doesn't work for negative numbers.\
    \ `std.tostring` doesn't work for negative numbers. `std.tostring` doesn't work\
    \ for negative numbers. `std.tostring` doesn't work for negative numbers. `std.tostring`\
    \ doesn't work for negative numbers. `std.tostring` doesn't work for negative\
    \ numbers. `std.tostring` doesn't work for negative numbers. `std.tostring` doesn't\
    \ work for negative numbers. `std.tostring` doesn't work for negative ", "{\n\
    \    string result = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n  \
    \  {\n        string number = numbers[i];\n        string numberString = number.to_string();\n\
    \        string numberString2 = numberString.substr(0, numberString.length() -\
    \ 1);\n        string numberString3 = numberString2.to_string();\n        string\
    \ numberString4 = numberString3.substr(0, numberString3.length() - 1);\n     \
    \   string numberString5 = numberString4.to_string();\n        string numberString6\
    \ = numberString5.substr(0, numberString5.length() - 1);\n        string numberString7\
    \ = numberString6.to_string();\n        string numberString8 = numberString7.substr(0,\
    \ numberString7.length() - 1);\n        string numberString9 = numberString8.to_string();\n\
    \        string numberString10 = numberString9.substr(0, numberString9.length()\
    \ - 1);\n        string numberString11 = numberString10.to_string();\n       \
    \ string numberString12 = numberString11.substr(0, numberString11.length() - 1);\n\
    \        string numberString13 = numberString12.to_string();\n        string numberString14\
    \ = numberString13.substr(0, numberString13.length() - 1);\n        string numberString15\
    \ = numberString14.to_string();\n        string numberString16 = numberString15.substr(0,\
    \ numberString15.length() - 1);\n        string numberString17 = numberString16.to_string();\n\
    \        string numberString18 = numberString17.substr(0, numberString17.length()\
    \ - 1);\n        string numberString19 = numberString18.to_string();\n       \
    \ string numberString20 = numberString19.substr(0, numberString19.length() - 1);\n\
    \        string numberString21 = numberString20.to_string();\n        string numberString22\
    \ = numberString21.substr(0, numberString21.length() - 1);\n        string numberString23\
    \ = numberString22.to_string();\n        string numberString24 = numberString23.substr(0,\
    \ numberString23.length() - 1);\n        string numberString25 = numberString24.to_string();\n\
    \        string numberString26 = numberString25.substr(0, numberString25.length()\
    \ - 1);\n        string numberString27 = numberString26.to_string();\n       \
    \ string numberString28 = numberString27.substr(0, numberString27.length() - 1);\n\
    \        string numberString29 = numberString28.to_string();\n        string numberString30\
    \ = numberString29.substr(0, numberString29.length() - 1);\n        string numberString31\
    \ = numberString30.to_string();\n        string numberString32 = numberString31.substr(0,\
    \ numberString31.length() - 1);\n        string numberString33 = numberString32.to_string();\n\
    \        string numberString34 = numberString33.substr(0, numberString33", "{\n\
    \    string result = \"\";\n    \n    for(int i = 0; i < numbers.size(); i++)\n\
    \    {\n        result += numbers[i];\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += \" \";\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += std.string.reverse(numbers[i]);\n    }\n    \n\
    \    for(int i = 0; i < numbers.size(); i++)\n    {\n        result += \" \";\n\
    \    }\n    \n    for(int i = 0; i < numbers.size(); i++)\n    {\n        result\
    \ += std.string.reverse(numbers[i]);\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += \" \";\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += std.string.reverse(numbers[i]);\n    }\n    \n\
    \    for(int i = 0; i < numbers.size(); i++)\n    {\n        result += \" \";\n\
    \    }\n    \n    for(int i = 0; i < numbers.size(); i++)\n    {\n        result\
    \ += std.string.reverse(numbers[i]);\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += \" \";\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += std.string.reverse(numbers[i]);\n    }\n    \n\
    \    for(int i = 0; i < numbers.size(); i++)\n    {\n        result += \" \";\n\
    \    }\n    \n    for(int i = 0; i < numbers.size(); i++)\n    {\n        result\
    \ += std.string.reverse(numbers[i]);\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += \" \";\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += std.string.reverse(numbers[i]);\n    }\n    \n\
    \    for(int i = 0; i < numbers.size(); i++)\n    {\n        result += \" \";\n\
    \    }\n    \n    for(int i = 0; i < numbers.size(); i++)\n    {\n        result\
    \ += std.string.reverse(numbers[i]);\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += \" \";\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += std.string.reverse(numbers[i]);\n    }\n    \n\
    \    for(int i = 0; i < numbers.size(); i++)\n    {\n        result += \" \";\n\
    \    }\n    \n    for(int i = 0; i < numbers.size(); i++)\n    {\n        result\
    \ += std.string.reverse(numbers[i]);\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += \" \";\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ i++)\n    {\n        result += std.string.reverse(numbers[i]);\n    }\n    \n\
    \    for(int i = 0; i < numbers.size(); i++)\n    {\n        result += \" \";\n\
    \    }\n    \n    for(int i = 0; i < numbers.size(); i++)\n    {\n        result\
    \ += std.string.reverse(", "{\n    string result = \"\";\n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0': result\
    \ += \"zero\"; break;\n            case '1': result += \"one\"; break;\n     \
    \       case '2': result += \"two\"; break;\n            case '3': result += \"\
    three\"; break;\n            case '4': result += \"four\"; break;\n          \
    \  case '5': result += \"five\"; break;\n            case '6': result += \"six\"\
    ; break;\n            case '7': result += \"seven\"; break;\n            case\
    \ '8': result += \"eight\"; break;\n            case '9': result += \"nine\";\
    \ break;\n        }\n    }\n    sort(result.begin(), result.end());\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c |>\nI like your\
    \ solution, however it only works with numbers from 0 to 9. My solution also works\
    \ with numbers from 0 to 9, but I used a switch statement to make it more general.\n\
    <|/ c |>\n<| c |>\nI like your solution, however it only works with numbers from\
    \ 0 to 9. My solution also works with numbers from 0 to 9, but I used a switch\
    \ statement to make it more general.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <string>", "{\n    \n    string result = \"\";\n\
    \    \n    for(int i = 0; i < numbers.length(); i++)\n    {\n        string num\
    \ = numbers[i];\n        \n        if(num == \"zero\")\n        {\n          \
    \  result += \"0\";\n        }\n        else if(num == \"one\")\n        {\n \
    \           result += \"1\";\n        }\n        else if(num == \"two\")\n   \
    \     {\n            result += \"2\";\n        }\n        else if(num == \"three\"\
    )\n        {\n            result += \"3\";\n        }\n        else if(num ==\
    \ \"four\")\n        {\n            result += \"4\";\n        }\n        else\
    \ if(num == \"five\")\n        {\n            result += \"5\";\n        }\n  \
    \      else if(num == \"six\")\n        {\n            result += \"6\";\n    \
    \    }\n        else if(num == \"seven\")\n        {\n            result += \"\
    7\";\n        }\n        else if(num == \"eight\")\n        {\n            result\
    \ += \"8\";\n        }\n        else if(num == \"nine\")\n        {\n        \
    \    result += \"9\";\n        }\n        else\n        {\n            result\
    \ += num;\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(char c in numbers)\n    {\n        int number = std.atoi(c);\n\
    \        if(number > 9)\n        {\n            result += std.to_string(number\
    \ - 10) + std.to_string(number - 1) + std.to_string(number);\n        }\n    \
    \    else\n        {\n            result += std.to_string(number);\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code\
    \ does not compile. `std.atoi` does not exist. `std.to_string` does not exist.\
    \ `std.to_int` does not exist. `std.to_char` does not exist. `std.to_bool` does\
    \ not exist. `std.to_char` does not exist. `std.to_int` does not exist. `std.to_char`\
    \ does not exist. `std.to_bool` does not exist. `std.to_char` does not exist.\
    \ `std.to_int` does not exist. `std.to_char` does not exist. `std.to_bool` does\
    \ not exist. `std.to_char` does not exist. `std.to_int` does not exist. `std.to_char`\
    \ does not exist. `std.to_bool` does not exist. `std.to_char` does not exist.\
    \ `std.to_int` does not exist. `std.to_char` does not exist. `std.to_bool` does\
    \ not exist. `std.to_char` does not exist. `std.to_int` does not exist. `std.to_char`\
    \ does not exist. `std.to_bool` does not exist. `std.to_char` does not exist.\
    \ `std.to_int` does not exist. `std.to_char` does not exist. `std.to_bool` does\
    \ not exist. `std.to_char` does not exist. `std.to_int` does not exist. `std.to_char`\
    \ does not exist. `std.to_bool` does not exist. `std.to_char` does not exist.\
    \ `std.to_int` does not exist. `std.to_char` does not exist. `std.to_bool` does\
    \ not exist. `std.to_char` does not exist. `std.to_int` does not exist. `std.to_char`\
    \ does not exist. `std.to_bool` does not exist. `std.to_char` does not exist.\
    \ `std.to_int` does not exist. `std.to_char` does not exist. `std.to_bool` does\
    \ not exist. `std.to_char` does not exist. `std.to_int` does not exist. `std.to_char`\
    \ does not exist. `std.to_bool` does not exist. `std.to_char` does not exist.\
    \ `std.to_int` does not exist. `std.to_char` ", "{\n    string result = \"\";\n\
    \    \n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n \
    \           case '0':\n            case '1':\n            case '2':\n        \
    \    case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    \n    foreach(char c in numbers)\n    {\n        int number = std.atoi(c);\n\
    \        \n        if(number < 10)\n        {\n            result += \"0\";\n\
    \        }\n        \n        result += number;\n    }\n    \n    return result;\n\
    }", "{\n    string sortedNumbers = \"\";\n    foreach(char c in numbers)\n   \
    \ {\n        sortedNumbers += std.string.format(\"%c\", std.math.swapcase(c));\n\
    \    }\n    sortedNumbers = std.string.format(\"%c\", std.math.swapcase(sortedNumbers));\n\
    \    return sortedNumbers;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis\
    \ doesn't work. `std.string.format(\"%c\", std.math.swapcase(c))` returns a `char`\
    \ not a `string`.\n<|/ c |>\n<| c |>\nI fixed the code by changing `char` to `string`\n\
    <|/ c |>\n<| c |>\nThis doesn't work. `std.string.format(\"%c\", std.math.swapcase(c))`\
    \ returns a `char` not a `string`.\n<|/ c |>\n<| c |>\nI fixed the code by changing\
    \ `char` to `string`\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    map<string,int>\
    \ map;\n    for(int i=0;i<numbers.length();i++)\n    {\n        string key = numbers[i];\n\
    \        if(map.find(key)==map.end())\n        {\n            map[key] = i;\n\
    \        }\n        else\n        {\n            map[key] = map[key]+1;\n    \
    \    }\n    }\n    map<string,int>::iterator it;\n    string result = \"\";\n\
    \    for(it=map.begin();it!=map.end();it++)\n    {\n        result += it->first;\n\
    \        result += it->second;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm,sorting\
    \ |>\n<| c |>\nThis code doesn't work correctly for input \"1 2 3 4 5 6 7 8 9\
    \ 10\". It returns \"1 2 3 4 5 6 7 8 9 10\".\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ I tested it before posting it. The OP didn't specify what to do with duplicate\
    \ numbers, so I didn't bother to handle them. I'll add that to the answer.\n<|/\
    \ c |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't test\
    \ it before posting it.  I tested it before posting it, and it didn't work.  I\
    \ didn't test it before posting it.  I tested it before posting it, and it didn't\
    \ work.  I tested it before posting it, and it didn't work.  I tested it before\
    \ posting it, and it didn't work.  I tested it before posting it, and it didn't\
    \ work.  I tested it before posting it, and it didn't work.  I tested it before\
    \ posting it, and it didn't work.  I tested it before posting it, and it didn't\
    \ work.  I tested it before posting it, and it didn't work.  I tested it before\
    \ posting it, and it didn't work.  I tested it before posting it, and it didn't\
    \ work.  I tested it before posting it, and it didn't work.  I tested it before\
    \ posting it, and it didn't work.  I tested it before posting it, and it didn't\
    \ work.  I tested it before posting it, and it didn't work.  I tested it before\
    \ posting it, and it didn't work.  I tested it before posting it, and it didn't\
    \ work.  I tested it before posting it, and it didn't work.  I tested it before\
    \ posting it, and it didn't work.  I tested it before posting it, and it didn't\
    \ work.  I tested it before posting it, and it didn't work.  I tested it before\
    \ post", "{\n    map<string, int> numbers_map;\n    map<int, string> numbers_reverse_map;\n\
    \    \n    foreach(char c in numbers)\n    {\n        if(numbers_map.containsKey(c))\n\
    \        {\n            numbers_map[c]++;\n        }\n        else\n        {\n\
    \            numbers_map[c] = 1;\n        }\n    }\n    \n    foreach(int i, numbers_map.keys())\n\
    \    {\n        numbers_reverse_map[i] = numbers_map[i];\n    }\n    \n    string\
    \ result = \"\";\n    \n    foreach(int i, numbers_reverse_map.keys())\n    {\n\
    \        result += numbers_reverse_map[i];\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for taking the time to write\
    \ this up. I am going to try this out and see how it works. I appreciate your\
    \ help.\n<|/ c |>\n<| c |>\nI added a solution that uses `std::map` instead of\
    \ `std::unordered_map`.\n<|/ c |>\n<| c |>\nI appreciate your help. I ran your\
    \ program and got this error: \"error: no matching function for call to 'sort_numbers(std::__cxx11::string&)'\n\
    \  string result = sort_numbers(numbers);\"\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses `std::map` instead of `std::unordered_map`.\n<|/ c |>\n<| c |>\nI\
    \ appreciate your help. I ran your program and got this error: \"error: no matching\
    \ function for call to 'sort_numbers(std::__cxx11::string&)'\n  string result\
    \ = sort_numbers(numbers);\"\n<|/ c |>\n<| a tags=c++,sorting,string |>\nI wrote\
    \ a solution that uses std::map instead of std::unordered_map.\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <map>\n#include <algorithm>", "{\n \
    \   string result = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n   \
    \ {\n        result += numbers[i];\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nI\
    \ like the idea of using an array, but I still don't understand how this would\
    \ work. Could you explain how this would work?\n<|/ c |>\n<| c |>\nThe idea is\
    \ to use a std::map to store the numbers as keys and then use std::sort to sort\
    \ the keys. I added an example to my answer.\n<|/ c |>\n<| c |>\nI added an example\
    \ to my answer.\n<|/ c |>\n<| c |>\nI added an example to my answer.\n<|/ c |>\n\
    <| c |>\nI added an example to my answer.\n<|/ c |>\n<| a tags=c++,sorting,string\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI like your\
    \ solution, but I still think it would be better to use a `switch` statement instead\
    \ of `if` statements.\n<|/ c |>\n<| c |>\nI agree, switch statements are much\
    \ more readable. I'll update my answer with that suggestion.\n<|/ c |>\n<| a dscore=0\
    \ |>\nI agree with Jonathan Leffler's answer that switch statements are much more\
    \ readable. However, I wanted to show a solution that uses if-else statements.\
    \ I used a switch statement to simplify the code, but you could also use a switch\
    \ statement to simplify the code even further.\n<code>\nstring sort_numbers(string\
    \ numbers) {\n    string result = \"\";\n    foreach(char c in numbers) {\n  \
    \      switch(c) {\n            case '0':\n            case '1':\n           \
    \ case '2':\n            case '3':\n            case '4':\n            case '5':\n\
    \            case '6':\n            case '7':\n            case '8':\n       \
    \     case '9':\n                result += c;\n                break;\n      \
    \      default:\n                throw new Exception(\"Invalid input\");\n   \
    \     }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a tags=c++,sorting |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    int[] nums = to_int_array(numbers);\n    sort(nums);\n    string\
    \ result = \"\";\n    for(int i = 0; i < nums.length; i++)\n        result +=\
    \ to_string(nums[i]);\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=sorting,c++,algorithm |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <vector>\n#include <string>", "{\n    string sortedNumbers = \"\";\n\
    \    \n    for(int i = 0; i < numbers.length(); i++)\n    {\n        string number\
    \ = numbers[i];\n        \n        if(number == \"zero\")\n            sortedNumbers\
    \ += \"0\";\n        else if(number == \"one\")\n            sortedNumbers +=\
    \ \"1\";\n        else if(number == \"two\")\n            sortedNumbers += \"\
    2\";\n        else if(number == \"three\")\n            sortedNumbers += \"3\"\
    ;\n        else if(number == \"four\")\n            sortedNumbers += \"4\";\n\
    \        else if(number == \"five\")\n            sortedNumbers += \"5\";\n  \
    \      else if(number == \"six\")\n            sortedNumbers += \"6\";\n     \
    \   else if(number == \"seven\")\n            sortedNumbers += \"7\";\n      \
    \  else if(number == \"eight\")\n            sortedNumbers += \"8\";\n       \
    \ else if(number == \"nine\")\n            sortedNumbers += \"9\";\n        else\n\
    \            sortedNumbers += number;\n    }\n    \n    return sortedNumbers;\n\
    }\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nThanks for your answer!\
    \ I really appreciate it! But I still don't understand how this would work. Could\
    \ you please explain it a little bit more? I still don't understand how this would\
    \ work. Thanks!\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I really appreciate it! But\
    \ I still don't understand how this would work. Could you please explain it a\
    \ little bit more? I still don't understand how this would work. Thanks!\n<|/\
    \ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I really appreciate it! But I still don't understand\
    \ how this would work. Could you please explain it a little bit more? I still\
    \ don't understand how this would work. Thanks!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n\
    \        result += std.string.format(\"%c\", std.math.parseInt((char) c));\n \
    \   }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n\
    \        switch(c)\n        {\n            case '0':\n            case '1':\n\
    \            case '2':\n            case '3':\n            case '4':\n       \
    \     case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nThis doesn't work. `sort`\
    \ sorts lexicographically, not numerically.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ I tested it before posting it. I just tested it again to be sure. `sort` sorts\
    \ lexicographically, not numerically.\n<|/ c |>\n<| c |>\n: I tested it again\
    \ to be sure. `sort` sorts lexicographically, not numerically. `sort` sorts lexicographically,\
    \ not numerically. `sort` sorts lexicographically, not numerically. `sort` sorts\
    \ lexicographically, not numerically. `sort` sorts lexicographically, not numerically.\
    \ `sort` sorts lexicographically, not numerically. `sort` sorts lexicographically,\
    \ not numerically. `sort` sorts lexicographically, not numerically. `sort` sorts\
    \ lexicographically, not numerically. `sort` sorts lexicographically, not numerically.\
    \ `sort` sorts lexicographically, not numerically. `sort` sorts lexicographically,\
    \ not numerically. `sort` sorts lexicographically, not numerically. `sort` sorts\
    \ lexicographically, not numerically. `sort` sorts lexicographically, not numerically.\
    \ `sort` sorts lexicographically, not numerically. `sort` sorts lexicographically,\
    \ not numerically. `sort` sorts lexicographically, not numerically. `sort` sorts\
    \ lexicographically, not numerically. `sort` sorts lexicographically, not numerically.\
    \ `sort` sorts lexicographically, not numerically. `sort` sorts lexicographically,\
    \ not numerically. `sort` sorts lexicographically, not numerically. `sort` sorts\
    \ lexicographically, not numerically. `", "{\n    \n    string result = \"\";\n\
    \    \n    foreach(char c in numbers)\n    {\n        \n        switch(c)\n  \
    \      {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                result += std.string(\"_\");\n                break;\n      \
    \  }\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ choice\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result += c;\n\
    \                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like\
    \ your solution, but I wonder how it compares to other solutions posted here.\
    \ I think it would be interesting to see how they compare in terms of performance.\n\
    <|/ c |>\n<| c |>\nI agree with you. My solution was just to show that there are\
    \ many ways to do it. I don't think it would be a good idea to compare performance\
    \ of different solutions unless you know what you are doing.\n<|/ c |>\n<| c |>\n\
    I agree with you. I just wanted to point out that there are many ways to do it,\
    \ and that there are many ways to do it in C++. Your solution uses `std::sort`,\
    \ which I believe is one of the most efficient ways to do it. I just wanted to\
    \ point out that there are many ways to do it, and that there are many ways to\
    \ do it in C++.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to point out\
    \ that there are many ways to do it, and that there are many ways to do it in\
    \ C++. Your solution uses `std::sort`, which I believe is one of the most efficient\
    \ ways to do it. I just wanted to point out that there are many ways to do it,\
    \ and that there are many ways to do it in C++.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. I just wanted to point out that there are many ways to do it, and that\
    \ there are many ways to do it in C++. Your solution uses `std::sort`, which I\
    \ believe is one of the most efficient ways to do it. I just wanted to point out\
    \ that there are many ways to do it, and that there are many ways to do it in\
    \ C++.\n<|/ c |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <vector>\n#include <string>", "{\n    string result =\
    \ \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n\
    \            case '0': result += \"zero\"; break;\n            case '1': result\
    \ += \"one\"; break;\n            case '2': result += \"two\"; break;\n      \
    \      case '3': result += \"three\"; break;\n            case '4': result +=\
    \ \"four\"; break;\n            case '5': result += \"five\"; break;\n       \
    \     case '6': result += \"six\"; break;\n            case '7': result += \"\
    seven\"; break;\n            case '8': result += \"eight\"; break;\n         \
    \   case '9': result += \"nine\"; break;\n            default: result += \"?\"\
    ;\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <vector>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0': result += std.string(\"one\");\n           \
    \     break;\n            case '1': result += std.string(\"two\");\n         \
    \       break;\n            case '2': result += std.string(\"three\");\n     \
    \           break;\n            case '3': result += std.string(\"four\");\n  \
    \              break;\n            case '4': result += std.string(\"five\");\n\
    \                break;\n            case '5': result += std.string(\"six\");\n\
    \                break;\n            case '6': result += std.string(\"seven\"\
    );\n                break;\n            case '7': result += std.string(\"eight\"\
    );\n                break;\n            case '8': result += std.string(\"nine\"\
    );\n                break;\n            case '9': result += std.string(\"ten\"\
    );\n                break;\n            default:\n                result += c;\n\
    \                break;\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,string,sorting |>\n<| c |>\nThis doesn't work for \"nineteen\"\
    \ for example. Try it out on \"nineteen\".\n<|/ c |>\n<| c |>\nIt works for me.\
    \ Try it out on \"nineteen\". It returns \"nineteen\".\n<|/ c |>\n<| c |>\nYes,\
    \ it works. But it fails for \"nineteen\". Try it out on \"nineteen\".\n<|/ c\
    \ |>\n<| c |>\nIt works for me too. Try it out on \"nineteen\".\n<|/ c |>\n<|\
    \ c |>\nIt works for me too. Try it out on \"nineteen\".\n<|/ c |>\n<| a tags=c++,string,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <cctype>", "{\n    string result = \"\";\n    \n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        result += numbers[i];\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}", "{\n    map<int, int> map;\n \
    \   map<int, int>::iterator it;\n    map<int, int> map2;\n    map2[0] = 0;\n \
    \   map2[1] = 1;\n    map2[2] = 2;\n    map2[3] = 3;\n    map2[4] = 3;\n    map2[5]\
    \ = 3;\n    map2[6] = 3;\n    map2[7] = 3;\n    map2[8] = 3;\n    map2[9] = 3;\n\
    \    map2[10] = 3;\n    map2[11] = 3;\n    map2[12] = 3;\n    map2[13] = 3;\n\
    \    map2[14] = 3;\n    map2[15] = 3;\n    map2[16] = 3;\n    map2[17] = 3;\n\
    \    map2[18] = 3;\n    map2[19] = 3;\n    map2[20] = 3;\n    map2[21] = 3;\n\
    \    map2[22] = 3;\n    map2[23] = 3;\n    map2[24] = 3;\n    map2[25] = 3;\n\
    \    map2[26] = 3;\n    map2[27] = 3;\n    map2[28] = 3;\n    map2[29] = 3;\n\
    \    map2[30] = 3;\n    map2[31] = 3;\n    map2[32] = 3;\n    map2[33] = 3;\n\
    \    map2[34] = 3;\n    map2[35] = 3;\n    map2[36] = 3;\n    map2[37] = 3;\n\
    \    map2[38] = 3;\n    map2[39] = 3;\n    map2[40] = 3;\n    map2[41] = 3;\n\
    \    map2[42] = 3;\n    map2[43] = 3;\n    map2[44] = 3;\n    map2[45] = 3;\n\
    \    map2[46] = 3;\n    map2[47] = 3;\n    map2[48] = 3;\n    map2[49] = 3;\n\
    \    map2[50] = 3;\n    map2[51] = 3;\n    map2[52] = 3;\n    map2[53] = 3;\n\
    \    map2[54] = 3;\n    map2[55] = 3;\n    map2[56] = 3;\n    map2[57] = 3;\n\
    \    map2[58] = 3;\n    map2[59] = 3;\n    map2[60] = 3;\n    map2[61] = 3;\n\
    \    map2[62] = 3;\n    map2[63] = 3;\n    map2[64] = 3;\n    map2[65] = 3;\n\
    \    map2[66] = 3;\n    map2[67] = 3;\n    map2[68] = 3;\n    map2[69] = 3;\n\
    \    ", "{\n    string sortedNumbers = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        sortedNumbers += std.string.format(\"%c\", std.math.swapcase(c));\n\
    \    }\n    \n    return sortedNumbers;\n}\n</code>\n<|/ a tags=c++,sorting |>\n\
    <| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    #include <cctype>\nusing namespace std;", "{\n    string result = \"\";\n    \n\
    \    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n       \
    \     case '0': result += \"zero\"; break;\n            case '1': result += \"\
    one\"; break;\n            case '2': result += \"two\"; break;\n            case\
    \ '3': result += \"three\"; break;\n            case '4': result += \"four\";\
    \ break;\n            case '5': result += \"five\"; break;\n            case '6':\
    \ result += \"six\"; break;\n            case '7': result += \"seven\"; break;\n\
    \            case '8': result += \"eight\"; break;\n            case '9': result\
    \ += \"nine\"; break;\n            default:\n                throw new Exception(\"\
    Invalid number '\" + c + \"'\");\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work for me. `sort_numbers(\"one two three four five six\
    \ seven eight nine\")` returns `\"one two three four five six seven eight nine\"\
    `\n<|/ c |>\n<| c |>\nYes, I missed the case where you had a number with more\
    \ than two digits. I've updated the answer to handle that case.\n<|/ c |>\n<|\
    \ c |>\nThanks for the update. I'm still getting a compiler error though: `error:\
    \ cannot convert 'std::__cxx11::string' to 'const char*' for argument '1' to 'void\
    \ sort(const char*, const char*)'`\n<|/ c |>\n<| c |>\nI forgot to include the\
    \ `#include <algorithm>`\n<|/ c |>\n<| c |>\nThanks. I added that and I'm still\
    \ getting a compiler error: `error: cannot convert 'std::__cxx11::string' to 'const\
    \ char*' for argument '1' to 'void sort(const char*, const char*)'`\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    using namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c\
    \ in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n  \
    \          case '1':\n            case '2':\n            case '3':\n         \
    \   case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw new\
    \ Exception(\"Invalid input\");\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm\
    \ |>\n<| c |>\nThis is not the most efficient solution. Sorting algorithms usually\
    \ have O(nlogn) complexity and you are doing O(n) operations. You would need to\
    \ sort a list with n elements to get O(nlogn) complexity.\n<|/ c |>\n<| c |>\n\
    I agree with you, but I thought that sorting algorithms usually have O(nlogn)\
    \ complexity and OP was doing O(n) operations. I agree that sorting algorithms\
    \ usually have O(nlogn) complexity and OP was doing O(n) operations. I agree that\
    \ sorting algorithms usually have O(nlogn) complexity and OP was doing O(n) operations.\
    \ I agree that sorting algorithms usually have O(nlogn) complexity and OP was\
    \ doing O(n) operations. I agree that sorting algorithms usually have O(nlogn)\
    \ complexity and OP was doing O(n) operations. I agree that sorting algorithms\
    \ usually have O(nlogn) complexity and OP was doing O(n) operations.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I thought that sorting algorithms usually have\
    \ O(nlogn) complexity and OP was doing O(n) operations. I agree that sorting algorithms\
    \ usually have O(nlogn) complexity and OP was doing O(n) operations. I agree that\
    \ sorting algorithms usually have O(nlogn) complexity and OP was doing O(n) operations.\
    \ I agree that sorting algorithms usually have O(nlogn) complexity and OP was\
    \ doing O(n) operations. I agree that sorting algorithms usually have O(nlogn)\
    \ complexity and OP was doing O(n) operations.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I thought that sorting algorithms usually have O(nlog", "{\n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result = result + c;\n                break;\n       \
    \     default:\n                throw new Exception(\"Invalid input\");\n    \
    \    }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting |>\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>", "{\n\
    \    \n    string result = \"\";\n    \n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        \n        string num = numbers[i];\n        \n        for(int\
    \ j = 0; j < num.length(); ++j)\n        {\n            \n            int digit\
    \ = num[j] - '0';\n            \n            if(digit < 0)\n            {\n  \
    \              \n                digit = digit + 10;\n                \n     \
    \       }\n            \n            int pos = j - 1;\n            \n        \
    \    while(pos >= 0 && num[pos] != '0')\n            {\n                \n   \
    \             digit = digit * 10 + num[pos] - '0';\n                \n       \
    \         pos--;\n                \n            }\n            \n            int\
    \ pos = j + 1;\n            \n            while(pos < num.length() && num[pos]\
    \ != '0')\n            {\n                \n                digit = digit * 10\
    \ + num[pos] - '0';\n                \n                pos++;\n              \
    \  \n            }\n            \n            int pos = j;\n            \n   \
    \         while(pos > 0 && num[pos] != '0')\n            {\n                \n\
    \                digit = digit * 10 + num[pos] - '0';\n                \n    \
    \            pos--;\n                \n            }\n            \n         \
    \   int pos = j;\n            \n            while(pos < num.length() && num[pos]\
    \ != '0')\n            {\n                \n                digit = digit * 10\
    \ + num[pos] - '0';\n                \n                pos++;\n              \
    \  \n            }\n            \n            int pos = j + 1;\n            \n\
    \            while(pos < num.length() && num[pos] != '0')\n            {\n   \
    \             \n                digit = digit * 10 + num[pos] - '0';\n       \
    \         \n                pos++;\n                \n            }\n        \
    \    \n            int pos = j + 1;\n            \n            while(pos < num.length()\
    \ && num[pos] != '0')\n            {\n                \n                digit\
    \ = digit * 10 + num[pos] - '0';\n                \n                pos++;\n \
    \               \n            }\n            \n            int pos = j;\n    \
    \        \n            while(pos > 0 && num[pos] != '0')\n            {\n    \
    \            \n                digit = digit * 10 + num[pos] - '0';\n        \
    \        \n                pos--;\n                \n            }\n         \
    \   \n            int pos = j;\n            \n            while(pos < num.length()\
    \ && num[pos] != '0')\n            {\n                \n                digit\
    \ = digit * 10 + num[pos] - '0';\n                \n                pos++;\n \
    \               \n            }\n            \n            int pos = j;\n    \
    \        \n            while(pos > 0 && num", "{\n    string result = \"\";\n\
    \    for(int i = 0; i < numbers.length(); i++)\n    {\n        result += numbers[i];\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <vector>\n#include <algorithm>", "{\n    int[] nums = to_int_array(numbers);\n\
    \    sort(nums, nums.length);\n    string result = \"\";\n    for (int i = 0;\
    \ i < nums.length; ++i)\n        result += to_string(nums[i]);\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nI like your solution, but\
    \ I believe it would be more efficient to sort the string in place rather than\
    \ creating a new string and copying each element over. Also, `std::sort` uses\
    \ `std::swap` which uses `std::swap`, so you end up with two `swap` calls per\
    \ element. `std::sort` also doesn't require you to specify the size of the array,\
    \ so you can just use `std::sort(nums.begin(), nums.end())`.\n<|/ c |>\n<| c |>\n\
    : I agree that `std::sort` would be more efficient, but I wanted to show how it\
    \ could be done without `std::sort`.\n<|/ c |>\n<| c |>\n: I agree that `std::sort`\
    \ would be more efficient, but I wanted to show how it could be done without `std::sort`.\
    \ `std::sort` uses `std::swap` which uses `std::swap`, so you end up with two\
    \ `swap` calls per element. `std::sort` also doesn't require you to specify the\
    \ size of the array, so you can just use `std::sort(nums.begin(), nums.end())`.\n\
    <|/ c |>\n<| c |>\n: I agree that `std::sort` would be more efficient, but I wanted\
    \ to show how it could be done without `std::sort`. `std::sort` uses `std::swap`\
    \ which uses `std::swap`, so you end up with two `swap` calls per element. `std::sort`\
    \ also doesn't require you to specify the size of the array, so you can just use\
    \ `std::sort(nums.begin(), nums.end())`.\n<|/ c |>\n<| c |>\n: I agree that `std::sort`\
    \ would be more efficient, but I wanted to show how it could be done without `std::sort`.\
    \ `std::sort` uses `std::swap` which uses `std::swap`, so you end up with two\
    \ `swap` calls per element. `std::sort` also doesn't require you to specify the\
    \ size of the array, so you can just use `std::sort(nums.begin(), nums.end())`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    \n\
    \    foreach(char c in numbers)\n    {\n        int n = std.atoi(c);\n       \
    \ \n        if(n < 10)\n        {\n            result += std.stringof(n);\n  \
    \      }\n        else\n        {\n            result += std.stringof(n);\n  \
    \          result += \" \";\n        }\n    }\n    \n    result += \"\\n\";\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    import std.stdio;\nimport std.string;\nimport std.array;", "{\n    string sortedNumbers\
    \ = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        sortedNumbers\
    \ += numbers[i];\n    }\n    \n    sortedNumbers = std.algorithm.sort(sortedNumbers);\n\
    \    \n    return sortedNumbers;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe\
    \ question was about sorting a string, not an array of numbers. Your solution\
    \ sorts an array of numbers, not an array of strings.\n<|/ c |>\n<| c |>\nI didn't\
    \ see that at first, but I see now that my solution sorts the string in place.\
    \ I'll edit my answer to reflect that.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that sorts the string in place.\n<|/ c |>\n<| a tags=sorting,string,c++\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n    \
    \    int number = std.atoi(c);\n        \n        if(number < 10)\n        {\n\
    \            result += std.string(number);\n        }\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,string,sorting |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        if(isdigit(c))\n        {\n            int number = std.atoi(c);\n\
    \            \n            if(number < 10)\n            {\n                result\
    \ += std.stringof(\"0\", number);\n            }\n            else\n         \
    \   {\n                result += std.stringof(number);\n            }\n      \
    \  }\n        else\n        {\n            result += c;\n        }\n    }\n  \
    \  \n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for\
    \ me. I'm getting \"Error: no instance of overloaded function \"std.stringof\"\
    \ matches the argument list\"\n<|/ c |>\n<| c |>\nI fixed the code above. `std.stringof`\
    \ was introduced in Rust 1.36. Make sure you are using at least that version.\n\
    <|/ c |>\n<| c |>\nThis works great, thank you! I didn't realize that std.stringof\
    \ was a function.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution using only std.algorithm.sort:\n\
    <code>\nfn sort_numbers(numbers: &str) -> String {\n    let mut numbers = numbers.chars().collect::<Vec<_>>();\n\
    \    numbers.sort_by(|a, b| {\n        if a.is_digit() {\n            a.to_digit()\n\
    \        } else if b.is_digit() {\n            b.to_digit()\n        } else {\n\
    \            a.to_digit() < b.to_digit()\n        }\n    });\n    numbers.iter().map(|c|\
    \ c.to_string()).collect::<String>()\n}\n</code>\n<|/ a tags=string,sorting,rust\
    \ |>\n<| a dscore=1 |>\nI wrote a small library to solve this problem:\n<code>\n\
    extern crate num;", "{\n    int[] nums = to_int_array(numbers);\n    sort(nums,\
    \ nums.length);\n    string result = \"\";\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result += to_string(nums[i]);\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,c++,algorithm |>\nI wrote a solution\
    \ in Python that uses only basic data structures and functions from the standard\
    \ library:\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split()\n\
    \    numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nI wrote a solution in Python that uses only basic data structures\
    \ and functions from the standard library:\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split()\n    numbers.sort()\n    return ' '.join(numbers)\n\
    </code>\n<|/ a tags=sorting,c++,algorithm |>\n<| a tags=sorting,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include\
    \ <string>", "{\n    int[] nums = to_int_array(numbers);\n    sort(nums);\n  \
    \  string result = \"\";\n    for(int i = 0; i < nums.length; i++)\n    {\n  \
    \      result += nums[i] + \" \";\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(char c in numbers)\n    {\n        if(isdigit(c))\n\
    \        {\n            result += std.tointeger(c);\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ `std.tointeger` returns a `char`, not a `string`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the code accordingly.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport std.stdio;\nimport std.string;\nimport std.algorithm;\nimport\
    \ std.array;\nimport std.conv;", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThanks\
    \ for your answer. I am not allowed to use any libraries other than std.\n<|/\
    \ c |>\n<| c |>\nI added a solution that doesn't use any libraries.\n<|/ c |>\n\
    <| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n  \
    \      {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| c |>\nThis doesn't work. `sort` expects a `std::vector` of elements and\
    \ not a `string`. `string` doesn't have a `begin` method.\n<|/ c |>\n<| c |>\n\
    I didn't realize that `string` didn't have `begin` method. Thanks for pointing\
    \ that out. I've updated my answer.\n<|/ c |>\n<| c |>\n`std::sort` expects a\
    \ `RandomAccessIterator` which `string` does not provide. `std::sort` will also\
    \ not work if you try to sort a `string` with more than 9 characters. `std::sort`\
    \ will also not work if you try to sort a `string` with more than 9 characters.\
    \ `std::sort` will also not work if you try to sort a `string` with more than\
    \ 9 characters. `std::sort` will also not work if you try to sort a `string` with\
    \ more than 9 characters. `std::sort` will also not work if you try to sort a\
    \ `string` with more than 9 characters. `std::sort` will also not work if you\
    \ try to sort a `string` with more than 9 characters. `std::sort` will also not\
    \ work if you try to sort a `string` with more than 9 characters. `std::sort`\
    \ will also not work if you try to sort a `string` with more than 9 characters.\
    \ `std::sort` will also not work if you try to sort a `string` with more than\
    \ 9 characters. `std::sort` will also not work if you try to sort a `string` with\
    \ more than 9 characters. `std::sort` will also not work if you try to sort a\
    \ `string` with more than 9 characters. `std::sort` will also not work if you\
    \ try to sort a `string` with more than 9 characters. `std::sort` will also not\
    \ work if you try to sort a `string` with more than 9 characters.\n<|/ c |>\n\
    <| c |>\n`std::sort` will also not work if you try to sort a `string` with more\
    \ than 9 characters. `std::sort` will also not work if you try to sort a `", "{\n\
    \    string result = \"\";\n    foreach(char c in numbers)\n    {\n        if(isdigit(c))\n\
    \        {\n            int num = std.atoi(c);\n            result += num;\n \
    \       }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <string>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <vector>\n#include <algorithm>", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw runtime_error(\"\
    Invalid input - only 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine' are allowed\");\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like your solution, very elegant. Just a couple of comments: 1) `std::sort`\
    \ doesn't work on `std::string`; 2) `std::sort` doesn't work on `char`; 3) `std::sort`\
    \ doesn't work on `char`; 4) `std::sort` doesn't work on `char`; 5) `std::sort`\
    \ doesn't work on `char`; 6) `std::sort` doesn't work on `char`; 7) `std::sort`\
    \ doesn't work on `char`; 8) `std::sort` doesn't work on `char`; 9) `std::sort`\
    \ doesn't work on `char`; 10) `std::sort` doesn't work on `char`; 11) `std::sort`\
    \ doesn't work on `char`; 12) `std::sort` doesn't work on `char`; 13) `std::sort`\
    \ doesn't work on `char`; 14) `std::sort` doesn't work on `char`; 15) `std::sort`\
    \ doesn't work on `char`; 16) `std::sort` doesn't work on `char`; 17) `std::sort`\
    \ doesn't work on `char`; 18) `std::sort` doesn't work on `char`; 19) `std::sort`\
    \ doesn't work on `char`; 20) `std::sort` doesn't work on `char`; 21) `std::sort`\
    \ doesn't work on `char`; 22) `std::sort` doesn't work on `char`; 23) `std::sort`\
    \ doesn't work on `char`; 24) `std::sort` doesn't work on `char`; 25) `std::sort`\
    \ doesn't work on `char`; 26) `std::sort` doesn't work on `char`; 27) `std::sort`\
    \ doesn't work on `char`; 28) `std::sort` doesn't work on `char`; 29) `std::sort`\
    \ doesn't work on `char`; 30) `std::sort` doesn't work on `char`; ", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n    {\n     \
    \   result += numbers[i];\n    }\n    sort(result.begin(), result.end());\n  \
    \  return result;\n}\n</code>\n<|/ a tags=c++,sorting,arrays |>\n<| c |>\nThis\
    \ doesn't work. `sort` expects a `RandomAccessIterator`, not a `BidirectionalIterator`.\n\
    <|/ c |>\n<| c |>\nI fixed the code so it works with `BidirectionalIterator`s.\n\
    <|/ c |>\n<| a tags=c++,sorting,arrays |>\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <vector>\nusing namespace std;", "{\n    \n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        \n    \
    \    switch(c)\n        {\n            case '0': result += \"zero\"; break;\n\
    \            case '1': result += \"one\"; break;\n            case '2': result\
    \ += \"two\"; break;\n            case '3': result += \"three\"; break;\n    \
    \        case '4': result += \"four\"; break;\n            case '5': result +=\
    \ \"five\"; break;\n            case '6': result += \"six\"; break;\n        \
    \    case '7': result += \"seven\"; break;\n            case '8': result += \"\
    eight\"; break;\n            case '9': result += \"nine\"; break;\n          \
    \  default:\n                result += \"invalid choice\";\n        }\n      \
    \  \n    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting,algorithm |>\n<| c |>\nThis solution does not\
    \ work for negative numbers. I suggest using std::sort and std::stable_sort instead.\n\
    <|/ c |>\n<| c |>\nI agree with you. std::sort and std::stable_sort are better\
    \ solutions.\n<|/ c |>\n<| c |>\nI agree with you. std::sort and std::stable_sort\
    \ are better solutions.\n<|/ c |>\n<| c |>\nThis solution does not work for negative\
    \ numbers. I suggest using std::sort and std::stable_sort instead.\n<|/ c |>\n\
    <| c |>\nI agree with you. std::sort and std::stable_sort are better solutions.\n\
    <|/ c |>\n<| a dscore=5 |>\nI suggest using std::sort and std::stable_sort instead.\
    \ \n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include\
    \ <string>", "{\n    \n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        \n        switch(c)\n        {\n            case '0':\
    \ \n            case '1': \n            case '2': \n            case '3': \n \
    \           case '4': \n            case '5': \n            case '6': \n     \
    \       case '7': \n            case '8': \n            case '9': \n         \
    \       result += c;\n                break;\n            default:\n         \
    \       result += std.string(\"_\");\n                break;\n        }\n    }\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate the effort, but this isn't\
    \ a good solution. Firstly, the OP wants to sort numbers, not characters. Secondly,\
    \ the OP wants to sort them in ascending order. Thirdly, the OP wants to sort\
    \ them in descending order. Fourthly, the OP wants to sort them in ascending order\
    \ and descending order. Fifthly, the OP wants to sort them in ascending order,\
    \ descending order, and ascending order again. Sixthly, the OP wants to sort them\
    \ in ascending order, descending order, ascending order, descending order, ascending\
    \ order, descending order, ascending order, descending order, ascending order,\
    \ descending order, ascending order, descending order, ascending order, descending\
    \ order, ascending order, descending order, ascending order, descending order,\
    \ ascending order, descending order, ascending order, descending order, ascending\
    \ order, descending order, ascending order, descending order, ascending order,\
    \ descending order, ascending order, descending order, ascending order, descending\
    \ order, ascending order, descending order, ascending order, descending order,\
    \ ascending order, descending order, ascending order, descending order, ascending\
    \ order, descending order, ascending order, descending order, ascending order,\
    \ descending order, ascending order, descending order, ascending order, descending\
    \ order, ascending order, descending order, ascending order, descending order,\
    \ ascending order, descending order, ascending order, descending order, ascending\
    \ order, descending order, ascending order, descending order, ascending order,\
    \ descending order, ascending order, descending order, ascending order, descending\
    \ order, ascending order, descending order, ascending order, descending order,\
    \ ascending order, descending order, ascending order, descending order, ascending\
    \ order, descending order, ascending order, descending order, ascending order,\
    \ descending order, ascending order, descending order, ascending order, descending\
    \ order, ascending order, descending order, ascending order, descending order,\
    \ ascending order, descending order, ascending order, descending order, ascending\
    \ order, descending order, ascending order, descending order, ", "{\n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        if(isdigit(c))\n\
    \        {\n            int number = to_integer(c);\n            \n          \
    \  if(number < 10)\n            {\n                result += to_string(number);\n\
    \            }\n            else\n            {\n                result += to_string(number\
    \ / 10) + to_string(number % 10);\n            }\n        }\n    }\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| a tags=c++,sorting,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result += c;\n\
    \                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ choice\";\n        }\n    }\n    sort(result.begin(), result.end());\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm |>\n<| c |>\nI like your\
    \ solution, however it would be better to use a map instead of switch-case. Also\
    \ you can replace `switch` with `std::map<char, int>` and then `std::map<char,\
    \ int>::iterator it;` `it = std::map<char, int>::find(c); result += it->second;`\n\
    <|/ c |>\n<| c |>\n: I agree that `std::map` would be better, but I wanted to\
    \ keep the code as close to the original as possible. Also, I didn't want to introduce\
    \ a new type into the mix, so I used `switch`.\n<|/ c |>\n<| c |>\nI agree with\
    \ you that `std::map` would be better, but I wanted to keep the code as close\
    \ to the original as possible. Also, I didn't want to introduce a new type into\
    \ the mix, so I used `switch`.\n<|/ c |>\n<| c |>\n: I agree with you that `std::map`\
    \ would be better, but I wanted to keep the code as close to the original as possible.\
    \ Also, I didn't want to introduce a new type into the mix, so I used `switch`.\n\
    <|/ c |>\n<| c |>\n: I agree with you that `std::map` would be better, but I wanted\
    \ to keep the code as close to the original as possible. Also, I didn't want to\
    \ introduce a new type into the mix, so I used `switch`.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI agree with other answers that using std::map would be better, but I wanted\
    \ to keep the code as close to the original as possible.\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\n#include <map>", "{\n    string sortedNumbers\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        sortedNumbers\
    \ += std.string(\"zero\") + std.string(\"one\") + std.string(\"two\") + std.string(\"\
    three\") + std.string(\"four\") + std.string(\"five\") + std.string(\"six\") +\
    \ std.string(\"seven\") + std.string(\"eight\") + std.string(\"nine\");\n    }\n\
    \    \n    sortedNumbers = std.sort(sortedNumbers);\n    \n    return sortedNumbers;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,c++,string |>\nI wrote a function\
    \ that sorts strings in ascending order:\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>", "{\n    \n    string result = \"\";\n    \n\
    \    foreach(char c in numbers)\n    {\n        \n        switch(c)\n        {\n\
    \            case '0':\n            case '1':\n            case '2':\n       \
    \     case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                result += std.string(\"_\");\n                break;\n      \
    \  }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw runtime_error(\"Invalid input\");\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like this solution, but I wonder\
    \ how it compares to other solutions posted here?\n<|/ c |>\n<| c |>\nI like this\
    \ solution as well, but I wonder how it compares to other solutions posted here?\n\
    <|/ c |>\n<| c |>\nI like this solution as well, but I wonder how it compares\
    \ to other solutions posted here?\n<|/ c |>\n<| c |>\nI like this solution as\
    \ well, but I wonder how it compares to other solutions posted here?\n<|/ c |>\n\
    <| c |>\nI like this solution as well, but I wonder how it compares to other solutions\
    \ posted here?\n<|/ c |>\n<| a dscore=5 |>\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <vector>\n#include <string>", "{\n    string result =\
    \ \"\";\n    foreach(char c in numbers)\n    {\n        int number = std.atoi(c);\n\
    \        if(number < 10)\n        {\n            result += std.stringof(\"0\"\
    , number);\n        }\n        else\n        {\n            result += std.stringof(number,\
    \ \"\");\n        }\n    }\n    return result;\n}", "{\n    string result = \"\
    \";\n    foreach(char c in numbers)\n    {\n        int number = std.atoi(c);\n\
    \        result += (number < 10 ? number : number - 10) + \"\";\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c |>\nThis doesn't\
    \ work. Try it on \"one two three four five six seven eight nine\"\n<|/ c |>\n\
    <| c |>\nIt does work. Try it on \"one two three four five six seven eight nine\"\
    \n<|/ c |>\n<| c |>\nIt doesn't work. Try it on \"one two three four five six\
    \ seven eight nine\"\n<|/ c |>\n<| c |>\nIt does work. Try it on \"one two three\
    \ four five six seven eight nine\"\n<|/ c |>\n<| c |>\nIt doesn't work. Try it\
    \ on \"one two three four five six seven eight nine\"\n<|/ c |>\n<| a tags=sorting,c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n#include\
    \ <algorithm>", "{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        result += numbers[i];\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=sorting,c++ |>\n\
    <| a |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>",
  "{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"one\"] = 1;\n \
    \   map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"] = 4;\n    map[\"\
    five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n    map[\"eight\"\
    ] = 8;\n    map[\"nine\"] = 9;\n    \n    map[\"ten\"] = 10;\n    map[\"eleven\"\
    ] = 11;\n    map[\"twelve\"] = 12;\n    map[\"thirteen\"] = 13;\n    map[\"fourteen\"\
    ] = 14;\n    map[\"fifteen\"] = 15;\n    map[\"sixteen\"] = 16;\n    map[\"seventeen\"\
    ] = 17;\n    map[\"eighteen\"] = 18;\n    map[\"nineteen\"] = 19;\n    \n    map[\"\
    twenty\"] = 20;\n    map[\"thirty\"] = 30;\n    map[\"forty\"] = 31;\n    map[\"\
    fifty\"] = 30;\n    map[\"sixty\"] = 30;\n    map[\"seventy\"] = 30;\n    map[\"\
    eighty\"] = 30;\n    map[\"ninety\"] = 30;\n    \n    map[\"hundred\"] = 100;\n\
    \    map[\"thousand\"] = 1000;\n    map[\"million\"] = 1000000;\n    map[\"billion\"\
    ] = 1000000000;\n    map[\"trillion\"] = 1000000000000;\n    map[\"quadrillion\"\
    ] = 1000000000000000;\n    map[\"quintillion\"] = 1000000000000000000;\n    map[\"\
    sextillion\"] = 10000000000000000000;\n    map[\"septillion\"] = 100000000000000000000;\n\
    \    map[\"octillion\"] = 10000000000000000000000;\n    map[\"nonillion\"] = 10000000000000000000000000;\n\
    \    map[\"decillion\"] = 10000000000000000000000000000;\n    map[\"undecillion\"\
    ] = 10000000000000000000000000000000;\n    map[\"duodecillion\"] = 1000000000000000000000000000000000;\n\
    \    map[\"tredecillion\"] = 1000000000000000000000000000000000000;\n    map[\"\
    quattuordecillion\"] = 1000000000000000000000000000000000000000;\n    map[\"sexdecillion\"\
    ] = 100000000000000000000000000000000000000000;\n    map[\"septendecillion\"]\
    \ = 100000000000000000000000000000000000000000000;\n    map[\"octodecillion\"\
    ] = 10000000000000000000000000000000000000000000000;\n    map[\"novemdecillion\"\
    ] = 1000000000000000000000000000000000000000000000000;", "{\n    \n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        \n    \
    \    switch(c)\n        {\n            case '0':\n            case '1':\n    \
    \        case '2':\n            case '3':\n            case '4':\n           \
    \ case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw runtime_error(\"Invalid input\");\n\
    \        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,c++,string |>\n<| c |>\nThis is not\
    \ the best solution. `std::sort` will sort lexicographically (alphabetically)\
    \ by default. `std::stable_sort` will sort numerically (numerically) by default.\n\
    <|/ c |>\n<| c |>\nI agree, but I wanted to show a solution that would work with\
    \ any type of number. `std::sort` will sort lexicographically by default, but\
    \ `std::stable_sort` will sort numerically by default.\n<|/ c |>\n<| c |>\nI agree,\
    \ but I wanted to show a solution that would work with any type of number. `std::sort`\
    \ will sort lexicographically by default, but `std::stable_sort` will sort numerically\
    \ by default.\n<|/ c |>\n<| c |>\nI agree, but I wanted to show a solution that\
    \ would work with any type of number. `std::sort` will sort lexicographically\
    \ by default, but `std::stable_sort` will sort numerically by default.\n<|/ c\
    \ |>\n<| c |>\nI agree, but I wanted to show a solution that would work with any\
    \ type of number. `std::sort` will sort lexicographically by default, but `std::stable_sort`\
    \ will sort numerically by default.\n<|/ c |>\n<| a tags=sorting,c++,string |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n  \
    \  string result = \"\";\n    \n    for(int i = 0; i < numbers.length(); i++)\n\
    \    {\n        char c = numbers[i];\n        \n        if(isdigit(c))\n     \
    \   {\n            int number = std.atoi(numbers[i]);\n            \n        \
    \    if(number < 10)\n            {\n                result += \"0\";\n      \
    \      }\n            \n            result += number;\n        }\n    }\n    \n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work\
    \ for me. I'm getting a compilation error on `string sort_numbers(string numbers)`\
    \ saying `Error: no matching function for call to 'sort_numbers(std::string&)'`\n\
    <|/ c |>\n<| c |>\nI added the function declaration to the answer. Make sure you\
    \ have the correct header included.\n<|/ c |>\n<| c |>\nI added the function declaration\
    \ to the answer. Make sure you have the correct header included.\n<|/ c |>\n<|\
    \ c |>\nI added the function declaration to the answer. Make sure you have the\
    \ correct header included.\n<|/ c |>\n<| c |>\nI added the function declaration\
    \ to the answer. Make sure you have the correct header included.\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\
    #include <iterator>\n#include <cctype>", "{\n    string result = \"\";\n    \n\
    \    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n       \
    \     case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw new Exception(\"Invalid input\");\n        }\n    }\n    \n  \
    \  sort(result.begin(), result.end());\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting,algorithm |>\n<| a tags=c++,sorting,algorithm |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\nThis\
    \ doesn't work if the input string contains any character other than '0' to '9'.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting, and it works fine.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't use stringstreams.\n<|/ c\
    \ |>\n<| c |>\n: I added a version that doesn't use stringstreams.\n<|/ c |>\n\
    <| c |>\n: I added a version that doesn't use stringstreams.\n<|/ c |>\n<| a tags=c++,sorting,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    \n    string sortedNumbers = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        \n        char digit = char(c);\n        \n  \
    \      if(digit == '0')\n        {\n            sortedNumbers += \"zero\";\n \
    \       }\n        else if(digit == '1')\n        {\n            sortedNumbers\
    \ += \"one\";\n        }\n        else if(digit == '2')\n        {\n         \
    \   sortedNumbers += \"two\";\n        }\n        else if(digit == '3')\n    \
    \    {\n            sortedNumbers += \"three\";\n        }\n        else if(digit\
    \ == '4')\n        {\n            sortedNumbers += \"four\";\n        }\n    \
    \    else if(digit == '5')\n        {\n            sortedNumbers += \"five\";\n\
    \        }\n        else if(digit == '6')\n        {\n            sortedNumbers\
    \ += \"six\";\n        }\n        else if(digit == '7')\n        {\n         \
    \   sortedNumbers += \"seven\";\n        }\n        else if(digit == '8')\n  \
    \      {\n            sortedNumbers += \"eight\";\n        }\n        else if(digit\
    \ == '9')\n        {\n            sortedNumbers += \"nine\";\n        }\n    \
    \    else\n        {\n            sortedNumbers += digit;\n        }\n       \
    \ \n    }\n    \n    return sortedNumbers;\n}", "{\n    int[] nums = to_int_array(numbers);\n\
    \    sort(nums, nums.length);\n    string result = \"\";\n    for(int i = 0; i\
    \ < nums.length; ++i)\n    {\n        result += to_string(nums[i]);\n    }\n \
    \   return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution, although\
    \ I wouldn't call it \"the most elegant solution\". I think it's pretty clear\
    \ what it's doing, and it's easy to understand. I'd probably just use an `if`\
    \ statement to check if `nums[i]` is `'nine'` and then append `'nine'` to the\
    \ result. No need for an array to store the numbers, just use `nums[i]` directly\
    \ in the `if` statement.\n<|/ c |>\n<| c |>\nI agree with you, it is very elegant\
    \ and easy to understand. My solution was more of a \"proof of concept\" that\
    \ I was working on and I wanted to show how it could be done without using an\
    \ array. I'll edit my answer to include your suggestion.\n<|/ c |>\n<| c |>\n\
    I agree with you that your solution is more elegant and easy to understand. I\
    \ just wanted to point out that your solution doesn't actually sort the numbers.\
    \ I believe that `sort` sorts the array in place, and so `nums` will still be\
    \ in its original order. Also, your solution doesn't handle negative numbers.\
    \ I believe that `sort` sorts negative numbers before the positive ones. So `sort_numbers(\"\
    one two three four five six seven eight nine\")` should return `\"one two three\
    \ four five six seven eight nine\"`, not `\"nine eight seven six five four three\
    \ two one\"`.\n<|/ c |>\n<| c |>\nI agree with you that my solution doesn't actually\
    \ sort the numbers. I believe that `sort` sorts the array in place, and so `nums`\
    \ will still be in its original order. Also, your solution doesn't handle negative\
    \ numbers. I believe that `sort` sorts negative numbers before the positive ones.\
    \ So `sort_numbers(\"one two three four five six seven eight nine\")` should return\
    \ `\"one two three four five six seven eight nine\"`, not `\"nine eight seven\
    \ six five four three two one\"`.\n<|/ c |>\n<| c |>\nI agree with you that my\
    \ solution doesn't actually sort the numbers. I believe that `sort` ", "{\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    string result = \"\
    \";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n\
    \            case '0':\n            case '1':\n            case '2':\n       \
    \     case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work for me. `sort_numbers(\"one two three four five six\
    \ seven eight nine\")` returns `\"one two three four five six seven eight nine\"\
    `.\n<|/ c |>\n<| c |>\nI tested it and it works. I used the exact code I posted\
    \ above. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\nI copied it\
    \ exactly as you posted it. I don't know what I'm doing wrong.\n<|/ c |>\n<| c\
    \ |>\nI added the full code I used to test it above. Can you try that and see\
    \ if it works for you?\n<|/ c |>\n<| c |>\nI copied your code exactly. I get the\
    \ same result as I posted above.\n<|/ c |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,c++,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    for(int i = 0; i <\
    \ numbers.size(); i++)\n    {\n        string number = numbers[i];\n        \n\
    \        if(number == \"zero\")\n            number = \"1\";\n        else if(number\
    \ == \"one\")\n            number = \"2\";\n        else if(number == \"two\"\
    )\n            number = \"3\";\n        else if(number == \"three\")\n       \
    \     number = \"4\";\n        else if(number == \"four\")\n            number\
    \ = \"5\";\n        else if(number == \"five\")\n            number = \"6\";\n\
    \        else if(number == \"six\")\n            number = \"7\";\n        else\
    \ if(number == \"seven\")\n            number = \"8\";\n        else if(number\
    \ == \"eight\")\n            number = \"9\";\n        else if(number == \"nine\"\
    )\n            number = \"0\";\n        \n        result += number;\n    }\n \
    \   \n    return result;\n}", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ the answer! I understand your code, but I still don't understand how it works.\
    \ I understand that you're using switch statements to compare each character in\
    \ the string with the numbers, but I don't understand how you get from that to\
    \ sorting them. Could you explain that?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to the code. Hope that helps.\n<|/ c |>\n<| c |>\nThanks for the explanation!\
    \ I understand it now. One last question: why do you use 'break' after each case?\
    \ I thought that 'break' would exit the switch statement and continue with the\
    \ next one. Why does it not work in this case?\n<|/ c |>\n<| c |>\n`break` exits\
    \ the switch statement. `break` exits the `foreach` loop. `break` exits the `sort`\
    \ function. `break` exits the `sort_numbers` function. `break` exits the `sort_numbers`\
    \ function. `break` exits the `sort_numbers` function. `break` exits the `sort_numbers`\
    \ function. `break` exits the `sort_numbers` function. `break` exits the `sort_numbers`\
    \ function. `break` exits the `sort_numbers` function. `break` exits the `sort_numbers`\
    \ function. `break` exits the `sort_numbers` function. `break` exits the `sort_numbers`\
    \ function. `break` exits the `sort_numbers` function. `break` exits the `sort_numbers`\
    \ function. `break` exits the `sort_numbers` function. `break` exits the `sort_numbers`\
    \ function. `break` exits the `sort_numbers` function. `break` exits the `sort_numbers`\
    \ function. `break` exits the `sort_numbers` function. `break` exits the `sort_numbers`\
    \ function. `break` exits the `sort_numbers` function. `break` exits the `sort_numbers`\
    \ function. `break` exits the `sort_numbers` function. `break` exits the `sort_numbers`\
    \ function. `break` exits the `sort_numbers` ", "{\n    string result = \"\";\n\
    \    \n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n \
    \           case '0':\n            case '1':\n            case '2':\n        \
    \    case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid input\");\n        }\n    }\n \
    \   \n    sort(result.begin(), result.end());\n    \n    return result;\n}", "{\n\
    \    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n    \
    \    switch(c)\n        {\n            case '0':\n            case '1':\n    \
    \        case '2':\n            case '3':\n            case '4':\n           \
    \ case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid input\");\n\
    \        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm |>\n<| c |>\nThe `switch`\
    \ statement is unnecessary. Just do `result += c;`.\n<|/ c |>\n<| c |>\nThanks,\
    \ I didn't know that you could do that. I edited my answer.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I tried your solution and it works fine. However I still\
    \ don't understand why my solution doesn't work. Could you please explain why\
    \ my solution doesn't work?\n<|/ c |>\n<| c |>\nYour solution doesn't work because\
    \ you're sorting a string. Strings are sorted lexicographically. Your solution\
    \ works because you're sorting an array of chars.\n<|/ c |>\n<| c |>\nThanks for\
    \ your explanation. Now I understand why my solution doesn't work. However I still\
    \ don't understand why my solution doesn't work. Could you please explain why\
    \ my solution doesn't work?\n<|/ c |>\n<| a tags=sorting,c++,algorithm |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw new Exception(\"\
    Invalid input\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c\
    \ |>\nThis doesn't work if the input string is \"1 2 3 4 5 6 7 8 9\"\n<|/ c |>\n\
    <| c |>\n: It works fine for me. `sort_numbers(\"1 2 3 4 5 6 7 8 9\")` returns\
    \ `\"1 2 3 4 5 6 7 8 9\"`.\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated\
    \ my answer to account for that case.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that doesn't require the user to input the numbers in order.\n<|/ c |>\n<| c\
    \ |>\n: I added a version that doesn't require the user to input the numbers in\
    \ order.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution using std::sort.\n<code>\n\
    #include <algorithm>\n#include <iostream>\n#include <string>", "{\n    string\
    \ result = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw new Exception(\"Invalid choice\");\n        }\n    }\n\
    \    \n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\
    </code>\n<|/ a tags=sorting,c++,string |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    map<string,int> map;\n    for(int i=0;i<numbers.length();i++)\n    {\n \
    \       string number = numbers[i];\n        if(map.find(number) != map.end())\n\
    \        {\n            map[number]++;\n        }\n        else\n        {\n \
    \           map[number] = 1;\n        }\n    }\n    map<string,int>::iterator\
    \ it;\n    string result = \"\";\n    for(it=map.begin();it!=map.end();it++)\n\
    \    {\n        result += it->first + \" \";\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with the input \"1 2 3 4\
    \ 5 6 7 8 9 10\". It returns \"1 2 3 4 5 6 7 8 9 10\".\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used the exact same input as you did. Did you copy and paste\
    \ the code? If so, make sure you don't have any extra spaces or tabs in your input.\n\
    <|/ c |>\n<| c |>\nYes, I copied and pasted your code. Did you copy and paste\
    \ my code? If so, make sure you don't have any extra spaces or tabs in your input.\n\
    <|/ c |>\n<| c |>\nI copied your code. Did you copy and paste my code? If so,\
    \ make sure you don't have any extra spaces or tabs in your input.\n<|/ c |>\n\
    <| c |>\nI copied your code. Did you copy and paste my code? If so, make sure\
    \ you don't have any extra spaces or tabs in your input.\n<|/ c |>\n<| a tags=sorting,c++,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    \n  \
    \  foreach(char c in numbers)\n    {\n        switch(c)\n        {\n         \
    \   case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw runtime_error(\"Invalid input\");\n        }\n    }\n    \n  \
    \  sort(result.begin(), result.end());\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <string>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n \
    \       {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,c++,algorithm\
    \ |>\nI wrote a little program that does this in O(n) time. \n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>", "{\n\
    \    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n    \
    \    switch(c)\n        {\n            case '0':\n            case '1':\n    \
    \        case '2':\n            case '3':\n            case '4':\n           \
    \ case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw runtime_error(\"Invalid number\"\
    );\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n  \
    \  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace\
    \ std;", "{\n    \n    string result = \"\";\n    \n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        \n        if(numbers[i] == 'nine')\n        {\n       \
    \     \n            result += numbers[i];\n            \n        }\n        \n\
    \        else if(numbers[i] == 'zero')\n        {\n            \n            result\
    \ += numbers[i];\n            \n        }\n        \n        else if(numbers[i]\
    \ == 'one')\n        {\n            \n            result += numbers[i];\n    \
    \        \n        }\n        \n        else if(numbers[i] == 'two')\n       \
    \ {\n            \n            result += numbers[i];\n            \n        }\n\
    \        \n        else if(numbers[i] == 'three')\n        {\n            \n \
    \           result += numbers[i];\n            \n        }\n        \n       \
    \ else if(numbers[i] == 'four')\n        {\n            \n            result +=\
    \ numbers[i];\n            \n        }\n        \n        else if(numbers[i] ==\
    \ 'five')\n        {\n            \n            result += numbers[i];\n      \
    \      \n        }\n        \n        else if(numbers[i] == 'six')\n        {\n\
    \            \n            result += numbers[i];\n            \n        }\n  \
    \      \n        else if(numbers[i] == 'seven')\n        {\n            \n   \
    \         result += numbers[i];\n            \n        }\n        \n        else\
    \ if(numbers[i] == 'eight')\n        {\n            \n            result += numbers[i];\n\
    \            \n        }\n        \n        else if(numbers[i] == 'nine')\n  \
    \      {\n            \n            result += numbers[i];\n            \n    \
    \    }\n        \n    }\n    \n    sort(result.begin(), result.end());\n    \n\
    \    return result;\n}", "{\n    int[] nums = toints(numbers);\n    sort(nums,\
    \ 0, nums.length - 1);\n    string result = \"\";\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result += nums[i];\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0': result += \"zero\"; break;\n            case\
    \ '1': result += \"one\"; break;\n            case '2': result += \"two\"; break;\n\
    \            case '3': result += \"three\"; break;\n            case '4': result\
    \ += \"four\"; break;\n            case '5': result += \"five\"; break;\n    \
    \        case '6': result += \"six\"; break;\n            case '7': result +=\
    \ \"seven\"; break;\n            case '8': result += \"eight\"; break;\n     \
    \       case '9': result += \"nine\"; break;\n            default: result += \"\
    ?\";\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to do this without having to write out each case. Is there a\
    \ way to do this with some sort of loop?\n<|/ c |>\n<| c |>\n: Yes, you can use\
    \ a `switch` statement to loop over each character in the string. I'll add an\
    \ example to my answer.\n<|/ c |>\n<| c |>\n: I added an example using a `switch`\
    \ statement. Hope that helps.\n<|/ c |>\n<| c |>\n: I added an example using a\
    \ `switch` statement. Hope that helps.\n<|/ c |>\n<| a tags=c++,switch-statement,string\
    \ |>\nYou could use a std::map to map the characters to their numeric equivalents.\n\
    <code>\nstd::map<char, int> charToNum;\ncharToNum['0'] = 48;\ncharToNum['1'] =\
    \ 49;\ncharToNum['2'] = 50;\ncharToNum['3'] = 51;\ncharToNum['4'] = 52;\ncharToNum['5']\
    \ = 53;\ncharToNum['6'] = 54;\ncharToNum['7'] = 55;\ncharToNum['8'] = 56;\ncharToNum['9']\
    \ = 57;\n</code>\nThen you can just iterate over the string and use the map to\
    \ look up the numeric equivalent:\n<code>\nstd::string numString = \"1234\";\n\
    std::string result = \"\";\nfor (char c : numString)\n{\n    result += charToNum[c];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis solution is nice and simple, but\
    \ I wonder if there is a way to do this without having to write out each case.\
    \ Is there a way to do this with some sort of loop?\n<|/ c |>\n<| c |>\n", "{\n\
    \    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work for me. `sort_numbers(\"one two three four five six seven eight\
    \ nine\")` returns `one two three four five six seven eight nine`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I tested it on ideone.com. http://ideone.com/HZKvK\n\
    <|/ c |>\n<| c |>\nI tested it on ideone.com. http://ideone.com/HZKvK\n<|/ c |>\n\
    <| c |>\nI tested it on ideone.com. http://ideone.com/HZKvK\n<|/ c |>\n<| c |>\n\
    I tested it on ideone.com. http://ideone.com/HZKvK\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n  \
    \  string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n\
    <| c |>\nThanks for your answer. I'm sorry I didn't specify this in the question,\
    \ but I do need to use arrays. I edited the question to reflect this.\n<|/ c |>\n\
    <| c |>\nI added a solution that uses arrays. I hope it helps.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. I'm sorry I didn't specify this in the question,\
    \ but I do need to use arrays. I edited the question to reflect this.\n<|/ c |>\n\
    <| c |>\nI added a solution that uses arrays. I hope it helps.\n<|/ c |>\n<| a\
    \ tags=c++,sorting |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include\
    \ <string>\nusing namespace std;", "{\n    int[] numbers_int;\n    \n    foreach(char\
    \ c in numbers)\n    {\n        numbers_int[c - '0'] = numbers_int[c - '0'] |\
    \ 1;\n    }\n    \n    int[] sorted_numbers_int = new int[numbers_int.len];\n\
    \    \n    for(int i = 0; i < numbers_int.len; i++)\n    {\n        sorted_numbers_int[i]\
    \ = numbers_int[i];\n    }\n    \n    sort(sorted_numbers_int);\n    \n    string\
    \ sorted_numbers = \"\";\n    \n    foreach(int i in sorted_numbers_int)\n   \
    \ {\n        sorted_numbers += \"zero\";\n    }\n    \n    foreach(int i in sorted_numbers_int)\n\
    \    {\n        sorted_numbers += \"one\";\n    }\n    \n    foreach(int i in\
    \ sorted_numbers_int)\n    {\n        sorted_numbers += \"two\";\n    }\n    \n\
    \    foreach(int i in sorted_numbers_int)\n    {\n        sorted_numbers += \"\
    three\";\n    }\n    \n    foreach(int i in sorted_numbers_int)\n    {\n     \
    \   sorted_numbers += \"four\";\n    }\n    \n    foreach(int i in sorted_numbers_int)\n\
    \    {\n        sorted_numbers += \"five\";\n    }\n    \n    foreach(int i in\
    \ sorted_numbers_int)\n    {\n        sorted_numbers += \"six\";\n    }\n    \n\
    \    foreach(int i in sorted_numbers_int)\n    {\n        sorted_numbers += \"\
    seven\";\n    }\n    \n    foreach(int i in sorted_numbers_int)\n    {\n     \
    \   sorted_numbers += \"eight\";\n    }\n    \n    foreach(int i in sorted_numbers_int)\n\
    \    {\n        sorted_numbers += \"nine\";\n    }\n    \n    return sorted_numbers;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution\
    \ works but it is very inefficient. I'm looking for a more efficient solution.\
    \ Thanks again.\n<|/ c |>\n<| c |>\nI added a solution that is more efficient\
    \ than yours. I hope it helps.\n<|/ c |>\n<| a tags=sorting,c++,algorithm |>\n\
    I wrote a solution that is more efficient than yours. I hope it helps.\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    #include <numeric>\n#include <cmath>", "{\n    string result = \"\";\n    \n \
    \   foreach(char c in numbers)\n    {\n        switch(c)\n        {\n        \
    \    case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=sorting,c++ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include\
    \ <vector>\n#include <string>", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        int number = std.atoi(c);\n        \n        if(number\
    \ < 10)\n        {\n            result += number;\n        }\n        else\n \
    \       {\n            result += std.tostring(std.pow(10, number-1));\n      \
    \  }\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(char c in numbers)\n    {\n        switch(c)\n        {\n          \
    \  case '0':\n            case '1':\n            case '2':\n            case '3':\n\
    \            case '4':\n            case '5':\n            case '6':\n       \
    \     case '7':\n            case '8':\n            case '9':\n              \
    \  result += c;\n                break;\n            default:\n              \
    \  throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a solution in C#, using\
    \ LINQ and a custom comparer. \n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result += c;\n\
    \                break;\n            default:\n                throw \"Invalid\
    \ choice\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your\
    \ solution. Just a little bit of improvement: instead of `switch` you can use\
    \ `if-else` statement. `if` statement is more readable and easier to understand.\n\
    <|/ c |>\n<| c |>\nI agree that `switch` is more readable, but I find `if-else`\
    \ statements easier to understand and maintain. `switch` statements are often\
    \ more difficult to understand and maintain.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. `switch` statements are often more difficult to understand and maintain.\
    \ `switch` statements are often more difficult to understand and maintain.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;", "{\n    string result = \"\";\n    \n  \
    \  foreach(char c in numbers)\n    {\n        switch(c)\n        {\n         \
    \   case '0':\n            case '1':\n            case '2':\n            case\
    \ '3':\n            case '4':\n            case '5':\n            case '6':\n\
    \            case '7':\n            case '8':\n            case '9':\n       \
    \         result += c;\n                break;\n            default:\n       \
    \         throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    \n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n \
    \           case '0':\n            case '1':\n            case '2':\n        \
    \    case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nI like your solution, however I do not understand how it works. Could\
    \ you please explain how it works?\n<|/ c |>\n<| c |>\nThe `foreach` loop iterates\
    \ over each character in the string `numbers`. Each character is then compared\
    \ to `'0'`, `'1'`, etc. and added to the result string if that character is less\
    \ than `'9'`. `sort` then sorts the string in ascending order.\n<|/ c |>\n<| c\
    \ |>\nI understand now. Thank you for your help.\n<|/ c |>\n<| a tags=sorting,c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>", "{\n\
    \    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"one\"] = 1;\n  \
    \  map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"] = 4;\n    map[\"\
    five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n    map[\"eight\"\
    ] = 8;\n    map[\"nine\"] = 9;\n    map[\"ten\"] = 10;\n    map[\"eleven\"] =\
    \ 11;\n    map[\"twelve\"] = 12;\n    map[\"thirteen\"] = 13;\n    map[\"fourteen\"\
    ] = 14;\n    map[\"fifteen\"] = 15;\n    map[\"sixteen\"] = 16;\n    map[\"seventeen\"\
    ] = 17;\n    map[\"eighteen\"] = 18;\n    map[\"nineteen\"] = 19;\n    map[\"\
    twenty\"] = 20;\n    map[\"thirty\"] = 30;\n    map[\"forty\"] = 31;\n    map[\"\
    fifty\"] = 30;\n    map[\"sixty\"] = 30;\n    map[\"seventy\"] = 30;\n    map[\"\
    eighty\"] = 30;\n    map[\"ninety\"] = 30;\n    map[\"hundred\"] = 100;\n    map[\"\
    thousand\"] = 1000;\n    map[\"million\"] = 1000000;\n    map[\"billion\"] = 1000000000;\n\
    \    map[\"trillion\"] = 1000000000000;\n    map[\"quadrillion\"] = 1000000000000000;\n\
    \    map[\"quintillion\"] = 1000000000000000000;\n    map[\"sextillion\"] = 10000000000000000000;\n\
    \    map[\"septillion\"] = 100000000000000000000;\n    map[\"octillion\"] = 100000000000000000000000;\n\
    \    map[\"nonillion\"] = 10000000000000000000000000;\n    map[\"decillion\"]\
    \ = 10000000000000000000000000000;\n    map[\"undecillion\"] = 10000000000000000000000000000000;\n\
    \    map[\"duodecillion\"] = 1000000000000000000000000000000000;\n    map[\"tredecillion\"\
    ] = 1000000000000000000000000000000000000;\n    map[\"quattuordecillion\"] = 1000000000000000000000000000000000000000;\n\
    \    map[\"sexdecillion\"] = 100000000000000000000000000000000000000000;\n   \
    \ map[\"septendecillion\"] = 1000000000000000000000000000000000000000000000000;\n\
    \    map[\"octodecillion\"] = 10000000000000000000000000000000000000000000000000;\n\
    \    map[\"novemdecillion\"] = 1000000000000000000000000000000000000000000000000000000;\n\
    \    map[\"", "{\n    \n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        \n        switch(c)\n        {\n            case '0':\
    \ \n            case '1': \n            case '2': \n            case '3': \n \
    \           case '4': \n            case '5': \n            case '6': \n     \
    \       case '7': \n            case '8': \n            case '9': \n         \
    \       result += c;\n                break;\n            default:\n         \
    \       throw \"Invalid input\";\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string\
    \ |>\n<| c |>\nThis answer doesn't explain what was wrong with OP's code. Also,\
    \ `std::sort` doesn't work with `std::string`.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to explain what was wrong with OP's code. `std::sort` doesn't work with `std::string`\
    \ because `std::sort` expects a `RandomAccessIterator` which `std::string` doesn't\
    \ provide.\n<|/ c |>\n<| c |>\nI added a comment to explain what was wrong with\
    \ OP's code. `std::sort` doesn't work with `std::string` because `std::sort` expects\
    \ a `RandomAccessIterator` which `std::string` doesn't provide.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid input\";\n        }\n \
    \   }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to do it without having to write out each case statement for\
    \ each number in the alphabet. Is there a way to do this with just one case statement?\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require a case statement for\
    \ each number.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require a case\
    \ statement for each number.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require a case statement for each number.\n<|/ c |>\n<| a tags=c++,sorting |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid input\"\
    ;\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like the idea of using\
    \ std.sort but this doesn't work for me. I'm getting a compile error \"error:\
    \ no matching function for call to 'sort'\" when I try to compile the code. I'm\
    \ using g++ 4.6.3\n<|/ c |>\n<| c |>\n: I added a link to an example that compiles\
    \ and runs for me using g++ 4.6.3.\n<|/ c |>\n<| c |>\nThanks for your help. I\
    \ figured out my problem. I was using an older version of g++. I'm now using 4.6.3\
    \ and it works great.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    \n    for(int i = 0; i < numbers.size(); ++i)\n    {\n \
    \       result += numbers[i];\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        result += \" \";\n    }\n    \n    for(int i = 0; i < numbers.size();\
    \ ++i)\n    {\n        result += std.string.reverse(numbers[i]);\n    }\n    \n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\
    using namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c\
    \ in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n  \
    \          case '1':\n            case '2':\n            case '3':\n         \
    \   case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw runtime_error(\"\
    Invalid input string\");\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,c++\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>\nusing\
    \ namespace std;", "{\n    int[] numbers_int;\n    \n    numbers_int = new int[numbers.length()];\n\
    \    \n    for(int i = 0; i < numbers.length(); i++)\n    {\n        numbers_int[i]\
    \ = std.atoi(numbers[i]);\n    }\n    \n    sort(numbers_int, numbers_int.length,\
    \ std.less);\n    \n    string result = \"\";\n    \n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        result += numbers_int[i];\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI wrote a solution in Rust which I believe\
    \ is more efficient than any of the other answers here.\n<code>\nfn sort_numbers(numbers:\
    \ &str) -> String {\n    let mut numbers_int: Vec<i32> = numbers.chars().map(|c|\
    \ c.to_digit(10)).collect();\n    numbers_int.sort();\n    numbers_int.iter().map(|x|\
    \ x.to_string()).collect::<String>()\n}\n</code>\n<|/ a tags=sorting,algorithm,c++\
    \ dscore=0 |>\n<| a tags=sorting,algorithm,c++ |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    for(int i = 0; i < numbers.size(); i++)\n   \
    \ {\n        result += numbers[i];\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(char c in\
    \ numbers)\n    {\n        if(isdigit(c))\n        {\n            result += c;\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much for your help. I appreciate\
    \ it. I will try this out and let you know how it goes. Thanks again!\n<|/ c |>\n\
    <| c |>\nI got it to work. Thanks so much for your help. I appreciate it. I will\
    \ try this out and let you know how it goes. Thanks again!\n<|/ c |>\n<| c |>\n\
    I got it to work. Thanks so much for your help. I appreciate it. I will try this\
    \ out and let you know how it goes. Thanks again!\n<|/ c |>\n<| c |>\nI got it\
    \ to work. Thanks so much for your help. I appreciate it. I will try this out\
    \ and let you know how it goes. Thanks again!\n<|/ c |>\n<| a tags=sorting,c++,string\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        switch(c)\n        {\n            case '0':\n     \
    \       case '1':\n            case '2':\n            case '3':\n            case\
    \ '4':\n            case '5':\n            case '6':\n            case '7':\n\
    \            case '8':\n            case '9':\n                result += c;\n\
    \                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    \n    sort(result.begin(), result.end());\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm |>\n<|\
    \ c |>\nThis doesn't work. Try it with `\"1 2 3 4 5 6 7 8 9\"`\n<|/ c |>\n<| c\
    \ |>\n: It does work. Try it with `\"1 2 3 4 5 6 7 8 9\"`\n<|/ c |>\n<| c |>\n\
    : It does work. Try it with `\"1 2 3 4 5 6 7 8 9\"`\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it with `\"1 2 3 4 5 6 7 8 9\"`\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `\"1 2 3 4 5 6 7 8 9\"`\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid number\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}", "{\n    string result = \"\";\n    for(int\
    \ i = 0; i < numbers.length(); i++)\n    {\n        if(numbers[i] == 'nine')\n\
    \        {\n            result += numbers[i];\n        }\n        else\n     \
    \   {\n            int number = std.atoi(numbers[i].c_str());\n            int\
    \ min = number;\n            int max = number;\n            for(int j = i + 1;\
    \ j < numbers.length(); j++)\n            {\n                string temp = numbers[j];\n\
    \                number = std.atoi(temp.c_str());\n                if(number >\
    \ max)\n                {\n                    max = number;\n               \
    \ }\n                if(number < min)\n                {\n                   \
    \ min = number;\n                }\n            }\n            string temp = std.to_string(min);\n\
    \            result += temp;\n            temp = std.to_string(max);\n       \
    \     result += temp;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=c++,sorting |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;", "{\n\
    \    map<string, int> map;\n    map[\"zero\"] = 0;\n    map[\"one\"] = 1;\n  \
    \  map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"four\"] = 4;\n    map[\"\
    five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"] = 7;\n    map[\"eight\"\
    ] = 8;\n    map[\"nine\"] = 9;\n    \n    string result = \"\";\n    \n    foreach(char\
    \ c in numbers)\n    {\n        int number = map[c];\n        result += to_string(number);\n\
    \    }\n    \n    return result;\n}", "{\n    string result = \"\";\n    \n  \
    \  foreach(char c in numbers)\n    {\n        int number = std.atoi(c);\n    \
    \    \n        if(number < 10)\n        {\n            result += numbers[number];\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    string result = \"\"\
    ;\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n        {\n\
    \            case '0':\n            case '1':\n            case '2':\n       \
    \     case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n            case '8':\n            case '9':\n\
    \                result += c;\n                break;\n            default:\n\
    \                throw runtime_error(\"Invalid number\");\n        }\n    }\n\
    \    \n    sort(result.begin(), result.end());\n    \n    return result;\n}\n\
    </code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThis doesn't work. `sort` expects\
    \ a `vector<int>` but you give it a `vector<char>`.\n<|/ c |>\n<| c |>\nI didn't\
    \ test it but I think it works. I tested it on ideone and it works.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. `sort` expects a `vector<int>` but you give it a `vector<char>`.\n\
    <|/ c |>\n<| c |>\nI tested it on ideone and it works. I edited my answer with\
    \ the code I tested.\n<|/ c |>\n<| c |>\nI tested it on ideone and it works. I\
    \ edited my answer with the code I tested.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\n#include <vector>\n#include <string>",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw runtime_error(\"Invalid input\");\n\
    \        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm |>\n<| c |>\nI like this\
    \ solution, although it does require a lot of code duplication. Also, since it\
    \ uses `std::sort`, it might not be the fastest solution. Still, it's a good solution\
    \ and I like it.\n<|/ c |>\n<| c |>\nI agree with you. Still, it's worth mentioning\
    \ that this solution uses `std::sort` under the hood, so it's probably the best\
    \ solution in terms of performance.\n<|/ c |>\n<| c |>\nI agree with you, too.\
    \ Still, it's worth mentioning that this solution uses `std::sort` under the hood,\
    \ so it's probably the best solution in terms of performance.\n<|/ c |>\n<| c\
    \ |>\nI agree with you, too. Still, it's worth mentioning that this solution uses\
    \ `std::sort` under the hood, so it's probably the best solution in terms of performance.\n\
    <|/ c |>\n<| c |>\nI agree with you, too. Still, it's worth mentioning that this\
    \ solution uses `std::sort` under the hood, so it's probably the best solution\
    \ in terms of performance.\n<|/ c |>\n<| a tags=c++,sorting,algorithm |>\nHere's\
    \ a solution using std::sort and std::iota to generate the permutations:\n<code>\n\
    #include <algorithm>\n#include <iostream>\n#include <iterator>\n#include <string>\n\
    #include <vector>", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        if(isdigit(c))\n        {\n            result += c;\n        }\n\
    \    }\n    sort(result.begin(), result.end());\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting |>\n<| c |>\nI like this solution, except it won't compile\
    \ on MSVC++ 2010. `std::sort` requires `std::less<>` to be a template parameter,\
    \ not a type. `std::less<std::string>` doesn't work. `std::less<std::string>()`\
    \ is required to work, but `std::less<std::string>{}` doesn't.\n<|/ c |>\n<| c\
    \ |>\n: Yes, I tested it on MSVC++ 2010 and it didn't work. `std::less<std::string>{}`\
    \ doesn't work either, but `std::less<std::string>{}()` does.\n<|/ c |>\n<| c\
    \ |>\n: I tested it on MSVC++ 2012 and it worked fine. `std::less<std::string>{}`\
    \ works.\n<|/ c |>\n<| c |>\n: I tested it on MSVC++ 2013 and it worked fine.\
    \ `std::less<std::string>{}` works.\n<|/ c |>\n<| c |>\n: I tested it on MSVC++\
    \ 2015 and it worked fine. `std::less<std::string>{}` works.\n<|/ c |>\n<| a tags=c++,sorting\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <string>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    foreach(char c in numbers)\n\
    \    {\n        switch(c)\n        {\n            case '0':\n            case\
    \ '1':\n            case '2':\n            case '3':\n            case '4':\n\
    \            case '5':\n            case '6':\n            case '7':\n       \
    \     case '8':\n            case '9':\n                result += c;\n       \
    \         break;\n            default:\n                throw \"Invalid choice\"\
    ;\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    string sortedNumbers = \"\";\n    \n    foreach(char c in numbers)\n   \
    \ {\n        sortedNumbers += std.string.format(\" %s \", std.string.format(\"\
    \ %s \", c));\n    }\n    \n    sortedNumbers = std.string.trim(sortedNumbers);\n\
    \    \n    sortedNumbers = std.string.trim(sortedNumbers);\n    \n    sortedNumbers\
    \ = std.string.trim(sortedNumbers);\n    \n    sortedNumbers = std.string.trim(sortedNumbers);\n\
    \    \n    sortedNumbers = std.string.trim(sortedNumbers);\n    \n    sortedNumbers\
    \ = std.string.trim(sortedNumbers);\n    \n    sortedNumbers = std.string.trim(sortedNumbers);\n\
    \    \n    sortedNumbers = std.string.trim(sortedNumbers);\n    \n    sortedNumbers\
    \ = std.string.trim(sortedNumbers);\n    \n    sortedNumbers = std.string.trim(sortedNumbers);\n\
    \    \n    sortedNumbers = std.string.trim(sortedNumbers);\n    \n    sortedNumbers\
    \ = std.string.trim(sortedNumbers);\n    \n    sortedNumbers = std.string.trim(sortedNumbers);\n\
    \    \n    sortedNumbers = std.string.trim(sortedNumbers);\n    \n    sortedNumbers\
    \ = std.string.trim(sortedNumbers);\n    \n    sortedNumbers = std.string.trim(sortedNumbers);\n\
    \    \n    sortedNumbers = std.string.trim(sortedNumbers);\n    \n    sortedNumbers\
    \ = std.string.trim(sortedNumbers);\n    \n    sortedNumbers = std.string.trim(sortedNumbers);\n\
    \    \n    sortedNumbers = std.string.trim(sortedNumbers);\n    \n    sortedNumbers\
    \ = std.string.trim(sortedNumbers);\n    \n    sortedNumbers = std.string.trim(sortedNumbers);\n\
    \    \n    sortedNumbers = std.string.trim(sortedNumbers);\n    \n    sortedNumbers\
    \ = std.string.trim(sortedNumbers);\n    \n    sortedNumbers = std.string.trim(sortedNumbers);\n\
    \    \n    sortedNumbers = std.string.trim(sortedNumbers);\n    \n    sortedNumbers\
    \ = std.string.trim(sortedNumbers);\n    \n    sortedNumbers = std.string.trim(sortedNumbers);\n\
    \    \n    sortedNumbers = std.string.trim(sortedNumbers);\n    \n    sortedNumbers\
    \ = std.string.trim(sortedNumbers);\n    \n    sortedNumbers = std.string.trim(sortedNumbers);\n\
    \    \n    ", "{\n    string result = \"\";\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        result += numbers[i];\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,string\
    \ |>\n<| a tags=c++,sorting,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    #include <algorithm>", "{\n    map<string, int> map;\n    map[\"zero\"] = 0;\n\
    \    map[\"one\"] = 1;\n    map[\"two\"] = 2;\n    map[\"three\"] = 3;\n    map[\"\
    four\"] = 4;\n    map[\"five\"] = 5;\n    map[\"six\"] = 6;\n    map[\"seven\"\
    ] = 7;\n    map[\"eight\"] = 8;\n    map[\"nine\"] = 9;\n    \n    map[\"ten\"\
    ] = 10;\n    map[\"eleven\"] = 11;\n    map[\"twelve\"] = 12;\n    map[\"thirteen\"\
    ] = 13;\n    map[\"fourteen\"] = 14;\n    map[\"fifteen\"] = 15;\n    map[\"sixteen\"\
    ] = 16;\n    map[\"seventeen\"] = 17;\n    map[\"eighteen\"] = 18;\n    map[\"\
    nineteen\"] = 19;\n    \n    map[\"twenty\"] = 20;\n    map[\"thirty\"] = 30;\n\
    \    map[\"forty\"] = 31;\n    map[\"fifty\"] = 30;\n    map[\"sixty\"] = 30;\n\
    \    map[\"seventy\"] = 30;\n    map[\"eighty\"] = 30;\n    map[\"ninety\"] =\
    \ 30;\n    \n    map[\"hundred\"] = 100;\n    map[\"thousand\"] = 1000;\n    map[\"\
    million\"] = 1000000;\n    map[\"billion\"] = 1000000000;\n    map[\"trillion\"\
    ] = 1000000000000;\n    map[\"quadrillion\"] = 1000000000000000;\n    map[\"quintillion\"\
    ] = 1000000000000000000;\n    map[\"sextillion\"] = 10000000000000000000;\n  \
    \  map[\"septillion\"] = 100000000000000000000;\n    map[\"octillion\"] = 10000000000000000000000;\n\
    \    map[\"nonillion\"] = 10000000000000000000000000;\n    map[\"decillion\"]\
    \ = 10000000000000000000000000000;\n    map[\"undecillion\"] = 10000000000000000000000000000000;\n\
    \    map[\"duodecillion\"] = 1000000000000000000000000000000000;\n    map[\"tredecillion\"\
    ] = 1000000000000000000000000000000000000;\n    map[\"quattuordecillion\"] = 1000000000000000000000000000000000000000;\n\
    \    map[\"quindecillion\"] = 100000000000000000000000000000000000000000;\n  \
    \  map[\"sexdecillion\"] = 100000000000000000000000000000000000000000000;\n  \
    \  map[\"septendecillion\"] = 100000000000000000000000000000000000000000\n   \
    \ map[\"octodecillion\"] = 1000000000000000000000000000000000000000000;\n    map[\"",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw runtime_error(\"Invalid input\");\n\
    \        }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c |>\nThe `switch` statement\
    \ is unnecessary. `'0'` through `'9'` are guaranteed to be consecutive.\n<|/ c\
    \ |>\n<| c |>\nYes, but it's more readable and easier to maintain.\n<|/ c |>\n\
    <| c |>\nI agree, but I find it more readable and easier to maintain.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I find it more readable and easier to maintain.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I find it more readable and easier to\
    \ maintain.\n<|/ c |>\n<| a dscore=3 |>\nThe simplest way is to use std::sort\
    \ with a custom comparator:\n<code>\n#include <algorithm>\n#include <iostream>\n\
    #include <string>", "{\n    string result = \"\";\n    \n    for(int i = 0; i\
    \ < numbers.length(); i++)\n    {\n        result += numbers[i];\n    }\n    \n\
    \    for(int i = 0; i < numbers.length(); i++)\n    {\n        for(int j = i +\
    \ 1; j < numbers.length(); j++)\n        {\n            if(numbers[i] > numbers[j])\n\
    \            {\n                string temp = numbers[i];\n                numbers[i]\
    \ = numbers[j];\n                numbers[j] = temp;\n            }\n        }\n\
    \    }\n    \n    for(int i = 0; i < numbers.length(); i++)\n    {\n        result\
    \ += numbers[i];\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/26832793)\n<|/ c |>\n<| c |>\nThe question\
    \ was how to sort numbers in ascending order. My answer was to show how to do\
    \ that. Not sure what else to add.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26832793)\n\
    <|/ c |>\n<| c |>\nThe question was how to sort numbers in ascending order. My\
    \ answer was to show how to do that. Not sure what else to add.\n<|/ c |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26832793)\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    int[] numbers_int = new int[numbers.length()];\n\
    \    for(int i = 0; i < numbers.length(); i++)\n    {\n        numbers_int[i]\
    \ = std.atoi(numbers[i]);\n    }\n    sort(numbers_int, numbers_int.length);\n\
    \    string sorted_numbers = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n\
    \    {\n        sorted_numbers += numbers_int[i];\n        if(i != numbers.length()-1)\n\
    \            sorted_numbers += \" \";\n    }\n    return sorted_numbers;\n}\n\
    </code>\n<|/ a tags=sorting,c++,arrays |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    for(int i = 0; i <\
    \ numbers.size(); ++i)\n    {\n        result += numbers[i];\n    }\n    \n  \
    \  sort(result.begin(), result.end());\n    \n    return result;\n}", "{\n   \
    \ string result = \"\";\n    foreach(char c in numbers)\n    {\n        if(isdigit(c))\n\
    \        {\n            int num = std.atoi(c);\n            int low = num;\n \
    \           int high = num;\n            while(high > 0)\n            {\n    \
    \            high--;\n                if(low > high)\n                {\n    \
    \                result += (char)low;\n                    low = high;\n     \
    \           }\n                else\n                {\n                    low--;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting,algorithm |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n        switch(c)\n\
    \        {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result += c;\n                break;\n            default:\n\
    \                throw \"Invalid input\";\n        }\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n\
    \    {\n        int number = to_integer(c);\n        \n        if(number > 9)\n\
    \        {\n            result += to_string(number - 10) + \"n\";\n        }\n\
    \        else\n        {\n            result += to_string(number) + \"0\";\n \
    \       }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <vector>\n#include <algorithm>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n  \
    \      {\n            case '0': result += \"zero\"; break;\n            case '1':\
    \ result += \"one\"; break;\n            case '2': result += \"two\"; break;\n\
    \            case '3': result += \"three\"; break;\n            case '4': result\
    \ += \"four\"; break;\n            case '5': result += \"five\"; break;\n    \
    \        case '6': result += \"six\"; break;\n            case '7': result +=\
    \ \"seven\"; break;\n            case '8': result += \"eight\"; break;\n     \
    \       case '9': result += \"nine\"; break;\n        }\n    }\n    \n    sort(result.begin(),\
    \ result.end());\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,c++,string\
    \ |>\n<| c |>\nI like your solution, but I wonder why you didn't use std::sort\
    \ and std::swap ?\n<|/ c |>\n<| c |>\nI didn't know about std::swap until you\
    \ mentioned it.  I thought it would be too much to ask for an explanation of how\
    \ it works.  I guess I should go read up on it.\n<|/ c |>\n<| c |>\nI added a\
    \ link to an explanation of std::swap.\n<|/ c |>\n<| c |>\nI added a link to an\
    \ explanation of std::swap.\n<|/ c |>\n<| c |>\nI added a link to an explanation\
    \ of std::swap.\n<|/ c |>\n<| a tags=sorting,c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <algorithm>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n    {\n     \
    \   result += numbers[i];\n    }\n    sort(result.begin(), result.end());\n  \
    \  return result;\n}\n</code>\n<|/ a tags=c++,sorting,string |>\n<| c |>\n`std::sort`\
    \ doesn't work with `std::string`\n<|/ c |>\n<| c |>\n: It does. It's a template\
    \ function that works with any type that has a `begin` and `end` method.\n<|/\
    \ c |>\n<| c |>\n: It doesn't work if you pass it a `std::string` because `std::string`\
    \ doesn't have a `begin` method. `std::sort` works with any type that has a `begin`\
    \ and `end` method.\n<|/ c |>\n<| c |>\n: It works with any type that has a `begin`\
    \ and `end` method. `std::sort` works with any type that has a `begin` and `end`\
    \ method.\n<|/ c |>\n<| c |>\n: It works with any type that has a `begin` and\
    \ `end` method. `std::sort` works with any type that has a `begin` and `end` method.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    foreach(char\
    \ c in numbers)\n    {\n        switch(c)\n        {\n            case '0':\n\
    \            case '1':\n            case '2':\n            case '3':\n       \
    \     case '4':\n            case '5':\n            case '6':\n            case\
    \ '7':\n            case '8':\n            case '9':\n                result +=\
    \ c;\n                break;\n            default:\n                throw \"Invalid\
    \ input\";\n        }\n    }\n    sort(result.begin(), result.end());\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;",
  "{\n    string result = \"\";\n    \n    foreach(char c in numbers)\n    {\n   \
    \     switch(c)\n        {\n            case '0':\n            case '1':\n   \
    \         case '2':\n            case '3':\n            case '4':\n          \
    \  case '5':\n            case '6':\n            case '7':\n            case '8':\n\
    \            case '9':\n                result += c;\n                break;\n\
    \            default:\n                throw \"Invalid choice\";\n        }\n\
    \    }\n    \n    sort(result.begin(), result.end());\n    \n    return result;\n\
    }", "{\n    map<string,int> numbers_map;\n    for(int i = 0; i < numbers.length();\
    \ i++)\n    {\n        numbers_map[numbers[i]] = i;\n    }\n    \n    string sorted_numbers\
    \ = \"\";\n    for(int i = 0; i < numbers.length(); i++)\n    {\n        sorted_numbers\
    \ += numbers[i];\n    }\n    \n    for(int i = 0; i < numbers.length(); i++)\n\
    \    {\n        sorted_numbers += \" \";\n    }\n    \n    for(int i = 0; i <\
    \ numbers.length(); i++)\n    {\n        sorted_numbers += numbers[numbers_map[sorted_numbers]];\n\
    \        sorted_numbers += \" \";\n    }\n    \n    return sorted_numbers;\n}",
  "{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "{\n    string result\
    \ = \"\";\n    \n    foreach(char c in numbers)\n    {\n        switch(c)\n  \
    \      {\n            case '0':\n            case '1':\n            case '2':\n\
    \            case '3':\n            case '4':\n            case '5':\n       \
    \     case '6':\n            case '7':\n            case '8':\n            case\
    \ '9':\n                result = result + c;\n                break;\n       \
    \     default:\n                throw new Exception(\"Invalid input\");\n    \
    \    }\n    }\n    \n    sort(result.begin(), result.end());\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    string result = \"\";\n    \n    foreach(char c in\
    \ numbers)\n    {\n        if(isdigit(c))\n        {\n            int number =\
    \ std.atoi(c);\n            \n            if(number < 10)\n            {\n   \
    \             result += std.chars[number];\n            }\n            else\n\
    \            {\n                result += std.chars[number - 10];\n          \
    \  }\n        }\n        else\n        {\n            result += c;\n        }\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,sorting |>\n<| c\
    \ |>\nI appreciate your effort, but this doesn't really answer the question. Your\
    \ code doesn't sort the numbers, it just converts them to strings and then sorts\
    \ them. That's not what the OP asked for.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ my code doesn't sort the numbers, it just converts them to strings and then\
    \ sorts them. That's not what the OP asked for. My code sorts the numbers and\
    \ then converts them to strings. I believe that my code answers the question \"\
    how do I sort numbers in C++?\" The OP asked \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?\"\
    \ I believe that my code answers the question \"how do I sort numbers in C++?",
  "{\n    string result = \"\";\n    foreach(char c in numbers)\n    {\n        if(isdigit(c))\n\
    \        {\n            int num = std.atoi(c);\n            result += num;\n \
    \       }\n    }\n    sort(result.begin(), result.end());\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code doesn't work. `sort` doesn't\
    \ work with `string`s.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself and see\
    \ for yourself. It works with `string`s just fine.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it yourself and see for yourself. It works with `string`s just fine.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it yourself and see for yourself. It works\
    \ with `string`s just fine.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself\
    \ and see for yourself. It works with `string`s just fine.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
