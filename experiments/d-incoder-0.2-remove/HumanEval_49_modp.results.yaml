language: d
name: HumanEval_49_modp
results:
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres = (res\
    \ * p) % p;\n\t\tn = n / 2;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\
    \t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3undx9bd.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmp3undx9bd.__unittest_L20_C1() [0x427a89]

    ??:? void tmp3undx9bd.__modtest() [0x427b84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tres = (res*p)\
    \ % p;\n\t\t}\n\t\tn /= 2;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n & -p;\n\t\tres = (res\
    \ * tmp) % p;\n\t\tn = (n >> p) + p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164458
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr = std.pow(r, p);\n\
    \t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr\
    \ = std.pow(r, p);\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\t\n\treturn r;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp3(long n, long p) \n{\n\tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n\
    \ & 1)\n\t\t\tr = std.pow(r, p);\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\t\n\t\
    return r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n              \
    \          \n*/\nlong modp4(long n, long p) \n{\n\tlong r = 1;\n\t\n\twhile(n\
    \ > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr = std.pow(r, p);\n\t\tn = n >> 1;\n\t\tp =\
    \ p << 1;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp5(long n, long p) \n{\n\tlong r = 1;\n\
    \t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr = std.pow(r, p);\n\t\tn = n >>\
    \ 1;\n\t\tp = p << 1;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr = std.pow(r, p);\n\
    \t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp7(long n,\
    \ long p) \n{\n\tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr\
    \ = std.pow(r, p);\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpphu2npwx.d(124): Error: found `unittest` instead of statement

    /tmp/tmpphu2npwx.d(136): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphu2npwx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tr = r * p;\n\t\tn = n\
    \ >> 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3i6t3_ms.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmp3i6t3_ms.__unittest_L20_C1() [0x427a75]

    ??:? void tmp3i6t3_ms.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong q;\n\t\n\tfor(; n > 0; n--)\n\t{\n\t\tq = p / n;\n\t\t\
    res = (res*q) % p;\n\t\tp = n;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4z4kh5wb.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmp4z4kh5wb.__unittest_L21_C1() [0x427a79]

    ??:? void tmp4z4kh5wb.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res * p) % p;\n\t\t}\n\t\t\n\t\tn = (n >> 1);\n\t\tp = (p * p) % p;\n\t}\n\t\
    \n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\t\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp77f2cft7.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e0d]

    ??:? void tmp77f2cft7.__unittest_L22_C1() [0x427a91]

    ??:? void tmp77f2cft7.__modtest() [0x427b8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430008]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fae5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a99d]

    ??:? runModuleUnitTests [0x42b909]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42825c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\t\
    long t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong\
    \ q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m\
    \ = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r =\
    \ 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\
    \tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\t\
    long m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong\
    \ r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t\
    \ = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q =\
    \ 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\
    \tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\t\
    long t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong\
    \ q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m\
    \ = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r =\
    \ 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\
    \tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\t\
    long m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong\
    \ r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t\
    \ = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q =\
    \ 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt2nkqx0d.d(112): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt2nkqx0d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\
    \tp*=2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\tp*=2;\n\t}\n\t\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n)\
    \ {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\tp*=2;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1)\
    \ res = (res*p)%p;\n\t\tn/=2;\n\t\tp*=2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\
    \t\tn/=2;\n\t\tp*=2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\
    \tp*=2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\tp*=2;\n\t}\n\t\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzckt6m54.d(115): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzckt6m54.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\
    \t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\
    \t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n      \
    \                  \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong res\
    \ = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\
    \t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modpow(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%mod;\n\t\
    \tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modpow(long n, long p, long\
    \ mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = (res*p)%mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modpow(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong\
    \ res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%mod;\n\t\tn>>=1;\n\t\
    \tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\t\n\twhile(n>0) {\n\t\
    \t\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxd015lv4.d(109): Error: found `unittest` instead of statement

    /tmp/tmpxd015lv4.d(121): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxd015lv4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong m = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t{\n\t\
    \t\tres = (res*m) % p;\n\t\t}\n\t\tm = (m*m) % p;\n\t\tn = (n>>1);\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\tlong m = 1;\n\
    \t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t{\n\t\t\tres = (res*m) % p;\n\t\t}\n\
    \t\tm = (m*m) % p;\n\t\tn = (n>>1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp3(long n,\
    \ long p) \n{\n\tlong res = 1;\n\tlong m = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\
    \t\t{\n\t\t\tres = (res*m) % p;\n\t\t}\n\t\tm = (m*m) % p;\n\t\tn = (n>>1);\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ m = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t{\n\t\t\tres = (res*m) % p;\n\
    \t\t}\n\t\tm = (m*m) % p;\n\t\tn = (n>>1);\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong m = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\t\
    if(n&1)\n\t\t{\n\t\t\tres = (res*m) % p;\n\t\t}\n\t\tm = (m*m) % p;\n\t\tn = (n>>1);\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\t\
    long m = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t{\n\t\t\tres = (res*m)\
    \ % p;\n\t\t}\n\t\tm = (m*m) % p;\n\t\tn\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgr234l63.d(120): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpgr234l63.d(132): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpgr234l63.d(132): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgr234l63.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp8(long n, long p) \nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgggxx3kl.d(120): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgggxx3kl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\
    \t\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgeekpwyw.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpgeekpwyw.__unittest_L22_C1() [0x427a6d]

    ??:? void tmpgeekpwyw.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>= 1;\n\t\
    \tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow(long n, long p) \n{\n\t\
    long res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>= 1;\n\t\t\
    p = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % mod;\n\t\tn >>= 1;\n\t\t\
    p = (p*p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow(long n, long p, long mod,\
    \ long mod2) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % mod;\n\
    \t\tn >>= 1;\n\t\tp = (p*p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modpow(long n,\
    \ long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile(n) {\n\
    \t\tif(n&1) res = (res*p) % mod;\n\t\tn >>= 1;\n\t\tp = (p*p) % mod;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modpow(long n, long p, long mod, long mod2, long mod3,\
    \ long mod4) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % mod;\n\
    \t\tn >>= 1;\n\t\tp = (p*p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modpow(long n,\
    \ long p, long mod, long mod2, long mod3, long mod4, long mod5) \n{\n\tlong res\
    \ = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % mod\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdx4bnvrq.d(96): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpdx4bnvrq.d(108): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpdx4bnvrq.d(108): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdx4bnvrq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1) \n\t\t{\n\t\t\tres\
    \ = (res*res) % p;\n\t\t}\n\t\tn /= 2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 0)\
    \ \n\t\t{\n\t\t\tres = (res*res) % p;\n\t\t}\n\t\tn /= 2;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long mod) \n{\n\tlong res = 1;\n\t\n\twhile(n\
    \ > 0)\n\t{\n\t\tif(n % 2 == 0) \n\t\t{\n\t\t\tres = (res*res) % mod;\n\t\t}\n\
    \t\tn /= 2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 0) \n\t\t{\n\t\
    \t\tres = (res*res) % mod;\n\t\t}\n\t\tn /= 2;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 0) \n\t\t{\n\t\t\tres = (res*res) % mod;\n\
    \t\t}\n\t\tn /= 2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3, long mod4) \n{\n\tlong res = 1;\n\t\n\twhile(n >\
    \ 0)\n\t{\n\t\tif(n % 2 == 0) \n\t\t{\n\t\t\tres = (res*res) % mod;\n\t\t}\n\t\
    \tn /= 2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\t\n\t\nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0f3qt75.d(126): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0f3qt75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, int mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, int p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, int p, int mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, int p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsdasc3_4.d(116): Error: found `unittest` instead of statement

    /tmp/tmpsdasc3_4.d(128): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsdasc3_4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ q) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\t\
    if (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t\tr *=\
    \ r;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t\tr *= r;\n\t\ts *= s;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p, long q, long r, long s, long t)\
    \ \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t\tr *= r;\n\t\ts *= s;\n\t\tt *= t;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, long q, long r, long s,\
    \ long t, long u) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwvpkaa7m.d(118): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvpkaa7m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\t\
    p>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tif (n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1)\
    \ res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\t\
    p>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tif (\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpibas4bqo.d(110): Error: expression expected, not `unittest`

    /tmp/tmpibas4bqo.d(111): Error: found `{` when expecting `)`

    /tmp/tmpibas4bqo.d(122): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibas4bqo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tres = (res*p)\
    \ % p;\n\t\t}\n\t\tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) {\n\
    \t\t\tres = (res*p) % p;\n\t\t}\n\t\tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\
    \t\tif (n % 2 == 1) {\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\tn = (n*p) % p;\n\t\
    }\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n   \
    \                     \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tres = (res*p) % p;\n\t\t\
    }\n\t\tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) {\n\t\t\
    \tres = (res*p) % p;\n\t\t}\n\t\tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif\
    \ (n % 2 == 1) {\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\tn = (n*p) % p;\n\t}\n\t\
    \n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n        \
    \                \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\t\
    while (n != 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\t\
    n = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\n\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprnqascy1.d(122): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprnqascy1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t\
    }\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_q3cozkw.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmp_q3cozkw.__unittest_L17_C1() [0x427a75]

    ??:? void tmp_q3cozkw.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t & 1)\n\t\t\tres\
    \ = (res * p) % p;\n\t\tt >>= 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfj_ls_7_.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpfj_ls_7_.__unittest_L19_C1() [0x427a71]

    ??:? void tmpfj_ls_7_.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong r = 1;\n\tlong m = 1;\n\t\
    long a = 1;\n\tlong b = 1;\n\tlong c = 1;\n\tlong d = 1;\n\tlong e = 1;\n\tlong\
    \ f = 1;\n\tlong g = 1;\n\tlong h = 1;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k\
    \ = 0;\n\tlong l = 1;\n\tlong m = 1;\n\tlong n = 1;\n\tlong o = 1;\n\tlong p =\
    \ 1;\n\tlong q = 1;\n\tlong r = 1;\n\tlong s = 1;\n\tlong t = 1;\n\tlong u = 1;\n\
    \tlong v = 1;\n\tlong w = 1;\n\tlong x = 1;\n\tlong y = 1;\n\tlong z = 1;\n\t\
    long A = 1;\n\tlong B = 1;\n\tlong C = 1;\n\tlong D = 1;\n\tlong E = 1;\n\tlong\
    \ F = 1;\n\tlong G = 1;\n\tlong H = 1;\n\tlong I = 1;\n\tlong J = 1;\n\tlong K\
    \ = 1;\n\tlong L = 1;\n\tlong M = 1;\n\tlong N = 1;\n\tlong O = 1;\n\tlong P =\
    \ 1;\n\tlong Q = 1;\n\tlong R = 1;\n\tlong S = 1;\n\tlong T = 1;\n\tlong U = 1;\n\
    \tlong V = 1;\n\tlong W = 1;\n\tlong X = 1;\n\tlong Y = 1;\n\tlong Z = 1;\n\t\
    long AA = 1;\n\tlong AB = 1;\n\tlong AC = 1;\n\tlong AD = 1;\n\tlong AE = 1;\n\
    \tlong AF = 1;\n\tlong AG = 1;\n\tlong AH = 1;\n\tlong AI = 1;\n\tlong AJ = 1;\n\
    \tlong AK = 1;\n\tlong AL = 1;\n\tlong AM = 1;\n\tlong AN = 1;\n\tlong AO = 1;\n\
    \tlong AP = 1;\n\tlong AQ = 1;\n\tlong AR = 1;\n\tlong AS = 1;\n\tlong AT = 1;\n\
    \tlong AU = 1;\n\tlong AV = 1;\n\tlong AW = 1;\n\tlong AX = 1;\n\tlong AY = 1;\n\
    \tlong AZ = 1;\n\tlong BA = 1;\n\tlong BB = 1;\n\tlong BC = 1;\n\tlong BD = 1;\n\
    \tlong BE = 1;\n\tlong BF = 1;\n\tlong BG = 1;\n\tlong BH = 1;\n\tlong BI = 1;\n\
    \tlong BJ = 1;\n\tlong BK = 1;\n\tlong BL = 1;\n\tlong BM = 1;\n\tlong BN = 1;\n\
    \tlong BO = 1;\n\tlong BP = 1;\n\tlong BQ = 1;\n\tlong BR = 1;\n\t\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcoe5wt54.d(111): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcoe5wt54.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\t\
    \n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv92q8bcz.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpv92q8bcz.__unittest_L22_C1() [0x427a6d]

    ??:? void tmpv92q8bcz.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5l33wrgu.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp5l33wrgu.__unittest_L21_C1() [0x427a6d]

    ??:? void tmp5l33wrgu.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long q) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\
    \tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res\
    \ * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres\
    \ = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long q, long r, long s, long t, long u) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p, long q, long r, long s, long t,\
    \ long u, long v) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\
    \t\tn = (\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkkvdpwug.d(104): Error: expression expected, not `unittest`

    /tmp/tmpkkvdpwug.d(103): Error: found `{` when expecting `)`

    /tmp/tmpkkvdpwug.d(106): Error: found `alias` when expecting `;` following statement

    /tmp/tmpkkvdpwug.d(116): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkvdpwug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n\
    \ & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp6(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\
    \t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp7(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp8(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp *= p;\n\t}\n\nunittest\n{\n    alias candidate = modp;\n\n\
    \    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nhku4f7.d(122): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nhku4f7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164443
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res*p) % p;\n\t\t}\n\t\t\n\t\tn = (n-1L) / 2;\n\t\tp = (p*p) % p;\n\t}\n\t\n\
    \treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i = 1; \n\twhile (i<n) \n\t{\n\t\tres = (res * i) % p;\n\
    \t\ti++;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n\
    \    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8aygsg6n.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp8aygsg6n.__unittest_L18_C1() [0x427a65]

    ??:? void tmp8aygsg6n.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\t\
    p>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q) \n{\n\tlong res\
    \ = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tq>>=1;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long p, long q, long r) \n{\n\tlong\
    \ res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tq>>=1;\n\
    \t\tr>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q, long r, long\
    \ s) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%q;\n\t\t\
    n>>=1;\n\t\tq>>=1;\n\t\tr>>=1;\n\t\ts>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tq>>=1;\n\t\tr>>=1;\n\t\ts>>=1;\n\
    \t\tt>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q, long r, long\
    \ s, long t, long u) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%q;\n\
    \t\tn>>=1;\n\t\tq>>=1;\n\t\tr>>=1;\n\t\ts>>=1;\n\t\tt>>=1;\n\t\tu>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numeric\nunittest\n{\n  \
    \  alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5er9lui1.d(97): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5er9lui1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\
    \tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp8(long n, long p) \n{\n\
    \tlong res = 1;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnfe7byag.d(115): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnfe7byag.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tn /= 2;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp(long n, long p, long q) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tres %= q;\n\t\tn /= 2;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp(long n, long p, long q, long r) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tres %= q;\n\t\tres %=\
    \ r;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp(long n, long p, long q,\
    \ long r, long s) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres\
    \ %= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\tn /= 2;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t) \n{\n\t\
    long res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tres %= q;\n\t\t\
    res %= r;\n\t\tres %= s;\n\t\tres %= t;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp(long n, long p, long q, long r, long s, long t, long u) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tres %= q;\n\t\tres\
    \ %= r;\n\t\tres %= s;\n\t\tres %= t;\n\t\tres %= u;\n\t\tn /= 2;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t, long u,\
    \ long v) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\t\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwprjxy8v.d(112): Error: found `unittest` instead of statement

    /tmp/tmpwprjxy8v.d(124): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwprjxy8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres = (res*p) % n;\n\t\tn--;\n\t}\n\treturn\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwc_2evtn.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpwc_2evtn.__unittest_L16_C1() [0x427a5d]

    ??:? void tmpwc_2evtn.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\
    \t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n\
    \ > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp4(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tres\
    \ = (res * n) % p;\n\t\tn--;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp5(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tres = (res * n)\
    \ % p;\n\t\tn--;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\
    \t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n\
    \ > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware \nunittest\n{\n    alias candidate = modp;\n\n \
    \   assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp35c24dk2.d(131): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp35c24dk2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\
    \tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7n_342ip.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp7n_342ip.__unittest_L21_C1() [0x427a6d]

    ??:? void tmp7n_342ip.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2l(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2ll(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2lll(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2llll(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2lllll(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqymglq_c.d(122): Error: found `unittest` when expecting `)`

    /tmp/tmpqymglq_c.d(124): Error: found `{` when expecting `;` following statement

    /tmp/tmpqymglq_c.d(135): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqymglq_c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modpow(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modpow2(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modpow3(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modpow4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp >>= 1;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modpow5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp >>= 1;\n\t\tp >>= 1;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modpow6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp >>= 1;\n\t\tp >>= 1;\n\t\tp >>= 1;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modpow7(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp >>= 1;\n\t\tp >>= 1;\n\t\tp \nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnoegldy9.d(118): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpnoegldy9.d(130): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpnoegldy9.d(130): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnoegldy9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res *\
    \ p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n)\
    \ % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n  \
    \  assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164459
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\t\
    \n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv92q8bcz.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpv92q8bcz.__unittest_L22_C1() [0x427a6d]

    ??:? void tmpv92q8bcz.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t{\n\t\t\tres *= p;\n\
    \t\t\tres %= p;\n\t\t}\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuzknieo2.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpuzknieo2.__unittest_L24_C1() [0x427a7d]

    ??:? void tmpuzknieo2.__modtest() [0x427b78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong r = n;\n\twhile (r != 0) {\n\t\tlong m\
    \ = r / p;\n\t\tlong r = r - p * m;\n\t\tres = res * t + m;\n\t\tt = t * p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = 1;\n\tlong r = n;\n\twhile (r != 0) {\n\t\tlong m = r / p;\n\t\tlong r =\
    \ r - p * m;\n\t\tres = res * t + m;\n\t\tt = t * p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp3(long n, long p) \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong r = n;\n\
    \twhile (r != 0) {\n\t\tlong m = r / p;\n\t\tlong r = r - p * m;\n\t\tres = res\
    \ * t + m;\n\t\tt = t * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp4(long n, long p)\
    \ \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong r = n;\n\twhile (r != 0) {\n\t\t\
    long m = r / p;\n\t\tlong r = r - p * m;\n\t\tres = res * t + m;\n\t\tt = t *\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\
    \tlong t = 1;\n\tlong r = n;\n\twhile (r != 0) {\n\t\tlong m = r / p;\n\t\tlong\
    \ r = r - p * m;\n\t\tres = res * t + m;\n\t\tt = t * p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong r =\
    \ n;\n\twhile (r != 0) {\n\t\tlong m = r / p;\n\t\tlong r = r - p * m;\n\t\tres\
    \ = res * t + m;\n\t\tt = t * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdivz1qlq.d(14): Error: variable `r` is shadowing variable `tmpdivz1qlq.modp.r`

    /tmp/tmpdivz1qlq.d(31): Error: variable `r` is shadowing variable `tmpdivz1qlq.modp2p.r`

    /tmp/tmpdivz1qlq.d(48): Error: variable `r` is shadowing variable `tmpdivz1qlq.modp3.r`

    /tmp/tmpdivz1qlq.d(65): Error: variable `r` is shadowing variable `tmpdivz1qlq.modp4.r`

    /tmp/tmpdivz1qlq.d(82): Error: variable `r` is shadowing variable `tmpdivz1qlq.modp5.r`

    /tmp/tmpdivz1qlq.d(99): Error: variable `r` is shadowing variable `tmpdivz1qlq.modp6.r`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdivz1qlq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++)\n\t\tres *= p;\n\tres %=\
    \ p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    \
    \                    \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    long i;\n\tfor(i = 0; i < n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i\
    \ < n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp4(long n,\
    \ long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++)\n\t\tres *=\
    \ p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\
    \tlong i;\n\tfor(i = 0; i < n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i\
    \ < n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp7(long n,\
    \ long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++)\n\t\tres *=\
    \ p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\
    \tlong i;\n\tfor(i = 0; i < n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp9(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i\
    \ < n; i++)\n\t\tres *= p;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7f4d_9rj.d(117): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7f4d_9rj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn\
    \ = (n*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n*p) % p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n*p) % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0)\
    \ {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n*p) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\t\
    if (n & 1) res = (res*p) % p;\n\t\tn = (n*p) % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp5(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n &\
    \ 1) res = (res*p) % p;\n\t\tn = (n*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p)\
    \ % p;\n\t\tn = (n*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp7(long n, long p)\
    \ \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\
    \t\tn\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L)\
    \ == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv7ca1_et.d(104): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpv7ca1_et.d(116): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpv7ca1_et.d(116): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7ca1_et.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\tres = (res\
    \ * p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long mod) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\
    \t\tres = (res * p) % mod;\n\t\tn >>= 1;\n\t\tp = (p * p) % mod;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p, long mod, long mod2) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % mod;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\t\
    if (n & 1) \n\t\t\tres = (res * p) % mod;\n\t\tn >>= 1;\n\t\tp = (p * p) % mod;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, long mod, long mod2, long\
    \ mod3, long mod4) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\t\
    res = (res * p) % mod;\n\t\tn >>= 1;\n\t\tp = (p * p) % mod;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long mod, long mod2, long mod3, long mod4, long\
    \ mod5) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\t\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxjzglftc.d(103): Error: found `unittest` instead of statement

    /tmp/tmpxjzglftc.d(115): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjzglftc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *=\
    \ p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p2(long n, long p) \n{\n\tlong res =\
    \ 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p8(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p16(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p32(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p64(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p128(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong \nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwlos6288.d(125): Error: no identifier for declarator `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwlos6288.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\
    \t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    while(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\
    \t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res\
    \ = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx24mkhgn.d(110): Error: found `unittest` when expecting `(`

    /tmp/tmpx24mkhgn.d(122): Error: found `void` when expecting `)`

    /tmp/tmpx24mkhgn.d(122): Error: found `{` when expecting `;` following statement

    /tmp/tmpx24mkhgn.d(122): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx24mkhgn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; n >>= 1) \n\t{\n\t\tif(n & 1) \n\t\t\tres\
    \ *= p;\n\t\tp /= 2;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdplus1yw.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpdplus1yw.__unittest_L20_C1() [0x427a71]

    ??:? void tmpdplus1yw.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp3(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp5(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp7(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp9(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsrga1iw5.d(121): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsrga1iw5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\
    \tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7n_342ip.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp7n_342ip.__unittest_L21_C1() [0x427a6d]

    ??:? void tmp7n_342ip.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres = (res*p) %\
    \ p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 0
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\
    \tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdvtlegbt.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpdvtlegbt.__unittest_L18_C1() [0x427a79]

    ??:? void tmpdvtlegbt.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp8(long n, long p) \n{\n\
    \tlong res = 1;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplbg_l6pr.d(115): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbg_l6pr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res *\
    \ p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\
    \t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p *\
    \ p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\t\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2m(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\
    \tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile\
    \ (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2m(long n, long p) \n\
    {\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res\
    \ * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjk495_fj.d(127): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjk495_fj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp(long n, long p, long q) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp(long n, long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\
    \tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp(long n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\tn--;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp(long n, long p, long q, long r, long s, long\
    \ t) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres\
    \ %= r;\n\t\tres %= s;\n\t\tres %= t;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\t\
    res %= t;\n\t\tres %= u;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long q, long r, long s, long t, long u, long v) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\t\
    res %= t;\n\t\tres %= u;\n\t\tres %= v;\n\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ytekgtf.d(113): Error: found `unittest` instead of statement

    /tmp/tmp6ytekgtf.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ytekgtf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn -= 1;\n\t}\n\treturn res;\n\
    }\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_09k9gc2.d(20): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmp_09k9gc2.__unittest_L16_C1() [0x427a55]

    ??:? void tmp_09k9gc2.__modtest() [0x427b50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\
    \t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\
    \t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = res * p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res\
    \ = res * p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\
    \t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdm2q5xgo.d(110): Error: found `unittest` when expecting `(`

    /tmp/tmpdm2q5xgo.d(122): Error: found `void` when expecting `)`

    /tmp/tmpdm2q5xgo.d(122): Error: found `{` when expecting `;` following statement

    /tmp/tmpdm2q5xgo.d(122): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdm2q5xgo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res * p) %\
    \ p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppmtue890.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmppmtue890.__unittest_L21_C1() [0x427a79]

    ??:? void tmppmtue890.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2l(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2ll(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2lll(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2llll(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2lllll(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2llllll(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_1gocr_p.d(119): Error: found `unittest` instead of statement

    /tmp/tmp_1gocr_p.d(131): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1gocr_p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong r = 1;\n\tlong m = 1;\n\t\
    \n\twhile (n > 0)\n\t{\n\t\tq = n / p;\n\t\tt = n % p;\n\t\tr = r * q + t;\n\t\
    \tm = m * q;\n\t\tn = t;\n\t}\n\t\n\tres = r * m;\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164459
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; --n)\n\t{\n\t\tres = (res * p) % p;\n\t}\n\
    \t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpml7_7dq0.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpml7_7dq0.__unittest_L18_C1() [0x427a5d]

    ??:? void tmpml7_7dq0.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *=\
    \ p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp6(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp8(long n, long p)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp9(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp10(long \nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprax58m6a.d(125): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprax58m6a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long q, long r) \n{\n\tlong res = 1;\n\t\n\twhile\
    \ (n != 0) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\t\
    q *= q;\n\t\tr *= r;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ q, long r, long s) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t\tr *= r;\n\t\
    \ts *= s;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s, long t) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\
    \tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t\tr *= r;\n\t\ts *= s;\n\
    \t\tt *= t;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s, \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L)\
    \ == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8x0jr8bq.d(120): Error: basic type expected, not `unittest`

    /tmp/tmp8x0jr8bq.d(120): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8x0jr8bq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p, long\
    \ q) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t\
    {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long p, long q, long r, long s, long t) \n{\n\tlong res\
    \ = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\
    \tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q, long r, long\
    \ s, long t, long u) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s, long t, long u, long v) \n{\n\tlong res =\
    \ 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfdiru969.d(115): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdiru969.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++) {\n\t\tres = res * p % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    long i;\n\tfor(i = 0; i < n; i++) {\n\t\tres = res * p % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, double p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0;\
    \ i < n; i++) {\n\t\tres = res * p % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, float p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++) {\n\t\t\
    res = res * p % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp2p(long n, long double p)\
    \ \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++) {\n\t\tres = res *\
    \ p % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, ulong p) \n{\n\tlong res =\
    \ 1;\n\tlong i;\n\tfor(i = 0; i < n; i++) {\n\t\tres = res * p % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, uint p) \n{\n\tlong res = 1;\n\tlong i;\n\t\
    for(i = 0; i < n; i++) {\n\t\tres = res * p % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, ulong p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n;\
    \ i++) {\n\t\tres = res * p % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ uint p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++) {\n\t\tres\
    \ = res * \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0o7kqls2.d(59): Error: use `real` instead of `long double`

    /tmp/tmp0o7kqls2.d(117): Error: expression expected, not `unittest`

    /tmp/tmp0o7kqls2.d(118): Error: found `{` when expecting `;` following statement

    /tmp/tmp0o7kqls2.d(129): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0o7kqls2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n) {\n\t\tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\
    \tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res =\
    \ res * p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp5(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = res * p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n) {\n\t\tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\
    \tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmpk3iafl.d(114): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmpk3iafl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res * mod * mod2;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\t\
    if (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res * mod\
    \ * mod2 * mod3;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3,\
    \ long mod4) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res * mod * mod2 * mod3 * mod4;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4, long\
    \ mod5) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res * mod * mod2 * mod3 * mod4 * mod5;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4, long\
    \ mod5, long mod6) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\t\
    res *= p;\n\t\t\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpujusq6jt.d(104): Error: found `unittest` instead of statement

    /tmp/tmpujusq6jt.d(116): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujusq6jt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\
    \tp*=2;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph5ha6pwn.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmph5ha6pwn.__unittest_L19_C1() [0x427a79]

    ??:? void tmph5ha6pwn.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphfvoxneu.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmphfvoxneu.__unittest_L17_C1() [0x427a75]

    ??:? void tmphfvoxneu.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\
    \t\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgeekpwyw.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpgeekpwyw.__unittest_L22_C1() [0x427a6d]

    ??:? void tmpgeekpwyw.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1) \n\t\t\tres = (res * p) % p;\n\
    \t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\tres = (res\
    \ * p) % p;\n\t\t}\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0) \n\t{\n\t\t\
    if (n & 1) \n\t\t{\n\t\t\tres = (res * p) % p;\n\t\t}\n\t\tn >>= 1;\n\t\tp = (p\
    \ * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\tres = (res * p) % p;\n\t\t\
    }\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp4(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\
    \t\t\tres = (res * p) % p;\n\t\t}\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\twhile (n\
    \ > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\tres = (res * p) % p;\n\t\t}\n\t\t\
    n >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p\
    \ (be aware of numerics).\n                        \n*/\nlong modp6(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\
    \tres = (res * p) % p;\n\t\t}\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\
    \ \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\tres = (re\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ayzmwy_.d(122): Error: found `unittest` when expecting `)`

    /tmp/tmp2ayzmwy_.d(124): Error: found `{` when expecting `;` following statement

    /tmp/tmp2ayzmwy_.d(135): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp2ayzmwy_.d(135): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ayzmwy_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong tmp;\n\t\n\twhile (n > 0)\n\t{\n\t\ttmp = n % p;\n\t\t\
    res = (res * tmp) % p;\n\t\tn = n / p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp54zagli2.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmp54zagli2.__unittest_L21_C1() [0x427a97]

    ??:? void tmp54zagli2.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn = n >>\
    \ 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn =\
    \ n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long mod) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res *\
    \ p) % mod;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long mod, long mod2) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = (res * p) % mod;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res\
    \ = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % mod;\n\t\tn = n >> 1;\n\t\
    \tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res\
    \ = (res * p) % mod;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p, long mod, long mod2, long mod3, long mod4, long mod5)\
    \ \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % mod;\n\t\
    \tn = n >> 1;\n\t\tp = \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeieas_xf.d(98): Error: expression expected, not `unittest`

    /tmp/tmpeieas_xf.d(99): Error: found `{` when expecting `;` following statement

    /tmp/tmpeieas_xf.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeieas_xf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow(long n, long p) \n{\n\t\
    long res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow2(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow7\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7f31pjvt.d(106): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7f31pjvt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\tlong i;\n\t\n\tfor(i = 2; i <= p; i++) \n\t\
    {\n\t\tt *= 2;\n\t\tif(t > p) \n\t\t{\n\t\t\tt -= p;\n\t\t}\n\t\tres += t;\n\t\
    }\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpml1dg39p.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dfd]

    ??:? void tmpml1dg39p.__unittest_L24_C1() [0x427a85]

    ??:? void tmpml1dg39p.__modtest() [0x427b80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fad5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]

    ??:? runModuleUnitTests [0x42b8f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42824c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong i = 1L;\n\twhile (i<n) {\n\t\tres = (res\
    \ * t) % p;\n\t\tt = t << 1;\n\t\ti = i+1L;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong i = 1L;\n\twhile (i<n)\
    \ {\n\t\tres = (res * t) % p;\n\t\tt = t << 1;\n\t\ti = i+1L;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong i =\
    \ 1L;\n\twhile (i<n) {\n\t\tres = (res * t) % p;\n\t\tt = t << 1;\n\t\ti = i+1L;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\t\
    long t = 1;\n\tlong i = 1L;\n\twhile (i<n) {\n\t\tres = (res * t) % p;\n\t\tt\
    \ = t << 1;\n\t\ti = i+1L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp5(long n, long p)\
    \ \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong i = 1L;\n\twhile (i<n) {\n\t\tres\
    \ = (res * t) % p;\n\t\tt = t << 1;\n\t\ti = i+1L;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp6(long n, long p) \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong i = 1L;\n\t\
    while (i<n) {\n\t\tres = (res * t) % p;\n\t\tt = t << 1;\n\t\ti = i+1L;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\tlong t\
    \ = 1;\n\tlong i = 1L;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1rxwao9.d(108): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1rxwao9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res * p) % p;\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\tfor(; n\
    \ > 0; n--)\n\t\tres = (res * p) % p;\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q) \n{\n\tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res\
    \ * p) % p;\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r) \n\
    {\n\tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res * p) % p;\n\t\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p, long q, long r, long s) \n{\n\t\
    long res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res * p) % p;\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p, long q, long r, long s, long t) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res * p) % p;\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p, long q, long r, long s, long t, long\
    \ u) \n{\n\tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res * p) % p;\n\
    \t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n      \
    \                  \n*/\nlong modp2p(long n, long p, long q, long r, long s, long\
    \ t, long u, long v) \n{\n\tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres =\
    \ (res * p) % p;\n\t\n\treturn res;\n}\n/*\nReturn 2^\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcj6j1lq2.d(107): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcj6j1lq2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong tmp;\n\t\n\twhile (n > 0)\n\t{\n\t\ttmp = n % p;\n\t\t\
    res = (res * tmp) % p;\n\t\tn = n / p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp54zagli2.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmp54zagli2.__unittest_L21_C1() [0x427a97]

    ??:? void tmp54zagli2.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long q) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres\
    \ *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\t\
    res *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long q, long r, long s, long t, long u, long v)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\t\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpueu8tdvi.d(112): Error: found `unittest` instead of statement

    /tmp/tmpueu8tdvi.d(124): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpueu8tdvi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\
    \t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp843lewix.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmp843lewix.__unittest_L21_C1() [0x427a89]

    ??:? void tmp843lewix.__modtest() [0x427b84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\
    \t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\
    \t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n      \
    \                  \n*/\nlong modp(long n, float p) \n{\n\tlong res = 1;\n\t\n\
    \twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp(long n, long long p) \n{\n\tlong res = 1;\n\t\n\
    \twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\t\n\t\
    while(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp(long n, float p) \n{\n\tlong res = 1;\n\t\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long long p) \n{\n\tlong res = 1;\n\t\n\twhile(n>0) {\n\t\
    \tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n\
    /*\nReturn 2^n modu\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy9f6l_6j.d(55): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmpy9f6l_6j.d(103): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpy9f6l_6j.d(115): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy9f6l_6j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong i = 1L;\n\t\n\twhile ( i < n ) \n\t{\n\t\
    \tt *= p;\n\t\tt %= p;\n\t\tres += t;\n\t\ti++;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsvmp89xe.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpsvmp89xe.__unittest_L23_C1() [0x427a79]

    ??:? void tmpsvmp89xe.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n = (n-1L) >>1;\n\t\tp = (p-1L) >>1;\n\t}\n\treturn res;\n}\nunittest\n{\n   \
    \ alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp353on0o6.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmp353on0o6.__unittest_L18_C1() [0x427a7d]

    ??:? void tmp353on0o6.__modtest() [0x427b78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n % 2 == 1) res *= p;\n\t\tn /= 2;\n\t\
    \tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n % 2 == 1) res *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tif (n % 3 == 1) res *= p;\n\t\tn /= 3;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n\
    \ % 4 == 1) res *= p;\n\t\tn /= 4;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n % 5 == 1) res *= p;\n\
    \t\tn /= 5;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n % 6 == 1) res *= p;\n\t\tn /= 6;\n\t\
    \tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n % 7 == 1) res *= p;\n\t\tn /= 7;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tif (n % 8 == 1) res *= p;\n\t\tn /= 8;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxe16jz_q.d(115): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxe16jz_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif((n & 1) == 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn = (n>>1) & -2;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgxwbsyi3.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpgxwbsyi3.__unittest_L20_C1() [0x427a7d]

    ??:? void tmpgxwbsyi3.__modtest() [0x427b78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res*p) % p;\n\t\tn>>=1;\n\t\
    \tp>>=1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n\
    \    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_ol67k3.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpy_ol67k3.__unittest_L17_C1() [0x427a69]

    ??:? void tmpy_ol67k3.__modtest() [0x427b64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(long i = n; i > 0; i >>= 1)\n\t{\n\t\tif(p & i)\n\t\
    \t\tres *= 2;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9fz7m36e.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmp9fz7m36e.__unittest_L19_C1() [0x427a59]

    ??:? void tmp9fz7m36e.__modtest() [0x427b54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long mod) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *=\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif\
    \ (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p, long mod, \nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw39fd5k.d(113): Error: basic type expected, not `unittest`

    /tmp/tmppw39fd5k.d(113): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw39fd5k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; n >>= 1) \n\t{\n\t\tif(n & 1) \n\t\t{\n\t\t\
    \tres *= p;\n\t\t\tres %= p;\n\t\t}\n\t\tp /= 2;\n\t}\n\t\n\treturn res;\n}\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3h7x77c_.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dfd]

    ??:? void tmp3h7x77c_.__unittest_L23_C1() [0x427a85]

    ??:? void tmp3h7x77c_.__modtest() [0x427b80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fad5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]

    ??:? runModuleUnitTests [0x42b8f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42824c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tlong t = r * n;\n\t\tlong m = t %\
    \ p;\n\t\t\n\t\tif((m > p) || (m == 0))\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t\
    r = t;\n\t\tn = n - m;\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfh4uzf2r.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpfh4uzf2r.__unittest_L27_C1() [0x427aa3]

    ??:? void tmpfh4uzf2r.__modtest() [0x427b78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long mod) \n{\n\tlong res\
    \ = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *=\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong res = 1;\n\
    \twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long mod, long mod2, long\
    \ mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbzwurncw.d(115): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzwurncw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\t\
    \n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv92q8bcz.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpv92q8bcz.__unittest_L22_C1() [0x427a6d]

    ??:? void tmpv92q8bcz.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn >>= 1;\n\
    \t\tp = p * p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_16h0_k7.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp_16h0_k7.__unittest_L19_C1() [0x427a6d]

    ??:? void tmp_16h0_k7.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164460
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res*p) % p;\n\t\t}\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\
    \t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3undx9bd.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmp3undx9bd.__unittest_L20_C1() [0x427a89]

    ??:? void tmp3undx9bd.__modtest() [0x427b84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn\
    \ = (n-1L) >> (sizeof(int)*8-1);\n\t\tp = (p-1L) >> (sizeof(int)*8-1);\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\twhile (n\
    \ != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n-1L) >> (sizeof(int)*8-1);\n\
    \t\tp = (p-1L) >> (sizeof(int)*8-1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, float\
    \ p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) %\
    \ p;\n\t\tn = (n-1L) >> (sizeof(int)*8-1);\n\t\tp = (p-1L) >> (sizeof(int)*8-1);\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long long p) \n{\n\tlong res = 1;\n\
    \twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n-1L) >> (sizeof(int)*8-1);\n\
    \t\tp = (p-1L) >> (sizeof(int)*8-1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, double\
    \ p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) %\
    \ p;\n\t\tn = (n-1L) >> (sizeof(int)*8-1);\n\t\tp = (p-1L) >> (sizeof(int)*8-1);\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, float p) \n{\n\tlong res = 1;\n\t\
    while (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n-1L) >> (sizeof(int)*8-1);\n\
    \t\tp = (p-1L) >> (sizeof(int)*8-1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp3wsl95d.d(12): Error: found `)` when expecting `.` following int

    /tmp/tmpp3wsl95d.d(12): Error: found `*` when expecting identifier following `int`.

    /tmp/tmpp3wsl95d.d(12): Error: found `8` when expecting `,`

    /tmp/tmpp3wsl95d.d(12): Error: found `;` when expecting `)`

    /tmp/tmpp3wsl95d.d(13): Error: found `p` when expecting `;` following statement

    /tmp/tmpp3wsl95d.d(13): Error: found `=` instead of statement

    /tmp/tmpp3wsl95d.d(26): Error: found `)` when expecting `.` following int

    /tmp/tmpp3wsl95d.d(26): Error: found `*` when expecting identifier following `int`.

    /tmp/tmpp3wsl95d.d(26): Error: found `8` when expecting `,`

    /tmp/tmpp3wsl95d.d(26): Error: found `;` when expecting `)`

    /tmp/tmpp3wsl95d.d(27): Error: found `p` when expecting `;` following statement

    /tmp/tmpp3wsl95d.d(27): Error: found `=` instead of statement

    /tmp/tmpp3wsl95d.d(40): Error: found `)` when expecting `.` following int

    /tmp/tmpp3wsl95d.d(40): Error: found `*` when expecting identifier following `int`.

    /tmp/tmpp3wsl95d.d(40): Er'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= q;\n\
    \t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r) \n\
    {\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\
    \t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres\
    \ %= r;\n\t\tres %= s;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\tres %= t;\n\t\t\
    n--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s, long t, long u) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\t\
    res %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\tres %= t;\n\t\tres %= u;\n\t\tn--;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, \nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwftukqs2.d(115): Error: basic type expected, not `unittest`

    /tmp/tmpwftukqs2.d(115): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwftukqs2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong r = 1;\n\tlong m = 1;\n\t\
    \n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t{\n\t\t\tres = (res * t) % p;\n\t\t\t\
    q = (q * r) % p;\n\t\t}\n\t\tt = t*t % p;\n\t\tr = r*r % p;\n\t\tn = (n-1)/2;\n\
    \t}\n\t\n\tres = (res * q) % p;\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvtqhgzb9.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmpvtqhgzb9.__unittest_L31_C1() [0x427acd]

    ??:? void tmpvtqhgzb9.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n = (n-1L) / 2;\n\t\tp = (p-1L) / 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn = (n-1L) / 2;\n\t\tp = (p-1L) / 2;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\
    \t\t\tres = (res*p) % p;\n\t\tn = (n-1L) / 2;\n\t\tp = (p-1L) / 2;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn = (n-1L) / 2;\n\t\tp = (p-1L)\
    \ / 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn = (n-1L) / 2;\n\
    \t\tp = (p-1L) / 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\
    \tn = (n-1L) / 2;\n\t\tp = (p-1L) / 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp6p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres =\
    \ (res*p) % p;\n\t\tn = (n-1L) / 2;\n\t\tp\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppgavoaq4.d(105): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmppgavoaq4.d(117): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmppgavoaq4.d(117): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppgavoaq4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\t\t\
    n>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp78jzp5vh.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp78jzp5vh.__unittest_L19_C1() [0x427a69]

    ??:? void tmp78jzp5vh.__modtest() [0x427b64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres =\
    \ (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\
    \tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\t\
    long res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres =\
    \ (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp8(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\
    \tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp9(long n, long \nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79djyx22.d(112): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79djyx22.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) r += p;\n\t\tn >>= 1;\n\t\tp *= p;\n\
    \t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0_afvn9s.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp0_afvn9s.__unittest_L19_C1() [0x427a69]

    ??:? void tmp0_afvn9s.__modtest() [0x427b64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0) {\n\t\tif (n % 2 == 0) {\n\t\t\tres = (res*p)\
    \ % p;\n\t\t}\n\t\tn = n >> 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\tres\
    \ = (res*p) % p;\n\t\t}\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp8(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\nunittest\n{\n    alias candidate = modp;\n\n  \
    \  assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe2npj109.d(122): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2npj109.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\
    \tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, long q, long r, long s)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\
    \t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long q, long r, long s, long\
    \ t, long u) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres =\
    \ (res*p) % p;\n\t\t\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg0jgko3y.d(104): Error: found `unittest` instead of statement

    /tmp/tmpg0jgko3y.d(116): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0jgko3y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p) % p;\n\
    \t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, double\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, float p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\
    \tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long double p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\
    \t{\n\t\tif(n&1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\
    \t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modp(long n, double * p) \n{\n\tlong res =\
    \ 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp(long n, float *\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long double * p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ul5vbdv.d(61): Error: use `real` instead of `long double`

    /tmp/tmp0ul5vbdv.d(115): Error: use `real` instead of `long double`

    /tmp/tmp0ul5vbdv.d(121): Error: found `unittest` instead of statement

    /tmp/tmp0ul5vbdv.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ul5vbdv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) %\
    \ p;\n\t\tn = (n-1L) >>1;\n\t\tp = (p-1L) >>1;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeuupwq0x.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpeuupwq0x.__unittest_L20_C1() [0x427a7d]

    ??:? void tmpeuupwq0x.__modtest() [0x427b78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\
    \t\tn = (n-1L) >>1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modpow(long\
    \ n, long p, long mod) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n &\
    \ 1)\n\t\t\tres = (res*p) % mod;\n\t\tn = (n-1L) >>1;\n\t\tp = (p*p) % mod;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modpow2(long n, long mod) \n{\n\tlong res = 1;\n\t\
    while (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*mod) % mod;\n\t\tn = (n-1L)\
    \ >>1;\n\t\tmod = (mod*mod) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modpow3(long n,\
    \ long mod) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\t\
    res = (res*mod) % mod;\n\t\tn = (n-1L) >>1;\n\t\tmod = (mod*mod) % mod;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modpow4(long n, long mod) \n{\n\tlong res = 1;\n\twhile\
    \ (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*mod) % mod;\n\t\tn = (n-1L) >>1;\n\
    \t\tmod = (mod*mod) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modpow5(long n, long\
    \ mod) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres =\
    \ (res*mod) % mod;\n\t\tn = (n-1L) >>1;\n\t\tmod = (mod*mod) % mod;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modpow6(long n, long mod) \n{\n\tlong \nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5bjpg38j.d(106): Error: no identifier for declarator `long`

    /tmp/tmp5bjpg38j.d(106): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bjpg38j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tr = std.pow(r, p);\n\t\
    \tn >>= 1;\n\t\tp = std.pow(p, p);\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n   \
    \ alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcr_pi338.d(13): Error: undefined identifier `pow` in package `std`

    /tmp/tmpcr_pi338.d(15): Error: undefined identifier `pow` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcr_pi338.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res*p)\
    \ % p;\n\t\tn = (n-1L) >>1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\
    \t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp(long n, double\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\t\
    res *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, float p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\
    \t\t\tres *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long double p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n %\
    \ 2 == 1)\n\t\t\tres *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\
    \t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, float p) \n{\n\tlong res = 1;\n\t\n\twhile(n >\
    \ 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\
    \t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n      \
    \                  \n*/\nlong modp(long n, long double p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\t\tn /= 2;\n\t\t\
    p *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwg9o2rdz.d(61): Error: use `real` instead of `long double`

    /tmp/tmpwg9o2rdz.d(115): Error: use `real` instead of `long double`

    /tmp/tmpwg9o2rdz.d(136): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwg9o2rdz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long mod) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *=\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif\
    \ (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p, long mod, \nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw39fd5k.d(113): Error: basic type expected, not `unittest`

    /tmp/tmppw39fd5k.d(113): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw39fd5k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n & 1) res = res * p;\n\t\tn = n >> 1;\n\
    \t\tp = p * p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcxwqhknq.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpcxwqhknq.__unittest_L17_C1() [0x427a75]

    ??:? void tmpcxwqhknq.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res * p) % p;\n\t\t}\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\t\
    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn = n >>\
    \ 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpenfawyy5.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpenfawyy5.__unittest_L17_C1() [0x427a79]

    ??:? void tmpenfawyy5.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6nn3cqlp.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp6nn3cqlp.__unittest_L18_C1() [0x427a6d]

    ??:? void tmp6nn3cqlp.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0kc84kbt.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp0kc84kbt.__unittest_L17_C1() [0x427a69]

    ??:? void tmp0kc84kbt.__modtest() [0x427b64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i; \n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ i; \n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp3(long n, long p) \n{\n\tlong res = 1;\n\tlong i; \n\tfor(i=n; i>0; i--)\n\
    \t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i; \n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\
    \ \n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong i; \n\tfor(i=n; i>0; i--)\n\t\tres *=\
    \ p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \tlong i; \n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\tlong i; \n\tfor(i=n; i>0;\
    \ i--)\n\t\tres *= p;\n\tres %= p;\n\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnpiqdjvw.d(106): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnpiqdjvw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n % p == 0) \n\t\t\tres = (res*2) % p;\n\
    \t\tn = (n*2) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164460
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\
    \tn = (n>>1);\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n  \
    \  alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p, long\
    \ q) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % q;\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % q;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long q, long r) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res\
    \ * p) % r;\n\t\tn >>= 1;\n\t\tp = (p * p) % r;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\t\
    if(n&1) res = (res * p) % s;\n\t\tn >>= 1;\n\t\tp = (p * p) % s;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t) \n{\n\t\
    long res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % t;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % t;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p, long\
    \ q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\t\
    if(n&1) res = (res * p) % u;\n\t\tn >>= 1;\n\t\tp = (p * p) % u;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t, long u,\
    \ long v) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) %\
    \ \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpff0wzew9.d(96): Error: expression expected, not `unittest`

    /tmp/tmpff0wzew9.d(97): Error: found `{` when expecting `;` following statement

    /tmp/tmpff0wzew9.d(108): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpff0wzew9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres = (res * p)\
    \ % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp(long n, long p, long q) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\
    \t\tif (n & 1)\n\t\t\tres = (res * p) % q;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p)\
    \ % q;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q, long r) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres = (res * p)\
    \ % r;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % r;\n\t}\n\t\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp(long n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\t\n\t\
    while (n != 0) {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % s;\n\t\t\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % s;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p\
    \ (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0)\
    \ {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % t;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p\
    \ * p) % t;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q, long r, long\
    \ s, long t, long u) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n &\
    \ 1)\n\t\t\tres = (res * p) % u;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % u;\n\t\
    }\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n   \
    \                     \n*/\nlong mod\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvozisjp.d(116): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvozisjp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long q) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres\
    \ *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\t\
    res *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long q, long r, long s, long t, long u, long v) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t\
    }\n\treturn \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptsckif77.d(114): Error: expression expected, not `unittest`

    /tmp/tmptsckif77.d(115): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptsckif77.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n % 2 == 1)\n\t\t{\n\t\t\t\
    res = (res*p) % p;\n\t\t}\n\t\t\n\t\tn = n >> 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\
    \treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164446
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res *\
    \ p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\
    \t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p)\
    \ % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp4(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\
    \tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile\
    \ (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res *\
    \ p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > \nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa_94r9jq.d(126): Error: expression expected, not `unittest`

    /tmp/tmpa_94r9jq.d(127): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa_94r9jq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>=\
    \ 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdb042x6e.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpdb042x6e.__unittest_L20_C1() [0x427a6d]

    ??:? void tmpdb042x6e.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\t\
    p>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p, long q) \n{\n\tlong res = 1;\n\twhile(n)\
    \ {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tp>>=1;\n\t\tq>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p, long q, long r) \n{\n\tlong res\
    \ = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tp>>=1;\n\t\
    \tq>>=1;\n\t\tr>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ q, long r, long s) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t\tq>>=1;\n\t\tr>>=1;\n\t\ts>>=1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long q, long r, long s, long t) \n{\n\tlong res\
    \ = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tp>>=1;\n\t\
    \tq>>=1;\n\t\tr>>=1;\n\t\ts>>=1;\n\t\tt>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5080qrwb.d(102): Error: basic type expected, not `unittest`

    /tmp/tmp5080qrwb.d(102): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5080qrwb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long mod) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *=\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif\
    \ (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p, long mod, \nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw39fd5k.d(113): Error: basic type expected, not `unittest`

    /tmp/tmppw39fd5k.d(113): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw39fd5k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res * p) % p;\n\t\t}\n\t\t\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd2nk4p2r.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpd2nk4p2r.__unittest_L24_C1() [0x427a79]

    ??:? void tmpd2nk4p2r.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n\
    \ & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5c_3ghc0.d(122): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5c_3ghc0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t & 1) res = (res\
    \ * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t & 1) res\
    \ = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp3(long n,\
    \ long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t &\
    \ 1) res = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t\
    \ & 1) res = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t\
    \ & 1) res = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t\
    \ & 1) res = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp7(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t\
    \ & 1) res = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp8(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\t\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgo5ffulk.d(110): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgo5ffulk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i;\n\tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\tres %=\
    \ p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    \
    \                    \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\t\
    long i;\n\tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, float p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 1; i\
    \ <= n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, int\
    \ p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\
    \tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, uint p) \n{\n\tlong res = 1;\n\
    \tlong i;\n\tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i =\
    \ 1; i <= n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, double p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 1; i <= n; i++)\n\t\t\
    res *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp(long n, float p) \n{\n\t\
    long res = 1;\n\tlong i;\n\tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\tres %= p;\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp(long n, int p) \n{\n\tlong res = 1;\n\tlong i;\n\
    \tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiathhgwi.d(72): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmpiathhgwi.d(118): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiathhgwi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\t\n\t\tn = n / 2;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpte5z0_64.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dfd]

    ??:? void tmpte5z0_64.__unittest_L21_C1() [0x427a85]

    ??:? void tmpte5z0_64.__modtest() [0x427b80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fad5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a98d]

    ??:? runModuleUnitTests [0x42b8f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42824c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2l(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2ll(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2lll(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif\
    \ (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2llll(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n\
    \ & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2lllll(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2llllll(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpne5qtxpy.d(119): Error: found `unittest` instead of statement

    /tmp/tmpne5qtxpy.d(131): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpne5qtxpy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) %\
    \ p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres\
    \ = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n\
    \ & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\
    \t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p *\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >>\
    \ 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p)\
    \ % p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\t\
    res = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpetf68qa3.d(115): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpetf68qa3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1) res = (res*p) % p;\n\t\
    \tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph7t55hhp.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmph7t55hhp.__unittest_L19_C1() [0x427a75]

    ??:? void tmph7t55hhp.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = (res * p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\
    \twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p)\
    \ % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s, long t) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\t\
    while(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\t\tp = (\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuf_16fyq.d(98): Error: expression expected, not `unittest`

    /tmp/tmpuf_16fyq.d(97): Error: found `{` when expecting `)`

    /tmp/tmpuf_16fyq.d(100): Error: found `alias` when expecting `;` following statement

    /tmp/tmpuf_16fyq.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuf_16fyq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6nn3cqlp.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp6nn3cqlp.__unittest_L18_C1() [0x427a6d]

    ??:? void tmp6nn3cqlp.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\
    \t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\
    \tlong t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    long t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t}\n\
    \treturn res;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp207ifzj0.d(114): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp207ifzj0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *=\
    \ p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long mod, long mod2) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\t\
    res *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3, long mod4) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\
    \tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long mod, long mod2, long mod3, long mod4, long mod5, long mod6) \n\
    {\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long mod, long mod2, long \nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptja29ytn.d(112): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptja29ytn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp3(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres =\
    \ (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\
    \t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n\
    \ & 1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p)\
    \ % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo \nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcywj2vv1.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcywj2vv1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, float p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\
    \t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long long p) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *=\
    \ p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p\
    \ (be aware of numerics).\n                        \n*/\nlong modp(long n, float\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp(long n, double p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, float p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpokaidhbw.d(49): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmpokaidhbw.d(91): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmpokaidhbw.d(126): Error: found `unittest` instead of statement

    /tmp/tmpokaidhbw.d(138): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpokaidhbw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmue13ez5.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpmue13ez5.__unittest_L20_C1() [0x427a75]

    ??:? void tmpmue13ez5.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164446
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n)\
    \ % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0)\
    \ {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res\
    \ * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp5(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\
    \t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n)\
    \ % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0)\
    \ {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\n\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164461
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\
    \t\t\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl1583k23.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmpl1583k23.__unittest_L22_C1() [0x427a89]

    ??:? void tmpl1583k23.__modtest() [0x427b84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp3(long n, long p)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) % p;\n\t\t\
    n >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p\
    \ (be aware of numerics).\n                        \n*/\nlong modp4(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) % p;\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp5(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) %\
    \ p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp7(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp8(long\
    \ n, long p) \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx3b29z_i.d(106): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3b29z_i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\
    \t\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgeekpwyw.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpgeekpwyw.__unittest_L22_C1() [0x427a6d]

    ??:? void tmpgeekpwyw.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\t\
    p>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong res = 1;\n\
    \twhile(n>0) {\n\t\tif(n&1) res = (res*p)%mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modpow2(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modpow2(long n, long p, long mod) \n{\n\tlong res = 1;\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = (res*p)%mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modpow3(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow3(long\
    \ n, long p, long mod) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res =\
    \ (res*p)%mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modpow4(\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiwhzj95e.d(106): Error: basic type expected, not `unittest`

    /tmp/tmpiwhzj95e.d(106): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwhzj95e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres = (res*p) %\
    \ p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\
    \t\t\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl1583k23.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e05]

    ??:? void tmpl1583k23.__unittest_L22_C1() [0x427a89]

    ??:? void tmpl1583k23.__modtest() [0x427b84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430000]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fadd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a995]

    ??:? runModuleUnitTests [0x42b901]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) %\
    \ p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\t\
    res = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n\
    \ & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n\
    \ != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\t\
    p = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n >>\
    \ 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p)\
    \ % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\t\
    res = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpamsfsiws.d(113): Error: basic type expected, not `unittest`

    /tmp/tmpamsfsiws.d(113): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpamsfsiws.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\
    \tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2l(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tres *=\
    \ p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2ll(long n, long p) \n{\n\tlong res =\
    \ 1;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2lll(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i=n;\
    \ i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2llll(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tres *=\
    \ p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2lllll(long n, long p) \n{\n\tlong res\
    \ = 1;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2llllll(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\
    \tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn \nunittest\n{\n   \
    \ alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8irzuj1.d(106): Error: expression expected, not `unittest`

    /tmp/tmpc8irzuj1.d(107): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8irzuj1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) %\
    \ p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\t\
    res = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p2(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\t\
    if (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2p4(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\
    \tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p8(long n, long p) \n{\n\tlong res =\
    \ 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn\
    \ = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p16(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res\
    \ * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p32(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\t\
    res = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware \nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjl0gordy.d(115): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjl0gordy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\n\t\t\tres = (res * p) % p;\n\t\t\
    n = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwsu0sn2l.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpwsu0sn2l.__unittest_L18_C1() [0x427a79]

    ??:? void tmpwsu0sn2l.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t & 1) res = (res\
    \ * p) % p;\n\t\tt >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5l33wrgu.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp5l33wrgu.__unittest_L21_C1() [0x427a6d]

    ??:? void tmp5l33wrgu.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\tp*=2;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long p, long q) \n{\n\tlong res =\
    \ 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn/=2;\n\t\tq*=2;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp(long n, long p, long q, long r) \n{\n\tlong res =\
    \ 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn/=2;\n\t\tq*=2;\n\t\tr*=2;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long p, long q, long r, long s) \n\
    {\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn/=2;\n\t\t\
    q*=2;\n\t\tr*=2;\n\t\ts*=2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp(long n, long p,\
    \ long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1)\
    \ res = (res*p)%q;\n\t\tn/=2;\n\t\tq*=2;\n\t\tr*=2;\n\t\ts*=2;\n\t\tt*=2;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp(long n, long p, long q, long r, long s, long\
    \ t, long u) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\
    \t\tn/=2;\n\t\tq*=2;\n\t\tr*=2;\n\t\ts*=2;\n\t\tt*=2;\n\t\tu*=2;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, \nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ns3e7su.d(102): Error: basic type expected, not `unittest`

    /tmp/tmp8ns3e7su.d(102): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ns3e7su.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res * p) % p;\n\t\
    \tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq68_2xfn.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpq68_2xfn.__unittest_L19_C1() [0x427a79]

    ??:? void tmpq68_2xfn.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t\
    }\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_q3cozkw.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmp_q3cozkw.__unittest_L17_C1() [0x427a75]

    ??:? void tmp_q3cozkw.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres =\
    \ (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\
    \tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\t\
    long res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres =\
    \ (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp8(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\
    \tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp9(long n, long \nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79djyx22.d(112): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79djyx22.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; n >>= 1)\n\t{\n\t\tif(n & 1) \n\t\t\tres *=\
    \ p;\n\t\t\n\t\tres %= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeaq9i5iq.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpeaq9i5iq.__unittest_L21_C1() [0x427a71]

    ??:? void tmpeaq9i5iq.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modpow(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modpow2(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modpow3(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) %\
    \ p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modpow4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdwigpv6r.d(101): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwigpv6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res*p) % p;\n\t\t}\n\t\t\n\t\tn = (n - 1) / 2;\n\t\tp = (p*p) % p;\n\t}\n\t\
    \n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n        \
    \                \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\t\
    while (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\
    \t\n\t\tn = (n - 1) / 2;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp3(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif\
    \ (n & 1)\n\t\t{\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\t\n\t\tn = (n - 1) / 2;\n\
    \t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res*p) % p;\n\t\t}\n\t\t\n\t\tn = (n - 1) / 2;\n\t\tp = (p*p) % p;\n\t}\n\t\
    \n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n        \
    \                \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\t\n\t\
    while (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\
    \t\n\t\tn = (n - 1) / 2;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp6(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif\
    \ (n & 1)\n\t\t{\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\t\n\t\tn = (n - 1) / 2;\n\
    \t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164446
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res*p) % p;\n\t\t}\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n) {\n\t\tif (n % p) {\n\t\t\tres = (res*p) % p;\n\
    \t\t}\n\t\tn = n >> 1;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr_qstu8x.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpr_qstu8x.__unittest_L20_C1() [0x427a71]

    ??:? void tmpr_qstu8x.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong mod\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivzd2p0t.d(106): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivzd2p0t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\
    \t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjqn0yjql.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmpjqn0yjql.__unittest_L19_C1() [0x427a75]

    ??:? void tmpjqn0yjql.__modtest() [0x427b70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres = (res * p) % p;\n\
    \t\t\n\t\tn >>= 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres\
    \ = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n\
    \ & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = p * p;\n\t}\n\t\
    \n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n        \
    \                \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\t\n\t\
    while(n) {\n\t\tif(n & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\t\
    p = p * p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\
    \t\tp = p * p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\t\
    long res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres = (res * p) % p;\n\t\
    \t\n\t\tn >>= 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp7(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres = (res\
    \ * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\t\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw8u4od7.d(125): Error: found `unittest` instead of statement

    /tmp/tmppw8u4od7.d(137): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw8u4od7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res *\
    \ p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164444
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modpow(long n, long p) \n\
    {\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modpow2(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\
    \tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modpow3(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p) %\
    \ p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_mtw7k9.d(110): Error: found `unittest` when expecting `)`

    /tmp/tmpf_mtw7k9.d(112): Error: found `{` when expecting `;` following statement

    /tmp/tmpf_mtw7k9.d(123): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf_mtw7k9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res * p) % p;\n\
    \t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res *\
    \ p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res *\
    \ p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res *\
    \ p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res *\
    \ p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwvw017gq.d(107): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvw017gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p)\
    \ % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\
    \t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n\
    \ != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\t\
    p = p >> 1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n\
    \ >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres\
    \ = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\
    \t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\
    \t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n\
    \ >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqz41_6t_.d(121): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqz41_6t_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: -8
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res*p)\
    \ % p;\n\t\tn = (n-1L) >>1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\twhile(t) {\n\t\tres *= 2;\n\t\tt -= 1;\n\t}\n\
    \twhile(res < p) {\n\t\tres *= 2;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8nfwscrj.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmp8nfwscrj.__unittest_L20_C1() [0x427a5d]

    ??:? void tmp8nfwscrj.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res * p) % p;\n\t\
    \tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p\
    \ (be aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res *\
    \ p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long m) \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\
    \tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long m, long q) \n{\n\tlong res = 1;\n\twhile(n>0)\n\
    \t{\n\t\tif(n&1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, long m, long q, long r)\
    \ \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res * p)\
    \ % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long m, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile(n>0)\n\
    \t{\n\t\tif(n&1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, long m, long q, long r,\
    \ long s, long t) \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpye0hwug8.d(110): Error: found `unittest` instead of statement

    /tmp/tmpye0hwug8.d(122): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpye0hwug8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n\
    \ * n) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164461
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres = (res * p)\
    \ % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpistu9zb3.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427df5]

    ??:? void tmpistu9zb3.__unittest_L20_C1() [0x427a79]

    ??:? void tmpistu9zb3.__modtest() [0x427b74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42fff0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42facd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]

    ??:? runModuleUnitTests [0x42b8f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong tmp;\n\t\n\twhile (n > 0)\n\t{\n\t\ttmp = n % p;\n\t\t\
    res = (res * tmp) % p;\n\t\tn = n / p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp54zagli2.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ded]

    ??:? void tmp54zagli2.__unittest_L21_C1() [0x427a97]

    ??:? void tmp54zagli2.__modtest() [0x427b6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fac5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a97d]

    ??:? runModuleUnitTests [0x42b8e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164445
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp8(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp76bqh2bl.d(120): Error: found `unittest` instead of statement

    /tmp/tmp76bqh2bl.d(132): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp76bqh2bl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p, long\
    \ q) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % q;\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % q;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long q, long r) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res\
    \ * p) % r;\n\t\tn >>= 1;\n\t\tp = (p * p) % r;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\t\
    if(n&1) res = (res * p) % s;\n\t\tn >>= 1;\n\t\tp = (p * p) % s;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t) \n{\n\t\
    long res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % t;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % t;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p, long\
    \ q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\t\
    if(n&1) res = (res * p) % u;\n\t\tn >>= 1;\n\t\tp = (p * p) % u;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t, long u,\
    \ long v) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) %\
    \ \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpff0wzew9.d(96): Error: expression expected, not `unittest`

    /tmp/tmpff0wzew9.d(97): Error: found `{` when expecting `;` following statement

    /tmp/tmpff0wzew9.d(108): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpff0wzew9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164445
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n)\
    \ % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n  \
    \  assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164459
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ey8vtj6.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp5ey8vtj6.__unittest_L20_C1() [0x427a6d]

    ??:? void tmp5ey8vtj6.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp42vqn6ko.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmp42vqn6ko.__unittest_L21_C1() [0x427a6d]

    ??:? void tmp42vqn6ko.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>=\
    \ 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdb042x6e.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427de5]

    ??:? void tmpdb042x6e.__unittest_L20_C1() [0x427a6d]

    ??:? void tmpdb042x6e.__modtest() [0x427b68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fabd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]

    ??:? runModuleUnitTests [0x42b8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164446
