language: d
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres = (res\
    \ * p) % p;\n\t\tn = n / 2;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjarz9e3q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\
    \t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvoboy59a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tres = (res*p)\
    \ % p;\n\t\t}\n\t\tn /= 2;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghxp6aze.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n & -p;\n\t\tres = (res\
    \ * tmp) % p;\n\t\tn = (n >> p) + p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzmqdwsii.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr = std.pow(r, p);\n\
    \t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr\
    \ = std.pow(r, p);\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\t\n\treturn r;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp3(long n, long p) \n{\n\tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n\
    \ & 1)\n\t\t\tr = std.pow(r, p);\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\t\n\t\
    return r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n              \
    \          \n*/\nlong modp4(long n, long p) \n{\n\tlong r = 1;\n\t\n\twhile(n\
    \ > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr = std.pow(r, p);\n\t\tn = n >> 1;\n\t\tp =\
    \ p << 1;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp5(long n, long p) \n{\n\tlong r = 1;\n\
    \t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr = std.pow(r, p);\n\t\tn = n >>\
    \ 1;\n\t\tp = p << 1;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr = std.pow(r, p);\n\
    \t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp7(long n,\
    \ long p) \n{\n\tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tr\
    \ = std.pow(r, p);\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplqj6sjh9.d(124): Error: found \''unittest\'' instead of statement\n/tmp/tmplqj6sjh9.d(136):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplqj6sjh9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tr = r * p;\n\t\tn = n\
    \ >> 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbjy0_3s6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong q;\n\t\n\tfor(; n > 0; n--)\n\t{\n\t\tq = p / n;\n\t\t\
    res = (res*q) % p;\n\t\tp = n;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8pd65wl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res * p) % p;\n\t\t}\n\t\t\n\t\tn = (n >> 1);\n\t\tp = (p * p) % p;\n\t}\n\t\
    \n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgp5x3aj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\t\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_qnllw9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\t\
    long t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong\
    \ q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m\
    \ = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r =\
    \ 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\
    \tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\t\
    long m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong\
    \ r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t\
    \ = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q =\
    \ 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\
    \tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\t\
    long t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong\
    \ q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m\
    \ = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r =\
    \ 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\
    \tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\t\
    long m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong\
    \ r = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t\
    \ = 1;\n\tlong q = 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\tlong q =\
    \ 1;\n\tlong m = 1;\n\tlong r = 1;\n\tlong t = 1;\n\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphpz_ajnp.d(112): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphpz_ajnp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\
    \tp*=2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\tp*=2;\n\t}\n\t\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n)\
    \ {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\tp*=2;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1)\
    \ res = (res*p)%p;\n\t\tn/=2;\n\t\tp*=2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\
    \t\tn/=2;\n\t\tp*=2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\
    \tp*=2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\tp*=2;\n\t}\n\t\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp57ez3_9h.d(115): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57ez3_9h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\
    \t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\
    \t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n      \
    \                  \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong res\
    \ = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\
    \t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modpow(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%mod;\n\t\
    \tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modpow(long n, long p, long\
    \ mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = (res*p)%mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modpow(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong\
    \ res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%mod;\n\t\tn>>=1;\n\t\
    \tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\t\n\twhile(n>0) {\n\t\
    \t\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpju6kmbi6.d(109): Error: found \''unittest\'' instead of statement\n/tmp/tmpju6kmbi6.d(121):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpju6kmbi6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong m = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t{\n\t\
    \t\tres = (res*m) % p;\n\t\t}\n\t\tm = (m*m) % p;\n\t\tn = (n>>1);\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\tlong m = 1;\n\
    \t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t{\n\t\t\tres = (res*m) % p;\n\t\t}\n\
    \t\tm = (m*m) % p;\n\t\tn = (n>>1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp3(long n,\
    \ long p) \n{\n\tlong res = 1;\n\tlong m = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\
    \t\t{\n\t\t\tres = (res*m) % p;\n\t\t}\n\t\tm = (m*m) % p;\n\t\tn = (n>>1);\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ m = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t{\n\t\t\tres = (res*m) % p;\n\
    \t\t}\n\t\tm = (m*m) % p;\n\t\tn = (n>>1);\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong m = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\t\
    if(n&1)\n\t\t{\n\t\t\tres = (res*m) % p;\n\t\t}\n\t\tm = (m*m) % p;\n\t\tn = (n>>1);\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\t\
    long m = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t{\n\t\t\tres = (res*m)\
    \ % p;\n\t\t}\n\t\tm = (m*m) % p;\n\t\tn\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqcvdbz0i.d(120): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpqcvdbz0i.d(132): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\n/tmp/tmpqcvdbz0i.d(132): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqcvdbz0i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n != 0) {\n\t\tlong tmp = n % p;\n\t\tr = r * tmp\
    \ + p;\n\t\tn = n / p;\n\t}\n\t\n\treturn r;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp8(long n, long p) \nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxryitmd4.d(120): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxryitmd4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\
    \t\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprzzjj60.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>= 1;\n\t\
    \tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow(long n, long p) \n{\n\t\
    long res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>= 1;\n\t\t\
    p = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % mod;\n\t\tn >>= 1;\n\t\t\
    p = (p*p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow(long n, long p, long mod,\
    \ long mod2) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % mod;\n\
    \t\tn >>= 1;\n\t\tp = (p*p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modpow(long n,\
    \ long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile(n) {\n\
    \t\tif(n&1) res = (res*p) % mod;\n\t\tn >>= 1;\n\t\tp = (p*p) % mod;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modpow(long n, long p, long mod, long mod2, long mod3,\
    \ long mod4) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % mod;\n\
    \t\tn >>= 1;\n\t\tp = (p*p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modpow(long n,\
    \ long p, long mod, long mod2, long mod3, long mod4, long mod5) \n{\n\tlong res\
    \ = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % mod\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeqzouy2u.d(96): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmpeqzouy2u.d(108): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmpeqzouy2u.d(108): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpeqzouy2u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1) \n\t\t{\n\t\t\tres\
    \ = (res*res) % p;\n\t\t}\n\t\tn /= 2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 0)\
    \ \n\t\t{\n\t\t\tres = (res*res) % p;\n\t\t}\n\t\tn /= 2;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long mod) \n{\n\tlong res = 1;\n\t\n\twhile(n\
    \ > 0)\n\t{\n\t\tif(n % 2 == 0) \n\t\t{\n\t\t\tres = (res*res) % mod;\n\t\t}\n\
    \t\tn /= 2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 0) \n\t\t{\n\t\
    \t\tres = (res*res) % mod;\n\t\t}\n\t\tn /= 2;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 0) \n\t\t{\n\t\t\tres = (res*res) % mod;\n\
    \t\t}\n\t\tn /= 2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3, long mod4) \n{\n\tlong res = 1;\n\t\n\twhile(n >\
    \ 0)\n\t{\n\t\tif(n % 2 == 0) \n\t\t{\n\t\t\tres = (res*res) % mod;\n\t\t}\n\t\
    \tn /= 2;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\t\n\t\nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpizvvxj4e.d(126): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpizvvxj4e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, int mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, int p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, int p, int mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, int p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp52mv9hok.d(116): Error: found \''unittest\'' instead of statement\n/tmp/tmp52mv9hok.d(128):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52mv9hok.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ q) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\t\
    if (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t\tr *=\
    \ r;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t\tr *= r;\n\t\ts *= s;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p, long q, long r, long s, long t)\
    \ \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t\tr *= r;\n\t\ts *= s;\n\t\tt *= t;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, long q, long r, long s,\
    \ long t, long u) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1o4gib_1.d(118): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1o4gib_1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\t\
    p>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tif (n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1)\
    \ res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\t\
    p>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tif (\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpruqx0hus.d(110): Error: expression expected, not \''unittest\''\n/tmp/tmpruqx0hus.d(111):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpruqx0hus.d(122): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpruqx0hus.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tres = (res*p)\
    \ % p;\n\t\t}\n\t\tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) {\n\
    \t\t\tres = (res*p) % p;\n\t\t}\n\t\tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\
    \t\tif (n % 2 == 1) {\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\tn = (n*p) % p;\n\t\
    }\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n   \
    \                     \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tres = (res*p) % p;\n\t\t\
    }\n\t\tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) {\n\t\t\
    \tres = (res*p) % p;\n\t\t}\n\t\tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif\
    \ (n % 2 == 1) {\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\tn = (n*p) % p;\n\t}\n\t\
    \n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n        \
    \                \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\t\
    while (n != 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\t\
    n = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\n\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg7dvnrs_.d(122): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7dvnrs_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t\
    }\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbhehbf0l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t & 1)\n\t\t\tres\
    \ = (res * p) % p;\n\t\tt >>= 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysy0qhi7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong r = 1;\n\tlong m = 1;\n\t\
    long a = 1;\n\tlong b = 1;\n\tlong c = 1;\n\tlong d = 1;\n\tlong e = 1;\n\tlong\
    \ f = 1;\n\tlong g = 1;\n\tlong h = 1;\n\tlong i = 0;\n\tlong j = 0;\n\tlong k\
    \ = 0;\n\tlong l = 1;\n\tlong m = 1;\n\tlong n = 1;\n\tlong o = 1;\n\tlong p =\
    \ 1;\n\tlong q = 1;\n\tlong r = 1;\n\tlong s = 1;\n\tlong t = 1;\n\tlong u = 1;\n\
    \tlong v = 1;\n\tlong w = 1;\n\tlong x = 1;\n\tlong y = 1;\n\tlong z = 1;\n\t\
    long A = 1;\n\tlong B = 1;\n\tlong C = 1;\n\tlong D = 1;\n\tlong E = 1;\n\tlong\
    \ F = 1;\n\tlong G = 1;\n\tlong H = 1;\n\tlong I = 1;\n\tlong J = 1;\n\tlong K\
    \ = 1;\n\tlong L = 1;\n\tlong M = 1;\n\tlong N = 1;\n\tlong O = 1;\n\tlong P =\
    \ 1;\n\tlong Q = 1;\n\tlong R = 1;\n\tlong S = 1;\n\tlong T = 1;\n\tlong U = 1;\n\
    \tlong V = 1;\n\tlong W = 1;\n\tlong X = 1;\n\tlong Y = 1;\n\tlong Z = 1;\n\t\
    long AA = 1;\n\tlong AB = 1;\n\tlong AC = 1;\n\tlong AD = 1;\n\tlong AE = 1;\n\
    \tlong AF = 1;\n\tlong AG = 1;\n\tlong AH = 1;\n\tlong AI = 1;\n\tlong AJ = 1;\n\
    \tlong AK = 1;\n\tlong AL = 1;\n\tlong AM = 1;\n\tlong AN = 1;\n\tlong AO = 1;\n\
    \tlong AP = 1;\n\tlong AQ = 1;\n\tlong AR = 1;\n\tlong AS = 1;\n\tlong AT = 1;\n\
    \tlong AU = 1;\n\tlong AV = 1;\n\tlong AW = 1;\n\tlong AX = 1;\n\tlong AY = 1;\n\
    \tlong AZ = 1;\n\tlong BA = 1;\n\tlong BB = 1;\n\tlong BC = 1;\n\tlong BD = 1;\n\
    \tlong BE = 1;\n\tlong BF = 1;\n\tlong BG = 1;\n\tlong BH = 1;\n\tlong BI = 1;\n\
    \tlong BJ = 1;\n\tlong BK = 1;\n\tlong BL = 1;\n\tlong BM = 1;\n\tlong BN = 1;\n\
    \tlong BO = 1;\n\tlong BP = 1;\n\tlong BQ = 1;\n\tlong BR = 1;\n\t\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvu6jugv_.d(111): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvu6jugv_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\t\
    \n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsovw9ted.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f2bj9nk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long q) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\
    \tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res\
    \ * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres\
    \ = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long q, long r, long s, long t, long u) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p, long q, long r, long s, long t,\
    \ long u, long v) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\
    \t\tn = (\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnregne2u.d(104): Error: expression expected, not \''unittest\''\n/tmp/tmpnregne2u.d(103):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpnregne2u.d(106): Error: found
    \''alias\'' when expecting \'';\'' following statement\n/tmp/tmpnregne2u.d(116):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnregne2u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n\
    \ & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp6(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\
    \t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp7(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp8(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp *= p;\n\t}\n\nunittest\n{\n    alias candidate = modp;\n\n\
    \    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn3_qgej0.d(122): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3_qgej0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res*p) % p;\n\t\t}\n\t\t\n\t\tn = (n-1L) / 2;\n\t\tp = (p*p) % p;\n\t}\n\t\n\
    \treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdq6q7qal.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i = 1; \n\twhile (i<n) \n\t{\n\t\tres = (res * i) % p;\n\
    \t\ti++;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n\
    \    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp660z9xso.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\t\
    p>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q) \n{\n\tlong res\
    \ = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tq>>=1;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long p, long q, long r) \n{\n\tlong\
    \ res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tq>>=1;\n\
    \t\tr>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q, long r, long\
    \ s) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%q;\n\t\t\
    n>>=1;\n\t\tq>>=1;\n\t\tr>>=1;\n\t\ts>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tq>>=1;\n\t\tr>>=1;\n\t\ts>>=1;\n\
    \t\tt>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q, long r, long\
    \ s, long t, long u) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%q;\n\
    \t\tn>>=1;\n\t\tq>>=1;\n\t\tr>>=1;\n\t\ts>>=1;\n\t\tt>>=1;\n\t\tu>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numeric\nunittest\n{\n  \
    \  alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjnidv1_h.d(97): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjnidv1_h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\
    \tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp8(long n, long p) \n{\n\
    \tlong res = 1;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc0z3c2f0.d(115): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc0z3c2f0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tn /= 2;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp(long n, long p, long q) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tres %= q;\n\t\tn /= 2;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp(long n, long p, long q, long r) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tres %= q;\n\t\tres %=\
    \ r;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp(long n, long p, long q,\
    \ long r, long s) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres\
    \ %= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\tn /= 2;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t) \n{\n\t\
    long res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tres %= q;\n\t\t\
    res %= r;\n\t\tres %= s;\n\t\tres %= t;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp(long n, long p, long q, long r, long s, long t, long u) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tres %= q;\n\t\tres\
    \ %= r;\n\t\tres %= s;\n\t\tres %= t;\n\t\tres %= u;\n\t\tn /= 2;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t, long u,\
    \ long v) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\t\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2ua78y9b.d(112): Error: found \''unittest\'' instead of statement\n/tmp/tmp2ua78y9b.d(124):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ua78y9b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres = (res*p) % n;\n\t\tn--;\n\t}\n\treturn\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ehihbdh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\
    \t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n\
    \ > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp4(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tres\
    \ = (res * n) % p;\n\t\tn--;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp5(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tres = (res * n)\
    \ % p;\n\t\tn--;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\
    \t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n\
    \ > 0)\n\t{\n\t\tres = (res * n) % p;\n\t\tn--;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware \nunittest\n{\n    alias candidate = modp;\n\n \
    \   assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5fp0jtxk.d(131): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fp0jtxk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\
    \tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m9nm6o_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2l(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2ll(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2lll(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2llll(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2lllll(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnsa4lve7.d(122): Error: found \''unittest\'' when expecting
    \'')\''\n/tmp/tmpnsa4lve7.d(124): Error: found \''{\'' when expecting \'';\''
    following statement\n/tmp/tmpnsa4lve7.d(135): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpnsa4lve7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modpow(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modpow2(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modpow3(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modpow4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp >>= 1;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modpow5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp >>= 1;\n\t\tp >>= 1;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modpow6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp >>= 1;\n\t\tp >>= 1;\n\t\tp >>= 1;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modpow7(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp >>= 1;\n\t\tp >>= 1;\n\t\tp \nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5m4sqlbh.d(118): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmp5m4sqlbh.d(130): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\n/tmp/tmp5m4sqlbh.d(130): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5m4sqlbh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res *\
    \ p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8z8l9jg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n)\
    \ % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n  \
    \  assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0y2ar8wx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\t\
    \n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsovw9ted.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t{\n\t\t\tres *= p;\n\
    \t\t\tres %= p;\n\t\t}\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv71vu3nu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong r = n;\n\twhile (r != 0) {\n\t\tlong m\
    \ = r / p;\n\t\tlong r = r - p * m;\n\t\tres = res * t + m;\n\t\tt = t * p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = 1;\n\tlong r = n;\n\twhile (r != 0) {\n\t\tlong m = r / p;\n\t\tlong r =\
    \ r - p * m;\n\t\tres = res * t + m;\n\t\tt = t * p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp3(long n, long p) \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong r = n;\n\
    \twhile (r != 0) {\n\t\tlong m = r / p;\n\t\tlong r = r - p * m;\n\t\tres = res\
    \ * t + m;\n\t\tt = t * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp4(long n, long p)\
    \ \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong r = n;\n\twhile (r != 0) {\n\t\t\
    long m = r / p;\n\t\tlong r = r - p * m;\n\t\tres = res * t + m;\n\t\tt = t *\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\
    \tlong t = 1;\n\tlong r = n;\n\twhile (r != 0) {\n\t\tlong m = r / p;\n\t\tlong\
    \ r = r - p * m;\n\t\tres = res * t + m;\n\t\tt = t * p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong r =\
    \ n;\n\twhile (r != 0) {\n\t\tlong m = r / p;\n\t\tlong r = r - p * m;\n\t\tres\
    \ = res * t + m;\n\t\tt = t * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56iazlao.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++)\n\t\tres *= p;\n\tres %=\
    \ p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    \
    \                    \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    long i;\n\tfor(i = 0; i < n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i\
    \ < n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp4(long n,\
    \ long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++)\n\t\tres *=\
    \ p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\
    \tlong i;\n\tfor(i = 0; i < n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i\
    \ < n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp7(long n,\
    \ long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++)\n\t\tres *=\
    \ p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\
    \tlong i;\n\tfor(i = 0; i < n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp9(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i\
    \ < n; i++)\n\t\tres *= p;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1sg3vhwd.d(117): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1sg3vhwd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn\
    \ = (n*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n*p) % p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n*p) % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0)\
    \ {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n*p) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\t\
    if (n & 1) res = (res*p) % p;\n\t\tn = (n*p) % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp5(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n &\
    \ 1) res = (res*p) % p;\n\t\tn = (n*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p)\
    \ % p;\n\t\tn = (n*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp7(long n, long p)\
    \ \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\
    \t\tn\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L)\
    \ == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp94vh5hqq.d(104): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmp94vh5hqq.d(116): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\n/tmp/tmp94vh5hqq.d(116): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp94vh5hqq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\tres = (res\
    \ * p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long mod) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\
    \t\tres = (res * p) % mod;\n\t\tn >>= 1;\n\t\tp = (p * p) % mod;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p, long mod, long mod2) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % mod;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\t\
    if (n & 1) \n\t\t\tres = (res * p) % mod;\n\t\tn >>= 1;\n\t\tp = (p * p) % mod;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, long mod, long mod2, long\
    \ mod3, long mod4) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\t\
    res = (res * p) % mod;\n\t\tn >>= 1;\n\t\tp = (p * p) % mod;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long mod, long mod2, long mod3, long mod4, long\
    \ mod5) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\t\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9ab944r_.d(103): Error: found \''unittest\'' instead of statement\n/tmp/tmp9ab944r_.d(115):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ab944r_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *=\
    \ p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p2(long n, long p) \n{\n\tlong res =\
    \ 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p8(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p16(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p32(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p64(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p128(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong \nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwnezmn_z.d(125): Error: no identifier for declarator long\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwnezmn_z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\
    \t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    while(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\
    \t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res\
    \ = res * p;\n\t\tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp71ks1asb.d(110): Error: found \''unittest\'' when expecting
    \''(\''\n/tmp/tmp71ks1asb.d(122): Error: found \''void\'' when expecting \'')\''\n/tmp/tmp71ks1asb.d(122):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmp71ks1asb.d(122):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp71ks1asb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; n >>= 1) \n\t{\n\t\tif(n & 1) \n\t\t\tres\
    \ *= p;\n\t\tp /= 2;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0m21vqh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp3(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp5(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp7(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp9(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyxdcu6bt.d(121): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxdcu6bt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\
    \tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7m9nm6o_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1hfr7mf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9dtuhb0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres = (res*p) %\
    \ p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl1ob9bkc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= 2;\n\t\tres %= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99m_zlhv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\
    \tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxqw8ijm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp8(long n, long p) \n{\n\
    \tlong res = 1;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9huzojcg.d(115): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9huzojcg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvoewlrm1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res *\
    \ p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\
    \t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p *\
    \ p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\t\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2m(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\
    \tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile\
    \ (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2m(long n, long p) \n\
    {\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res\
    \ * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwpnbcx4_.d(127): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpnbcx4_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp(long n, long p, long q) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp(long n, long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\
    \tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp(long n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\tn--;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp(long n, long p, long q, long r, long s, long\
    \ t) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres\
    \ %= r;\n\t\tres %= s;\n\t\tres %= t;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\t\
    res %= t;\n\t\tres %= u;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long q, long r, long s, long t, long u, long v) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\t\
    res %= t;\n\t\tres %= u;\n\t\tres %= v;\n\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk739knrm.d(113): Error: found \''unittest\'' instead of statement\n/tmp/tmpk739knrm.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk739knrm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn -= 1;\n\t}\n\treturn res;\n\
    }\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvvx7kqlw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\
    \t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\
    \t\tif(n&1) res = res * p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = res * p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res\
    \ = res * p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\
    \t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc7bmo57c.d(110): Error: found \''unittest\'' when expecting
    \''(\''\n/tmp/tmpc7bmo57c.d(122): Error: found \''void\'' when expecting \'')\''\n/tmp/tmpc7bmo57c.d(122):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmpc7bmo57c.d(122):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7bmo57c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res * p) %\
    \ p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwlm6hfg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2l(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2ll(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2lll(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2llll(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2lllll(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2llllll(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1) \n\t\t\tres *= p;\n\t\tn >>= 1;\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0_yfu9l3.d(119): Error: found \''unittest\'' instead of statement\n/tmp/tmp0_yfu9l3.d(131):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_yfu9l3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6kuumrd5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3sd_ue4d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong r = 1;\n\tlong m = 1;\n\t\
    \n\twhile (n > 0)\n\t{\n\t\tq = n / p;\n\t\tt = n % p;\n\t\tr = r * q + t;\n\t\
    \tm = m * q;\n\t\tn = t;\n\t}\n\t\n\tres = r * m;\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppbzvgvxj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; --n)\n\t{\n\t\tres = (res * p) % p;\n\t}\n\
    \t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph6dhzhaw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3sd_ue4d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *=\
    \ p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp6(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp8(long n, long p)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp9(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp10(long \nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpepjtr1cz.d(125): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpepjtr1cz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long q, long r) \n{\n\tlong res = 1;\n\t\n\twhile\
    \ (n != 0) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\t\
    q *= q;\n\t\tr *= r;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ q, long r, long s) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t\tr *= r;\n\t\
    \ts *= s;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s, long t) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\
    \tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\tq *= q;\n\t\tr *= r;\n\t\ts *= s;\n\
    \t\tt *= t;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s, \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L)\
    \ == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpppq7cqct.d(120): Error: basic type expected, not unittest\n/tmp/tmpppq7cqct.d(120):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpppq7cqct.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p, long\
    \ q) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t\
    {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long p, long q, long r, long s, long t) \n{\n\tlong res\
    \ = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\
    \tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q, long r, long\
    \ s, long t, long u) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s, long t, long u, long v) \n{\n\tlong res =\
    \ 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqdoseyap.d(115): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdoseyap.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++) {\n\t\tres = res * p % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    long i;\n\tfor(i = 0; i < n; i++) {\n\t\tres = res * p % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, double p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0;\
    \ i < n; i++) {\n\t\tres = res * p % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, float p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++) {\n\t\t\
    res = res * p % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp2p(long n, long double p)\
    \ \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++) {\n\t\tres = res *\
    \ p % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, ulong p) \n{\n\tlong res =\
    \ 1;\n\tlong i;\n\tfor(i = 0; i < n; i++) {\n\t\tres = res * p % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, uint p) \n{\n\tlong res = 1;\n\tlong i;\n\t\
    for(i = 0; i < n; i++) {\n\t\tres = res * p % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, ulong p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n;\
    \ i++) {\n\t\tres = res * p % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ uint p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 0; i < n; i++) {\n\t\tres\
    \ = res * \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkiu960gl.d(59): Error: found \''double\'' when expecting \'')\''\n/tmp/tmpkiu960gl.d(59):
    Error: semicolon expected following function declaration\n/tmp/tmpkiu960gl.d(59):
    Error: no identifier for declarator p\n/tmp/tmpkiu960gl.d(59): Error: Declaration
    expected, not \'')\''\n/tmp/tmpkiu960gl.d(63): Error: Declaration expected, not
    \''for\''\n/tmp/tmpkiu960gl.d(63): Error: no identifier for declarator i\n/tmp/tmpkiu960gl.d(63):
    Error: Declaration expected, not \''<\''\n/tmp/tmpkiu960gl.d(63): Error: no identifier
    for declarator i\n/tmp/tmpkiu960gl.d(63): Error: Declaration expected, not \''++\''\n/tmp/tmpkiu960gl.d(65):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiu960gl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n) {\n\t\tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\
    \tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res =\
    \ res * p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp5(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = res * p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n) {\n\t\tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\
    \tif(n&1) res = res * p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppk8xho7n.d(114): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppk8xho7n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res * mod;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res * mod * mod2;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\t\
    if (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res * mod\
    \ * mod2 * mod3;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp(long n, long p, long mod, long mod2, long mod3,\
    \ long mod4) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res * mod * mod2 * mod3 * mod4;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4, long\
    \ mod5) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res * mod * mod2 * mod3 * mod4 * mod5;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long p, long mod, long mod2, long mod3, long mod4, long\
    \ mod5, long mod6) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\t\
    res *= p;\n\t\t\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpog3ncf8z.d(104): Error: found \''unittest\'' instead of statement\n/tmp/tmpog3ncf8z.d(116):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpog3ncf8z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\
    \tp*=2;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdh2cll_n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgdr8wylm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\
    \t\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprzzjj60.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1) \n\t\t\tres = (res * p) % p;\n\
    \t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzbg30njm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\tres = (res\
    \ * p) % p;\n\t\t}\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0) \n\t{\n\t\t\
    if (n & 1) \n\t\t{\n\t\t\tres = (res * p) % p;\n\t\t}\n\t\tn >>= 1;\n\t\tp = (p\
    \ * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\tres = (res * p) % p;\n\t\t\
    }\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp4(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\
    \t\t\tres = (res * p) % p;\n\t\t}\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\twhile (n\
    \ > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\tres = (res * p) % p;\n\t\t}\n\t\t\
    n >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p\
    \ (be aware of numerics).\n                        \n*/\nlong modp6(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\
    \tres = (res * p) % p;\n\t\t}\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\
    \ \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\tres = (re\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvml2w_nc.d(122): Error: found \''unittest\'' when expecting
    \'')\''\n/tmp/tmpvml2w_nc.d(124): Error: found \''{\'' when expecting \'';\''
    following statement\n/tmp/tmpvml2w_nc.d(135): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmpvml2w_nc.d(135): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpvml2w_nc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong tmp;\n\t\n\twhile (n > 0)\n\t{\n\t\ttmp = n % p;\n\t\t\
    res = (res * tmp) % p;\n\t\tn = n / p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4cv3fh3o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg663h8ne.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn = n >>\
    \ 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn =\
    \ n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long mod) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res *\
    \ p) % mod;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long mod, long mod2) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = (res * p) % mod;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long mod, long mod2, long mod3) \n{\n\tlong res\
    \ = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % mod;\n\t\tn = n >> 1;\n\t\
    \tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res\
    \ = (res * p) % mod;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p, long mod, long mod2, long mod3, long mod4, long mod5)\
    \ \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % mod;\n\t\
    \tn = n >> 1;\n\t\tp = \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_pu9zlm.d(98): Error: expression expected, not \''unittest\''\n/tmp/tmpz_pu9zlm.d(99):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmpz_pu9zlm.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_pu9zlm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow(long n, long p) \n{\n\t\
    long res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow2(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modpow7\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcj73ligj.d(106): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcj73ligj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\tlong i;\n\t\n\tfor(i = 2; i <= p; i++) \n\t\
    {\n\t\tt *= 2;\n\t\tif(t > p) \n\t\t{\n\t\t\tt -= p;\n\t\t}\n\t\tres += t;\n\t\
    }\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc96nax8z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong i = 1L;\n\twhile (i<n) {\n\t\tres = (res\
    \ * t) % p;\n\t\tt = t << 1;\n\t\ti = i+1L;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong i = 1L;\n\twhile (i<n)\
    \ {\n\t\tres = (res * t) % p;\n\t\tt = t << 1;\n\t\ti = i+1L;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong i =\
    \ 1L;\n\twhile (i<n) {\n\t\tres = (res * t) % p;\n\t\tt = t << 1;\n\t\ti = i+1L;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\t\
    long t = 1;\n\tlong i = 1L;\n\twhile (i<n) {\n\t\tres = (res * t) % p;\n\t\tt\
    \ = t << 1;\n\t\ti = i+1L;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp5(long n, long p)\
    \ \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong i = 1L;\n\twhile (i<n) {\n\t\tres\
    \ = (res * t) % p;\n\t\tt = t << 1;\n\t\ti = i+1L;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp6(long n, long p) \n{\n\tlong res = 1;\n\tlong t = 1;\n\tlong i = 1L;\n\t\
    while (i<n) {\n\t\tres = (res * t) % p;\n\t\tt = t << 1;\n\t\ti = i+1L;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\tlong t\
    \ = 1;\n\tlong i = 1L;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe1kcmkts.d(108): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1kcmkts.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res * p) % p;\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\tfor(; n\
    \ > 0; n--)\n\t\tres = (res * p) % p;\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q) \n{\n\tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res\
    \ * p) % p;\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r) \n\
    {\n\tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res * p) % p;\n\t\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p, long q, long r, long s) \n{\n\t\
    long res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res * p) % p;\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p, long q, long r, long s, long t) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res * p) % p;\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p, long q, long r, long s, long t, long\
    \ u) \n{\n\tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres = (res * p) % p;\n\
    \t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n      \
    \                  \n*/\nlong modp2p(long n, long p, long q, long r, long s, long\
    \ t, long u, long v) \n{\n\tlong res = 1;\n\t\n\tfor(; n > 0; n--)\n\t\tres =\
    \ (res * p) % p;\n\t\n\treturn res;\n}\n/*\nReturn 2^\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkwa00sfd.d(107): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwa00sfd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong tmp;\n\t\n\twhile (n > 0)\n\t{\n\t\ttmp = n % p;\n\t\t\
    res = (res * tmp) % p;\n\t\tn = n / p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4cv3fh3o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long q) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres\
    \ *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\t\
    res *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long q, long r, long s, long t, long u, long v)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\t\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybfowhrv.d(112): Error: found \''unittest\'' instead of statement\n/tmp/tmpybfowhrv.d(124):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybfowhrv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\
    \t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmx8i38z0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\
    \t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\
    \t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n      \
    \                  \n*/\nlong modp(long n, float p) \n{\n\tlong res = 1;\n\t\n\
    \twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp(long n, long long p) \n{\n\tlong res = 1;\n\t\n\
    \twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\t\n\t\
    while(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp(long n, float p) \n{\n\tlong res = 1;\n\t\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long long p) \n{\n\tlong res = 1;\n\t\n\twhile(n>0) {\n\t\
    \tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\n\treturn res;\n}\n\
    /*\nReturn 2^n modu\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpchw9au8y.d(55): Error: found \''long\'' when expecting \'')\''\n/tmp/tmpchw9au8y.d(55):
    Error: semicolon expected following function declaration\n/tmp/tmpchw9au8y.d(55):
    Error: no identifier for declarator p\n/tmp/tmpchw9au8y.d(55): Error: Declaration
    expected, not \'')\''\n/tmp/tmpchw9au8y.d(59): Error: Declaration expected, not
    \''while\''\n/tmp/tmpchw9au8y.d(61): Error: no identifier for declarator n\n/tmp/tmpchw9au8y.d(61):
    Error: Declaration expected, not \''>>=\''\n/tmp/tmpchw9au8y.d(62): Error: no
    identifier for declarator p\n/tmp/tmpchw9au8y.d(62): Error: Declaration expected,
    not \''>>=\''\n/tmp/tmpchw9au8y.d(63): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchw9au8y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong i = 1L;\n\t\n\twhile ( i < n ) \n\t{\n\t\
    \tt *= p;\n\t\tt %= p;\n\t\tres += t;\n\t\ti++;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpamrbooj_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n = (n-1L) >>1;\n\t\tp = (p-1L) >>1;\n\t}\n\treturn res;\n}\nunittest\n{\n   \
    \ alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xisgjvy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n % 2 == 1) res *= p;\n\t\tn /= 2;\n\t\
    \tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n % 2 == 1) res *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tif (n % 3 == 1) res *= p;\n\t\tn /= 3;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n\
    \ % 4 == 1) res *= p;\n\t\tn /= 4;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n % 5 == 1) res *= p;\n\
    \t\tn /= 5;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n % 6 == 1) res *= p;\n\t\tn /= 6;\n\t\
    \tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n % 7 == 1) res *= p;\n\t\tn /= 7;\n\t\tp *= p;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tif (n % 8 == 1) res *= p;\n\t\tn /= 8;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsczi4q9x.d(115): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsczi4q9x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif((n & 1) == 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn = (n>>1) & -2;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmhbl2vo2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res*p) % p;\n\t\tn>>=1;\n\t\
    \tp>>=1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n\
    \    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6915bvtd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(long i = n; i > 0; i >>= 1)\n\t{\n\t\tif(p & i)\n\t\
    \t\tres *= 2;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhna91l6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long mod) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *=\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif\
    \ (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p, long mod, \nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcseb10mr.d(113): Error: basic type expected, not unittest\n/tmp/tmpcseb10mr.d(113):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpcseb10mr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; n >>= 1) \n\t{\n\t\tif(n & 1) \n\t\t{\n\t\t\
    \tres *= p;\n\t\t\tres %= p;\n\t\t}\n\t\tp /= 2;\n\t}\n\t\n\treturn res;\n}\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gxonvw_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tlong t = r * n;\n\t\tlong m = t %\
    \ p;\n\t\t\n\t\tif((m > p) || (m == 0))\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t\
    r = t;\n\t\tn = n - m;\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps5lxgnas.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long mod) \n{\n\tlong res\
    \ = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *=\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong res = 1;\n\
    \twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long mod, long mod2, long\
    \ mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc75u9ke_.d(115): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc75u9ke_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\t\
    \n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsovw9ted.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = res * p;\n\t\tn >>= 1;\n\
    \t\tp = p * p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bmhn6wz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6w0d0w5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res*p) % p;\n\t\t}\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7kri2rrh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\
    \t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvoboy59a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn\
    \ = (n-1L) >> (sizeof(int)*8-1);\n\t\tp = (p-1L) >> (sizeof(int)*8-1);\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\twhile (n\
    \ != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n-1L) >> (sizeof(int)*8-1);\n\
    \t\tp = (p-1L) >> (sizeof(int)*8-1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, float\
    \ p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) %\
    \ p;\n\t\tn = (n-1L) >> (sizeof(int)*8-1);\n\t\tp = (p-1L) >> (sizeof(int)*8-1);\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long long p) \n{\n\tlong res = 1;\n\
    \twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n-1L) >> (sizeof(int)*8-1);\n\
    \t\tp = (p-1L) >> (sizeof(int)*8-1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, double\
    \ p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) %\
    \ p;\n\t\tn = (n-1L) >> (sizeof(int)*8-1);\n\t\tp = (p-1L) >> (sizeof(int)*8-1);\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, float p) \n{\n\tlong res = 1;\n\t\
    while (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\tn = (n-1L) >> (sizeof(int)*8-1);\n\
    \t\tp = (p-1L) >> (sizeof(int)*8-1);\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3jfpdb3h.d(12): Error: found \'')\'' when expecting \''.\''
    following int\n/tmp/tmp3jfpdb3h.d(12): Error: found \''*\'' when expecting identifier
    following \''int.\''\n/tmp/tmp3jfpdb3h.d(12): Error: found \''8\'' when expecting
    \'',\''\n/tmp/tmp3jfpdb3h.d(12): Error: found \'';\'' when expecting \'')\''\n/tmp/tmp3jfpdb3h.d(13):
    Error: found \''p\'' when expecting \'';\'' following statement\n/tmp/tmp3jfpdb3h.d(13):
    Error: found \''=\'' instead of statement\n/tmp/tmp3jfpdb3h.d(26): Error: found
    \'')\'' when expecting \''.\'' following int\n/tmp/tmp3jfpdb3h.d(26): Error: found
    \''*\'' when expecting identifier following \''int.\''\n/tmp/tmp3jfpdb3h.d(26):
    Error: found \''8\'' when expecting \'',\''\n/tmp/tmp3jfpdb3h.d(26): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmp3jfpdb3h.d(27): Error: found \''p\'' when
    expecting \'';\'' following statement\n/tmp/tmp3jfpdb3h.d(27): Error: found \''=\''
    instead of statement\n/tmp/tmp3jfpdb3h.d(40): Error: found \'')\'' when expecting
    \''.\'' following int\n/tmp/tmp3jfpdb3h.d(40): Error: found \''*\'' when expecting
    identifier following \''int.\''\n/tmp/tmp3jfpdb3h.d(40): Error: found \''8\''
    when expecting \'',\''\n/tmp/tmp3jfpdb3h.d(40): Error: found \'';\'' when expecting
    \'')\''\n/tmp/tmp3jfpdb3h.d(41): Error: found \''p\'' when expecting \'';\'' following
    statement\n/tmp/tmp3jfpdb3h.d(41): Error: found \''=\'' instead of statement\n/tmp/tmp3jfpdb3h.d(49):
    Error: found \''long\'' when expecting \'')\''\n/tmp/tmp3jfpdb3h.d(49): Error:
    semicolon expected following function declaration\n/tmp/tmp3jfpdb3h.d(49): Error:
    no identifier for declarator p\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3jfpdb3h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= q;\n\
    \t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r) \n\
    {\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\
    \t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= q;\n\t\tres\
    \ %= r;\n\t\tres %= s;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tres *= p;\n\t\tres %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\tres %= t;\n\t\t\
    n--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s, long t, long u) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\t\
    res %= q;\n\t\tres %= r;\n\t\tres %= s;\n\t\tres %= t;\n\t\tres %= u;\n\t\tn--;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, \nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuzds72ec.d(115): Error: basic type expected, not unittest\n/tmp/tmpuzds72ec.d(115):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpuzds72ec.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = 1;\n\tlong q = 1;\n\tlong r = 1;\n\tlong m = 1;\n\t\
    \n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t{\n\t\t\tres = (res * t) % p;\n\t\t\t\
    q = (q * r) % p;\n\t\t}\n\t\tt = t*t % p;\n\t\tr = r*r % p;\n\t\tn = (n-1)/2;\n\
    \t}\n\t\n\tres = (res * q) % p;\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ujx57ul.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n = (n-1L) / 2;\n\t\tp = (p-1L) / 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn = (n-1L) / 2;\n\t\tp = (p-1L) / 2;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\
    \t\t\tres = (res*p) % p;\n\t\tn = (n-1L) / 2;\n\t\tp = (p-1L) / 2;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn = (n-1L) / 2;\n\t\tp = (p-1L)\
    \ / 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn = (n-1L) / 2;\n\
    \t\tp = (p-1L) / 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\
    \tn = (n-1L) / 2;\n\t\tp = (p-1L) / 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp6p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres =\
    \ (res*p) % p;\n\t\tn = (n-1L) / 2;\n\t\tp\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpitjg1ocl.d(105): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpitjg1ocl.d(117): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\n/tmp/tmpitjg1ocl.d(117): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpitjg1ocl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)%p;\n\t\t\
    n>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3um04sr4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres =\
    \ (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\
    \tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\t\
    long res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres =\
    \ (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp8(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\
    \tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp9(long n, long \nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_txl5z3g.d(112): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_txl5z3g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) r += p;\n\t\tn >>= 1;\n\t\tp *= p;\n\
    \t}\n\t\n\treturn r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_oucke6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0) {\n\t\tif (n % 2 == 0) {\n\t\t\tres = (res*p)\
    \ % p;\n\t\t}\n\t\tn = n >> 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlkt7u3_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0) \n\t{\n\t\tif (n & 1) \n\t\t{\n\t\t\tres\
    \ = (res*p) % p;\n\t\t}\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqudb0ggt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp8(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n % 2 == 1) \n\t\t\tres *= p;\n\t\
    \tn /= 2;\n\t\tp *= p;\n\t}\n\nunittest\n{\n    alias candidate = modp;\n\n  \
    \  assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppao9u0ix.d(122): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppao9u0ix.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\
    \tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, long q, long r, long s)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\
    \t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long q, long r, long s, long\
    \ t, long u) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres =\
    \ (res*p) % p;\n\t\t\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0wfpsf8m.d(104): Error: found \''unittest\'' instead of statement\n/tmp/tmp0wfpsf8m.d(116):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0wfpsf8m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p) % p;\n\
    \t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, double\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, float p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\
    \tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long double p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\
    \t{\n\t\tif(n&1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\
    \t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modp(long n, double * p) \n{\n\tlong res =\
    \ 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp(long n, float *\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long double * p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp42edc15x.d(61): Error: found \''double\'' when expecting \'')\''\n/tmp/tmp42edc15x.d(61):
    Error: semicolon expected following function declaration\n/tmp/tmp42edc15x.d(61):
    Error: no identifier for declarator p\n/tmp/tmp42edc15x.d(61): Error: Declaration
    expected, not \'')\''\n/tmp/tmp42edc15x.d(65): Error: Declaration expected, not
    \''while\''\n/tmp/tmp42edc15x.d(69): Error: no identifier for declarator n\n/tmp/tmp42edc15x.d(69):
    Error: Declaration expected, not \''>>=\''\n/tmp/tmp42edc15x.d(70): Error: no
    identifier for declarator p\n/tmp/tmp42edc15x.d(70): Error: Declaration expected,
    not \''=\''\n/tmp/tmp42edc15x.d(71): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp42edc15x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) %\
    \ p;\n\t\tn = (n-1L) >>1;\n\t\tp = (p-1L) >>1;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8t589ffq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\
    \t\tn = (n-1L) >>1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modpow(long\
    \ n, long p, long mod) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n &\
    \ 1)\n\t\t\tres = (res*p) % mod;\n\t\tn = (n-1L) >>1;\n\t\tp = (p*p) % mod;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modpow2(long n, long mod) \n{\n\tlong res = 1;\n\t\
    while (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*mod) % mod;\n\t\tn = (n-1L)\
    \ >>1;\n\t\tmod = (mod*mod) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modpow3(long n,\
    \ long mod) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\t\
    res = (res*mod) % mod;\n\t\tn = (n-1L) >>1;\n\t\tmod = (mod*mod) % mod;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modpow4(long n, long mod) \n{\n\tlong res = 1;\n\twhile\
    \ (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*mod) % mod;\n\t\tn = (n-1L) >>1;\n\
    \t\tmod = (mod*mod) % mod;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modpow5(long n, long\
    \ mod) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres =\
    \ (res*mod) % mod;\n\t\tn = (n-1L) >>1;\n\t\tmod = (mod*mod) % mod;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modpow6(long n, long mod) \n{\n\tlong \nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphew904ks.d(106): Error: no identifier for declarator long\n/tmp/tmphew904ks.d(106):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphew904ks.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong r = 1;\n\t\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tr = std.pow(r, p);\n\t\
    \tn >>= 1;\n\t\tp = std.pow(p, p);\n\t}\n\t\n\treturn r;\n}\nunittest\n{\n   \
    \ alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20z5wyzp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1) \n\t\t\tres = (res*p)\
    \ % p;\n\t\tn = (n-1L) >>1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8fxulvq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\
    \t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp(long n, double\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\t\
    res *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, float p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\
    \t\t\tres *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long double p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n %\
    \ 2 == 1)\n\t\t\tres *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\
    \t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, float p) \n{\n\tlong res = 1;\n\t\n\twhile(n >\
    \ 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\
    \t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n      \
    \                  \n*/\nlong modp(long n, long double p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\t\tn /= 2;\n\t\t\
    p *= p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3n84as1b.d(61): Error: found \''double\'' when expecting \'')\''\n/tmp/tmp3n84as1b.d(61):
    Error: semicolon expected following function declaration\n/tmp/tmp3n84as1b.d(61):
    Error: no identifier for declarator p\n/tmp/tmp3n84as1b.d(61): Error: Declaration
    expected, not \'')\''\n/tmp/tmp3n84as1b.d(65): Error: Declaration expected, not
    \''while\''\n/tmp/tmp3n84as1b.d(69): Error: no identifier for declarator n\n/tmp/tmp3n84as1b.d(69):
    Error: Declaration expected, not \''/=\''\n/tmp/tmp3n84as1b.d(70): Error: no identifier
    for declarator p\n/tmp/tmp3n84as1b.d(70): Error: Declaration expected, not \''*=\''\n/tmp/tmp3n84as1b.d(71):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3n84as1b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long mod) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *=\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif\
    \ (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p, long mod, \nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcseb10mr.d(113): Error: basic type expected, not unittest\n/tmp/tmpcseb10mr.d(113):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpcseb10mr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n & 1) res = res * p;\n\t\tn = n >> 1;\n\
    \t\tp = p * p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0lnu8ae.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res * p) % p;\n\t\t}\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\t\
    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthynyxa8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn = n >>\
    \ 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp53x82ygx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4u2h0_ba.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn >>= 1;\n\t\
    }\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl8c0pcb1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i; \n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ i; \n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp3(long n, long p) \n{\n\tlong res = 1;\n\tlong i; \n\tfor(i=n; i>0; i--)\n\
    \t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i; \n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\
    \ \n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong i; \n\tfor(i=n; i>0; i--)\n\t\tres *=\
    \ p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \tlong i; \n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\tlong i; \n\tfor(i=n; i>0;\
    \ i--)\n\t\tres *= p;\n\tres %= p;\n\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fw4spo7.d(106): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fw4spo7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n % p == 0) \n\t\t\tres = (res*2) % p;\n\
    \t\tn = (n*2) % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnrafmagv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) res = (res*p) % p;\n\t\
    \tn = (n>>1);\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n  \
    \  alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpteir5y2q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p, long\
    \ q) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % q;\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % q;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long q, long r) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res\
    \ * p) % r;\n\t\tn >>= 1;\n\t\tp = (p * p) % r;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\t\
    if(n&1) res = (res * p) % s;\n\t\tn >>= 1;\n\t\tp = (p * p) % s;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t) \n{\n\t\
    long res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % t;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % t;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p, long\
    \ q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\t\
    if(n&1) res = (res * p) % u;\n\t\tn >>= 1;\n\t\tp = (p * p) % u;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t, long u,\
    \ long v) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) %\
    \ \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyruakidy.d(96): Error: expression expected, not \''unittest\''\n/tmp/tmpyruakidy.d(97):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmpyruakidy.d(108):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyruakidy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres = (res * p)\
    \ % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp(long n, long p, long q) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\
    \t\tif (n & 1)\n\t\t\tres = (res * p) % q;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p)\
    \ % q;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q, long r) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres = (res * p)\
    \ % r;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % r;\n\t}\n\t\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp(long n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\t\n\t\
    while (n != 0) {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % s;\n\t\t\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % s;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p\
    \ (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0)\
    \ {\n\t\tif (n & 1)\n\t\t\tres = (res * p) % t;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p\
    \ * p) % t;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long p, long q, long r, long\
    \ s, long t, long u) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n &\
    \ 1)\n\t\t\tres = (res * p) % u;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % u;\n\t\
    }\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n   \
    \                     \n*/\nlong mod\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr1rguiex.d(116): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1rguiex.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long q) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres\
    \ *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\t\
    res *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long q, long r, long s, long t, long u, long v) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t\
    }\n\treturn \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkhngzps3.d(114): Error: expression expected, not \''unittest\''\n/tmp/tmpkhngzps3.d(115):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkhngzps3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n % 2 == 1)\n\t\t{\n\t\t\t\
    res = (res*p) % p;\n\t\t}\n\t\t\n\t\tn = n >> 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\
    \treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxlo45d5v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0qo7z_re.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res *\
    \ p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\
    \t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p)\
    \ % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp4(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\
    \tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile\
    \ (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res *\
    \ p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > \nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz6d15nau.d(126): Error: expression expected, not \''unittest\''\n/tmp/tmpz6d15nau.d(127):
    Error: found \''{\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpz6d15nau.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>=\
    \ 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpxjyj28.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\t\
    p>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p, long q) \n{\n\tlong res = 1;\n\twhile(n)\
    \ {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tp>>=1;\n\t\tq>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p, long q, long r) \n{\n\tlong res\
    \ = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tp>>=1;\n\t\
    \tq>>=1;\n\t\tr>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ q, long r, long s) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\
    \t\tn>>=1;\n\t\tp>>=1;\n\t\tq>>=1;\n\t\tr>>=1;\n\t\ts>>=1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long q, long r, long s, long t) \n{\n\tlong res\
    \ = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn>>=1;\n\t\tp>>=1;\n\t\
    \tq>>=1;\n\t\tr>>=1;\n\t\ts>>=1;\n\t\tt>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv7doi_0g.d(102): Error: basic type expected, not unittest\n/tmp/tmpv7doi_0g.d(102):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpv7doi_0g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p, long mod) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *=\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long mod, long mod2, long mod3, long mod4) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\t\
    p *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod, long mod2,\
    \ long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif\
    \ (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p, long mod, \nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcseb10mr.d(113): Error: basic type expected, not unittest\n/tmp/tmpcseb10mr.d(113):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpcseb10mr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res * p) % p;\n\t\t}\n\t\t\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc09dvahn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n\
    \ & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\
    \t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *=\
    \ p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\
    \t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoafj_nhv.d(122): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoafj_nhv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t & 1) res = (res\
    \ * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t & 1) res\
    \ = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp3(long n,\
    \ long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t &\
    \ 1) res = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t\
    \ & 1) res = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t\
    \ & 1) res = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t\
    \ & 1) res = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp7(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t\
    \ & 1) res = (res * p) % p;\n\t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp8(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong t = n;\n\t\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxt_qt_y4.d(110): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxt_qt_y4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i;\n\tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\tres %=\
    \ p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    \
    \                    \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\t\
    long i;\n\tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, float p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 1; i\
    \ <= n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, int\
    \ p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\
    \tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, uint p) \n{\n\tlong res = 1;\n\
    \tlong i;\n\tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, long long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i =\
    \ 1; i <= n; i++)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, double p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i = 1; i <= n; i++)\n\t\t\
    res *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp(long n, float p) \n{\n\t\
    long res = 1;\n\tlong i;\n\tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\tres %= p;\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp(long n, int p) \n{\n\tlong res = 1;\n\tlong i;\n\
    \tfor(i = 1; i <= n; i++)\n\t\tres *= p;\n\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo1dbtt48.d(72): Error: found \''long\'' when expecting \'')\''\n/tmp/tmpo1dbtt48.d(72):
    Error: semicolon expected following function declaration\n/tmp/tmpo1dbtt48.d(72):
    Error: no identifier for declarator p\n/tmp/tmpo1dbtt48.d(72): Error: Declaration
    expected, not \'')\''\n/tmp/tmpo1dbtt48.d(76): Error: Declaration expected, not
    \''for\''\n/tmp/tmpo1dbtt48.d(76): Error: no identifier for declarator i\n/tmp/tmpo1dbtt48.d(76):
    Error: Declaration expected, not \''<=\''\n/tmp/tmpo1dbtt48.d(76): Error: no identifier
    for declarator i\n/tmp/tmpo1dbtt48.d(76): Error: Declaration expected, not \''++\''\n/tmp/tmpo1dbtt48.d(78):
    Error: no identifier for declarator res\n/tmp/tmpo1dbtt48.d(78): Error: Declaration
    expected, not \''%=\''\n/tmp/tmpo1dbtt48.d(79): Error: Declaration expected, not
    \''return\''\n/tmp/tmpo1dbtt48.d(80): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1dbtt48.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\t\n\t\tn = n / 2;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp360s6hka.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2l(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2ll(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2lll(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif\
    \ (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2llll(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n\
    \ & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2lllll(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2llllll(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n &\
    \ 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvk3c3czc.d(119): Error: found \''unittest\'' instead of statement\n/tmp/tmpvk3c3czc.d(131):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvk3c3czc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) %\
    \ p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres\
    \ = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n\
    \ & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\
    \t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p *\
    \ p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >>\
    \ 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p)\
    \ % p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\t\
    res = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p * p;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3_rxy1_m.d(115): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_rxy1_m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1) res = (res*p) % p;\n\t\
    \tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtlveooo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long q) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = (res * p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\
    \twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p)\
    \ % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long q, long r, long\
    \ s, long t) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\t\
    while(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\t\tp = (\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr9s8ayr7.d(98): Error: expression expected, not \''unittest\''\n/tmp/tmpr9s8ayr7.d(97):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpr9s8ayr7.d(100): Error: found
    \''alias\'' when expecting \'';\'' following statement\n/tmp/tmpr9s8ayr7.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9s8ayr7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4u2h0_ba.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\
    \t\tt = t >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\
    \tlong t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    long t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2m(long n, long p) \n{\n\tlong res = 1;\n\tlong\
    \ t = n;\n\twhile (t != 0) {\n\t\tres = (res * t) % p;\n\t\tt = t >> 1;\n\t}\n\
    \treturn res;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjj19syyi.d(114): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjj19syyi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *=\
    \ p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p, long mod) \n{\n\tlong\
    \ res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp2p(long n, long p, long mod, long mod2) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p, long mod, long mod2, long mod3) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\t\
    res *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3, long mod4) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\
    \tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p, long\
    \ mod, long mod2, long mod3, long mod4, long mod5) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p, long mod, long mod2, long mod3, long mod4, long mod5, long mod6) \n\
    {\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long mod, long mod2, long \nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2zwuayuj.d(112): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zwuayuj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtb4599k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\t\
    n >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp3(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres =\
    \ (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1)\n\t\
    \t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n\
    \ & 1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\
    \t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n) {\n\t\tif (n & 1)\n\t\t\tres = (res*p) % p;\n\t\tn >>= 1;\n\t\tp = (p*p)\
    \ % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo \nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplbf_lso0.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbf_lso0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\twhile (n)\
    \ {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, float p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\
    \t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp(long n, long long p) \n{\n\tlong res\
    \ = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp(long n, double p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *=\
    \ p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p\
    \ (be aware of numerics).\n                        \n*/\nlong modp(long n, float\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long long p) \n{\n\tlong res = 1;\n\
    \twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp(long n, double p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\
    \t\tres %= p;\n\t\tn--;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, float p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiv5nv8f5.d(49): Error: found \''long\'' when expecting \'')\''\n/tmp/tmpiv5nv8f5.d(49):
    Error: semicolon expected following function declaration\n/tmp/tmpiv5nv8f5.d(49):
    Error: no identifier for declarator p\n/tmp/tmpiv5nv8f5.d(49): Error: Declaration
    expected, not \'')\''\n/tmp/tmpiv5nv8f5.d(52): Error: Declaration expected, not
    \''while\''\n/tmp/tmpiv5nv8f5.d(54): Error: no identifier for declarator res\n/tmp/tmpiv5nv8f5.d(54):
    Error: Declaration expected, not \''%=\''\n/tmp/tmpiv5nv8f5.d(55): Error: no identifier
    for declarator n\n/tmp/tmpiv5nv8f5.d(55): Error: Declaration expected, not \''--\''\n/tmp/tmpiv5nv8f5.d(56):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv5nv8f5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\tn = (n*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wc4i06_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1d959zc8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n)\
    \ % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0)\
    \ {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp4(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res\
    \ * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp5(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\
    \t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n)\
    \ % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp8(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0)\
    \ {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\n\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2v3dy0yr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\
    \t\t\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6y9rp5pl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp3(long n, long p)\
    \ \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) % p;\n\t\t\
    n >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p\
    \ (be aware of numerics).\n                        \n*/\nlong modp4(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) % p;\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp5(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p) %\
    \ p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp7(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp8(long\
    \ n, long p) \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbzzy_sn9.d(106): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbzzy_sn9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\
    \t\n\t\tn >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprzzjj60.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\t\
    p>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modpow(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile(n>0) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modpow(long n, long p, long mod) \n{\n\tlong res = 1;\n\
    \twhile(n>0) {\n\t\tif(n&1) res = (res*p)%mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modpow2(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modpow2(long n, long p, long mod) \n{\n\tlong res = 1;\n\twhile(n>0)\
    \ {\n\t\tif(n&1) res = (res*p)%mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modpow3(long n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\
    \ res = (res*p)%p;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow3(long\
    \ n, long p, long mod) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res =\
    \ (res*p)%mod;\n\t\tn>>=1;\n\t\tp>>=1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modpow4(\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps8mpdz2q.d(106): Error: basic type expected, not unittest\n/tmp/tmps8mpdz2q.d(106):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmps8mpdz2q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres = (res*p) %\
    \ p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl1ob9bkc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n % 2 == 1)\n\t\t\tres *= p;\n\
    \t\t\n\t\tn /= 2;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6y9rp5pl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) %\
    \ p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\t\
    res = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n\
    \ & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\twhile (n\
    \ != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\t\
    p = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n >>\
    \ 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2p(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p)\
    \ % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\t\
    res = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p(\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj80abaw0.d(113): Error: basic type expected, not unittest\n/tmp/tmpj80abaw0.d(113):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpj80abaw0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\
    \tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2l(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tres *=\
    \ p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2ll(long n, long p) \n{\n\tlong res =\
    \ 1;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2lll(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i=n;\
    \ i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2llll(long\
    \ n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tres *=\
    \ p;\n\tres %= p;\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2lllll(long n, long p) \n{\n\tlong res\
    \ = 1;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2llllll(long n, long p) \n{\n\tlong res = 1;\n\tlong i;\n\
    \tfor(i=n; i>0; i--)\n\t\tres *= p;\n\tres %= p;\n\treturn \nunittest\n{\n   \
    \ alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbirkg_9c.d(106): Error: expression expected, not \''unittest\''\n/tmp/tmpbirkg_9c.d(107):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbirkg_9c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) %\
    \ p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\t\
    res = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2p2(long n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\t\
    if (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\
    \treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n          \
    \              \n*/\nlong modp2p4(long n, long p) \n{\n\tlong res = 1;\n\twhile\
    \ (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\
    \tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p8(long n, long p) \n{\n\tlong res =\
    \ 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res * p) % p;\n\t\tn\
    \ = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p16(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res\
    \ * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p32(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\t\
    res = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n\
    /*\nReturn 2^n modulo p (be aware \nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg4v1wwic.d(115): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg4v1wwic.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1)\n\t\t\tres = (res * p) % p;\n\t\t\
    n = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxgrudr8m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tif (t & 1) res = (res\
    \ * p) % p;\n\t\tt >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw50tsep5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\t\
    n >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f2bj9nk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%p;\n\t\tn/=2;\n\t\tp*=2;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long p, long q) \n{\n\tlong res =\
    \ 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn/=2;\n\t\tq*=2;\n\t}\n\t\
    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n            \
    \            \n*/\nlong modp(long n, long p, long q, long r) \n{\n\tlong res =\
    \ 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn/=2;\n\t\tq*=2;\n\t\tr*=2;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long p, long q, long r, long s) \n\
    {\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\t\tn/=2;\n\t\t\
    q*=2;\n\t\tr*=2;\n\t\ts*=2;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp(long n, long p,\
    \ long q, long r, long s, long t) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1)\
    \ res = (res*p)%q;\n\t\tn/=2;\n\t\tq*=2;\n\t\tr*=2;\n\t\ts*=2;\n\t\tt*=2;\n\t\
    }\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n       \
    \                 \n*/\nlong modp(long n, long p, long q, long r, long s, long\
    \ t, long u) \n{\n\tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res*p)%q;\n\
    \t\tn/=2;\n\t\tq*=2;\n\t\tr*=2;\n\t\ts*=2;\n\t\tt*=2;\n\t\tu*=2;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, \nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwjnmlfcl.d(102): Error: basic type expected, not unittest\n/tmp/tmpwjnmlfcl.d(102):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpwjnmlfcl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res * p) % p;\n\t\
    \tn = n >> 1;\n\t\tp = p << 1;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl6gqaaa9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\t\
    }\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbhehbf0l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres =\
    \ (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\
    \tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\t\
    long res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp6(long n, long p) \n{\n\tlong res = 1;\n\t\
    while (n) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp7(long n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres =\
    \ (res * n) % p;\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp8(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tres = (res * n) % p;\n\t\
    \tn = (n * n) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp9(long n, long \nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_txl5z3g.d(112): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_txl5z3g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\tfor(; n > 0; n >>= 1)\n\t{\n\t\tif(n & 1) \n\t\t\tres *=\
    \ p;\n\t\t\n\t\tres %= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr04e5n39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res*p)\
    \ % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3sd_ue4d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modpow(long n, long p) \n\
    {\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modpow2(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modpow3(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) %\
    \ p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modpow4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpntz3emp4.d(101): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpntz3emp4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res*p) % p;\n\t\t}\n\t\t\n\t\tn = (n - 1) / 2;\n\t\tp = (p*p) % p;\n\t}\n\t\
    \n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n        \
    \                \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\t\
    while (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\
    \t\n\t\tn = (n - 1) / 2;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp3(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif\
    \ (n & 1)\n\t\t{\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\t\n\t\tn = (n - 1) / 2;\n\
    \t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res*p) % p;\n\t\t}\n\t\t\n\t\tn = (n - 1) / 2;\n\t\tp = (p*p) % p;\n\t}\n\t\
    \n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n        \
    \                \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\t\n\t\
    while (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\
    \t\n\t\tn = (n - 1) / 2;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp6(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif\
    \ (n & 1)\n\t\t{\n\t\t\tres = (res*p) % p;\n\t\t}\n\t\t\n\t\tn = (n - 1) / 2;\n\
    \t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpixhoyvh7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t{\n\t\t\tres =\
    \ (res*p) % p;\n\t\t}\n\t\t\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7kri2rrh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n) {\n\t\tif (n % p) {\n\t\t\tres = (res*p) % p;\n\
    \t\t}\n\t\tn = n >> 1;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpyq_jay.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong mod\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa5q7nm9k.d(106): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa5q7nm9k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n) {\n\t\tres *= p;\n\t\tres %= p;\n\t\tn /= 2;\n\
    \t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzk9sexgk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres = (res * p) % p;\n\
    \t\t\n\t\tn >>= 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres\
    \ = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp3(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n\
    \ & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = p * p;\n\t}\n\t\
    \n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n        \
    \                \n*/\nlong modp4(long n, long p) \n{\n\tlong res = 1;\n\t\n\t\
    while(n) {\n\t\tif(n & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\t\
    p = p * p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp5(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres = (res * p) % p;\n\t\t\n\t\tn >>= 1;\n\
    \t\tp = p * p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\t\
    long res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres = (res * p) % p;\n\t\
    \t\n\t\tn >>= 1;\n\t\tp = p * p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp7(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres = (res\
    \ * p) % p;\n\t\t\n\t\tn >>= 1;\n\t\t\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9b7n6nsj.d(125): Error: found \''unittest\'' instead of statement\n/tmp/tmp9b7n6nsj.d(137):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9b7n6nsj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n > 0)\n\t{\n\t\tif (n & 1)\n\t\t\tres = (res *\
    \ p) % p;\n\t\t\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\t\n\treturn res;\n\
    }\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8z8l9jg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modpow(long n, long p) \n\
    {\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modpow2(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p) % p;\n\t\
    \tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modpow3(long n,\
    \ long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p) %\
    \ p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow4(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow5(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modpow6(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n&1) res = (res*p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p*p\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt6husdyw.d(110): Error: found \''unittest\'' when expecting
    \'')\''\n/tmp/tmpt6husdyw.d(112): Error: found \''{\'' when expecting \'';\''
    following statement\n/tmp/tmpt6husdyw.d(123): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpt6husdyw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res * p) % p;\n\t\tn >>=\
    \ 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res * p) % p;\n\
    \t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp2p(long n,\
    \ long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res * p)\
    \ % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res *\
    \ p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res *\
    \ p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res *\
    \ p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\twhile (n) {\n\t\tif (n & 1) res = (res *\
    \ p) % p;\n\t\tn >>= 1;\n\t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6f0s95ah.d(107): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6f0s95ah.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p)\
    \ % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\
    \t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n\
    \ != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\t\
    p = p >> 1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n\
    \ >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be\
    \ aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres\
    \ = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\t\n\twhile (n != 0) {\n\
    \t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\
    \t}\n\t\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modp2p(long n, long p) \n{\n\tlong res = 1;\n\
    \t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res * p) % p;\n\t\tn = n\
    \ >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx_c5iuwh.d(121): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_c5iuwh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1) \n\t\t\tres = (res*p)\
    \ % p;\n\t\tn = (n-1L) >>1;\n\t\tp = (p*p) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkawt4ryl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong t = n;\n\twhile(t) {\n\t\tres *= 2;\n\t\tt -= 1;\n\t}\n\
    \twhile(res < p) {\n\t\tres *= 2;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtdww8xm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res * p) % p;\n\t\
    \tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p\
    \ (be aware of numerics).\n                        \n*/\nlong modp2p(long n, long\
    \ p) \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res *\
    \ p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long m) \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\
    \tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n\
    }\n/*\nReturn 2^n modulo p (be aware of numerics).\n                        \n\
    */\nlong modp2p(long n, long p, long m, long q) \n{\n\tlong res = 1;\n\twhile(n>0)\n\
    \t{\n\t\tif(n&1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, long m, long q, long r)\
    \ \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\t\t\tres = (res * p)\
    \ % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp2p(long\
    \ n, long p, long m, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile(n>0)\n\
    \t{\n\t\tif(n&1)\n\t\t\tres = (res * p) % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\
    \t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp2p(long n, long p, long m, long q, long r,\
    \ long s, long t) \n{\n\tlong res = 1;\n\twhile(n>0)\n\t{\n\t\tif(n&1)\n\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuugdd2bv.d(110): Error: found \''unittest\'' instead of statement\n/tmp/tmpuugdd2bv.d(122):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuugdd2bv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n\
    \ * n) % p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy8hivbnt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n != 0) {\n\t\tif (n & 1)\n\t\t\tres = (res * p)\
    \ % p;\n\t\tn = n >> 1;\n\t\tp = p >> 1;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqoibdzuc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\tlong tmp;\n\t\n\twhile (n > 0)\n\t{\n\t\ttmp = n % p;\n\t\t\
    res = (res * tmp) % p;\n\t\tn = n / p;\n\t}\n\t\n\treturn res;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4cv3fh3o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp2(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp3(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp4(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp5(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp6(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp7(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\t\tn = n / p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp8(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n > 0)\n\t{\n\t\tlong tmp = res;\n\t\tres = (n % p)\
    \ + res;\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg61dun9u.d(120): Error: found \''unittest\'' instead of statement\n/tmp/tmpg61dun9u.d(132):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg61dun9u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % p;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % p;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p, long\
    \ q) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % q;\n\t\
    \tn >>= 1;\n\t\tp = (p * p) % q;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p, long q, long r) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res\
    \ * p) % r;\n\t\tn >>= 1;\n\t\tp = (p * p) % r;\n\t}\n\treturn res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p, long q, long r, long s) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\t\
    if(n&1) res = (res * p) % s;\n\t\tn >>= 1;\n\t\tp = (p * p) % s;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t) \n{\n\t\
    long res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) % t;\n\t\tn >>= 1;\n\
    \t\tp = (p * p) % t;\n\t}\n\treturn res;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p, long\
    \ q, long r, long s, long t, long u) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\t\
    if(n&1) res = (res * p) % u;\n\t\tn >>= 1;\n\t\tp = (p * p) % u;\n\t}\n\treturn\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p, long q, long r, long s, long t, long u,\
    \ long v) \n{\n\tlong res = 1;\n\twhile(n>0) {\n\t\tif(n&1) res = (res * p) %\
    \ \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyruakidy.d(96): Error: expression expected, not \''unittest\''\n/tmp/tmpyruakidy.d(97):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmpyruakidy.d(108):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyruakidy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\twhile (n != 0) {\n\t\tres = (res * n) % p;\n\t\tn = (n * n)\
    \ % p;\n\t}\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\n  \
    \  assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0y2ar8wx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n) {\n\t\tif(n & 1)\n\t\t\tres *= p;\n\t\tn >>= 1;\n\
    \t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzca45vd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile(n > 0)\n\t{\n\t\tif(n&1)\n\t\t\tres *= p;\n\t\tn\
    \ >>= 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmadg_ti4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \tlong res = 1;\n\t\n\twhile (n) {\n\t\tif (n & 1)\n\t\t\tres *= p;\n\t\tn >>=\
    \ 1;\n\t\tp *= p;\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpxjyj28.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015450
