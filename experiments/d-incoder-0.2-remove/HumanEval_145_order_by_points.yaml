name: HumanEval_145_order_by_points
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    Write a function which\
  \ sorts the given list of integers\n    in ascending order according to the sum\
  \ of their digits.\n    Note: if there are several items with similar sum of their\
  \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
  \            \n*/\nlong[] order_by_points(long[] nums) \n"
tests: "unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
  \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
  \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
  \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
  \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L,\
  \ -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L,\
  \ 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
  \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
completions: ["{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        for(int j = i\
    \ + 1; j < nums.length; j++)\n        {\n            if(nums[i] + nums[j] == sum)\n\
    \            {\n                result[j] = nums[j];\n            }\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,c# |>\n<|\
    \ c |>\nThis doesn't work if there are two numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nIt does work if there are two numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nIt does work if there are two numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nIt does work if there are two numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nIt does work if there are two numbers with the same sum.\n<|/ c |>\n\
    <| a tags=sorting,algorithm,c# |>\n<code>\npublic static void Main(string[] args)\n\
    {\n    int[] nums = { 1, 3, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21,\
    \ 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\
    \ 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\
    \ 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,\
    \ 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,\
    \ 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,\
    \ 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,\
    \ 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145,\
    \ 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161,\
    \ 162, 163, 164, 165, 166, 167, 168, ", "{\n    long sum = 0;\n    for(int i =\
    \ 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n    \n    long[]\
    \ result = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[i];\n    }\n    \n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(result[i] > sum)\n        {\n            int index =\
    \ i;\n            for(int j = i; j < nums.length; j++)\n            {\n      \
    \          if(result[j] > sum)\n                {\n                    index =\
    \ j;\n                    break;\n                }\n            }\n         \
    \   \n            swap(result[i], result[index]);\n        }\n    }\n    \n  \
    \  return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| a tags=sorting,arrays,c#\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long sum = 0;\n  \
    \  long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there\
    \ are two numbers with the same sum.\n<|/ c |>\n<| c |>\nI believe this does work.\
    \ Try it out for yourself.\n<|/ c |>\n<| c |>\nIt does work, but it's O(n^2) in\
    \ the number of digits. It's not O(n log n).\n<|/ c |>\n<| c |>\nI believe this\
    \ does work. Try it out for yourself.\n<|/ c |>\n<| c |>\nIt does work, but it's\
    \ O(n^2) in the number of digits. It's not O(n log n).\n<|/ c |>\n<| a tags=sorting,algorithm\
    \ |>\nThis can be done in O(n) time complexity by using a hash table to store\
    \ the sum of the digits of each number in the input array. \n<code>\ndef sort_digits(arr):\n\
    \    sum_of_digits = {}\n    for num in arr:\n        sum_of_digits[num] = sum_of_digits.get(num,\
    \ 0) + num\n    sorted_arr = []\n    for num in sum_of_digits:\n        sorted_arr.append(sum_of_digits[num])\n\
    \    return sorted_arr\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work\
    \ if there are two numbers with the same sum.\n<|/ c |>\n<| c |>\nIt does work,\
    \ but it's O(n^2) in the number of digits. It's not O(n log n).\n<|/ c |>\n<|\
    \ c |>\nThis solution is O(n) time complexity. O(n log n) would be O(n^2) in the\
    \ number of digits. O(n^2) is O(n) in the number of digits.\n<|/ c |>\n<| c |>\n\
    This solution is O(n) time complexity. O(n log n) would be O(n^2) in the number\
    \ of digits. O(n^2) is O(n) in the number of digits.\n<|/ c |>\n<| c |>\nThis\
    \ solution is O(n) time complexity. O(n log n) would be O(n^2) in the number of\
    \ digits. O(n^2) is O(n) in the number of digits.\n<|/ c |>\n<| a tags=sorting,algorithm\
    \ |>\nThis can be done in O(n) time complexity by using a ", "{\n    long sum\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    long index = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum\
    \ > max)\n        {\n            max = sum;\n            index = i;\n        }\n\
    \        if(sum < min)\n        {\n            min = sum;\n        }\n    }\n\
    \    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(nums[i] > 0)\n        {\n            result[index] =\
    \ nums[i];\n            index++;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(new\
    \ long[]{10, 20, 30, 40, 50})`.\n<|/ c |>\n<| c |>\nYes, you are right. I missed\
    \ that case. Thanks for pointing out. I've updated my answer.\n<|/ c |>\n<| a\
    \ tags=algorithm,sorting,java,arrays |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n    }\n    \n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(sum\
    \ == nums[i])\n        {\n            result[index++] = i;\n        }\n    }\n\
    \    \n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't work if there are two numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are two numbers with the same sum.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI did this but my code is not working\
    \ as expected. Can you please check my code once again?\n<|/ c |>\n<| c |>\nI\
    \ checked your code. Your code is not working as expected because you didn't sort\
    \ your array in ascending order. Your code sorts your array in descending order.\
    \ Try my code again and let me know if it works.\n<|/ c |>\n<| c |>\nI checked\
    \ your code. Your code is not working as expected because you didn't sort your\
    \ array in ascending order. Your code sorts your array in descending order. Try\
    \ my code again and let me know if it works.\n<|/ c |>\n<| c |>\nI checked your\
    \ code. Your code is not working as expected because you didn't sort your array\
    \ in ascending order. Your code sorts your array in descending order. Try my code\
    \ again and let me know if it works.\n<|/ c |>\n<| c |>\nI checked your code.\
    \ Your code is not working as expected because you didn't sort your array in ascending\
    \ order. Your code sorts your array in descending order. Try my code again and\
    \ let me know if it works.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis does not answer the question. OP wants to sort\
    \ the array in descending order based on the sum of the digits. Your solution\
    \ sorts the array in ascending order based on the sum of the digits. Also, your\
    \ solution does not take into account that there are multiple items with the same\
    \ sum.\n<|/ c |>\n<| c |>\nI agree with you, my solution does not take into account\
    \ that there are multiple items with the same sum. My solution sorts the array\
    \ in descending order based on the sum of the digits. I edited my answer to make\
    \ it more clear.\n<|/ c |>\n<| c |>\nI edited my answer to make it more clear.\n\
    <|/ c |>\n<| c |>\nI edited my answer to make it more clear.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    int index = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work if there are multiple items with the\
    \ same sum.\n<|/ c |>\n<| c |>\nYes, I know. That's why I wrote \"Note\". Anyway,\
    \ I added a solution that doesn't use any extra space.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if there are multiple items with the same sum.\n<|/ c |>\n<| c\
    \ |>\nYes, I know. That's why I wrote \"Note\". Anyway, I added a solution that\
    \ doesn't use any extra space.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long sum\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n        {\n   \
    \         max = sum;\n        }\n        if(sum < min)\n        {\n          \
    \  min = sum;\n        }\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \        if(nums[i] > max)\n        {\n            result[i] = max;\n        }\n\
    \        if(nums[i] < min)\n        {\n            result[i] = min;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<|\
    \ c |>\nThis is not the correct answer. Your code will give the wrong result if\
    \ there are two numbers with the same sum.\n<|/ c |>\n<| c |>\nI didn't know that\
    \ there could be two numbers with the same sum. Thanks for pointing it out. I'll\
    \ fix my answer.\n<|/ c |>\n<| c |>\nThis is not the correct answer. Your code\
    \ will give the wrong result if there are two numbers with the same sum.\n<|/\
    \ c |>\n<| c |>\nI didn't know that there could be two numbers with the same sum.\
    \ Thanks for pointing it out. I'll fix my answer.\n<|/ c |>\n<| c |>\nThis is\
    \ not the correct answer. Your code will give the wrong result if there are two\
    \ numbers with the same sum.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n  \
    \  int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work\
    \ if there are two numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it. Try it yourself.\n<|/ c |>\n<| c |>\nI tested\
    \ it myself and it doesn't work. Try it yourself.\n<|/ c |>\n<| c |>\nI tested\
    \ it myself and it doesn't work. Try it yourself.\n<|/ c |>\n<| c |>\nI tested\
    \ it myself and it doesn't work. Try it yourself.\n<|/ c |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long sum = 0;\n    long max =\
    \ 0;\n    long min = 0;\n    long index = 0;\n    long sumOfDigits = 0;\n    long\
    \ maxOfDigits = 0;\n    long minOfDigits = 0;\n    long maxIndex = 0;\n    long\
    \ minIndex = 0;\n    long maxSum = 0;\n    long minSum = 0;\n    \n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        sumOfDigits\
    \ += nums[i];\n        \n        if(sum > max)\n        {\n            max = sum;\n\
    \            maxIndex = i;\n        }\n        \n        if(sum < min)\n     \
    \   {\n            min = sum;\n            minIndex = i;\n        }\n        \n\
    \        if(sumOfDigits > maxOfDigits)\n        {\n            maxOfDigits = sumOfDigits;\n\
    \            maxSum = sum;\n            maxIndex = i;\n        }\n        \n \
    \       if(sumOfDigits < minOfDigits)\n        {\n            minOfDigits = sumOfDigits;\n\
    \            minSum = sum;\n            minIndex = i;\n        }\n    }\n    \n\
    \    long[] result = new long[nums.length];\n    \n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(nums[i] != 0)\n        {\n            result[i] = nums[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < nums.length; i++)\n    {\n   \
    \     if(nums[i] != 0)\n        {\n            result[i] = nums[i];\n        }\n\
    \    }\n    \n    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i]\
    \ != 0)\n        {\n            result[i] = nums[i];\n        }\n    }\n    \n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i] != 0)\n \
    \       {\n            result[i] = nums[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        if(nums[i] != 0)\n        {\n \
    \           result[i] = nums[i];\n        }\n    }\n    \n    for(int i = 0; i\
    \ < nums.length; i++)\n    {\n        if(nums[i] != 0)\n        {\n          \
    \  result[i] = nums[i];\n        }\n    }\n    \n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(nums[i] != 0)\n        {\n            result[i] = nums[i];\n\
    \        }\n    }\n    \n    for(int i = 0; i < nums.length; i++)\n    {\n   \
    \     if(nums[i] != 0)\n        {\n            result[i] = nums[i];\n        }\n\
    \    }\n    \n    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i]\
    \ != 0)\n        {\n            result[i] = nums[i];\n        }\n    }\n    \n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i] != 0)\n \
    \       {\n            result[i] = nums[i];\n        }\n    }\n    \n    for(int\
    \ i = 0; i < nums.length; i++)\n", "{\n    long sum = 0;\n    for(int i = 0; i\
    \ < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n    \n    long[]\
    \ result = new long[nums.length];\n    int index = 0;\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        while(sum > 0)\n        {\n            int\
    \ digit = sum % 10;\n            sum += digit * nums[i];\n            result[index++]\
    \ = digit;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with the input `[4, 3, 6, 9, 1, 2]`.\n<|/ c |>\n<| c |>\nIt works. I\
    \ tested it with the input you provided. Please try it yourself.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work. Try it with the input `[4, 3, 6, 9, 1, 2]`.\n<|/ c |>\n\
    <| c |>\nIt works. I tested it with the input you provided. Please try it yourself.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with the input `[4, 3, 6, 9, 1, 2]`.\n\
    <|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n\
    \        {\n            max = sum;\n        }\n        if(sum < min)\n       \
    \ {\n            min = sum;\n        }\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i] >\
    \ max)\n        {\n            int index = i;\n            for(int j = i; j <\
    \ nums.length; j++)\n            {\n                if(nums[j] > max)\n      \
    \          {\n                    index = j;\n                }\n            }\n\
    \            swap(nums, i, index);\n        }\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(nums[i] < min)\n        {\n            int index = i;\n\
    \            for(int j = i; j < nums.length; j++)\n            {\n           \
    \     if(nums[j] < min)\n                {\n                    index = j;\n \
    \               }\n            }\n            swap(nums, i, index);\n        }\n\
    \    }\n    return result;\n}\n/*", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum = nums[i] - '0';\n        if(sum > 0)\n        {\n       \
    \     result[j] = sum;\n            j++;\n        }\n        i++;\n    }\n   \
    \ while(j < result.length)\n    {\n        result[j] = 0;\n        j++;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,c# |>\n<| a dscore=0\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long sum = 0;\n  \
    \  for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n\
    \    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[i];\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(sum < nums[i])\n        {\n            for(int j = i;\
    \ j < nums.length; j++)\n            {\n                result[j + 1] = result[j];\n\
    \            }\n            result[i] = sum;\n            sum = 0;\n        }\n\
    \        sum += nums[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,c#,algorithm\
    \ |>\n<| c |>\nThis is not an optimal solution, since it requires O(n^2) space\
    \ and O(n^2) time. An O(n) solution is possible by using a priority queue (http://en.wikipedia.org/wiki/Priority_queue),\
    \ but this requires additional memory and O(n) time.\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. I was thinking about a solution with O(n) space and O(n) time.\
    \ Thanks for your comment.\n<|/ c |>\n<| c |>\nI believe that your solution is\
    \ O(n^2) space and O(n^2) time. Your solution requires O(n) space and O(n) time.\
    \ Your solution also requires O(n^2) space and O(n^2) time. Your solution requires\
    \ O(n^2) space and O(n^2) time. Your solution requires O(n^2) space and O(n^2)\
    \ time. Your solution requires O(n^2) space and O(n^2) time. Your solution requires\
    \ O(n^2) space and O(n^2) time. Your solution requires O(n^2) space and O(n^2)\
    \ time. Your solution requires O(n^2) space and O(n^2) time. Your solution requires\
    \ O(n^2) space and O(n^2) time. Your solution requires O(n^2) space and O(n^2)\
    \ time. Your solution requires O(n^2) space and O(n^2) time. Your solution requires\
    \ O(n^2) space and O(n^2) time. Your solution requires O(n^2) space and O(n^2)\
    \ time. Your solution requires O(n^2) space and O(n^2) time. Your solution requires\
    \ O(n^2) space and O(n^2) time. Your solution requires O(n^2) space and O(n^2)\
    \ time. Your solution requires O(n^2) space and O(n^2) time. Your solution requires\
    \ O(n^2) space and O(n", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long[] result = new long[nums.length];\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long sum = 0;\n    long max = 0;\n    long min =\
    \ 0;\n    long index = 0;\n    long sumOfDigits = 0;\n    long maxOfDigits = 0;\n\
    \    long minOfDigits = 0;\n    long maxIndex = 0;\n    long minIndex = 0;\n \
    \   long maxSum = 0;\n    long minSum = 0;\n    long maxSumIndex = 0;\n    long\
    \ minSumIndex = 0;\n    long maxSumOfDigits = 0;\n    long minSumOfDigits = 0;\n\
    \    long maxSumIndexOfDigits = 0;\n    long minSumIndexOfDigits = 0;\n    long\
    \ maxSumOfDigitsIndex = 0;\n    long minSumOfDigitsIndex = 0;\n    long maxSumIndexOfDigitsIndex\
    \ = 0;\n    long minSumIndexOfDigitsIndex = 0;\n    \n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        sumOfDigits += nums[i]%10;\n \
    \       \n        if(sumOfDigits > maxSumOfDigits)\n        {\n            maxSumOfDigits\
    \ = sumOfDigits;\n            maxSumIndex = i;\n        }\n        \n        if(sumOfDigits\
    \ < minSumOfDigits)\n        {\n            minSumOfDigits = sumOfDigits;\n  \
    \          minSumIndex = i;\n        }\n    }\n    \n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        sumOfDigits += nums[i]%10;\n \
    \       \n        if(sumOfDigits > maxSumOfDigitsIndex)\n        {\n         \
    \   maxSumOfDigitsIndex = sumOfDigits;\n            maxSumOfDigitsIndex = i;\n\
    \        }\n        \n        if(sumOfDigits < minSumOfDigitsIndex)\n        {\n\
    \            minSumOfDigitsIndex = sumOfDigits;\n            minSumOfDigitsIndex\
    \ = i;\n        }\n    }\n    \n    for(int i = 0; i < nums.length; i++)\n   \
    \ {\n        sum += nums[i];\n        sumOfDigits += nums[i]%10;\n        \n \
    \       if(sumOfDigits > maxSumIndexOfDigits)\n        {\n            maxSumIndexOfDigits\
    \ = sumOfDigits;\n            maxSumIndexOfDigits = i;\n        }\n        \n\
    \        if(sumOfDigits < minSumIndexOfDigits)\n        {\n            minSumIndexOfDigits\
    \ = sumOfDigits;\n            minSumIndexOfDigits = i;\n        }\n    }\n   \
    \ \n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        sumOfDigits += nums[i]%10;\n        \n        if(sumOfDigits > maxSumOfDigitsIndex)\n\
    \        {\n", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        for(int j = i\
    \ + 1; j < nums.length; j++)\n        {\n            if(nums[i] + nums[j] == sum)\n\
    \            {\n                result[i] = nums[j];\n                nums[j]\
    \ = nums[i];\n                nums[i] = result[i];\n            }\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,c# |>\n<|\
    \ c |>\nThis is not an answer to the question. He wants to sort a list of numbers\
    \ in ascending order according to the sum of their digits.\n<|/ c |>\n<| c |>\n\
    I believe this answer does exactly what the OP asked for. He wants to sort a list\
    \ of numbers in ascending order according to the sum of their digits.\n<|/ c |>\n\
    <| c |>\nThis answer does not sort the numbers in ascending order according to\
    \ the sum of their digits. For example, if there are two numbers with the same\
    \ sum of their digits, they will be sorted in ascending order according to the\
    \ index of the number in the original list.\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that requirement. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that sorts the numbers in ascending order according to the sum of their\
    \ digits.\n<|/ c |>\n<| a |>\n<code>\npublic static void Main(string[] args)\n\
    {\n    int[] nums = new int[] { 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110,\
    \ 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270,\
    \ 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430,\
    \ 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590,\
    \ 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750,\
    \ 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910,\
    \ 920, 930, 940, 950, 960, 970, 980, 990, 1000, 1010, 1020, 1030, 1040, ", "{\n\
    \    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(new\
    \ long[]{1, 3, 2})`\n<|/ c |>\n<| c |>\nI see what you mean. Fixed it now.\n<|/\
    \ c |>\n<| c |>\nThis still doesn't work. Try it with `order_by_points(new long[]{1,\
    \ 3, 2})`\n<|/ c |>\n<| c |>\nI see what you mean. Fixed it now.\n<|/ c |>\n<|\
    \ c |>\nThis still doesn't work. Try it with `order_by_points(new long[]{1, 3,\
    \ 2})`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum = sum + nums[i];\n        while(j < nums.length && sum ==\
    \ nums[j])\n        {\n            j++;\n        }\n        result[i] = j;\n \
    \       i++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nYes, I forgot to add that case to the code. Thanks for pointing it out.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n        if(sum > 0)\n        {\n            result[index++]\
    \ = i;\n            sum -= nums[i];\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=algorithm,sorting |>\n<| c |>\nI believe this solution is\
    \ O(n^2) since it sorts every element of the list twice. Sorting can be done in\
    \ O(n) by using a heap.\n<|/ c |>\n<| c |>\nI believe this solution is O(n^2)\
    \ since it sorts every element of the list twice. Sorting can be done in O(n)\
    \ by using a heap.\n<|/ c |>\n<| c |>\nThis solution doesn't work if there are\
    \ two numbers with the same sum.\n<|/ c |>\n<| c |>\nI believe this solution is\
    \ O(n^2) since it sorts every element of the list twice. Sorting can be done in\
    \ O(n) by using a heap.\n<|/ c |>\n<| c |>\nThis solution doesn't work if there\
    \ are two numbers with the same sum.\n<|/ c |>\n<| a tags=algorithm,sorting |>\n\
    <code>\ndef sort(nums):\n    sum = 0\n    length = len(nums)\n    i = 0\n    while\
    \ i < length:\n        sum += nums[i]\n        i += 1\n    i = 0\n    while i\
    \ < length:\n        if sum > nums[i]:\n            temp = nums[i]\n         \
    \   nums[i] = nums[sum - temp]\n            nums[sum - temp] = temp\n        i\
    \ += 1\n    return nums\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution doesn't\
    \ work if there are two numbers with the same sum.\n<|/ c |>\n<| c |>\nThis solution\
    \ doesn't work if there are two numbers with the same sum.\n<|/ c |>\n<| c |>\n\
    This solution doesn't work if there are two numbers with the same sum.\n<|/ c\
    \ |>\n<| c |>\nThis solution doesn't work if there are two numbers with the same\
    \ sum.\n<|/ c |>\n<| c |>\nThis solution doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| a dscore=5 |>\n<code>\ndef sort(nums):\n  \
    \  sum = 0\n    length = len(nums)\n    i = 0\n    while i < length:\n       \
    \ sum += nums[i]\n        i += 1\n    i = 0\n    while ", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int index = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index]\
    \ = sum;\n        index++;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are two or\
    \ more numbers with the same sum.\n<|/ c |>\n<| c |>\nI didn't say it wouldn't.\
    \ I said it wouldn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I'll update my answer.\n<|/ c |>\n<| c\
    \ |>\nI updated my answer. Thanks for pointing that out.\n<|/ c |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    Arrays.sort(nums);\n    long[]\
    \ result = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[i] - sum;\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is not the correct answer. Your code will sort `[9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, ", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(sum == nums[i])\n\
    \        {\n            for(int j = i; j < nums.length; j++)\n            {\n\
    \                if(sum > nums[j])\n                {\n                    long\
    \ temp = nums[i];\n                    nums[i] = nums[j];\n                  \
    \  nums[j] = temp;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there\
    \ are multiple items with the same sum.\n<|/ c |>\n<| c |>\nIt does. I tested\
    \ it before posting.\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple\
    \ items with the same sum.\n<|/ c |>\n<| c |>\nIt does. I tested it before posting.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are multiple items with the same sum.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ if(sum - nums[i] < 0)\n        {\n            sum -= nums[i];\n            result[index++]\
    \ = i;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it doesn't work. Try it with the input `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,20",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis solution does not\
    \ take into account the fact that there may be multiple items with the same sum.\n\
    <|/ c |>\n<| c |>\nThe question was to sort by sum of digits, not by index. Your\
    \ solution does not take into account the fact that there may be multiple items\
    \ with the same sum.\n<|/ c |>\n<| c |>\nThe question was to sort by sum of digits,\
    \ not by index. Your solution does not take into account the fact that there may\
    \ be multiple items with the same sum.\n<|/ c |>\n<| c |>\nThe question was to\
    \ sort by sum of digits, not by index. Your solution does not take into account\
    \ the fact that there may be multiple items with the same sum.\n<|/ c |>\n<| a\
    \ dscore=3 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| c |>\nThis doesn't work if there are two or\
    \ more numbers with the same sum.\n<|/ c |>\n<| c |>\nI thought that would be\
    \ the case but didn't test it out. Thanks for pointing it out.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nI thought that would be the case but didn't test it out. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two\
    \ or more numbers with the same sum.\n<|/ c |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n \
    \       result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis is not the correct\
    \ solution. Try it for input `[10, 5, 2, 3]`.\n<|/ c |>\n<| c |>\nI believe this\
    \ solution is correct. Try it for input `[10, 5, 2, 3]`.\n<|/ c |>\n<| c |>\n\
    It is not correct. Try it for input `[10, 5, 2, 3]`.\n<|/ c |>\n<| c |>\nI believe\
    \ this solution is correct. Try it for input `[10, 5, 2, 3]`.\n<|/ c |>\n<| c\
    \ |>\nI believe this solution is correct. Try it for input `[10, 5, 2, 3]`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport\
    \ java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    int sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(new\
    \ long[]{-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5})`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `order_by_points(new long[]{-5, -4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4, 5})`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(new\
    \ long[]{-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5})`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `order_by_points(new long[]{-5, -4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4, 5})`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(new\
    \ long[]{-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5})`.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    for(; i < nums.length; i++)\n    {\n \
    \       sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This solution does not work if there are multiple items with the same sum.\n<|/\
    \ c |>\n<| c |>\nI added a solution that does work if there are multiple items\
    \ with the same sum.\n<|/ c |>\n<| c |>\nThis solution does not work if there\
    \ are multiple items with the same sum.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that does work if there are multiple items with the same sum.\n<|/ c |>\n<|\
    \ c |>\nThis solution does not work if there are multiple items with the same\
    \ sum.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;", "{\n  \
    \  long sum = 0;\n    long[] result = new long[nums.length];\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not the correct\
    \ solution. `Arrays.sort` sorts lexicographically and does not take into account\
    \ the sum of the digits. Try it with `order_by_points(new long[]{1, 3, 5})`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing out. I've updated the answer.\n<|/ c |>\n\
    <| a tags=sorting,java,arrays |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    Arrays.sort(nums);\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        nums[i] = nums[i] - sum;\n    }\n\
    \    return nums;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport\
    \ java.util.stream.Collectors;", "{\n    long sum = 0;\n    long[] result = new\
    \ long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n    {\n      \
    \  sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| c |>\nThe question was about sorting an array of integers, not longs.\n<|/\
    \ c |>\n<| c |>\nI know, but I thought it would be easier to understand with longs.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting an array of integers, not longs.\n\
    <|/ c |>\n<| c |>\nI know, but I thought it would be easier to understand with\
    \ longs.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,sorting,java |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nI added a note to the question. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two\
    \ numbers with the same sum.\n<|/ c |>\n<| c |>\nI added a note to the question.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work if there are\
    \ two numbers with the same sum.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(sum\
    \ < nums[i])\n        {\n            result[index] = nums[i];\n            sum\
    \ += nums[i];\n            index++;\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c++,sorting,algorithm |>\n<| c |>\nThis solution will fail\
    \ if there are two numbers with the same sum. For example, `order_by_points({\
    \ 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150 })` returns\
    \ `{10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130}`\n<|/ c |>\n<| c |>\n\
    : I believe that is a valid case. For example, `order_by_points({ 10, 20, 30,\
    \ 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150 })` returns `{10, 20, 30,\
    \ 40, 50, 60, 70, 80, 90, 100, 110, 120, 130}`, which is correct according to\
    \ OP's requirements.\n<|/ c |>\n<| c |>\nYes, but OP said \"if there are several\
    \ items with similar sum of their digits, order them based on their index in original\
    \ list\"\n<|/ c |>\n<| c |>\n: I agree. My solution was meant to be a general\
    \ solution for any list of integers. I believe that OP can easily adapt it to\
    \ his needs.\n<|/ c |>\n<| c |>\n: I believe that is a valid case. For example,\
    \ `order_by_points({ 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140,\
    \ 150 })` returns `{10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130}`,\
    \ which is correct according to OP's requirements.\n<|/ c |>\n<| a dscore=1 |>\n\
    I believe that this is what you are looking for:\n<code>\n#include <iostream>\n\
    #include <vector>\n#include <algorithm>", "{\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n    long[]\
    \ result = new long[nums.length];\n    int index = 0;\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        if(sum == nums[i])\n        {\n          \
    \  result[index++] = i;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c#,sorting,algorithm |>\n<| c |>\nThis doesn't work if there are two\
    \ numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, I know. That's why I wrote\
    \ \"Note\".\n<|/ c |>\n<| c |>\nYes, I know. That's why I wrote \"Note\".\n<|/\
    \ c |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ how this works. You might want to add an explanation of how this works.\n<|/\
    \ c |>\n<| c |>\nI added an explanation.\n<|/ c |>\n<| a |>\n<code>\npublic static\
    \ void SortBySum(List<int> list)\n{\n    List<int> list2 = new List<int>();\n\
    \    List<int> list3 = new List<int>();\n    List<int> list4 = new List<int>();\n\
    \    List<int> list5 = new List<int>();\n    List<int> list6 = new List<int>();\n\
    \    List<int> list7 = new List<int>();\n    List<int> list8 = new List<int>();\n\
    \    List<int> list9 = new List<int>();\n    List<int> list10 = new List<int>();\n\
    \    List<int> list11 = new List<int>();\n    List<int> list12 = new List<int>();\n\
    \    List<int> list13 = new List<int>();\n    List<int> list14 = new List<int>();\n\
    \    List<int> list15 = new List<int>();\n    List<int> list16 = new List<int>();\n\
    \    List<int> list17 = new List<int>();\n    List<int> list18 = new List<int>();\n\
    \    List<int> list19 = new List<int>();\n    List<int> list20 = new List<int>();\n\
    \    List<int> list21 = new List<int>();\n    List<int> list22 = new List<int>();\n\
    \    List<int> list23 = new List<int>();\n    List<int> list24 = new List<int>();\n\
    \    List<int> list25 = new List<int>();\n    List<int> list26 = new List<int>();\n\
    \    List<int> list27 = new List<int", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        nums[index] = result[i];\n\
    \        index++;\n    }\n    return nums;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to sort by sum of digits,\
    \ not by their absolute value.\n<|/ c |>\n<| c |>\nI didn't notice that he wanted\
    \ the sum of digits. I edited my answer to reflect that.\n<|/ c |>\n<| c |>\n\
    I edited my answer to reflect your comment. Thanks!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[nums.length];\n    int sum = 0;\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| c |>\nThis is not an answer, but a comment.\
    \ Maybe you can add some explanation on how this works?\n<|/ c |>\n<| c |>\nThis\
    \ is not an answer, but a comment. Maybe you can add some explanation on how this\
    \ works?\n<|/ c |>\n<| c |>\nThis is not an answer, but a comment. Maybe you can\
    \ add some explanation on how this works?\n<|/ c |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index]\
    \ = sum;\n        index++;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\nThis doesn't work. Try\
    \ it with `{1, 2, 3, 10, 20}`.\n<|/ c |>\n<| c |>\nIt works. I tested it before\
    \ posting. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it before posting. I\
    \ also tested it myself before posting. I just tested it again after posting and\
    \ it works. I guess I must have had a typo when I tried it the first time.\n<|/\
    \ c |>\n<| c |>\nI tested it again after posting and it works. I guess I must\
    \ have had a typo when I tried it the first time.\n<|/ c |>\n<| c |>\nI tested\
    \ it again after posting and it works. I guess I must have had a typo when I tried\
    \ it the first time.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long sum = 0;\n    long max = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        if(sum > max)\n        {\n          \
    \  max = sum;\n        }\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \        if(sum == max)\n        {\n            result[i] = i;\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this\
    \ would work, but I believe it would be more efficient to sort the list once and\
    \ then just iterate through it once.\n<|/ c |>\n<| c |>\nYes, I believe it would\
    \ be more efficient to sort the list once and then just iterate through it once.\
    \ Thanks for the suggestion.\n<|/ c |>\n<| c |>\nI believe this would work, but\
    \ I believe it would be more efficient to sort the list once and then just iterate\
    \ through it once.\n<|/ c |>\n<| c |>\nI believe this would work, but I believe\
    \ it would be more efficient to sort the list once and then just iterate through\
    \ it once.\n<|/ c |>\n<| c |>\nI believe this would work, but I believe it would\
    \ be more efficient to sort the list once and then just iterate through it once.\n\
    <|/ c |>\n<| a tags=sorting,algorithm,c# |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I believe\
    \ it can be optimized a little more. For example, you can keep a map of sums to\
    \ indices and then sort based on that map. This would avoid the extra array allocations.\n\
    <|/ c |>\n<| c |>\nYes, that would be a good improvement. I'll add that to my\
    \ answer.\n<|/ c |>\n<| c |>\nI like your solution, but I believe it can be optimized\
    \ a little more. For example, you can keep a map of sums to indices and then sort\
    \ based on that map. This would avoid the extra array allocations.\n<|/ c |>\n\
    <| c |>\nI like your solution, but I believe it can be optimized a little more.\
    \ For example, you can keep a map of sums to indices and then sort based on that\
    \ map. This would avoid the extra array allocations.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I believe it can be optimized a little more. For example,\
    \ you can keep a map of sums to indices and then sort based on that map. This\
    \ would avoid the extra array allocations.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index] = sum;\n        index++;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays,java\
    \ |>\n<| c |>\nThis is not the best solution. Sorting algorithms usually have\
    \ O(n log n) complexity, while this one is O(n^2). Also, sorting algorithms usually\
    \ have O(n^2) worst case complexity, while this one is O(n).\n<|/ c |>\n<| c |>\n\
    I agree with you. But the question was about sorting algorithms. I thought that\
    \ sorting algorithms usually have O(n log n) complexity. Also, sorting algorithms\
    \ usually have O(n^2) worst case complexity, while this one is O(n).\n<|/ c |>\n\
    <| c |>\nSorting algorithms usually have O(n log n) complexity, while this one\
    \ is O(n^2). Also, sorting algorithms usually have O(n^2) worst case complexity,\
    \ while this one is O(n).\n<|/ c |>\n<| c |>\nSorting algorithms usually have\
    \ O(n log n) complexity, while this one is O(n^2). Also, sorting algorithms usually\
    \ have O(n^2) worst case complexity, while this one is O(n).\n<|/ c |>\n<| c |>\n\
    Sorting algorithms usually have O(n log n) complexity, while this one is O(n^2).\
    \ Also, sorting algorithms usually have O(n^2) worst case complexity, while this\
    \ one is O(n).\n<|/ c |>\n<| a tags=algorithm,sorting,arrays,java |>\n<code>\n\
    import java.util.Arrays;", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ if(sum == nums[i])\n        {\n            result[index] = i;\n            index++;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c#\
    \ |>\n<| c |>\nI believe this would not work if there are two numbers with the\
    \ same sum.\n<|/ c |>\n<| c |>\nYes, you are right. I've edited my answer to include\
    \ a solution for that case.\n<|/ c |>\n<| a tags=sorting,arrays,c# |>\n<code>\n\
    public static void Main(string[] args)\n{\n    int[] arr = new int[] { 1, 5, 7,\
    \ 3, 9, 2, 6, 4, 8 };\n    Array.Sort(arr);\n    foreach (int i in arr)\n    {\n\
    \        Console.WriteLine(i);\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    <code>", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n   \
    \ {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ if(sum == nums[i])\n        {\n            result[index] = i;\n            index++;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,c++\
    \ |>\n<| c |>\nThis is not the most efficient solution. Sorting algorithms usually\
    \ use some kind of binary search to find the correct place to insert a new element.\
    \ Your algorithm will have to go through the whole list each time you insert a\
    \ new element. Sorting algorithms usually use some kind of binary search to find\
    \ the correct place to insert a new element. Your algorithm will have to go through\
    \ the whole list each time you insert a new element. Sorting algorithms usually\
    \ use some kind of binary search to find the correct place to insert a new element.\
    \ Your algorithm will have to go through the whole list each time you insert a\
    \ new element. Sorting algorithms usually use some kind of binary search to find\
    \ the correct place to insert a new element. Your algorithm will have to go through\
    \ the whole list each time you insert a new element. Sorting algorithms usually\
    \ use some kind of binary search to find the correct place to insert a new element.\
    \ Your algorithm will have to go through the whole list each time you insert a\
    \ new element. Sorting algorithms usually use some kind of binary search to find\
    \ the correct place to insert a new element. Your algorithm will have to go through\
    \ the whole list each time you insert a new element. Sorting algorithms usually\
    \ use some kind of binary search to find the correct place to insert a new element.\
    \ Your algorithm will have to go through the whole list each time you insert a\
    \ new element. Sorting algorithms usually use some kind of binary search to find\
    \ the correct place to insert a new element. Your algorithm will have to go through\
    \ the whole list each time you insert a new element. Sorting algorithms usually\
    \ use some kind of binary search to find the correct place to insert a new element.\
    \ Your algorithm will have to go through the whole list each time you insert a\
    \ new element. Sorting algorithms usually use some kind of binary search to find\
    \ the correct place to insert a new element. Your algorithm will have to go through\
    \ the whole list each time you insert a new element. Sorting algorithms usually\
    \ use some kind of binary search to find the correct place to insert a new element.\
    \ Your algorithm will have to go through the whole list each time you insert a\
    \ new element. Sorting algorithms usually use some kind of binary search to find\
    \ the correct place to insert a new element. Your algorithm will have to go through\
    \ the whole list each time you insert a new element. Sorting algorithms ", "{\n\
    \    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(int j=0; j<nums.length; j++)\n    {\n        sum += nums[j];\n      \
    \  result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis solution\
    \ doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nI guess I misunderstood the question. I'll update my answer.\n<|/ c |>\n\
    <| c |>\nI updated my answer to include a solution that sorts by the sum of the\
    \ digits of the numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nThis solution\
    \ doesn't work if there are two or more numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nI updated my answer to include a solution that sorts by the sum of the\
    \ digits of the numbers. I tested it and it works.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long sum = 0;\n    long max = 0;\n    long min\
    \ = 0;\n    long index = 0;\n    long sumOfDigits = 0;\n    long maxOfDigits =\
    \ 0;\n    long minOfDigits = 0;\n    long maxIndex = 0;\n    long minIndex = 0;\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n  \
    \      sumOfDigits += nums[i];\n        if(sum > max)\n        {\n           \
    \ max = sum;\n            maxIndex = i;\n        }\n        if(sum < min)\n  \
    \      {\n            min = sum;\n            minIndex = i;\n        }\n    }\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sumOfDigits -= nums[i];\n\
    \        if(sumOfDigits > maxOfDigits)\n        {\n            maxOfDigits = sumOfDigits;\n\
    \            maxIndex = i;\n        }\n        if(sumOfDigits < minOfDigits)\n\
    \        {\n            minOfDigits = sumOfDigits;\n            minIndex = i;\n\
    \        }\n    }\n    long[] result = new long[nums.length];\n    for(int i =\
    \ 0; i < nums.length; i++)\n    {\n        if(nums[i] == 0)\n        {\n     \
    \       result[i] = 0;\n        }\n        else\n        {\n            result[i]\
    \ = nums[i] - minIndex + maxIndex;\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=sorting,arrays,c++ |>\n<| c |>\nThis code doesn't work. Try\
    \ it for {1, 2, 3} and {10, 20, 30}\n<|/ c |>\n<| c |>\nThis code works perfectly\
    \ for me. Try it for {1, 2, 3} and {10, 20, 30}\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for {1, 2, 3} and {10, 20, 30}\n<|/ c |>\n<| c |>\nIt works for me with\
    \ {1, 2, 3} and {10, 20, 30}\n<|/ c |>\n<| c |>\nIt works for me with {1, 2, 3}\
    \ and {10, 20, 30}\n<|/ c |>\n<| a tags=sorting,arrays,c++ |>\n<code>\n#include\
    \ <iostream>\n#include <algorithm>\n#include <vector>", "{\n    long sum = 0;\n\
    \    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| c |>\nThis doesn't work if there are multiple numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nI thought the question was about sorting by sum of digits,\
    \ not by index. Anyway, I added a solution for sorting by sum of digits.\n<|/\
    \ c |>\n<| c |>\nThe question was about sorting by sum of digits, not by index.\
    \ Anyway, I added a solution for sorting by sum of digits.\n<|/ c |>\n<| c |>\n\
    I added a solution for sorting by sum of digits. I tested it and it works.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if there are multiple numbers with the same\
    \ sum.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\npublic static\
    \ void main(String[] args) {\n    int[] nums = {1, 3, 6, 4, 8, 5, 9, 2, 7, 10,\
    \ 11, 12, 13, 14, 15};\n    Arrays.sort(nums);\n    System.out.println(Arrays.toString(nums));\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if there are multiple\
    \ numbers with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are\
    \ multiple numbers with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ there are multiple numbers with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if there are multiple numbers with the same sum.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if there are multiple numbers with the same sum.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\nimport java.util.Arrays;", "{\n    long sum = 0;\n  \
    \  long max = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        if(sum > max)\n            max = sum;\n\
    \        if(sum < min)\n            min = sum;\n    }\n    long[] result = new\
    \ long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n    {\n      \
    \  result[i] = nums[i];\n        if(nums[i] > max)\n            result[i] = max;\n\
    \        if(nums[i] < min)\n            result[i] = min;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nI didn't see that requirement in the\
    \ question, but I added a note to my answer.\n<|/ c |>\n<| c |>\nI added a note\
    \ to my answer.\n<|/ c |>\n<| c |>\nI added a note to my answer.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n  \
    \  {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        index++;\n        if(result[i]\
    \ == sum)\n        {\n            index = i;\n        }\n    }\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index];\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays,java |>\n\
    <| c |>\nThis doesn't work if there are multiple items with the same sum.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. I've added a note to my answer.\n<|/ c |>\n\
    <| c |>\nI believe this doesn't work when there are multiple items with the same\
    \ sum.\n<|/ c |>\n<| c |>\nI believe this doesn't work when there are multiple\
    \ items with the same sum.\n<|/ c |>\n<| c |>\nI believe this doesn't work when\
    \ there are multiple items with the same sum.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    public static void main(String[] args) {\n    int[] nums = {1, 3, 6, 4, 2, 5};\n\
    \    System.out.println(Arrays.toString(nums));\n    int[] sortedNums = sortBySum(nums);\n\
    \    System.out.println(Arrays.toString(sortedNums));\n}", "{\n    long sum =\
    \ 0;\n    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n    long max =\
    \ 0;\n    int maxIndex = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        if(sum == max)\n        {\n            maxIndex = i;\n        }\n   \
    \     else if(sum < max)\n        {\n            max = sum;\n            maxIndex\
    \ = i;\n        }\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[maxIndex];\n\
    \        maxIndex++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,arrays,sorting |>\n<| c |>\nThis doesn't work if there\
    \ are two numbers with the same sum.\n<|/ c |>\n<| c |>\nI believe this would\
    \ work if you used `Arrays.sort` instead of `Arrays.sortBy`\n<|/ c |>\n<| c |>\n\
    Yes, you are right. Thanks for pointing that out. I've edited my answer.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nvar nums = new int[] { 1, 2, 3, 4 };\nvar result\
    \ = nums.OrderBy(x => x.ToString().Sum(y => char.GetNumericValue(y)));\n</code>\n\
    <|/ a tags=c#,arrays,sorting |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nI believe this would work if you used\
    \ `Arrays.sort` instead of `Arrays.sortBy`\n<|/ c |>\n<| c |>\n: Yes, you are\
    \ right. Thanks for pointing that out. I've edited my answer.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>", "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n  \
    \      result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis solution doesn't\
    \ work for negative numbers. Try with {-10, -9, -8, -7, -6, -5, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n<|/ c |>\n<| c |>\nI fixed the problem by adding\
    \ `if (nums[i] < 0) nums[i] = -nums[i];` before `sum += nums[i];`\n<|/ c |>\n\
    <| a |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long sum = 0;\n    long max = 0;\n    long min =\
    \ 0;\n    long index = 0;\n    long sumOfDigits = 0;\n    long maxOfDigits = 0;\n\
    \    long minOfDigits = 0;\n    long maxIndex = 0;\n    long minIndex = 0;\n \
    \   \n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        sumOfDigits += nums[i];\n        max = Math.max(max, nums[i]);\n    \
    \    min = Math.min(min, nums[i]);\n        index = i;\n    }\n    \n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sumOfDigits -= nums[i];\n     \
    \   if(sumOfDigits < 0)\n        {\n            sumOfDigits += 10;\n        }\n\
    \        \n        if(sumOfDigits == 0)\n        {\n            sumOfDigits =\
    \ 1;\n        }\n        \n        if(nums[i] > max)\n        {\n            max\
    \ = nums[i];\n            maxIndex = index;\n        }\n        \n        if(nums[i]\
    \ < min)\n        {\n            min = nums[i];\n            minIndex = index;\n\
    \        }\n    }\n    \n    long[] result = new long[nums.length];\n    \n  \
    \  for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[maxIndex];\n\
    \    }\n    \n    for(int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[minIndex];\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java\
    \ |>\n<| c |>\nThis is not an answer to the question. OP wants to sort by sum\
    \ of digits, not by their absolute value.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ my answer is just an alternative solution to the problem that OP has described.\n\
    <|/ c |>\n<| c |>\nI believe this answer is not correct. As I understand it, OP\
    \ wants to sort by sum of digits, not by their absolute value. For example, if\
    \ the input is `[10, 20, 30, 40, 50]`, the output should be `[10, 20, 30, 40,\
    \ 50]`, not `[10, 20, 50, 40, 30]`.\n<|/ c |>\n<| c |>\nI believe you are right,\
    \ I misunderstood the question. I'll edit my answer accordingly.\n<|/ c |>\n<|\
    \ c |>\nI believe this answer is not correct. As I understand it, OP wants to\
    \ sort by sum of digits, not by their absolute value. For example, if the input\
    \ is `[10, 20, 30, 40, 50]`, the output should be `[10, 20, 30, 40, 50]`, not\
    \ `[10, 20, 50, 40, 30]`.\n<|/ c ", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index] = sum;\n        index++;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/10770173)\n<|/ c |>\n<| c |>\nThis does provide\
    \ an answer to the question. He wants to sort a list of numbers in ascending order\
    \ according to the sum of their digits. He has written a function that does that.\
    \ He wants to know if there is a better way to do it than what he has written.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/10770173)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/10770173)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/10770173)\n<|/ c |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThe question was about sorting\
    \ in ascending order according to the sum of their digits, not their absolute\
    \ values. Your solution sorts them in descending order according to the sum of\
    \ their absolute values.\n<|/ c |>\n<| c |>\nThe question was about sorting in\
    \ ascending order according to the sum of their digits, not their absolute values.\
    \ Your solution sorts them in descending order according to the sum of their absolute\
    \ values.\n<|/ c |>\n<| c |>\nThe question was about sorting in ascending order\
    \ according to the sum of their digits, not their absolute values. Your solution\
    \ sorts them in descending order according to the sum of their absolute values.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting in ascending order according\
    \ to the sum of their digits, not their absolute values. Your solution sorts them\
    \ in descending order according to the sum of their absolute values.\n<|/ c |>\n\
    <| c |>\nThe question was about sorting in ascending order according to the sum\
    \ of their digits, not their absolute values. Your solution sorts them in descending\
    \ order according to the sum of their absolute values.\n<|/ c |>\n<| a |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long sum = 0;\n    long max = 0;\n    long min\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        if(sum > max)\n            max = sum;\n        if(sum < min)\n      \
    \      min = sum;\n    }\n    long[] result = new long[nums.length];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n        if(nums[i]\
    \ == max)\n            result[i] = i;\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[result[i]];\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(new\
    \ long[]{1, 3, 2})`\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you\
    \ give me an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works fine. Can you give me an example where it doesn't work?\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine. Can you give me an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me an\
    \ example where it doesn't work?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long sum = 0;\n\
    \    long max = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        if(sum > max)\n        {\n          \
    \  max = sum;\n        }\n        if(sum < min)\n        {\n            min =\
    \ sum;\n        }\n    }\n    long[] result = new long[nums.length];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n    }\n \
    \   for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = result[i]\
    \ - min;\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = result[i] + max;\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = result[i] % 10;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers. You have to add `if (nums[i] > 0) result[i] = nums[i];` before `sum\
    \ += nums[i];`\n<|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers.\
    \ You have to add `if (nums[i] > 0) result[i] = nums[i];` before `sum += nums[i];`\n\
    <|/ c |>\n<| a tags=sorting,arrays,c# |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to sort the list by sum of digits, not by their original\
    \ order.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to give a solution\
    \ that sorts the list by sum of digits. I guess I misunderstood the question.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long sum = 0;\n    long[] result\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to sort by sum, not by index.\n<|/ c |>\n\
    <| c |>\nI see your point. I've edited my answer to reflect that.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nvar result = nums.OrderBy(x => x.ToString().Sum(y =>\
    \ y - '0')).ToArray();\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to sort by sum, not by index.\n<|/ c |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to sort by sum, not by index.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to sort by sum,\
    \ not by index.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to sort by sum, not by index.\n<|/ c |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to sort by sum, not by index.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    var result = nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ToArray();\n</code>\n\
    <|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis doesn't answer the question. OP\
    \ wants to sort by sum, not by index.\n<|/ c |>\n<| a tags=sorting,arrays,c# |>\n\
    <code>\nvar result = nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to sort by sum, not by index.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar result\
    \ = nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ToArray();\n</code>\n<|/\
    \ a tags=sorting,arrays,c# |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to sort by ", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        for(int j = i\
    \ + 1; j < nums.length; j++)\n        {\n            if(sum - nums[i] == nums[j]\
    \ - nums[i])\n            {\n                long temp = nums[i];\n          \
    \      nums[i] = nums[j];\n                nums[j] = temp;\n            }\n  \
    \      }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not\
    \ the right solution. Try it on `[10, 5, 3, 1]` - it returns `[10, 5, 3, 1]` instead\
    \ of `[10, 5, 1, 3]`.\n<|/ c |>\n<| c |>\nI believe this solution is correct.\
    \ Try it on `[10, 5, 3, 1]` - it returns `[10, 5, 1, 3]` instead of `[10, 5, 3,\
    \ 1]`.\n<|/ c |>\n<| c |>\nNope, `[10, 5, 3, 1]` returns `[10, 5, 1, 3]` instead\
    \ of `[10, 5, 3, 1]`.\n<|/ c |>\n<| c |>\nI believe this solution is correct.\
    \ Try it on `[10, 5, 3, 1]` - it returns `[10, 5, 1, 3]` instead of `[10, 5, 3,\
    \ 1]`.\n<|/ c |>\n<| c |>\nNope, `[10, 5, 3, 1]` returns `[10, 5, 1, 3]` instead\
    \ of `[10, 5, 3, 1]`.\n<|/ c |>\n<| a tags=sorting,algorithm,c# |>\n<code>\npublic\
    \ static void Main(string[] args)\n{\n    int[] numbers = { 10, 5, 3, 1 };\n \
    \   Array.Sort(numbers);\n    Console.WriteLine(string.Join(\",\", numbers));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the right solution. Try it\
    \ on `[10, 5, 3, 1]` - it returns `[10, 5, 3, 1]` instead of `[10, 5, 1, 3]`.\n\
    <|/ c |>\n<| c |>\nI believe this solution is correct. Try it on `[10, 5, 3, 1]`\
    \ - it returns `[10, 5, 1, 3]` instead of `[10, 5, 3, 1]`.\n<|/ c |>\n<| c |>\n\
    Nope, `[10, 5, 3, 1]` returns `[10, 5, 1, 3]", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to sort the list based on sum of digits, not based on\
    \ their original position in the list.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ the question. I'll edit my answer.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ include a solution that sorts based on sum of digits. I hope this helps.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Your solution works perfectly for small\
    \ lists. But for large lists it takes too much time. Is there any way to optimize\
    \ it?\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that sorts\
    \ based on sum of digits. I hope this helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n\
    \        {\n            max = sum;\n        }\n        if(sum < min)\n       \
    \ {\n            min = sum;\n        }\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n\
    \        for(int j = 0; j < nums.length; j++)\n        {\n            sum += nums[j];\n\
    \            if(sum > max)\n            {\n                max = sum;\n      \
    \      }\n            if(sum < min)\n            {\n                min = sum;\n\
    \            }\n        }\n        if(sum == max)\n        {\n            result[i]\
    \ = nums[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is not an answer to the question. He wants to sort a list\
    \ of numbers in ascending order according to the sum of their digits.\n<|/ c |>\n\
    <| c |>\nYes, I see that now. Thanks for pointing that out. I'll edit my answer.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ \"Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: -1\"\
    \n<|/ c |>\n<| c |>\nI edited my answer to fix the ArrayIndexOutOfBoundsException.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ \"Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: -1\"\
    \n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n    }\n \
    \   for(int i = 0; i < nums.length; i++)\n    {\n        if(sum - nums[i] > 0)\n\
    \        {\n            int j = i;\n            while(sum - nums[j] > 0)\n   \
    \         {\n                j++;\n            }\n            int tmp = nums[i];\n\
    \            nums[i] = nums[j];\n            nums[j] = tmp;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,c# |>\n<| c |>\n\
    This is not an answer to the question. He wants to sort a list of numbers by their\
    \ sum.\n<|/ c |>\n<| c |>\nThis is not an answer to the question. He wants to\
    \ sort a list of numbers by their sum.\n<|/ c |>\n<| c |>\nThis is not an answer\
    \ to the question. He wants to sort a list of numbers by their sum.\n<|/ c |>\n\
    <| c |>\nThis is not an answer to the question. He wants to sort a list of numbers\
    \ by their sum.\n<|/ c |>\n<| c |>\nThis is not an answer to the question. He\
    \ wants to sort a list of numbers by their sum.\n<|/ c |>\n<| a tags=algorithm,sorting,c#\
    \ |>\n<code>\npublic static void Main()\n{\n    int[] numbers = { 10, 2, 5, 6,\
    \ 3, 7, 9, 1, 4, 8 };\n    Array.Sort(numbers);\n    Console.WriteLine(string.Join(\"\
    ,\", numbers));\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is not an answer\
    \ to the question. He wants to sort a list of numbers by their sum.\n<|/ c |>\n\
    <| c |>\nThis is not an answer to the question. He wants to sort a list of numbers\
    \ by their sum.\n<|/ c |>\n<| c |>\nThis is not an answer to the question. He\
    \ wants to sort a list of numbers by their sum.\n<|/ c |>\n<| c |>\nThis is not\
    \ an answer to the question. He wants to sort a list of numbers by their sum.\n\
    <|/ c |>\n<| c |>\nThis is not an answer to the question. He wants to sort a list\
    \ of numbers by their sum.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "{\n    long\
    \ sum = 0;\n    long[] result = new long[nums.length];\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,java\
    \ |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting. Try it yourself.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long sum\
    \ = 0;\n    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,algorithm,java |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long sum = 0;\n    long\
    \ max = 0;\n    long min = 0;\n    long index = 0;\n    long sum2 = 0;\n    long\
    \ max2 = 0;\n    long min2 = 0;\n    long index2 = 0;\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n \
    \       {\n            max = sum;\n            index = i;\n        }\n       \
    \ if(sum < min)\n        {\n            min = sum;\n            index2 = i;\n\
    \        }\n        sum2 += nums[i];\n        if(sum2 > max2)\n        {\n   \
    \         max2 = sum2;\n            index2 = i;\n        }\n        if(sum2 <\
    \ min2)\n        {\n            min2 = sum2;\n            index2 = i;\n      \
    \  }\n    }\n    long[] result = new long[2];\n    result[0] = nums[index];\n\
    \    result[1] = nums[index2];\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c#\
    \ |>\n<| c |>\nThis doesn't work. Try it on {1, 3, 6, 8, 10}. It will return {10,\
    \ 8, 6, 3, 1}.\n<|/ c |>\n<| c |>\nI tested it on {1, 3, 6, 8, 10} and it returned\
    \ {10, 8, 6, 3, 1}\n<|/ c |>\n<| c |>\nI tested it on {1, 3, 6, 8, 10} and it\
    \ returned {10, 8, 6, 3, 1}\n<|/ c |>\n<| c |>\nI tested it on {1, 3, 6, 8, 10}\
    \ and it returned {10, 8, 6, 3, 1}\n<|/ c |>\n<| c |>\nI tested it on {1, 3, 6,\
    \ 8, 10} and it returned {10, 8, 6, 3, 1}\n<|/ c |>\n<| a tags=sorting,arrays,c#\
    \ |>\n<code>\npublic static void SortByDigits(int[] array)\n{\n    int[] temp\
    \ = new int[array.Length];\n    int tempSum = 0;\n    int tempMax = 0;\n    int\
    \ tempMin = 0;\n    int tempIndex = 0;\n    int tempSum2 = 0;\n    int tempMax2\
    \ = 0;\n    int tempMin2 = 0;\n    int tempIndex2 = 0;\n    for (int i = 0; i\
    \ < array.Length; i++)\n    {\n        tempSum += array[i];\n        if (tempSum\
    \ > tempMax)\n        {\n            tempMax = tempSum;\n            tempIndex\
    \ = i;\n        }\n        if (tempSum < tempMin)\n        {\n            tempMin\
    \ = tempSum;\n            tempIndex2 = i;\n        }\n        tempSum2 += array[i];\n\
    \        if (tempSum2 > tempMax2)\n        {\n            tempMax2 = tempSum2;\n\
    \            tempIndex2 = i;\n        }\n        if (tempSum2 < tempMin", "{\n\
    \    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| c |>\nThis code doesn't work. `Arrays.sort()`\
    \ sorts array in place, so `nums` array is sorted after `Arrays.sort(result)`.\
    \ So `nums` array is sorted only by `Arrays.sort(result)`.\n<|/ c |>\n<| c |>\n\
    Yes, you are right. I missed that. Thanks for pointing out. I've updated my answer.\n\
    <|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long sum\
    \ = 0;\n    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/10278337)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He wants to sort\
    \ a list of integers based on the sum of their digits. He has written a function\
    \ that does exactly that. He wants to know if there is a better way to do this\
    \ than writing a function that does exactly that. He has also written a function\
    \ that does exactly that. He wants to know if there is a better way to do this\
    \ than writing a function that does exactly that. He has also written a function\
    \ that does exactly that. He wants to know if there is a better way to do this\
    \ than writing a function that does exactly that. He has also written a function\
    \ that does exactly that. He wants to know if there is a better way to do this\
    \ than writing a function that does exactly that. He has also written a function\
    \ that does exactly that. He wants to know if there is a better way to do this\
    \ than writing a function that does exactly that. He has also written a function\
    \ that does exactly that. He wants to know if there is a better way to do this\
    \ than writing a function that does exactly that. He has also written a function\
    \ that does exactly that. He wants to know if there is a better way to do this\
    \ than writing a function that does exactly that.\n<|/ c |>\n<| c |>\nHe has also\
    \ written a function that does exactly that. He wants to know if there is a better\
    \ way to do this than writing a function that does exactly that. He has also written\
    \ a function that does exactly that. He wants to know if there is a better way\
    \ to do this than writing a function that does exactly that. He has also written\
    \ a function that does exactly that. He wants to know if there is a better way\
    \ to do this than writing a function that does exactly that. He has also written\
    \ a function that does exactly that. He wants to know if there is a better way\
    \ to do this than writing a function that does exactly that. He has also written\
    \ a function that does exactly that. He wants to know if there is a better way\
    \ to do this than writing a function that does exactly that. He has also written\
    \ a function that does exactly that. He wants to ", "{\n    long sum = 0;\n  \
    \  for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n\
    \    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[i];\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        for(int j = i + 1; j < nums.length; j++)\n        {\n \
    \           if(nums[i] + nums[j] == sum)\n            {\n                result[j]\
    \ = nums[j];\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport\
    \ java.util.Collections;\nimport java.util.List;", "{\n    long sum = 0;\n   \
    \ for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n\
    \    long[] result = new long[nums.length];\n    int index = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        if(sum < nums[i])\n        {\n  \
    \          result[index] = nums[i];\n            sum += nums[i];\n           \
    \ index++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nYes, you are right. My mistake. I've corrected my answer.\n\
    <|/ c |>\n<| a tags=arrays,sorting,algorithm |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n    }\n \
    \   for(int i = 0; i < nums.length; i++)\n    {\n        if(sum > 0)\n       \
    \ {\n            for(int j = i; j < nums.length; j++)\n            {\n       \
    \         if(nums[j] > 0)\n                {\n                    if(nums[j] -\
    \ nums[i] < sum)\n                    {\n                        result[j] = nums[j];\n\
    \                    }\n                    else\n                    {\n    \
    \                    result[j] = nums[j];\n                        break;\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,c# |>\n<| c |>\nThis\
    \ is not the correct solution. Try it with the input `{ 1, 3, 9, 2, 5, 7, 4, 6,\
    \ 8 }`.\n<|/ c |>\n<| c |>\nI tested it with the input { 1, 3, 9, 2, 5, 7, 4,\
    \ 6, 8 }, and it returned { 1, 2, 3, 4, 5, 6, 7, 8, 9 }\n<|/ c |>\n<| c |>\nThe\
    \ correct solution is `{ 1, 2, 3, 4, 5, 6, 7, 8, 9 }`.\n<|/ c |>\n<| c |>\nI tested\
    \ it with the input { 1, 3, 9, 2, 5, 7, 4, 6, 8 }, and it returned { 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9 }\n<|/ c |>\n<| c |>\nI tested it with the input { 1, 3, 9,\
    \ 2, 5, 7, 4, 6, 8 }, and it returned { 1, 2, 3, 4, 5, 6, 7, 8, 9 }\n<|/ c |>\n\
    <| a tags=sorting,algorithm,c# |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;", "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n \
    \       result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\nI believe this solution\
    \ is O(n^2) since it sorts twice (once in each loop).\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. Sorting twice is O(n^2). My solution is O(n). But I thought that\
    \ sorting twice is more efficient than sorting once and sorting it again (O(n^2)).\n\
    <|/ c |>\n<| c |>\nSorting twice is O(n^2) but sorting once and sorting it again\
    \ is O(n). Sorting twice is O(n^2) but sorting once and sorting it again is O(n^2).\n\
    <|/ c |>\n<| c |>\nSorting twice is O(n^2) but sorting once and sorting it again\
    \ is O(n). Sorting twice is O(n^2) but sorting once and sorting it again is O(n^2).\n\
    <|/ c |>\n<| c |>\nSorting twice is O(n^2) but sorting once and sorting it again\
    \ is O(n). Sorting twice is O(n^2) but sorting once and sorting it again is O(n^2).\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        for(int j = i\
    \ + 1; j < nums.length; j++)\n        {\n            if(sum == nums[i] + nums[j])\n\
    \            {\n                result[j] = nums[j];\n            }\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<|\
    \ c |>\nThis is not the best solution, since it requires O(n^2) time complexity.\
    \ Better solution is O(nlogn).\n<|/ c |>\n<| c |>\nI agree with you, but I thought\
    \ that OP was looking for a solution that doesn't require additional libraries.\
    \ I added a solution that doesn't require additional libraries.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, but I thought that OP was looking for a solution that\
    \ doesn't require additional libraries. I added a solution that doesn't require\
    \ additional libraries.\n<|/ c |>\n<| c |>\nI agree with you, but I thought that\
    \ OP was looking for a solution that doesn't require additional libraries. I added\
    \ a solution that doesn't require additional libraries.\n<|/ c |>\n<| c |>\nI\
    \ agree with you, but I thought that OP was looking for a solution that doesn't\
    \ require additional libraries. I added a solution that doesn't require additional\
    \ libraries.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long index = 0;\n\
    \    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n        {\n   \
    \         max = sum;\n            index = i;\n        }\n        else if(sum <\
    \ min)\n        {\n            min = sum;\n        }\n    }\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        if(nums[i] > 0)\n        {\n         \
    \   result[i] = nums[index];\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,algorithm,java |>\n<| c |>\nI believe this solution will fail\
    \ if there are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes,\
    \ you are right. My solution will fail if there are two or more numbers with the\
    \ same sum. My solution will fail if there are two or more numbers with the same\
    \ sum. My solution will fail if there are two or more numbers with the same sum.\
    \ My solution will fail if there are two or more numbers with the same sum. My\
    \ solution will fail if there are two or more numbers with the same sum. My solution\
    \ will fail if there are two or more numbers with the same sum. My solution will\
    \ fail if there are two or more numbers with the same sum. My solution will fail\
    \ if there are two or more numbers with the same sum. My solution will fail if\
    \ there are two or more numbers with the same sum. My solution will fail if there\
    \ are two or more numbers with the same sum. My solution will fail if there are\
    \ two or more numbers with the same sum. My solution will fail if there are two\
    \ or more numbers with the same sum. My solution will fail if there are two or\
    \ more numbers with the same sum. My solution will fail if there are two or more\
    \ numbers with the same sum. My solution will fail if there are two or more numbers\
    \ with the same sum. My solution will fail if there are two or more numbers with\
    \ the same sum. My solution will fail if there are two or more numbers with the\
    \ same sum. My solution will fail if there are two or more numbers with the same\
    \ sum. My solution will fail if there are two or more numbers with the same sum.\
    \ My solution will fail if there are two or more numbers with the same sum. My\
    \ solution will fail if there are two or more numbers with the same sum. My solution\
    \ will fail if there are two or more numbers with the same sum. My solution will\
    \ fail if there are two or more numbers with the same sum. My solution will fail\
    \ if there are two or more numbers with the same sum. My solution will fail if\
    \ there are two or more numbers with the same sum. My solution will fail if there\
    \ are two or more numbers with the same sum. My solution will fail if there are\
    \ two or more numbers with the same ", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This code doesn't work. `Arrays.sort()` doesn't work in-place. Also, this code\
    \ doesn't take into account the fact that there are multiple items with the same\
    \ sum.\n<|/ c |>\n<| c |>\nIt does work. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sorts the array in place.\
    \ Arrays.sort() sorts the array in place. Arrays.sort() sort", "{\n    long[]\
    \ result = new long[nums.length];\n    int index = 0;\n    long sum = 0;\n   \
    \ for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n     \
    \   result[i] = sum;\n    }\n    Arrays.sort(result);\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        nums[index] = result[i];\n        index++;\n\
    \    }\n    return nums;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| a tags=sorting,arrays,c# |>\n\
    <code>", "{\n    long[] result = new long[nums.length];\n    int i = 0;\n    long\
    \ sum = 0;\n    for(long num : nums)\n    {\n        sum += num;\n        result[i++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=algorithm,sorting,c# |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n \
    \   long[] result = new long[nums.length];\n    int index = 0;\n    long sum =\
    \ 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to sort by sum of digits, not by their absolute value.\n<|/ c |>\n<| c |>\n\
    I agree with you, my answer was based on the question \"Write a function which\
    \ sorts the given list of integers in ascending order according to the sum of\
    \ their digits.\"\n<|/ c |>\n<| c |>\nThe question was \"Write a function which\
    \ sorts the given list of integers in ascending order according to the sum of\
    \ their digits.\"\n<|/ c |>\n<| c |>\nI edited my answer, I hope it helps you\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to sort by sum of\
    \ digits, not by their absolute value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,sorting,java |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(new\
    \ long[]{-4, -6, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9,\
    \ -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6,\
    \ -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5,\
    \ -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10,\
    \ -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4,\
    \ -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7,\
    \ -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7,\
    \ -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9,\
    \ -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6,\
    \ -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5,\
    \ -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10, -7, -5, -7, -6, -4, -9, -10,\
    \ -7, -5, -7, -6, -4, -9, -10, -7, -", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    int i = 0;\n    for(; i < nums.length; i++)\n    {\n \
    \       sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe this solution\
    \ is O(n^2) (worst case), which is not what was asked for. Also, `Arrays.sort()`\
    \ uses `mergesort`, which is not `O(n log n)`.\n<|/ c |>\n<| c |>\nThe question\
    \ was about sorting in O(n), not about sorting in O(n log n). Also, the question\
    \ was about sorting by digits, not by sum.\n<|/ c |>\n<| c |>\nThe question was\
    \ about sorting by digits, not by sum. Also, the question was about sorting by\
    \ digits, not by sum.\n<|/ c |>\n<| c |>\nThe question was about sorting by digits,\
    \ not by sum. Also, the question was about sorting by digits, not by sum.\n<|/\
    \ c |>\n<| c |>\nThe question was about sorting by digits, not by sum. Also, the\
    \ question was about sorting by digits, not by sum.\n<|/ c |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long[] result\
    \ = new long[nums.length];\n    int sum = 0;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,java |>\n<| c |>\n\
    This doesn't work. Try it with a list of [2,3,5,7,11,13,17,19]. You'll get [2,3,5,7,11,13,17,19]\
    \ instead of [2,3,5,7,11,13,17,19,11]\n<|/ c |>\n<| c |>\n: You are right. I've\
    \ corrected my answer. Thanks.\n<|/ c |>\n<| c |>\n: I've corrected my answer.\
    \ Thanks.\n<|/ c |>\n<| c |>\n: I've corrected my answer. Thanks.\n<|/ c |>\n\
    <| c |>\n: I've corrected my answer. Thanks.\n<|/ c |>\n<| a tags=algorithm,sorting,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,sorting\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis\
    \ doesn't work if there are two numbers with the same sum.\n<|/ c |>\n<| c |>\n\
    Yes, I missed that case. Thanks for pointing it out. I've updated my answer.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n    long sum\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    long index = 0;\n    long sumOfDigits\
    \ = 0;\n    long maxOfDigits = 0;\n    long minOfDigits = 0;\n    \n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        sumOfDigits\
    \ += nums[i];\n        \n        if(sumOfDigits > max)\n        {\n          \
    \  max = sumOfDigits;\n            index = i;\n        }\n        \n        if(sumOfDigits\
    \ < min)\n        {\n            min = sumOfDigits;\n            index = i;\n\
    \        }\n    }\n    \n    long[] result = new long[nums.length];\n    \n  \
    \  result[index] = nums[index];\n    \n    for(int i = index + 1; i < nums.length;\
    \ i++)\n    {\n        sumOfDigits -= nums[index];\n        \n        if(sumOfDigits\
    \ > max)\n        {\n            max = sumOfDigits;\n            index = i;\n\
    \        }\n        \n        if(sumOfDigits < min)\n        {\n            min\
    \ = sumOfDigits;\n            index = i;\n        }\n        \n        result[i]\
    \ = nums[index];\n    }\n    \n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[i];\n    }\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=sorting,algorithm,arrays |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=arrays,sorting,java |>\n<| a |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;", "{\n    long sum = 0;\n\
    \    long max = 0;\n    long min = 0;\n    long index = 0;\n    long[] result\
    \ = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        sum += nums[i];\n        if(sum > max)\n        {\n            max =\
    \ sum;\n            index = i;\n        }\n        if(sum < min)\n        {\n\
    \            min = sum;\n        }\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(nums[i] > 0)\n        {\n            result[i] = nums[index];\n\
    \            index++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=sorting,arrays,algorithm,java |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(new\
    \ long[]{1, 2, 3})`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you\
    \ please give me an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work because `Arrays.sort` doesn't compare the sum of the digits but just compares\
    \ the digits. Try it with `order_by_points(new long[]{1, 2, 3})`.\n<|/ c |>\n\
    <| c |>\nOh, I see. Thank you for pointing that out. I will update my answer.\n\
    <|/ c |>\n<| c |>\nI updated my answer with a solution that sorts the list by\
    \ their sum.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n\
    \        {\n            max = sum;\n        }\n        if(sum < min)\n       \
    \ {\n            min = sum;\n        }\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = result[i]\
    \ - min;\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = result[i] + max;\n    }\n    Arrays.sort(result);\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not the correct solution. Try it\
    \ with the input `[10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ", "{\n    long[] result = new\
    \ long[nums.length];\n    int sum = 0;\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was\
    \ about sorting an array of integers, not an array of longs.\n<|/ c |>\n<| c |>\n\
    The question was about sorting an array of integers, not an array of longs.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \    }\n    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[i];\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(sum - nums[i] > 0)\n        {\n            int index\
    \ = i;\n            for(int j = i + 1; j < nums.length; j++)\n            {\n\
    \                if(sum - nums[j] > 0)\n                {\n                  \
    \  index = j;\n                    break;\n                }\n            }\n\
    \            swap(result[index], result[i]);\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is not the correct solution. Try it on `[10,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, ", "{\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long\
    \ index = 0;\n    long sumOfDigits = 0;\n    long maxOfDigits = 0;\n    long minOfDigits\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        sumOfDigits += nums[i];\n        if(sumOfDigits > max)\n        {\n \
    \           max = sumOfDigits;\n            index = i;\n        }\n        if(sumOfDigits\
    \ < min)\n        {\n            min = sumOfDigits;\n            index = i;\n\
    \        }\n    }\n    long[] result = new long[nums.length];\n    for(int i =\
    \ 0; i < nums.length; i++)\n    {\n        if(sumOfDigits == max)\n        {\n\
    \            result[index] = nums[i];\n        }\n        else if(sumOfDigits\
    \ == min)\n        {\n            result[index] = nums[i];\n        }\n      \
    \  else\n        {\n            result[index] = i;\n        }\n        sumOfDigits\
    \ -= nums[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=sorting,algorithm,arrays,c# |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i =\
    \ 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    for(; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport\
    \ java.util.Arrays;", "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n \
    \       result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n\
    <code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    int\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to sort by sum of digits, not by their original order.\n<|/ c |>\n<| c |>\n\
    I agree with you. My answer was based on the example given in the question. I'll\
    \ edit my answer to make it more clear.\n<|/ c |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n \
    \       result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| a dscore=0 |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are two or\
    \ more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, you are right. I've\
    \ added a note in the answer. Thanks.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long sum = 0;\n    long max =\
    \ 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n   \
    \     sum += nums[i];\n        if(sum > max)\n        {\n            max = sum;\n\
    \        }\n        if(sum < min)\n        {\n            min = sum;\n       \
    \ }\n    }\n    long[] result = new long[nums.length];\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        result[i] = nums[i];\n        if(nums[i] >\
    \ max)\n        {\n            result[i] = max;\n        }\n        if(nums[i]\
    \ < min)\n        {\n            result[i] = min;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nThe code you posted is wrong. `order_by_points`\
    \ should return `long[]` not `int[]`.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ and fixed it. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works perfectly but I'm looking for a solution that doesn't\
    \ use any loops. I edited my question to make it more clear.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a solution without loops.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly but I'm looking for a solution that\
    \ doesn't use any loops. I edited my question to make it more clear.\n<|/ c |>\n\
    <| a |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n\
    \    long maxIndex = 0;\n    long minIndex = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n        {\n   \
    \         max = sum;\n            maxIndex = i;\n        }\n        if(sum < min)\n\
    \        {\n            min = sum;\n            minIndex = i;\n        }\n   \
    \ }\n    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(nums[i] > max)\n        {\n            result[maxIndex]\
    \ = nums[i];\n            maxIndex++;\n        }\n        if(nums[i] < min)\n\
    \        {\n            result[minIndex] = nums[i];\n            minIndex++;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays,java\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long sum = 0;\n\
    \    long[] result = new long[nums.length];\n    int i = 0;\n    for(int j=0;\
    \ j<nums.length; j++)\n    {\n        sum += nums[j];\n        result[i] = sum;\n\
    \        i++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I just added a\
    \ note to my answer.\n<|/ c |>\n<| c |>\nI tested it again and it doesn't work.\
    \ Try it with the input `[3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long sum = 0;\n\
    \    long max = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        if(sum > max)\n        {\n            max = sum;\n    \
    \    }\n    }\n    long[] result = new long[nums.length];\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[i];\n        sum -= nums[i];\n\
    \        if(sum > 0)\n        {\n            result[i] += 1;\n        }\n    }\n\
    \    for(int i = 0; i < result.length; i++)\n    {\n        result[i] = result[i]\
    \ / max;\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if there are two numbers with the same sum. For example, `order_by_points(new\
    \ long[]{2,3,5,7,8})` returns `{2,3,5,7,8}` instead of `{2,3,5,8}`.\n<|/ c |>\n\
    <| c |>\nI edited my answer to fix the problem you mentioned.\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to fix the problem you mentioned.\n<|/ c |>\n<| a tags=algorithm,sorting\
    \ |>\nThe idea is to find the maximum sum and then divide the numbers in that\
    \ sum by the maximum sum. \n<code>\ndef max_sum(nums):\n    sum = 0\n    for n\
    \ in nums:\n        sum += n\n    return sum", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `order_by_points([1, 2, 3, 10, 20])`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I even tested it with `order_by_points([1, 2, 3, 10, 20])`\
    \ and it returned `[10, 2, 3, 1, 20]`\n<|/ c |>\n<| c |>\nIt doesn't work. Try\
    \ it with `order_by_points([1, 2, 3, 10, 20])`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I even tested it with `order_by_points([1, 2, 3, 10, 20])` and\
    \ it returned `[10, 2, 3, 1, 20]`\n<|/ c |>\n<| c |>\nIt doesn't work. Try it\
    \ with `order_by_points([1, 2, 3, 10, 20])`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.stream.Collectors;\nimport java.util.stream.Stream;", "{\n  \
    \  long[] result = new long[nums.length];\n    int index = 0;\n    long sum =\
    \ 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        nums[i] = result[index];\n        index++;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<|\
    \ a tags=sorting,arrays,java |>\n<code>\npublic static void main(String[] args)\
    \ {\n    int[] nums = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[] nums2 = {1, 5, 3,\
    \ 8, 2, 6, 4, 9, 7};\n    int[] nums3 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[]\
    \ nums4 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[] nums5 = {1, 5, 3, 8, 2, 6, 4,\
    \ 9, 7};\n    int[] nums6 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[] nums7 = {1,\
    \ 5, 3, 8, 2, 6, 4, 9, 7};\n    int[] nums8 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n \
    \   int[] nums9 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[] nums10 = {1, 5, 3, 8,\
    \ 2, 6, 4, 9, 7};\n    int[] nums11 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[]\
    \ nums12 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[] nums13 = {1, 5, 3, 8, 2, 6,\
    \ 4, 9, 7};\n    int[] nums14 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[] nums15\
    \ = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[] nums16 = {1, 5, 3, 8, 2, 6, 4, 9,\
    \ 7};\n    int[] nums17 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[] nums18 = {1,\
    \ 5, 3, 8, 2, 6, 4, 9, 7};\n    int[] nums19 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n\
    \    int[] nums20 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[] nums21 = {1, 5, 3,\
    \ 8, 2, 6, 4, 9, 7};\n    int[] nums22 = {1, 5, 3, 8, 2, 6, 4, 9, 7};\n    int[]\
    \ nums23 = {1, 5, 3, 8, 2, 6, ", "{\n    long sum = 0;\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        sum += nums[i];\n    }\n    long[] result\
    \ = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[i];\n    }\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        for(int j = i + 1; j < nums.length; j++)\n        {\n        \
    \    if(sum == nums[i] + nums[j])\n            {\n                result[j] =\
    \ nums[j];\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there are two numbers with the\
    \ same sum. For example, `order_by_points(new long[]{1, 3, 5})` returns `{1, 3,\
    \ 5}`, not `{1, 5, 3}`.\n<|/ c |>\n<| c |>\nYes, you are right. My mistake. I\
    \ will fix my answer.\n<|/ c |>\n<| a tags=sorting,algorithm,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ if(sum == nums[i])\n        {\n            result[index++] = i;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n    }\n \
    \   for(int i = 0; i < nums.length; i++)\n    {\n        for(int j = i + 1; j\
    \ < nums.length; j++)\n        {\n            if(nums[i] + nums[j] == sum)\n \
    \           {\n                long temp = nums[i];\n                nums[i] =\
    \ nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis\
    \ code doesn't work if there are two or more numbers with the same sum.\n<|/ c\
    \ |>\n<| c |>\nIt works fine for me. Can you give an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\nIt doesn't work for me because I tested it on `[10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90]` and it returns `[10, 20, 30, 40, 50, 60, 70,\
    \ 80, 90]`\n<|/ c |>\n<| c |>\nIt works fine for me. Can you give an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nIt works fine for me. Can you give an example\
    \ where it doesn't work?\n<|/ c |>\n<| a tags=sorting,arrays,c# |>\n<code>\npublic\
    \ static void Main(string[] args)\n{\n    int[] nums = new int[] { 10, 20, 30,\
    \ 40, 50, 60, 70, 80, 90 };\n    int[] result = new int[nums.Length];\n    int\
    \ sum = 0;\n    for (int i = 0; i < nums.Length; i++)\n    {\n        sum += nums[i];\n\
    \    }\n    for (int i = 0; i < nums.Length; i++)\n    {\n        result[i] =\
    \ nums[i];\n    }\n    for (int i = 0; i < nums.Length; i++)\n    {\n        for\
    \ (int j = i + 1; j < nums.Length; j++)\n        {\n            if (nums[i] +\
    \ nums[j] == sum)\n            {\n                int temp = nums[i];\n      \
    \          nums[i] = nums[j];\n                nums[j] = temp;\n            }\n\
    \        }\n    }\n    Console.WriteLine(string.Join(\", \", result));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis code doesn't work if there are two or more numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nIt works fine for me. Can you give an\
    \ example where it doesn't work?\n<|/ c |>\n<| c |>\nIt works fine for ", "{\n\
    \    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nIt does work if there are two numbers with the same sum. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nIt doesn't work if there are two numbers with\
    \ the same sum. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work if there are\
    \ two numbers with the same sum. Try it yourself.\n<|/ c |>\n<| c |>\nIt does\
    \ work if there are two numbers with the same sum. Try it yourself.\n<|/ c |>\n\
    <| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long sum = 0;\n    long max = 0;\n    long min\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        if(sum > max)\n            max = sum;\n        if(sum < min)\n      \
    \      min = sum;\n    }\n    long[] result = new long[nums.length];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n        if(nums[i]\
    \ > max)\n            result[i] = nums[i];\n        if(nums[i] < min)\n      \
    \      result[i] = nums[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long sum =\
    \ 0;\n    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have\
    \ two numbers with the same sum.\n<|/ c |>\n<| c |>\nIt does work if you use Arrays.sort()\
    \ instead of Collections.sort() because Arrays.sort() uses quicksort.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I tested it on a list of numbers with duplicates\
    \ and it works fine.\n<|/ c |>\n<| c |>\nIt doesn't work if you have two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nIt does work if you use Arrays.sort()\
    \ instead of Collections.sort() because Arrays.sort() uses quicksort.\n<|/ c |>\n\
    <| a tags=sorting,java |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        for(int j = i\
    \ + 1; j < nums.length; j++)\n        {\n            if(sum == nums[i] + nums[j])\n\
    \            {\n                result[i] = nums[j];\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(new long[]{1,2,3})`\n\
    <|/ c |>\n<| c |>\nYeah, I forgot about that. Fixed it.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work either. Try it with `order_by_points(new long[]{1,2,3})`\n<|/ c\
    \ |>\n<| c |>\nIt works now. Thanks for pointing out my mistake.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long sum\
    \ = 0;\n    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a dscore=0\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;\nimport java.util.List;", "{\n    long sum = 0;\n    long\
    \ max = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        sum += nums[i];\n        if(sum > max)\n        {\n            max =\
    \ sum;\n        }\n        if(sum < min)\n        {\n            min = sum;\n\
    \        }\n    }\n    long[] result = new long[nums.length];\n    for(int i =\
    \ 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n    }\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        if(nums[i] > max)\n        {\n\
    \            int index = nums.indexOfMax(nums);\n            swap(nums, i, index);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java\
    \ |>\n<| c |>\nThis doesn't work if there are two or more numbers with the same\
    \ sum.\n<|/ c |>\n<| c |>\nYes, it does. I tested it on some test cases and it\
    \ worked. Can you give me an example where it fails?\n<|/ c |>\n<| c |>\nIt fails\
    \ because you only return the first element in the array that has the max sum.\n\
    <|/ c |>\n<| c |>\nI tested it on some test cases and it worked. Can you give\
    \ me an example where it fails?\n<|/ c |>\n<| c |>\nIt fails because you only\
    \ return the first element in the array that has the max sum.\n<|/ c |>\n<| a\
    \ tags=arrays,sorting,algorithm,java |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(; i < nums.length; ++i)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't answer the question of how to sort by sum\
    \ of the digits. Also, the question states that \"the sum of their digits\" is\
    \ to be used.\n<|/ c |>\n<| c |>\nThe question states that \"the sum of their\
    \ digits\" is to be used. I think this answer is correct.\n<|/ c |>\n<| c |>\n\
    The question states that \"the sum of their digits\" is to be used.\n<|/ c |>\n\
    <| c |>\nThe question states that \"the sum of their digits\" is to be used.\n\
    <|/ c |>\n<| c |>\nThe question states that \"the sum of their digits\" is to\
    \ be used.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.List;", "{\n    long[] result = new\
    \ long[nums.length];\n    int i = 0;\n    long sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n        i++;\n    }\n\
    \    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work if you have negative numbers. Try it with {-10, -9,\
    \ -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n<|/ c |>\n<|\
    \ c |>\nI didn't know that negative numbers would cause problems. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index] = sum;\n        index++;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This is not the correct answer. Your code will sort the numbers in descending\
    \ order. Try it out with {10, 2, 5, 7, 1, 3} and you'll see what I mean.\n<|/\
    \ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I've edited\
    \ my answer to fix it.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long sum\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    long index = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum\
    \ > max)\n        {\n            max = sum;\n            index = i;\n        }\n\
    \        if(sum < min)\n        {\n            min = sum;\n        }\n    }\n\
    \    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[index];\n        index++;\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm |>\n<| a tags=c++,sorting,algorithm\
    \ |>\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing\
    \ namespace std;", "{\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        for(int j = i\
    \ + 1; j < nums.length; j++)\n        {\n            if(nums[i] + nums[j] == sum)\n\
    \            {\n                result[j] = nums[j];\n            }\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not\
    \ an answer. Just a comment.\n<|/ c |>\n<| c |>\nThis is not an answer. Just a\
    \ comment.\n<|/ c |>\n<| c |>\nThis is not an answer. Just a comment.\n<|/ c |>\n\
    <| c |>\nThis is not an answer. Just a comment.\n<|/ c |>\n<| c |>\nThis is not\
    \ an answer. Just a comment.\n<|/ c |>\n<| a tags=sorting,algorithm,c# |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;",
  "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(sum\
    \ == nums[i])\n        {\n            result[index] = nums[i];\n            index++;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are two numbers with the same sum.\
    \ Try it with the input `[10, 20, 30, 40, 50, 60, 70, 80, 90]`\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work if there are two numbers with the same sum. Try it with\
    \ the input `[10, 20, 30, 40, 50, 60, 70, 80, 90]`\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if there are two numbers with the same sum. Try it with the input `[10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90]`\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are two numbers with the same sum. Try it with the input `[10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90]`\n<|/ c |>\n<| a tags=c++,sorting,algorithm |>\n<code>\n#include\
    \ <iostream>\n#include <vector>\n#include <algorithm>", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;", "{\n    long[] result = new long[nums.length];\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question, which\
    \ is about sorting a list of integers based on their sum.\n<|/ c |>\n<| c |>\n\
    The question was about sorting a list of integers based on their sum. My solution\
    \ sorts them in ascending order according to the sum of their digits.\n<|/ c |>\n\
    <| c |>\nThe question was about sorting a list of integers based on their sum.\
    \ My solution sorts them in ascending order according to the sum of their digits.\
    \ I added a comment to the question asking if there was a way to do it without\
    \ using an array. Your solution sorts them in ascending order according to the\
    \ sum of their digits. Your solution doesn't answer the question. Your solution\
    \ doesn't sort the list based on their sum.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question asking if there was a way to do it without using an array. Your\
    \ solution sorts them in ascending order according to the sum of their digits.\
    \ Your solution doesn't answer the question. Your solution doesn't sort the list\
    \ based on their sum.\n<|/ c |>\n<| c |>\nI added a comment to the question asking\
    \ if there was a way to do it without using an array. Your solution sorts them\
    \ in ascending order according to the sum of their digits. Your solution doesn't\
    \ answer the question. Your solution doesn't sort the list based on their sum.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;", "{\n    long[]\
    \ result = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with the input `[4, 7, 1, 3, 2]`\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with the input `[4, 7, 1, 3, 2]`.\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ with the input `[4, 7, 1, 3, 2]`.\n<|/ c |>\n<| c |>\nIt does work. Try it with\
    \ the input `[4, 7, 1, 3, 2]`.\n<|/ c |>\n<| c |>\nIt does work. Try it with the\
    \ input `[4, 7, 1, 3, 2]`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long[] result\
    \ = new long[nums.length];\n    int j = 0;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = 0;\n        for (int k = 0; k < nums.length;\
    \ k++)\n        {\n            sum += nums[k];\n        }\n        result[i] =\
    \ sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a\
    \ tags=sorting,algorithm,arrays |>\n<| c |>\nThis doesn't seem to work. Try it\
    \ with `order_by_points(new long[]{1, 4, 3, 10, 2, 5})`\n<|/ c |>\n<| c |>\nIt\
    \ does work. Try it with `order_by_points(new long[]{1, 4, 3, 10, 2, 5})`\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `order_by_points(new long[]{1, 4, 3,\
    \ 10, 2, 5})`\n<|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points(new\
    \ long[]{1, 4, 3, 10, 2, 5})`\n<|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points(new\
    \ long[]{1, 4, 3, 10, 2, 5})`\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long index = 0;\n\
    \    long sumOfDigits = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        sum += nums[i];\n        sumOfDigits += nums[i];\n        if(sumOfDigits\
    \ > max)\n        {\n            max = sumOfDigits;\n            index = i;\n\
    \        }\n        if(sumOfDigits < min)\n        {\n            min = sumOfDigits;\n\
    \        }\n    }\n    long[] result = new long[nums.length];\n    for(int i =\
    \ 0; i < nums.length; i++)\n    {\n        if(sumOfDigits == max)\n        {\n\
    \            result[i] = nums[index];\n        }\n        else if(sumOfDigits\
    \ == min)\n        {\n            result[i] = nums[i];\n        }\n        else\n\
    \        {\n            result[i] = nums[i];\n        }\n        sumOfDigits -=\
    \ nums[i];\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work if there are two or more items with the same sum of the digits.\
    \ For example, `order_by_points(new long[]{1, 3, 5})` returns `[1, 3, 5]` instead\
    \ of `[5, 3, 1]`.\n<|/ c |>\n<| c |>\nYes, you are right. My mistake. I'll fix\
    \ it.\n<|/ c |>\n<| c |>\nThank you for pointing out. I've fixed it.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;\nimport java.util.stream.Collectors;", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \    }\n    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[i];\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        for(int j = i + 1; j < nums.length; j++)\n        {\n \
    \           if(sum - nums[i] == nums[j] - nums[i])\n            {\n          \
    \      long temp = nums[i];\n                nums[i] = nums[j];\n            \
    \    nums[j] = temp;\n            }\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=sorting,c#,arrays |>\n<| c |>\nThis is not the best solution.\
    \ Sorting algorithms work by comparing two elements and then moving them around\
    \ until they are in order. Your algorithm is O(n^2) because you compare every\
    \ element with every other element. Sorting algorithms work by comparing two elements\
    \ and then moving them around until they are in order. Your algorithm is O(n^2)\
    \ because you compare every element with every other element. Sorting algorithms\
    \ work by comparing two elements and then moving them around until they are in\
    \ order. Your algorithm is O(n^2) because you compare every element with every\
    \ other element. Sorting algorithms work by comparing two elements and then moving\
    \ them around until they are in order. Your algorithm is O(n^2) because you compare\
    \ every element with every other element.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ But the question was about sorting algorithms. I tried to solve the problem\
    \ with sorting algorithms. I thought that sorting algorithms work by comparing\
    \ two elements and then moving them around until they are in order. My algorithm\
    \ is O(n^2) because I compare every element with every other element. Sorting\
    \ algorithms work by comparing two elements and then moving them around until\
    \ they are in order. My algorithm is O(n^2) because I compare every element with\
    \ every other element. Sorting algorithms work by comparing two elements and then\
    \ moving them around until they are in order. My algorithm is O(n^2) because I\
    \ compare every element with every other element. Sorting algorithms work by comparing\
    \ two elements and then moving them around until they are in order. My algorithm\
    \ is O(n^2) because I compare every element with every other element.\n<|/ c |>\n\
    <| c |>\nI agree with you. But the question was about sorting algorithms. I tried\
    \ to solve the problem with sorting algorithms. I thought that sorting algorithms ",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nI believe this does work if there are two numbers with the\
    \ same sum.\n<|/ c |>\n<| c |>\nYes, it does. Try it out with `{1, 2, 3, 7, 8,\
    \ 9}`.\n<|/ c |>\n<| c |>\nYes, it does. Try it out with `{1, 2, 3, 7, 8, 9}`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.List;", "{\n    long sum = 0;\n    long max = 0;\n    long min\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        if(sum > max)\n        {\n            max = sum;\n        }\n       \
    \ if(sum < min)\n        {\n            min = sum;\n        }\n    }\n    long[]\
    \ result = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[i];\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(nums[i] > max)\n        {\n            int index = i;\n\
    \            for(int j = i; j < nums.length; j++)\n            {\n           \
    \     if(nums[j] > max)\n                {\n                    index = j;\n \
    \               }\n            }\n            swap(result[index], result[i]);\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,c#\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\n\
    This is not an answer to the question. He wants to sort an array of numbers, not\
    \ an array of integers.\n<|/ c |>\n<| c |>\nI believe this answer is correct.\
    \ He wants to sort an array of numbers, not an array of integers.\n<|/ c |>\n\
    <| c |>\nThis answer doesn't work. Try it with `{-7, -6, -5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9}`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `{-7,\
    \ -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `{-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9}`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    long sum = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0; i\
    \ < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n\
    \        {\n            max = sum;\n        }\n        if(sum < min)\n       \
    \ {\n            min = sum;\n        }\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \        if(nums[i] > max)\n        {\n            result[i] = max;\n        }\n\
    \        if(nums[i] < min)\n        {\n            result[i] = min;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java\
    \ |>\n<| c |>\nThe question was about sorting an array of integers, not an array\
    \ of longs.\n<|/ c |>\n<| c |>\nThe question was about sorting an array of integers,\
    \ not an array of longs.\n<|/ c |>\n<| c |>\nThe question was about sorting an\
    \ array of integers, not an array of longs.\n<|/ c |>\n<| c |>\nThe question was\
    \ about sorting an array of integers, not an array of longs.\n<|/ c |>\n<| c |>\n\
    The question was about sorting an array of integers, not an array of longs.\n\
    <|/ c |>\n<| a tags=arrays,sorting,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThe\
    \ question was about sorting an array of integers, not longs.\n<|/ c |>\n<| c\
    \ |>\nI added a solution for integers\n<|/ c |>\n<| c |>\nThe question was about\
    \ sorting an array of integers, not longs.\n<|/ c |>\n<| c |>\nThe question was\
    \ about sorting an array of integers, not longs.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport java.util.Arrays;", "{\n    long sum = 0;\n    for(int i = 0; i\
    \ < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n    long[] result\
    \ = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[i];\n    }\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        if(sum < nums[i])\n        {\n            for(int j = i; j < nums.length;\
    \ j++)\n            {\n                if(sum < nums[j])\n                {\n\
    \                    long tmp = nums[i];\n                    nums[i] = nums[j];\n\
    \                    nums[j] = tmp;\n                    tmp = result[i];\n  \
    \                  result[i] = result[j];\n                    result[j] = tmp;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,sorting,algorithm |>\n<| a |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <algorithm>", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis\
    \ doesn't work for me. I'm getting a System.IndexOutOfRangeException on line `result[i]\
    \ = sum;`\n<|/ c |>\n<| c |>\nI tested it and it works for me. Are you sure you\
    \ copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I even\
    \ tried it with a simple array and it worked. I'm wondering if there's something\
    \ wrong with my IDE.\n<|/ c |>\n<| c |>\nI tested it on VS2013 and it works fine.\
    \ Are you sure you didn't miss anything?\n<|/ c |>\n<| c |>\nI tested it on VS2015\
    \ and it works fine. Are you sure you didn't miss anything?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    long sum = 0;\n  \
    \  for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n\
    \    long max = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i]\
    \ > max)\n        {\n            max = nums[i];\n        }\n    }\n    long[]\
    \ result = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        if(nums[i] > max)\n        {\n            result[i] = nums[i];\n\
    \        }\n        else\n        {\n            result[i] = sum - nums[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm\
    \ |>\n<| c |>\nThis is not an answer to the question. He wants to sort an array\
    \ of integers according to their sum.\n<|/ c |>\n<| c |>\nThe question was about\
    \ sorting an array of integers according to their sum. Your answer does not do\
    \ that.\n<|/ c |>\n<| c |>\nThe question was about sorting an array of integers\
    \ according to their sum. Your answer does not do that.\n<|/ c |>\n<| c |>\nThe\
    \ question was about sorting an array of integers according to their sum. Your\
    \ answer does not do that.\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ an array of integers according to their sum. Your answer does not do that.\n\
    <|/ c |>\n<| a tags=c++,sorting,algorithm |>\n<code>\n#include <iostream>\n#include\
    \ <algorithm>\n#include <vector>\nusing namespace std;", "{\n    long sum = 0;\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n  \
    \  }\n    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[i];\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = result[i] - sum;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum. For example, `order_by_points(new long[]{1, 3, 5})` returns\
    \ `[1, 3, 5]`.\n<|/ c |>\n<| c |>\nYes, you are right. My bad. I will fix it.\n\
    <|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(sum\
    \ == nums[i])\n        {\n            result[index++] = i;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| c |>\nI believe this would fail if there are two numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nYes, it would. But I believe that is the intended behavior\
    \ of the question. He said that he wants to sort them by their sum.\n<|/ c |>\n\
    <| c |>\nYes, I agree. My mistake.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;", "{\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n    }\n    long[]\
    \ result = new long[nums.length];\n    int index = 0;\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        if(sum == nums[i])\n        {\n          \
    \  result[index] = i;\n            index++;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,c# |>\n<| c |>\nThis is not an\
    \ optimal solution. Sorting algorithms usually have O(n log n) complexity and\
    \ your solution has O(n^2) complexity. Your solution has O(n^2) complexity because\
    \ you sort all numbers and then find out which one is the largest. Sorting all\
    \ numbers is O(n^2) complexity.\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ algorithms, not about sorting numbers. Sorting algorithms usually have O(n log\
    \ n) complexity and your solution has O(n^2) complexity. Your solution has O(n^2)\
    \ complexity because you sort all numbers and then find out which one is the largest.\
    \ Sorting all numbers is O(n^2) complexity.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ my solution has O(n^2) complexity. My solution has O(n^2) complexity because\
    \ I sort all numbers and then find out which one is the largest. Sorting all numbers\
    \ is O(n^2) complexity.\n<|/ c |>\n<| c |>\nThe question was about sorting algorithms,\
    \ not about sorting numbers. Sorting algorithms usually have O(n log n) complexity\
    \ and your solution has O(n^2) complexity. Your solution has O(n^2) complexity\
    \ because you sort all numbers and then find out which one is the largest. Sorting\
    \ all numbers is O(n^2) complexity.\n<|/ c |>\n<| c |>\nThe question was about\
    \ sorting algorithms, not about sorting numbers. Sorting algorithms usually have\
    \ O(n log n) complexity and your solution has O(n^2) complexity. Your solution\
    \ has O(n^2) complexity because you sort all numbers and then find out which one\
    \ is the largest. Sorting all numbers is O(n^2) complexity.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic static void main(String[] args) {\n    int[] nums = {1, 4,\
    \ 3, 7, 8, 2, 9, 5, 6, 10};\n    System.out.println(Array", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    int index = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(sum\
    \ == nums[i])\n        {\n            result[index++] = i;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long index = 0;\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n  \
    \      if(sum > max)\n        {\n            max = sum;\n            index = i;\n\
    \        }\n        if(sum < min)\n        {\n            min = sum;\n       \
    \ }\n    }\n    long[] result = new long[nums.length];\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        result[i] = nums[index];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis code doesn't\
    \ work. Try it with `order_by_points(new long[] { 1, 3, 7, 9, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\
    \ 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\
    \ 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,\
    \ 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,\
    \ 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,\
    \ 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,\
    \ 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,\
    \ 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\
    \ 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,\
    \ 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997});`\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting. The problem was that I was using\
    \ an old version of C#. Now I tested it on C# 7.3 and it works. I edited the answer\
    \ to include the new ", "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n \
    \       result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nI believe this solution\
    \ only works if all elements are positive. Otherwise the sum of the digits will\
    \ be negative.\n<|/ c |>\n<| c |>\nYes, you are right. I've edited my answer accordingly.\
    \ Thanks.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int index\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about sorting in ascending\
    \ order. Your solution sorts in descending order.\n<|/ c |>\n<| c |>\nThe question\
    \ was about sorting in ascending order. Your solution sorts in descending order.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting in ascending order. Your solution\
    \ sorts in descending order.\n<|/ c |>\n<| c |>\nThe question was about sorting\
    \ in ascending order. Your solution sorts in descending order.\n<|/ c |>\n<| c\
    \ |>\nThe question was about sorting in ascending order. Your solution sorts in\
    \ descending order.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n    }\n    long[] result = new long[nums.length];\n    int\
    \ index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(sum\
    \ - nums[i] == 0)\n        {\n            result[index++] = nums[i];\n       \
    \ }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,c# |>\n\
    <| c |>\nThis solution does not work if there are two or more numbers with the\
    \ same sum.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting it.\
    \ The OP didn't specify that they would have multiple numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nI tested it before posting it. The OP didn't specify that they\
    \ would have multiple numbers with the same sum.\n<|/ c |>\n<| c |>\n: I tested\
    \ it before posting it. The OP didn't specify that they would have multiple numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\n: I tested it before posting it. The\
    \ OP didn't specify that they would have multiple numbers with the same sum.\n\
    <|/ c |>\n<| a tags=sorting,algorithm,c# |>\n<code>\npublic class Program\n{\n\
    \    public static void Main()\n    {\n        int[] nums = { 10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210,\
    \ 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370,\
    \ 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530,\
    \ 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690,\
    \ 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850,\
    \ 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000,\
    \ 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130,\
    \ 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, ", "{\n  \
    \  long[] result = new long[nums.length];\n    int index = 0;\n    long sum =\
    \ 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=arrays,sorting,c# |>\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n \
    \   long sum = 0;\n    long max = 0;\n    long min = 0;\n    for(int i = 0; i\
    \ < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n\
    \        {\n            max = sum;\n        }\n        if(sum < min)\n       \
    \ {\n            min = sum;\n        }\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n\
    \        if(nums[i] > max)\n        {\n            result[i] = max;\n        }\n\
    \        if(nums[i] < min)\n        {\n            result[i] = min;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThe question states\
    \ that \"the sum of their digits\" is to be used. Your solution does not do that.\n\
    <|/ c |>\n<| c |>\nI didn't notice that. Thanks for pointing that out. I've updated\
    \ the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic class Solution {\n \
    \   public static void main(String[] args) {\n        int[] arr = {1, 4, 3, 7,\
    \ 2, 5, 6, 8};\n        System.out.println(Arrays.toString(order_by_points(arr)));\n\
    \    }", "{\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long\
    \ index = 0;\n    long[] result = new long[nums.length];\n    for(int i = 0; i\
    \ < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n\
    \        {\n            max = sum;\n            index = i;\n        }\n      \
    \  if(sum < min)\n        {\n            min = sum;\n        }\n    }\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index];\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe question was\
    \ about sorting in ascending order. Your answer does not do that.\n<|/ c |>\n\
    <| c |>\nThe question was about sorting in ascending order. Your answer does not\
    \ do that.\n<|/ c |>\n<| c |>\nThe question was about sorting in ascending order.\
    \ Your answer does not do that.\n<|/ c |>\n<| a tags=sorting,c# |>\n<code>\nusing\
    \ System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    using System.Threading.Tasks;", "{\n    long sum = 0;\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        sum += nums[i];\n    }\n    long[] result\
    \ = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[i];\n    }\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        for(int j = i + 1; j < nums.length; j++)\n        {\n        \
    \    if(nums[i] + nums[j] == sum)\n            {\n                result[i] =\
    \ nums[j];\n                nums[j] = nums[i];\n                nums[i] = result[i];\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. For example, `order_by_points([-3,\
    \ -4, -5, -6, -7, -8])` returns `[-3, -4, -5, -6, -7, -8]`.\n<|/ c |>\n<| c |>\n\
    It does work for negative numbers. I tested it on `[-3, -4, -5, -6, -7, -8]` and\
    \ it returns `[-3, -4, -5, -6, -7, -8]`.\n<|/ c |>\n<| c |>\nIt doesn't work for\
    \ negative numbers. Try `order_by_points([-3, -4, -5, -6, -7, -8])`.\n<|/ c |>\n\
    <| c |>\nIt does work for negative numbers. I tested it on `[-3, -4, -5, -6, -7,\
    \ -8]` and it returns `[-3, -4, -5, -6, -7, -8]`.\n<|/ c |>\n<| c |>\nIt does\
    \ work for negative numbers. I tested it on `[-3, -4, -5, -6, -7, -8]` and it\
    \ returns `[-3, -4, -5, -6, -7, -8]`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport\
    \ java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,algorithm,java |>\n<| a tags=sorting,algorithm,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\n\
    import java.util.List;", "{\n    long[] result = new long[nums.length];\n    long\
    \ sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,java |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/10177473)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He wants to sort\
    \ a list of numbers in ascending order according to the sum of their digits. He\
    \ can easily do that by writing a function that does that. He then wants to know\
    \ how he can use that function to sort a list of numbers in ascending order according\
    \ to the sum of their digits. He can easily do that by writing a function that\
    \ does that. He then wants to know how he can use that function to sort a list\
    \ of numbers in ascending order according to the sum of their digits. He can easily\
    \ do that by writing a function that does that. He then wants to know how he can\
    \ use that function to sort a list of numbers in ascending order according to\
    \ the sum of their digits. He can easily do that by writing a function that does\
    \ that. He then wants to know how he can use that function to sort a list of numbers\
    \ in ascending order according to the sum of their digits. He can easily do that\
    \ by writing a function that does that.\n<|/ c |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/10177473)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/10177473)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/10177473)\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| a tags=arrays,sorting,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ int sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,algorithm,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long sum = 0;\n    long max = 0;\n    long min\
    \ = 0;\n    long index = 0;\n    long temp = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        temp = nums[i];\n        sum += temp;\n        if(sum >\
    \ max)\n        {\n            max = sum;\n            index = i;\n        }\n\
    \        if(sum < min)\n        {\n            min = sum;\n        }\n    }\n\
    \    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[index];\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=sorting,arrays,c# |>\n<| c |>\nThis doesn't work if the numbers\
    \ are negative.\n<|/ c |>\n<| c |>\nIt does work if you change `sum` to `long`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if you change `sum` to `long`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if you change `sum` to `long`.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work if you change `sum` to `long`.\n<|/ c |>\n<| a tags=sorting,arrays,c#\
    \ |>\n<code>\npublic static void SortArray(int[] arr)\n{\n    Array.Sort(arr);\n\
    \    Array.Sort(arr, new intComparer());\n}", "{\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,arrays,c# |>\n<|\
    \ c |>\nThis doesn't work if there are two numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nYes, you are right. I've updated my answer to fix it.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if there are two numbers with the same sum.\n<|/ c |>\n\
    <| c |>\nYes, you are right. I've updated my answer to fix it.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if there are two numbers with the same sum.\n<|/ c |>\n\
    <| a tags=algorithm,sorting,arrays,c# |>\n<code>\npublic static void SortBySum(List<int>\
    \ list)\n{\n    List<int> list2 = new List<int>();\n    foreach (int i in list)\n\
    \    {\n        list2.Add(i);\n    }\n    list2.Sort();\n    List<int> list3 =\
    \ new List<int>();\n    foreach (int i in list2)\n    {\n        list3.Add(i);\n\
    \    }\n    list3.Sort();\n    List<int> list4 = new List<int>();\n    foreach\
    \ (int i in list3)\n    {\n        list4.Add(i);\n    }\n    list4.Sort();\n \
    \   List<int> list5 = new List<int>();\n    foreach (int i in list4)\n    {\n\
    \        list5.Add(i);\n    }\n    list5.Sort();\n    List<int> list6 = new List<int>();\n\
    \    foreach (int i in list5)\n    {\n        list6.Add(i);\n    }\n    list6.Sort();\n\
    \    List<int> list7 = new List<int>();\n    foreach (int i in list6)\n    {\n\
    \        list7.Add(i);\n    }\n    list7.Sort();\n    List<int> list8 = new List<int>();\n\
    \    foreach (int i in list7)\n    {\n        list8.Add(i);\n    }\n    list8.Sort();\n\
    \    List<int> list9 = new List<int>();\n    foreach (int i in list8)\n    {\n\
    \        list9.Add(i);\n    }\n    list9.Sort();\n    List<int> list10 = new List<int>();\n\
    \    foreach (int i in list9)\n    {\n        list10.Add(i);\n    }\n    list10.Sort();\n\
    \    List<int> ", "{\n    long[] result = new long[nums.length];\n    int i =\
    \ 0;\n    long sum = 0;\n    for(long num : nums)\n    {\n        sum += num;\n\
    \        result[i++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n    }\n    \n    long[] result = new long[nums.length];\n \
    \   int index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(sum\
    \ == nums[i])\n        {\n            result[index++] = i;\n        }\n    }\n\
    \    \n    Arrays.sort(result);\n    \n    return result;\n}", "{\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \    }\n    long[] result = new long[nums.length];\n    int index = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        if(sum == nums[i])\n        {\n\
    \            result[index] = i;\n            index++;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,sorting,algorithm |>\n\
    <code>\n#include <iostream>\n#include <vector>\n#include <algorithm>", "{\n  \
    \  long[] result = new long[nums.length];\n    long sum = 0;\n    int index =\
    \ 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index++] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,sorting,c# |>\n<| c |>\nThis doesn't work. Try\
    \ it with `order_by_points(new long[]{-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5})`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points(new long[]{-5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5})`\n<|/ c |>\n<| c |>\nIt does work. Try it with\
    \ `order_by_points(new long[]{-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5})`\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `order_by_points(new long[]{-5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5})`\n<|/ c |>\n<| c |>\nIt does work. Try it with `order_by_points(new\
    \ long[]{-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5})`\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n \
    \   int index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| c |>\nThe OP wants to sort by sum of digits, not by their original position\
    \ in the list.\n<|/ c |>\n<| c |>\nThe OP wants to sort by sum of digits, not\
    \ by their original position in the list. Your solution sorts by original position\
    \ in the list.\n<|/ c |>\n<| c |>\nThe OP wants to sort by sum of digits, not\
    \ by their original position in the list. Your solution sorts by original position\
    \ in the list.\n<|/ c |>\n<| c |>\nThe OP wants to sort by sum of digits, not\
    \ by their original position in the list. Your solution sorts by original position\
    \ in the list.\n<|/ c |>\n<| c |>\nThe OP wants to sort by sum of digits, not\
    \ by their original position in the list. Your solution sorts by original position\
    \ in the list.\n<|/ c |>\n<| a tags=sorting,arrays,algorithm,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;",
  "{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n    }\n    Arrays.sort(nums);\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i]\
    \ - sum;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c++\
    \ |>\n<| c |>\nThis doesn't answer the question. He wants to sort by sum, not\
    \ by index.\n<|/ c |>\n<| c |>\nYes, I missed that part. Thanks for pointing it\
    \ out. I've updated the answer.\n<|/ c |>\n<| c |>\nThis answer does not sort\
    \ the array in ascending order. Instead it sorts the array in descending order.\n\
    <|/ c |>\n<| c |>\nThe question was about sorting in ascending order. I've updated\
    \ the answer to reflect that.\n<|/ c |>\n<| a tags=sorting,arrays,c++ |>\n<code>\n\
    #include <iostream>\n#include <algorithm>\nusing namespace std;", "{\n    long[]\
    \ result = new long[nums.length];\n    long sum = 0;\n    int index = 0;\n   \
    \ for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n     \
    \   result[index] = sum;\n        index++;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `order_by_points(new long[]{1, 3, 2})`\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. Can you give me an example where it doesn't work?\n<|/\
    \ c |>\n<| c |>\nI tested it and it works fine. Can you give me an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you\
    \ give me an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works fine. Can you give me an example where it doesn't work?\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result = new\
    \ long[nums.length];\n    int index = 0;\n    long sum = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[index++]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a tags=sorting,arrays,java |>\n<| c |>\nThis doesn't answer the question as\
    \ asked.\n<|/ c |>\n<| c |>\nIt does answer the question as asked, as stated in\
    \ the first line of the question: \"Write a function which sorts the given list\
    \ of integers in ascending order according to the sum of their digits.\" The second\
    \ line of the question states \"Note: if there are several items with similar\
    \ sum of their digits, order them based on their index in original list.\"\n<|/\
    \ c |>\n<| c |>\nThe question asked is \"Write a function which sorts the given\
    \ list of integers in ascending order according to the sum of their digits.\"\
    \ The second line of the question states \"Note: if there are several items with\
    \ similar sum of their digits, order them based on their index in original list.\"\
    \ This answer doesn't do either of those.\n<|/ c |>\n<| c |>\nThe question asked\
    \ is \"Write a function which sorts the given list of integers in ascending order\
    \ according to the sum of their digits.\" The second line of the question states\
    \ \"Note: if there are several items with similar sum of their digits, order them\
    \ based on their index in original list.\" This answer doesn't do either of those.\n\
    <|/ c |>\n<| c |>\nThe question asked is \"Write a function which sorts the given\
    \ list of integers in ascending order according to the sum of their digits.\"\
    \ The second line of the question states \"Note: if there are several items with\
    \ similar sum of their digits, order them based on their index in original list.\"\
    \ This answer doesn't do either of those.\n<|/ c |>\n<| a |>\n<code>\nimport java.util.Arrays;",
  "{\n    long[] result = new long[nums.length];\n    int sum = 0;\n    int index\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        nums[i] = result[index];\n        index++;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| c\
    \ |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/17770143)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He wants to sort\
    \ a list of numbers in ascending order according to the sum of their digits. He\
    \ has written a solution that does exactly that. He has also written a solution\
    \ that does exactly that. He has also written a solution that does exactly that.\
    \ He has also written a solution that does exactly that. He has also written a\
    \ solution that does exactly that. He has also written a solution that does exactly\
    \ that. He has also written a solution that does exactly that. He has also written\
    \ a solution that does exactly that. He has also written a solution that does\
    \ exactly that. He has also written a solution that does exactly that. He has\
    \ also written a solution that does exactly that. He has also written a solution\
    \ that does exactly that. He has also written a solution that does exactly that.\
    \ He has also written a solution that does exactly that. He has also written a\
    \ solution that does exactly that. He has also written a solution that does exactly\
    \ that. He has also written a solution that does exactly that. He has also written\
    \ a solution that does exactly that. He has also written a solution that does\
    \ exactly that. He has also written a solution that does exactly that. He has\
    \ also written a solution that does exactly that. He has also written a solution\
    \ that does exactly that. He has also written a solution that does exactly that.\
    \ He has also written a solution that does exactly that. He has also written a\
    \ solution that does exactly that. He has also written a solution that does exactly\
    \ that. He has also written a solution that does exactly that. He has also written\
    \ a solution that does exactly that. He has also written ", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;", "{\n    long sum = 0;\n    long max = 0;\n\
    \    long min = 0;\n    long index = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        if(sum > max)\n        {\n          \
    \  max = sum;\n            index = i;\n        }\n        if(sum < min)\n    \
    \    {\n            min = sum;\n        }\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[index];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,java\
    \ |>\n<| c |>\nThis doesn't work if there are two numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nYes, you are right. I've edited my answer to fix this issue.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work if there are\
    \ two numbers with the same sum.\n<|/ c |>\n<| c |>\nYes, you are right. I've\
    \ edited my answer to fix this issue. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are two numbers with the same sum.\n<|/ c\
    \ |>\n<| a dscore=3 |>\n<code>\nimport java.util.Arrays;", "{\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c++ |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly for small arrays, but for large arrays,\
    \ it takes too much time to sort and also it gives wrong answer. Can you please\
    \ suggest me a better solution?\n<|/ c |>\n<| c |>\n: I added a solution that\
    \ is O(nlogn) instead of O(n^2). Hope it helps.\n<|/ c |>\n<| c |>\nThanks a lot.\
    \ It works perfectly for me. Can you please explain me how it works?\n<|/ c |>\n\
    <| c |>\n: I added a brief explanation.\n<|/ c |>\n<| a tags=sorting,arrays,c++\
    \ |>\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing\
    \ namespace std;", "{\n    long[] result = new long[nums.length];\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[i] = sum;\n    }\n    Arrays.sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are two numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nYes, I know. But I thought that OP wants\
    \ to sort them by their sum.\n<|/ c |>\n<| c |>\nYes, I know. But I thought that\
    \ OP wants to sort them by their sum.\n<|/ c |>\n<| c |>\nYes, I know. But I thought\
    \ that OP wants to sort them by their sum.\n<|/ c |>\n<| c |>\nYes, I know. But\
    \ I thought that OP wants to sort them by their sum.\n<|/ c |>\n<| a tags=sorting,c#,arrays\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.IO;", "{\n    long[] result = new long[nums.length];\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<|\
    \ a tags=sorting,arrays,algorithm,java |>\n<code>\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.Comparator;", "{\n    long sum\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    long index = 0;\n    long sumOfDigits\
    \ = 0;\n    long maxOfDigits = 0;\n    long minOfDigits = 0;\n    long maxIndex\
    \ = 0;\n    long minIndex = 0;\n    for(int i = 0; i < nums.length; i++)\n   \
    \ {\n        sum += nums[i];\n        sumOfDigits += nums[i];\n        if(sumOfDigits\
    \ > max)\n        {\n            max = sumOfDigits;\n            maxIndex = i;\n\
    \        }\n        if(sumOfDigits < min)\n        {\n            min = sumOfDigits;\n\
    \            minIndex = i;\n        }\n    }\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i] > 0)\n  \
    \      {\n            result[index] = nums[i];\n            index++;\n       \
    \ }\n    }\n    for(int i = maxIndex; i >= minIndex; i--)\n    {\n        result[index]\
    \ = nums[i];\n        index++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ |>\n<| a tags=sorting,arrays,java |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work. Try it with `order_by_points(new long[]{1,\
    \ 3, 2})`\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test case\
    \ to the answer.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(new\
    \ long[]{1, 3, 2})`\n<|/ c |>\n<| c |>\nI tested it and it works. I added the\
    \ test case to the answer.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points(new\
    \ long[]{1, 3, 2})`\n<|/ c |>\n<| a tags=sorting,algorithm,java |>\n<code>\nimport\
    \ java.util.Arrays;\nimport java.util.Comparator;", "{\n    long[] result = new\
    \ long[nums.length];\n    long sum = 0;\n    int i = 0;\n    for(; i < nums.length;\
    \ ++i)\n    {\n        sum += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to sort by sum of digits, not by their original order.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to reflect this.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to sort by sum of\
    \ digits, not by their original order.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I've updated my answer to reflect this.\n<|/ c |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long[] result = new long[nums.length];\n   \
    \ long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,algorithm,c#\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants to sort by\
    \ sum of digits, not by their absolute value.\n<|/ c |>\n<| c |>\nI see your point.\
    \ I've updated my answer to reflect that.\n<|/ c |>\n<| a tags=sorting,arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.stream.Collectors;", "{\n    long sum = 0;\n\
    \    long max = 0;\n    long min = 0;\n    long index = 0;\n    for(int i = 0;\
    \ i < nums.length; i++)\n    {\n        sum += nums[i];\n        if(sum > max)\n\
    \        {\n            max = sum;\n            index = i;\n        }\n      \
    \  if(sum < min)\n        {\n            min = sum;\n        }\n    }\n    long[]\
    \ result = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[index];\n        index++;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;", "{\n    long sum = 0;\n\
    \    long max = 0;\n    long min = 0;\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        if(sum > max)\n        {\n          \
    \  max = sum;\n        }\n        if(sum < min)\n        {\n            min =\
    \ sum;\n        }\n    }\n    long[] result = new long[nums.length];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[i];\n        if(nums[i]\
    \ > max)\n        {\n            result[i] = max;\n        }\n        if(nums[i]\
    \ < min)\n        {\n            result[i] = min;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,c# |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    int i = 0;\n\
    \    for(int j=0; j<nums.length; j++)\n    {\n        sum += nums[j];\n      \
    \  result[i] = sum;\n        i++;\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,sorting,java |>\n<code>\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;",
  "{\n    long[] result = new long[nums.length];\n    long sum = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work if there are two or more items with\
    \ the same sum.\n<|/ c |>\n<| c |>\nIt does, but only if the items are in descending\
    \ order.\n<|/ c |>\n<| c |>\nIt does, but only if the items are in descending\
    \ order.\n<|/ c |>\n<| c |>\nIt does, but only if the items are in descending\
    \ order.\n<|/ c |>\n<| c |>\nIt does, but only if the items are in descending\
    \ order.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;",
  "{\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long index = 0;\n\
    \    long sumOfDigits = 0;\n    long maxOfDigits = 0;\n    long minOfDigits =\
    \ 0;\n    long maxIndex = 0;\n    long minIndex = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum += nums[i];\n        sumOfDigits += nums[i]%10;\n \
    \       if(sumOfDigits > max)\n        {\n            max = sumOfDigits;\n   \
    \         maxIndex = i;\n        }\n        if(sumOfDigits < min)\n        {\n\
    \            min = sumOfDigits;\n            minIndex = i;\n        }\n    }\n\
    \    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(nums[i] == max)\n        {\n            result[i] =\
    \ maxIndex;\n        }\n        else if(nums[i] == min)\n        {\n         \
    \   result[i] = minIndex;\n        }\n        else\n        {\n            result[i]\
    \ = i;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,java\
    \ |>\n<| c |>\nThis doesn't work. Try it with the input `[2,5,7,1,3,6,4]`\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with the input `[2,5,7,1,3,6,4]`\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try it with the input `[2,5,7,1,3,6,4]`\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try it with the input `[2,5,7,1,3,6,4]`\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work. Try it with the input `[2,5,7,1,3,6,4]`\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\n\
    import java.util.Comparator;\nimport java.util.List;", "{\n    long[] result =\
    \ new long[nums.length];\n    long sum = 0;\n    int index = 0;\n    for(int i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result);\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        nums[i] = result[index];\n        index++;\n    }\n   \
    \ return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| a tags=arrays,sorting,java\
    \ |>\n<code>\nimport java.util.Arrays;\nimport java.util.Collections;\nimport\
    \ java.util.Comparator;", "{\n    long sum = 0;\n    long[] result = new long[nums.length];\n\
    \    int index = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n       \
    \ sum += nums[i];\n        result[index++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| a tags=sorting,arrays,c#\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;",
  "{\n    long[] result = new long[nums.length];\n    int index = 0;\n    long sum\
    \ = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n\
    \        result[index] = sum;\n        index++;\n    }\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        sum -= nums[i];\n        result[index] = sum;\n\
    \        index++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,sorting,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `order_by_points({ 10, 2, 5, 3,\
    \ 7, 8, 4, 6 })`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `order_by_points({\
    \ 10, 2, 5, 3, 7, 8, 4, 6 })`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `order_by_points({ 10, 2, 5, 3, 7, 8, 4, 6 })`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try it with `order_by_points({ 10, 2, 5, 3, 7, 8, 4, 6 })`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `order_by_points({ 10, 2, 5, 3, 7, 8, 4,\
    \ 6 })`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <algorithm>\nusing namespace std;", "{\n    long[] result = new long[nums.length];\n\
    \    int i = 0;\n    int j = 0;\n    int sum = 0;\n    while(i < nums.length)\n\
    \    {\n        sum = nums[i] - '0';\n        if(sum > 0)\n        {\n       \
    \     result[j] = sum;\n            j++;\n        }\n        i++;\n    }\n   \
    \ while(j < result.length)\n    {\n        result[j] = 0;\n        j++;\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work\
    \ if there are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\nYes,\
    \ I know. My code doesn't handle that case. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either.\
    \ My code doesn't handle that case either. My code doesn't handle that case either. "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
