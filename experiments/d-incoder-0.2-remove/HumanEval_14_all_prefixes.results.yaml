language: d
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(; i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    int i = 0;\n  \
    \  for(; i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(i,\
    \ string.length);\n    }\n    return suffixes;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    int i\
    \ = 0;\n    for(; i < string.length; ++i)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start, i);\n    }\n    return substrings;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        substrings[i] = string.substr(start, end - start);\n    }\n  \
    \  return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start, end - start, step);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start, end - start, step, end2);\n    }\n    return substrings;\n\
    }\n/*\n Return \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp474nsa69.d(101): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp474nsa69.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end,step);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(start,end,step,count);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjyklziy0.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyklziy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = start; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(i, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = start; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i, length, end, step);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbcu7votv.d(101): Error: identifier expected following `.`, not
    `unittest`

    /tmp/tmpbcu7votv.d(102): Error: found `{` when expecting `]`

    /tmp/tmpbcu7votv.d(103): Error: semicolon expected, not `alias`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcu7votv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpunjl151o.d(9): Error: `string` is used as a type

    /tmp/tmpunjl151o.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunjl151o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.substr(i,string.length);\n        i++;\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvzad2soj.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvzad2soj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(string.length\
    \ - i - 1, string.length);\n        i++;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes_reverse(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.substr(0, string.length - i);\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return list of all prefixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i)\
    \ + string.substr(i, string.length);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_and_prefixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(0, string.length - i) + string.substr(i,\
    \ string.length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all prefixes from shortest to longest of the input string\n        \n*/\n\
    string[] all_prefixes_and_suffixes_reverse(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(string.length - i - 1, string.length)\
    \ + string.substr(0, string.length - i - 1);\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuk7nnc6x.d(104): Error: found `unittest` instead of statement

    /tmp/tmpuk7nnc6x.d(112): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuk7nnc6x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(i,\
    \ string.length);\n        i++;\n    }\n    return suffixes;\n}\n/*\n Return list\
    \ of all prefixes from shortest to longest of the input string\n        \n*/\n\
    string[] all_prefixes_reverse(string string) \n{\n    string[] prefixes = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        prefixes[i] = string.substr(string.length - i, string.length);\n    \
    \    i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(0,\
    \ string.length - i);\n        i++;\n    }\n    return suffixes;\n}\n/*\n Return\
    \ list of all prefixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_prefixes_reverse(string string) \n{\n    string[] prefixes =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        prefixes[i] = string.substr(string.length - i, string.length);\n\
    \        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(0,\
    \ string.length - i);\n        i++;\n    }\n    return suffixes;\n}\n/*\n Return\
    \ list of all prefixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_prefixes_reverse(string string) \n{\n    string[] prefixes =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9xmp43tj.d(103): Error: found `unittest` instead of statement

    /tmp/tmp9xmp43tj.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xmp43tj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n    {\n\
    \        result[i] = string.substr(i, string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2, int end3) \n{\n    string[] \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt2_t7g7s.d(101): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpt2_t7g7s.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt2_t7g7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,1);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character, int length) \n{\n    string[] result = new string[string.length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu58gefwq.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu58gefwq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\t\n\tfor(int i\
    \ = 0; i < string.length; i++)\n\t{\n\t\tresult[i] = string.Substring(0, i);\n\
    \t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpubwj_tm9.d(9): Error: `string` is used as a type

    /tmp/tmpubwj_tm9.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubwj_tm9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int end2) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length, end, end2);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5l_ia4zo.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5l_ia4zo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(string.length\
    \ - i, string.length);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes_reverse(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(0,\
    \ string.length - i);\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i)\
    \ + string.substr(i, string.length);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all prefixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes_and_prefixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \    {\n        result[i] = string.substr(0, i) + string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(string.length\
    \ - i, string.length);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes_and_prefixes(string \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwlln9c0s.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwlln9c0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\tfor (int i =\
    \ 0; i < string.length; i++)\n\t{\n\t\tresult[i] = string.Substring(0, i);\n\t\
    }\n\treturn result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \tstring[] result = new string[string.length];\n\tfor (int i = string.length -\
    \ 1; i >= 0; i--)\n\t{\n\t\tresult[i] = string.Substring(i);\n\t}\n\treturn result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n\tstring[] result =\
    \ new string[string.length];\n\tfor (int i = 0; i < string.length; i++)\n\t{\n\
    \t\tresult[i] = string.Substring(i);\n\t}\n\treturn result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start) \n{\n\tstring[] result = new\
    \ string[string.length];\n\tfor (int i = start; i < string.length; i++)\n\t{\n\
    \t\tresult[i] = string.Substring(i);\n\t}\n\treturn result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length) \n{\n\tstring[]\
    \ result = new string[string.length];\n\tfor (int i = start; i < start + length;\
    \ i++)\n\t{\n\t\tresult[i] = string.Substring(i);\n\t}\n\treturn result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end) \n{\n\tstring[] result = new string[string.length];\n\tfor (int i = start;\
    \ i < start + length; i++)\n\t{\n\t\tresult[i] = string.Substring(i);\n\t}\n\t\
    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step) \n{\n\tstring[] result = new string[string.length];\n\
    \tfor (int i = start; i < start + length; i++)\n\t{\n\t\tresult[i] = string.Substring(i);\n\
    \t}\n\treturn result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step, string separator) \n{\n\tstring\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmsl6k6q9.d(101): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpmsl6k6q9.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmsl6k6q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    prefixes[1] = string;\n    \n    for (int i = 2; i < prefixes.length;\
    \ i++)\n    {\n        prefixes[i] = prefixes[i-1] + prefixes[i];\n    }\n   \
    \ return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppkvryoi0.d(9): Error: `string` is used as a type

    /tmp/tmppkvryoi0.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppkvryoi0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.Substring(start, i - start);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int length, int startIndex) \n{\n    string\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5auennyx.d(101): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp5auennyx.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5auennyx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(i,\
    \ string.length);\n        i++;\n    }\n    return suffixes;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(i, string.length);\n        i++;\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        substrings[i] = string.substr(start, i);\n        i++;\n    }\n\
    \    return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start, i);\n        i++;\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        substrings[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, string separator)\
    \ \n{\n    string[] substrings = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        substrings[i] = string.substr(start,\
    \ i);\n        i++;\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph_mxguv2.d(106): Error: found `unittest` instead of statement

    /tmp/tmph_mxguv2.d(114): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_mxguv2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(start, i);\n        i++;\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbegb1z9.d(9): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(9): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(24): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(24): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(39): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(39): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(54): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(54): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(69): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(69): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(84): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(84): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(99): Error: `string` is used as a type

    /tmp/tmpmbegb1z9.d(99): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmbegb1z9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0j0zm0yg.d(9): Error: `string` is used as a type

    /tmp/tmp0j0zm0yg.d(9): Error: `string` is used as a type

    /tmp/tmp0j0zm0yg.d(11): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0j0zm0yg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_replacement(string string, string\
    \ replacement) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i).Replace(replacement,\
    \ \"\");\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_replacement_2(string\
    \ string, string replacement) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i).Replace(replacement,\
    \ \"\");\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_replacement_3(string\
    \ string, string replacement) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i).Replace(replacement,\
    \ \"\");\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_replacement_4(string\
    \ string, string replacement) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i).Replace(replacement,\
    \ \"\");\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_replacement_5(string\
    \ string, string replacement) \n{\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_d0iqr5.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_d0iqr5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end, step);\n    \
    \    i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxb3cpuon.d(9): Error: `string` is used as a type

    /tmp/tmpxb3cpuon.d(9): Error: `string` is used as a type

    /tmp/tmpxb3cpuon.d(11): Error: no property `Length` for type `string`

    /tmp/tmpxb3cpuon.d(24): Error: `string` is used as a type

    /tmp/tmpxb3cpuon.d(24): Error: `string` is used as a type

    /tmp/tmpxb3cpuon.d(26): Error: no property `Length` for type `string`

    /tmp/tmpxb3cpuon.d(39): Error: `string` is used as a type

    /tmp/tmpxb3cpuon.d(39): Error: `string` is used as a type

    /tmp/tmpxb3cpuon.d(41): Error: no property `Length` for type `string`

    /tmp/tmpxb3cpuon.d(54): Error: `string` is used as a type

    /tmp/tmpxb3cpuon.d(54): Error: `string` is used as a type

    /tmp/tmpxb3cpuon.d(56): Error: no property `Length` for type `string`

    /tmp/tmpxb3cpuon.d(69): Error: `string` is used as a type

    /tmp/tmpxb3cpuon.d(69): Error: `string` is used as a type

    /tmp/tmpxb3cpuon.d(71): Error: no property `Length` for type `string`

    /tmp/tmpxb3cpuon.d(84): Error: `string` is used as a type

    /tmp/tmpxb3cpuon.d(84): Error: `string'
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; i++)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.charAt(i);\n    }\n    return prefixes;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] suffixes = new string[string.length];\n\
    \    suffixes[string.length-1] = \"\";\n    for(int i = string.length-2; i >=\
    \ 0; i--)\n    {\n        suffixes[i] = string.charAt(i) + suffixes[i+1];\n  \
    \  }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; i++)\n    {\n        substrings[i]\
    \ = substrings[i-1] + string.substring(i,i+1);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = \"\";\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.substring(i,i+1);\n    }\n    return substrings;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    substrings[0] = \"\";\n    for(int i = start;\
    \ i < end; i++)\n    {\n        substrings[i] = substrings[i-1] + string.substring(i,i+1);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    for(int i = start; i < end; i+=step)\n    {\n\
    \        substrings[i] = substrings[i-1] + string.substring(i,i+1);\n    }\n \
    \   return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string separator) \n{\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1nk6d3kt.d(94): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1nk6d3kt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end,step);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(start,end,step,separator);\n       \
    \ i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp7m8gnhh.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp7m8gnhh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step, ++end2)\n\
    \    {\n        result[i] = string.Substring(i, end2);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2, int end3) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpizfq0yrl.d(101): Error: semicolon expected, not `unittest`

    /tmp/tmpizfq0yrl.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpizfq0yrl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int count) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptoxmkuts.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptoxmkuts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        prefixes[i] = string.Substring(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        suffixes[i] = string.Substring(i);\n    }\n\
    \    return suffixes;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] substrings = new string[string.length];\n    for(int i = 0;\
    \ i < string.length; i++)\n    {\n        substrings[i] = string.Substring(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = startIndex; i < string.length; i++)\n    {\n        substrings[i]\
    \ = string.Substring(i);\n    }\n    return substrings;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int startIndex, int endIndex) \n{\n   \
    \ string[] substrings = new string[string.length];\n    for(int i = startIndex;\
    \ i < endIndex; i++)\n    {\n        substrings[i] = string.Substring(i);\n  \
    \  }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = startIndex; i < endIndex; i +=\
    \ step)\n    {\n        substrings[i] = string.Substring(i);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ startIndex, int endIndex, int step, int startIndex2) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = startIndex; i < endIndex; i +=\
    \ step)\n    {\n        substrings[i] = string.Substring(i);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3dznv3pt.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3dznv3pt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings_with_replacements(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i\
    \ + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_offsets(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i, i\
    \ + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_offsets(string\
    \ string, int offset) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ i + offset);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_offsets(string\
    \ string, int offset, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ i + offset, length);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings_with_offsets(string string, int offset, int length, int offset2)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7jr1msbp.d(104): Error: found `unittest` instead of statement

    /tmp/tmp7jr1msbp.d(112): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jr1msbp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    prefixes[1] = string;\n    \n    for (int i = 2; i < prefixes.length;\
    \ i++)\n    {\n        prefixes[i] = prefixes[i-1] + prefixes[i];\n    }\n   \
    \ \n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    suffixes[0] = \"\
    \";\n    suffixes[string.length-1] = string;\n    \n    for (int i = 1; i < suffixes.length;\
    \ i++)\n    {\n        suffixes[i] = suffixes[i-1] + suffixes[i];\n    }\n   \
    \ \n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    substrings[string.length-1] = string;\n    \n    for (int i = 1;\
    \ i < substrings.length; i++)\n    {\n        substrings[i] = substrings[i-1]\
    \ + substrings[i];\n    }\n    \n    return substrings;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start) \n{\n    string[] substrings\
    \ = new string[string.length];\n    substrings[0] = \"\";\n    substrings[start]\
    \ = string;\n    \n    for (int i = start+1; i < substrings.length; i++)\n   \
    \ {\n        substrings[i] = substrings[i-1] + substrings[i];\n    }\n    \n \
    \   return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    substrings[start] = string;\n    \n    for (int\
    \ i = start+1; i < substrings.length; i++)\n    {\n        substrings[i] = substrings[i-1]\
    \ + substrings[i];\n    }\n    \n    for (int i = end-1; i >= 0; i--)\n    {\n\
    \        substrings[i+1] = substrings[i] + substrings[i+1];\n    }\n    \n   \
    \ return substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqxoi08tc.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqxoi08tc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(start, length, end, step);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn20z5btl.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn20z5btl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.Substring(i,length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int length, int start2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmsi5rnlj.d(102): Error: expression expected, not `unittest`

    /tmp/tmpmsi5rnlj.d(103): Error: semicolon expected, not `{`

    /tmp/tmpmsi5rnlj.d(110): Error: found `void` when expecting `;` following `for`
    condition

    /tmp/tmpmsi5rnlj.d(110): Error: found `{` when expecting `)`

    /tmp/tmpmsi5rnlj.d(110): Error: found `}` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmsi5rnlj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length, end, step);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxvlngeks.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvlngeks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw777gk74.d(9): Error: `string` is used as a type

    /tmp/tmpw777gk74.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw777gk74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i + 1);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \       result[i] = string.substr(i, i + 1);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \        result[i] = string.substr(i, i + 1);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; ++i)\n\
    \        result[i] = string.substr(i, i + 1);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n        result[i] = string.substr(i, i + 1);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ i + length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length, int startIndex) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i += step)\n\
    \        result[i] = string.substr(i, i + length, startIndex);\n    return result;\n\
    }\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkmhxlp56.d(9): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(9): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(20): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(20): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(21): Error: cannot implicitly convert expression `string.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpkmhxlp56.d(31): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(31): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(42): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(42): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(53): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(53): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(64): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(64): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(75): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(75): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(86): Error: `string` is used as a type

    /tmp/tmpkmhxlp56.d(86): Error: `string` i'
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int end2) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2z9r539.d(113): Error: basic type expected, not `unittest`

    /tmp/tmpd2z9r539.d(113): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2z9r539.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string current = string;\n    \n\
    \    while(current.length() > 0)\n    {\n        prefix = current + prefix;\n\
    \        current = current.substr(1);\n    }\n    \n    string[] result = new\
    \ string[prefix.length()];\n    for(int i = 0; i < prefix.length(); i++)\n   \
    \ {\n        result[i] = prefix;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0z0k6cs.d(9): Error: `string` is used as a type

    /tmp/tmpn0z0k6cs.d(10): Error: `string` is used as a type

    /tmp/tmpn0z0k6cs.d(18): Error: `string` is used as a type

    /tmp/tmpn0z0k6cs.d(18): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0z0k6cs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = string;\n    for(int i = 1; i < prefixes.length; i++)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.charAt(i);\n    }\n    return prefixes;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] suffixes = new string[string.length];\n\
    \    suffixes[string.length-1] = string;\n    for(int i = string.length-2; i >=\
    \ 0; i--)\n    {\n        suffixes[i] = string.charAt(i) + suffixes[i+1];\n  \
    \  }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = string;\n    for(int i = 1; i < substrings.length; i++)\n    {\n        substrings[i]\
    \ = substrings[i-1] + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = string;\n    for(int\
    \ i = start; i < substrings.length; i++)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    substrings[0] = string;\n    for(int i = start;\
    \ i < end; i++)\n    {\n        substrings[i] = substrings[i-1] + string.charAt(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = string;\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        substrings[i] = substrings[i-1] + string.charAt(i);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, int len) \n{\n    string\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsvyt6fi_.d(94): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpsvyt6fi_.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvyt6fi_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n        result[i] = string.substr(i);\n    return result;\n\
    }\n/*\n Return list of all prefixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_prefixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(string.length - i);\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(0, string.length - i);\n    return result;\n\
    }\n/*\n Return list of all prefixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_prefixes_and_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(0, i) + string.substr(i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_suffixes_and_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(i) + string.substr(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all prefixes from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n        result[i] = string.substr(string.length\
    \ - i) + string.substr(0, string.length - i);\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes_and_prefixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprndnl5yr.d(96): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprndnl5yr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i + 1, string.length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n        result[i] = string.substr(i, string.length);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ string.length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int size) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n       \
    \ result[i] = string.substr(i, size);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step, int size,\
    \ int start2) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i += step)\n        result[i] = string.substr(i, size, start2);\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjecrq3wz.d(90): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjecrq3wz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        suffixes[i] = string.substr(i);\n    }\n \
    \   return suffixes;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] substrings = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        substrings[i] = string.substr(i, string.length);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        substrings[i]\
    \ = string.substr(i, string.length);\n    }\n    return substrings;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ substrings = new string[string.length];\n    for(int i = start; i < end; i++)\n\
    \    {\n        substrings[i] = string.substr(i, string.length);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        substrings[i] = string.substr(i, string.length, separator);\n \
    \   }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnyp5wexn.d(9): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(9): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(22): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(22): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(23): Error: cannot implicitly convert expression `string.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpnyp5wexn.d(35): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(35): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(48): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(48): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(61): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(61): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(74): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(74): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(87): Error: `string` is used as a type

    /tmp/tmpnyp5wexn.d(87): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnyp5wexn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzlanrjs6.d(9): Error: `string` is used as a type

    /tmp/tmpzlanrjs6.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzlanrjs6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i).Reverse().ToString();\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i).Reverse().ToString();\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i).Reverse().ToString();\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i).Reverse().ToString();\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i).Reverse().ToString();\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbdhybcu2.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbdhybcu2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int end2) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, length, end, end2);\n    \
    \    i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjjtz2fw.d(9): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(9): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(24): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(24): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(39): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(39): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(54): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(54): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(69): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(69): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(84): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(84): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(99): Error: `string` is used as a type

    /tmp/tmpvjjtz2fw.d(99): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjjtz2fw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length, end, step);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxvlngeks.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvlngeks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, i);\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(start, end - start);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, end - start, step);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, bool include_end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, end - start, step, include_end);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwyxth07g.d(106): Error: basic type expected, not `unittest`

    /tmp/tmpwyxth07g.d(106): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwyxth07g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.Length];\n    for(int i = startIndex; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = startIndex; i < endIndex; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = startIndex; i < endIndex; i+=step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int step2) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = startIndex; i < endIndex; i+=step,i+=step2)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex, int step\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprcl34pse.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprcl34pse.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    \n    for\
    \ (int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    \n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    \n    for\
    \ (int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    \n    for\
    \ (int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   \n    for (int i = start; i < string.Length; i++)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    \n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] result\
    \ = new string[string.Length];\n    \n    for (int i = start; i < end; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    \n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] result = new string[string.Length];\n    \n    for (int\
    \ i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.Length];\n    \n    for (int i = start; i < end; i += step)\n\
    \    {\n        result[i] = string.Substring(i,\n                            \
    \         string.IndexOf(separator, i, StringComparison.OrdinalIgnoreCase));\n\
    \    }\n    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi3yksmsa.d(9): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(9): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(11): Error: no property `Length` for type `string`

    /tmp/tmpi3yksmsa.d(24): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(24): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(26): Error: no property `Length` for type `string`

    /tmp/tmpi3yksmsa.d(39): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(39): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(41): Error: no property `Length` for type `string`

    /tmp/tmpi3yksmsa.d(54): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(54): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(56): Error: no property `Length` for type `string`

    /tmp/tmpi3yksmsa.d(69): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(69): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(84): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(84): Error: `string` is used as a type

    /tmp/tmpi3yksmsa.d(99): Error: `string` is used as'
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end, int step, string separator) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphmsdgq7k.d(102): Error: expression expected, not `unittest`

    /tmp/tmphmsdgq7k.d(103): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmphmsdgq7k.d(104): Error: expression expected, not `alias`

    /tmp/tmphmsdgq7k.d(104): Error: found `candidate` when expecting `)`

    /tmp/tmphmsdgq7k.d(104): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphmsdgq7k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = string;\n    int i = 0;\n    while (i < prefixes.length)\n    {\n        prefixes[i+1]\
    \ = prefixes[i] + string.substr(0, i);\n        i += 1;\n    }\n    return prefixes;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes(string string) \n{\n    string[] suffixes\
    \ = new string[string.length];\n    suffixes[0] = string;\n    int i = string.length-1;\n\
    \    while (i >= 0)\n    {\n        suffixes[i+1] = suffixes[i] + string.substr(i);\n\
    \        i -= 1;\n    }\n    return suffixes;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = string;\n    int i = 0;\n    while (i < substrings.length)\n    {\n      \
    \  substrings[i+1] = substrings[i] + string.substr(i);\n        i += 1;\n    }\n\
    \    return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = string;\n    int i = start;\n    while (i < substrings.length)\n    {\n  \
    \      substrings[i+1] = substrings[i] + string.substr(i);\n        i += 1;\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = string;\n    int i = start;\n    while (i < substrings.length)\n\
    \    {\n        substrings[i+1] = substrings[i] + string.substr(i);\n        i\
    \ += 1;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = string;\n    int i = start;\n    while (i < substrings.length)\n\
    \    {\n        substrings[i+1] = substrings[i] + string.substr(i);\n        i\
    \ += step;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to lon\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqus4oa_d.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqus4oa_d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, string separator)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step, separator);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptuk0sxsd.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptuk0sxsd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int step)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoivy3vvr.d(9): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(9): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(11): Error: no property `Length` for type `string`

    /tmp/tmpoivy3vvr.d(24): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(24): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(26): Error: no property `Length` for type `string`

    /tmp/tmpoivy3vvr.d(39): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(39): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(41): Error: no property `Length` for type `string`

    /tmp/tmpoivy3vvr.d(54): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(54): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(56): Error: no property `Length` for type `string`

    /tmp/tmpoivy3vvr.d(69): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(69): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(71): Error: no property `Length` for type `string`

    /tmp/tmpoivy3vvr.d(84): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(84): Error: `string'
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(0, i);\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < string.length; i++)\n   \
    \     result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < start + length;\
    \ i++)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ step) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < start + length; i += step)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int step, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i += step)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int step, int end, int step2) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; i +=\
    \ step)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substring\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4z5gcnw9.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4z5gcnw9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, int count) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step, count);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps36iebde.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps36iebde.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwlvphndz.d(115): Error: expression expected, not `unittest`

    /tmp/tmpwlvphndz.d(116): Error: semicolon expected, not `{`

    /tmp/tmpwlvphndz.d(123): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwlvphndz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_repetition(string string) \n{\n  \
    \  string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_repetition_with_reverse(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings_with_repetition_with_reverse_and_prefix(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings_with_repetition_with_reverse_and_suffix(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings_with_repetition_with_reverse_and_prefix_and_suffix(string\
    \ string) \n{\n    string[] result = \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpap18zxps.d(101): Error: expression expected, not `unittest`

    /tmp/tmpap18zxps.d(102): Error: semicolon expected, not `{`

    /tmp/tmpap18zxps.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpap18zxps.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i+=step, count--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int count, string separator) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxe_09mhj.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxe_09mhj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string longest = \"\";\n    string\
    \ longest2 = \"\";\n    string longest3 = \"\";\n    string longest4 = \"\";\n\
    \    string longest5 = \"\";\n    string longest6 = \"\";\n    string longest7\
    \ = \"\";\n    string longest8 = \"\";\n    string longest9 = \"\";\n    string\
    \ longest10 = \"\";\n    string longest11 = \"\";\n    string longest12 = \"\"\
    ;\n    string longest13 = \"\";\n    string longest14 = \"\";\n    string longest15\
    \ = \"\";\n    string longest16 = \"\";\n    string longest17 = \"\";\n    string\
    \ longest18 = \"\";\n    string longest19 = \"\";\n    string longest20 = \"\"\
    ;\n    string longest21 = \"\";\n    string longest22 = \"\";\n    string longest23\
    \ = \"\";\n    string longest24 = \"\";\n    string longest25 = \"\";\n    string\
    \ longest26 = \"\";\n    string longest27 = \"\";\n    string longest28 = \"\"\
    ;\n    string longest29 = \"\";\n    string longest30 = \"\";\n    string longest31\
    \ = \"\";\n    string longest32 = \"\";\n    string longest33 = \"\";\n    string\
    \ longest34 = \"\";\n    string longest35 = \"\";\n    string longest36 = \"\"\
    ;\n    string longest37 = \"\";\n    string longest38 = \"\";\n    string longest39\
    \ = \"\";\n    string longest40 = \"\";\n    string longest41 = \"\";\n    string\
    \ longest42 = \"\";\n    string longest43 = \"\";\n    string longest44 = \"\"\
    ;\n    string longest45 = \"\";\n    string longest46 = \"\";\n    string longest47\
    \ = \"\";\n    string longest48 = \"\";\n    string longest49 = \"\";\n    string\
    \ longest50 = \"\";\n    string longest51 = \"\";\n    string longest52 = \"\"\
    ;\n    string longest53 = \"\";\n    string longest54 = \"\";\n    string longest55\
    \ = \"\";\n    string longest56 = \"\";\n    string longest57 = \"\";\n    string\
    \ longest58 = \"\";\n    string longest59 = \"\";\n    string longest60 = \"\"\
    ;\n    string longest61 = \"\";\n    string longest62 = \"\";\n    string longest63\
    \ = \"\";\n    string longest64 = \"\";\n    string longest65 = \"\";\n    string\
    \ longest66 = \"\";\n    string longest67 = \"\";\n    string longest68 = \"\"\
    ;\n    string longest69 = \"\";\n    string longest70 = \"\";\n    string longest71\
    \ = \"\";\n    string longest72 = \"\";\n    string longest73 = \"\";\n    string\
    \ longest74 = \"\";\n    string longest75 = \"\";\n    string longest76 = \"\"\
    ;\n    string longest77 = \"\";\n    string longest78 = \"\";\n    string longest79\
    \ = \"\";\n    string longest80 = \"\";\n    string longest81 = \"\";\n    string\
    \ \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpizw003sf.d(92): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpizw003sf.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpizw003sf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw777gk74.d(9): Error: `string` is used as a type

    /tmp/tmpw777gk74.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw777gk74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.substr(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i+=step)\n    {\n        result[i] = string.substr(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, int end2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step, j=end2; j<string.length; j+=step)\n\
    \    {\n        result[i] = string.substr(i, j);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2, int step2) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6_ng3h_.d(88): Error: found `;` when expecting `)`

    /tmp/tmpt6_ng3h_.d(88): Error: found `)` when expecting `;` following statement

    /tmp/tmpt6_ng3h_.d(101): Error: semicolon expected, not `unittest`

    /tmp/tmpt6_ng3h_.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6_ng3h_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = startIndex; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int step2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i += step2)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex, int step, int step2,\
    \ int step3) \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsh74gubp.d(99): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsh74gubp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string[] result = new string[string.size()];\n\
    \    int i = 0;\n    for(; i < string.size(); ++i)\n    {\n        prefix = prefix\
    \ + string[i];\n        result[i] = prefix;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \       \n*/\nstring[] all_suffixes(string string) \n{\n    string suffix = \"\
    \";\n    string[] result = new string[string.size()];\n    int i = 0;\n    for(;\
    \ i < string.size(); ++i)\n    {\n        suffix = string[string.size() - i -\
    \ 1] + suffix;\n        result[i] = suffix;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.size()];\n    int i = 0;\n    for(; i < string.size(); ++i)\n\
    \    {\n        result[i] = string.substr(i, string.size() - i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.size()];\n    int i = 0;\n    for(;\
    \ i < string.size(); ++i)\n    {\n        result[i] = string.substr(i, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.size()];\n\
    \    int i = 0;\n    for(; i < string.size(); ++i)\n    {\n        result[i] =\
    \ string.substr(i, length, start);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int length, int start, int end)\
    \ \n{\n    string[] result = new string[string.size()];\n    int i = 0;\n    for(;\
    \ i < string.size(); ++i)\n    {\n        result[i] = string.substr(i, length,\
    \ start, end);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end, int step) \n{\n    string[] result =\
    \ new string[string.size()];\n    int i = 0;\n    for(; i < string.size(); ++i)\n\
    \    {\n        result[i] = string.substr(i, length, start, end, step);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk45yfjsj.d(105): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk45yfjsj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsvxxmygm.d(9): Error: `string` is used as a type

    /tmp/tmpsvxxmygm.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvxxmygm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = start; i < end; i+=step, i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2, int end3) \n{\n    string[] result = new string[string.Length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemxps7v2.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemxps7v2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.Substring(start, i - start);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int length, int offset) \n{\n    string[] \nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2qc61gb.d(101): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpu2qc61gb.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2qc61gb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i + 1, string.length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n        result[i] = string.substr(i, string.length);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ string.length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n       \
    \ result[i] = string.substr(i, string.length);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int end2, int end3) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ string\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvo068a1t.d(89): Error: found `unittest` when expecting `,`

    /tmp/tmpvo068a1t.d(97): Error: found `void` when expecting `,`

    /tmp/tmpvo068a1t.d(97): Error: found `{` when expecting `,`

    /tmp/tmpvo068a1t.d(97): Error: expression expected, not `}`

    /tmp/tmpvo068a1t.d(97): Error: found `End of File` when expecting `,`

    /tmp/tmpvo068a1t.d(97): Error: found `End of File` when expecting `)`

    /tmp/tmpvo068a1t.d(97): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpvo068a1t.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvo068a1t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = start; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(i, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = start; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i, length, end, step);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbcu7votv.d(101): Error: identifier expected following `.`, not
    `unittest`

    /tmp/tmpbcu7votv.d(102): Error: found `{` when expecting `]`

    /tmp/tmpbcu7votv.d(103): Error: semicolon expected, not `alias`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbcu7votv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int end2) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length, end, end2);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5l_ia4zo.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5l_ia4zo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    \n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    string[]\
    \ result = new string[string.length()];\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        result[i] = prefix + suffix;\n        \n        for(int\
    \ j = i + 1; j < string.length(); j++)\n        {\n            result[j] = result[j]\
    \ + string[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3p81ri1z.d(9): Error: `string` is used as a type

    /tmp/tmp3p81ri1z.d(10): Error: `string` is used as a type

    /tmp/tmp3p81ri1z.d(12): Error: no property `length` for type `string`

    /tmp/tmp3p81ri1z.d(18): Error: `string` is used as a type

    /tmp/tmp3p81ri1z.d(18): Error: `string` is used as a type

    /tmp/tmp3p81ri1z.d(20): Error: no property `length` for type `string`

    /tmp/tmp3p81ri1z.d(24): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3p81ri1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(i, string.length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.substr(i, string.length, separator);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, string separator, int limit) \n{\n    string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp69enga4w.d(101): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp69enga4w.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69enga4w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(string.length-i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,string.length-i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(string.length-i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,string.length-i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(string.length-i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwi9onyz1.d(107): Error: semicolon expected following function declaration

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    \n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    string[]\
    \ result = new string[string.length()];\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        result[i] = prefix + suffix;\n        \n        for(int\
    \ j = i; j < string.length(); j++)\n        {\n            result[i] = result[i]\
    \ + string[j];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxxow3wp0.d(9): Error: `string` is used as a type

    /tmp/tmpxxow3wp0.d(10): Error: `string` is used as a type

    /tmp/tmpxxow3wp0.d(12): Error: no property `length` for type `string`

    /tmp/tmpxxow3wp0.d(18): Error: `string` is used as a type

    /tmp/tmpxxow3wp0.d(18): Error: `string` is used as a type

    /tmp/tmpxxow3wp0.d(20): Error: no property `length` for type `string`

    /tmp/tmpxxow3wp0.d(24): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxxow3wp0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\t\n\tfor(int i\
    \ = 0; i < string.length; i++)\n\t{\n\t\tresult[i] = string.substr(0, i);\n\t\
    }\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl9pdcxyt.d(9): Error: `string` is used as a type

    /tmp/tmpl9pdcxyt.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9pdcxyt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i + 1);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i + 1);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.substr(0, i, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int length, int startIndex) \n{\n    string[] result = new string[\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp324wow36.d(101): Error: expression expected, not `unittest`

    /tmp/tmp324wow36.d(102): Error: found `{` when expecting `]`

    /tmp/tmp324wow36.d(103): Error: semicolon expected, not `alias`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp324wow36.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.substr(i, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int length, int startIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ length, startIndex);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, int length, \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hfl6lzb.d(99): Error: basic type expected, not `unittest`

    /tmp/tmp_hfl6lzb.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hfl6lzb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_replacements(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_replacements(string string, int replacement)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings_with_replacements(string\
    \ string, int replacement, int replacement2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings_with_replacements(string\
    \ string, int replacement, int replacement2, int replacement3) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_replacements(string string, int replacement,\
    \ int replacement2, int replacement3, int replacement4) \n{\n    string[] result\
    \ = new string[string.length];\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfcsginru.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfcsginru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe19aswpc.d(106): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe19aswpc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end, int step, bool include_end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpprfjv1f5.d(102): Error: semicolon expected, not `unittest`

    /tmp/tmpprfjv1f5.d(102): Error: expression expected, not `unittest`

    /tmp/tmpprfjv1f5.d(103): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpprfjv1f5.d(104): Error: expression expected, not `alias`

    /tmp/tmpprfjv1f5.d(104): Error: found `candidate` when expecting `)`

    /tmp/tmpprfjv1f5.d(104): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprfjv1f5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzlanrjs6.d(9): Error: `string` is used as a type

    /tmp/tmpzlanrjs6.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzlanrjs6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; i++)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.charAt(i);\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpolijaco7.d(9): Error: `string` is used as a type

    /tmp/tmpolijaco7.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpolijaco7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0bofuh3q.d(9): Error: `string` is used as a type

    /tmp/tmp0bofuh3q.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0bofuh3q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\t\n\tfor(int i\
    \ = 0; i < string.length; ++i)\n\t{\n\t\tresult[i] = string.substr(0, i);\n\t\
    }\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvnkn46kl.d(9): Error: `string` is used as a type

    /tmp/tmpvnkn46kl.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvnkn46kl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int separator_length) \n{\n    string[] result = new\
    \ string[string.Length\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    string\
    \ result = \"\";\n    \n    for(int i = 0; i < string.length; i++)\n    {\n  \
    \      prefix = prefix + string[i];\n        suffix = suffix + string[i];\n  \
    \  }\n    \n    for(int i = 0; i < string.length; i++)\n    {\n        result\
    \ = result + prefix + suffix;\n    }\n    \n    string[] result = new string[result.length()];\n\
    \    \n    int i = 0;\n    while(i < result.length())\n    {\n        result[i]\
    \ = result.substring(i);\n        i = i + 1;\n    }\n    \n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes(string string) \n{\n    string prefix = \"\
    \";\n    string suffix = \"\";\n    string result = \"\";\n    \n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        prefix = prefix + string[i];\n\
    \        suffix = suffix + string[i];\n    }\n    \n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result = result + prefix + suffix;\n    }\n    \n    string[]\
    \ result = new string[result.length()];\n    \n    int i = 0;\n    while(i < result.length())\n\
    \    {\n        result[i] = result.substring(i);\n        i = i + 1;\n    }\n\
    \    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    string\
    \ result = \"\";\n    \n    for(int i = 0; i < string.length; i++)\n    {\n  \
    \      prefix = prefix + string[i];\n        suffix = suffix + string[i];\n  \
    \  }\n    \n    for(int i = 0; i < string.length; i++)\n    {\n        result\
    \ = result + prefix + suffix;\n    }\n    \n    string[] result = new string[result.length()];\n\
    \    \n    int i = 0;\n    while(i < result.length())\n    {\n        result[i]\
    \ = result.substring(i);\n        i = i + 1;\n    }\n    \n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    string result = \"\";\n    \n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    for(int i\
    \ = start; i < string.length; i++)\n    {\n        result = result + prefix +\
    \ suffix;\n    }\n    \n    string[] result = new string[result.length()];\n \
    \   \n    int i = 0;\n    while(i < result.length())\n    {\n        result[i]\
    \ = result.substring(i);\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfocd4lbh.d(127): Error: found `unittest` instead of statement

    /tmp/tmpfocd4lbh.d(135): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfocd4lbh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    int i = 0;\n  \
    \  for(;i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(i,\
    \ string.length);\n    }\n    return suffixes;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    int i\
    \ = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start, i);\n    }\n    return substrings;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    int i = 0;\n    for(;i < string.length; ++i)\n\
    \    {\n        substrings[i] = string.substr(start, i);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i] = string.substr(start,\
    \ i);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] substrings\
    \ = new string[string.length];\n    int i = 0;\n    for(;i < string.length; ++i)\n\
    \    {\n        substrings[i] = string.substr(start, i);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvgkrdzsh.d(101): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvgkrdzsh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i+=step, count--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int count, string separator) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxe_09mhj.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxe_09mhj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i+1,\
    \ string.Length - i);\n        i++;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all prefixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_prefixes_reverse(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n    {\n\
    \        result[i] = string.Substring(i+1, string.Length - i);\n        i++;\n\
    \    }\n    for(int i = string.Length-1; i >= 0; i--)\n    {\n        result[i]\
    \ = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n Return list of\
    \ all suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes_reverse(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(i+1,\
    \ string.Length - i);\n        i++;\n    }\n    for(int i = string.Length-1; i\
    \ >= 0; i--)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all prefixes from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_prefixes_reverse(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i+1, string.Length\
    \ - i);\n        i++;\n    }\n    for(int i = string.Length-1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i+1, string.Length - i);\n      \
    \  i++;\n    }\n    for(int i = string.Length-1; i >= 0; \nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4uhu4fb.d(104): Error: expression expected, not `unittest`

    /tmp/tmpv4uhu4fb.d(105): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4uhu4fb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpob0d5wc2.d(9): Error: `string` is used as a type

    /tmp/tmpob0d5wc2.d(9): Error: `string` is used as a type

    /tmp/tmpob0d5wc2.d(10): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpob0d5wc2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(start, end - start);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ bool include_end) \n{\n    string[] result = new string[string.length];\n  \
    \  int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start, step, include_end);\n        i += 1;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppo1x8ywk.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppo1x8ywk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int end2)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, end2);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc18qo994.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc18qo994.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all prefixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_prefixes_reverse(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i + 1, string.length\
    \ - i - 1);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all prefixes from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i\
    \ + 1, string.length - i - 1);\n    }\n    return result;\n}\n/*\n Return list\
    \ of all suffixes from shortest to longest of the input string\n        \n*/\n\
    string[] all_suffixes_and_prefixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all prefixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i + 1, string.length - i -\
    \ 1);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_and_prefixes_reverse(string\
    \ string) \n{\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgeeuwcv4.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgeeuwcv4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\t\n\tfor(int i\
    \ = 0; i < string.length; i++)\n\t{\n\t\tresult[i] = string.substr(0, i);\n\t\
    }\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl9pdcxyt.d(9): Error: `string` is used as a type

    /tmp/tmpl9pdcxyt.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9pdcxyt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i+1,\
    \ string.Length - i);\n        i++;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n    {\n\
    \        result[i] = string.Substring(i+1, string.Length - i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length);\n        i++;\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmcngn5_c.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmcngn5_c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.substr(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i+=step)\n    {\n        result[i] = string.substr(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string substr) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i+=step)\n    {\n  \
    \      if(string.substr(i) == substr)\n        {\n            result[i] = string.substr(i);\n\
    \        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string substr, int start2) \n{\n    string[]\
    \ result = new string\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw9m7ijet.d(104): Error: semicolon expected, not `unittest`

    /tmp/tmpw9m7ijet.d(104): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9m7ijet.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int step)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwxc5_7wg.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwxc5_7wg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = startIndex; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int startIndexInclusive) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i += step)\n    {\n        result[i]\
    \ = string.Substring(i + startIndexInclusive);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ow8ljod.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ow8ljod.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; i++)\n\
    \    {\n        result[i] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end, int step, string pattern) \n{\n    string[] result = new\
    \ string[string.length];\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3lvm_ll0.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3lvm_ll0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string pattern) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        if(string.Substring(i).Contains(pattern))\n        {\n          \
    \  result[i] = string.Substring(i);\n        }\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string pattern, int startIndex) \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidlguc3b.d(102): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidlguc3b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(0, i);\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < string.length; i++)\n   \
    \     result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < start + length;\
    \ i++)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < start + length; i++)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step, bool include_end) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < start + length; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to lon\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt2wzkqk6.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt2wzkqk6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(start);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step, ++end2)\n\
    \    {\n        result[i] = string.Substring(start, end2);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int end2, int end3) \n{\n    string[] result = \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2vvbx24y.d(101): Error: expression expected, not `unittest`

    /tmp/tmp2vvbx24y.d(102): Error: semicolon expected, not `{`

    /tmp/tmp2vvbx24y.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vvbx24y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end,step);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.substr(start,end,step,end2);\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to lon\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8n_kk9w.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8n_kk9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.Length];\n    int i =\
    \ 0;\n    while(i < string.Length)\n    {\n        prefixes[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes = new string[string.Length];\n    int i =\
    \ 0;\n    while(i < string.Length)\n    {\n        suffixes[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return suffixes;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.Length];\n    int i\
    \ = 0;\n    while(i < string.Length)\n    {\n        substrings[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] substrings = new\
    \ string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n    {\n\
    \        substrings[i] = string.Substring(start, i);\n        i++;\n    }\n  \
    \  return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] substrings = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        substrings[i] =\
    \ string.Substring(start, i);\n        i++;\n    }\n    return substrings;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.Length];\n    int i =\
    \ 0;\n    while(i < string.Length)\n    {\n        substrings[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, string separator)\
    \ \n{\n    string[] substrings = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        substrings[i] = string.Substring(start,\
    \ i);\n        i++\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp25rxulds.d(105): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp25rxulds.d(113): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp25rxulds.d(113): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25rxulds.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(0, i);\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < string.length; i++)\n   \
    \     result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ i += step)\n        result[i] = string.Substring(i);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.Substring(i,1);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, char character, int startIndex) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i += step)\n\
    \        result[i] = string.Substring(i,1,startIndex);\n    return result;\n}\n\
    /*\n Return list of \nunittest\n{\n    alias candidate = all_prefixes;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\",\
    \ \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8dy28_k.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8dy28_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(;i<string.length;i++)\n    {\n        result[i] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        result[i] = string.substr(string.length-i,i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        result[i] = string.substr(0,string.length-i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        result[i] = string.substr(start,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        result[i] = string.substr(start,end);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(;i<string.length;i++)\n    {\n        result[i] = string.substr(start,end,step);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        result[i] = string.substr(start,end,step,separator);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4mtwgj50.d(106): Error: basic type expected, not `unittest`

    /tmp/tmp4mtwgj50.d(106): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4mtwgj50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length, end, step);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxvlngeks.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvlngeks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int end2) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substring\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwa1sjqby.d(113): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwa1sjqby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    \n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    string[]\
    \ result = new string[string.length()];\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        result[i] = prefix + suffix;\n    }\n    \n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes(string string) \n{\n    string prefix = \"\
    \";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix = prefix + string[i];\n        suffix = suffix +\
    \ string[i];\n    }\n    \n    string[] result = new string[string.length()];\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        result[i]\
    \ = prefix + suffix;\n    }\n    \n    return result;\n}\n/*\n Return list of\
    \ all prefixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_prefixes_reverse(string string) \n{\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        prefix = prefix + string[i];\n        suffix = suffix + string[i];\n\
    \    }\n    \n    string[] result = new string[string.length()];\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        result[i] = prefix + suffix;\n\
    \    }\n    \n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    \n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    string[]\
    \ result = new string[string.length()];\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        result[i] = prefix + suffix;\n    }\n    \n    return result;\n\
    }\n/*\n Return list of all prefixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_prefixes_reverse(string string) \n{\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix = prefix + string[i];\n        suffix = suffix +\
    \ string[i];\n    }\n    \n    string[] result = new string[string.length()];\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        result[i]\
    \ = prefix + suffix;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5284aqlh.d(9): Error: `string` is used as a type

    /tmp/tmp5284aqlh.d(10): Error: `string` is used as a type

    /tmp/tmp5284aqlh.d(12): Error: no property `length` for type `string`

    /tmp/tmp5284aqlh.d(18): Error: `string` is used as a type

    /tmp/tmp5284aqlh.d(18): Error: `string` is used as a type

    /tmp/tmp5284aqlh.d(20): Error: no property `length` for type `string`

    /tmp/tmp5284aqlh.d(33): Error: `string` is used as a type

    /tmp/tmp5284aqlh.d(34): Error: `string` is used as a type

    /tmp/tmp5284aqlh.d(36): Error: no property `length` for type `string`

    /tmp/tmp5284aqlh.d(42): Error: `string` is used as a type

    /tmp/tmp5284aqlh.d(42): Error: `string` is used as a type

    /tmp/tmp5284aqlh.d(44): Error: no property `length` for type `string`

    /tmp/tmp5284aqlh.d(57): Error: `string` is used as a type

    /tmp/tmp5284aqlh.d(58): Error: `string` is used as a type

    /tmp/tmp5284aqlh.d(60): Error: no property `length` for type `string`

    /tmp/tmp5284aqlh.d(66): Error: `string` is used as a type

    /tmp/tmp5284aqlh.d(66): Error: `strin'
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all prefixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_prefixes_reverse(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(string.length\
    \ - i - 1, 1);\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(string.length\
    \ - i - 1, 1);\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i)\
    \ + string.substr(i);\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(0,\
    \ i) + string.substr(string.length - i - 1, 1);\n    }\n    return result;\n}\n\
    /*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_and_prefixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(0, i) + string.substr(i, string.length\
    \ - i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_and_prefixes_reverse(string\
    \ string\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp05gwui4.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp05gwui4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\tfor(int i = 0;\
    \ i < string.length; i++)\n\t\tresult[i] = string.substr(0, i);\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nryugh2.d(9): Error: `string` is used as a type

    /tmp/tmp6nryugh2.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nryugh2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(i\
    \ + 1, string.Length - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i + 1, string.Length - i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ string.Length - start);\n        i += 1;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int end2)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_pr1n7zz.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_pr1n7zz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n        result[i] = string.substr(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.substr(0, i + 1);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; i++)\n\
    \        result[i] = string.substr(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i++)\n       \
    \ result[i] = string.substr(i);\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i += step)\n\
    \        result[i] = string.substr(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step, string prefix)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n        result[i] = string.substr(i, prefix.length());\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, string prefix, string suffix) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \       result[i] = string.substr(i, prefix.length() + suffix.length());\n   \
    \ return result;\n}\n/*\n Return list of all substrings from \nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi1pxaa6o.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi1pxaa6o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        suffixes[i] = string.substr(i, string.length);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(i, string.length);\n    }\n    return substrings;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ substrings = new string[string.length];\n    for(int i = start; i < end; ++i)\n\
    \    {\n        substrings[i] = string.substr(i, string.length);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        substrings[i] = string.substr(i, string.length, separator);\n   \
    \ }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvv0qtef0.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv0qtef0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int len) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n    {\n\
    \        result[i] = string.substr(i, len);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int len, int start2) \n{\n    string[] \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxdsy3inj.d(101): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpxdsy3inj.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdsy3inj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        suffixes[i] = string.substr(i);\n    }\n \
    \   return suffixes;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] substrings = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        substrings[i] = string.substr(0, i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        substrings[i]\
    \ = string.substr(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i++)\n    {\n\
    \        substrings[i] = string.substr(i);\n    }\n    return substrings;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    for(int\
    \ i = start; i < end; i += step)\n    {\n        substrings[i] = string.substr(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        substrings[i] = string.substr(i);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvold7zqy.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvold7zqy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end,step);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int len) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.substr(start,end,step,len);\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to \n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8cgsics3.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8cgsics3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i<string.length;i++)\n    {\n        prefixes[i] = string.substr(0,i);\n\
    \    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    int i = 0;\n  \
    \  for(;i<string.length;i++)\n    {\n        suffixes[i] = string.substr(string.length-i,string.length);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    int i\
    \ = 0;\n    for(;i<string.length;i++)\n    {\n        substrings[i] = string.substr(i,string.length);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(;i<string.length;i++)\n    {\n        substrings[i] =\
    \ string.substr(start,i);\n    }\n    return substrings;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        substrings[i] = string.substr(start,end);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    int i =\
    \ 0;\n    for(;i<string.length;i++)\n    {\n        substrings[i] = string.substr(start,end,step);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] substrings\
    \ = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        substrings[i] = string.substr(start,end,step,separator);\n   \
    \ }\n    return substrings;\n}\n/*\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8fh9_gy6.d(101): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8fh9_gy6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.Length];\n    for(int i = startIndex; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = startIndex; i < endIndex; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int startIndex2) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = startIndex; i < endIndex; i += step, i += startIndex2)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int start\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4xwfh86x.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xwfh86x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8yfnehvz.d(9): Error: `string` is used as a type

    /tmp/tmp8yfnehvz.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8yfnehvz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\tfor (int i =\
    \ 0; i < string.length; i++)\n\t\tresult[i] = string.Substring(0, i);\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8x4dgpyg.d(9): Error: `string` is used as a type

    /tmp/tmp8x4dgpyg.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8x4dgpyg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i\
    \ + 1, string.length - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(i + 1, string.length - i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, end - start);\n        i +=\
    \ 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ end - start, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int count) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ end - start, step, count);\n        i += 1;\n    }\n    return result;\n}\n\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwmvl2yh2.d(9): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(9): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(24): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(24): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(39): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(39): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(54): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(54): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(69): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(69): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(84): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(84): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(99): Error: `string` is used as a type

    /tmp/tmpwmvl2yh2.d(99): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwmvl2yh2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpunjl151o.d(9): Error: `string` is used as a type

    /tmp/tmpunjl151o.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunjl151o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw777gk74.d(9): Error: `string` is used as a type

    /tmp/tmpw777gk74.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw777gk74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw777gk74.d(9): Error: `string` is used as a type

    /tmp/tmpw777gk74.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw777gk74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\t\n\tfor(int i\
    \ = 0; i < string.length; i++)\n\t{\n\t\tresult[i] = string.Substring(0, i);\n\
    \t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpubwj_tm9.d(9): Error: `string` is used as a type

    /tmp/tmpubwj_tm9.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubwj_tm9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all prefixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_prefixes_reverse(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Sub\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcf9q6mbc.d(104): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpcf9q6mbc.d(112): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpcf9q6mbc.d(112): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcf9q6mbc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string longest = \"\";\n    string\
    \ longest2 = \"\";\n    string longest3 = \"\";\n    string longest4 = \"\";\n\
    \    string longest5 = \"\";\n    string longest6 = \"\";\n    string longest7\
    \ = \"\";\n    string longest8 = \"\";\n    string longest9 = \"\";\n    string\
    \ longest10 = \"\";\n    string longest11 = \"\";\n    string longest12 = \"\"\
    ;\n    string longest13 = \"\";\n    string longest14 = \"\";\n    string longest15\
    \ = \"\";\n    string longest16 = \"\";\n    string longest17 = \"\";\n    string\
    \ longest18 = \"\";\n    string longest19 = \"\";\n    string longest20 = \"\"\
    ;\n    string longest21 = \"\";\n    string longest22 = \"\";\n    string longest23\
    \ = \"\";\n    string longest24 = \"\";\n    string longest25 = \"\";\n    string\
    \ longest26 = \"\";\n    string longest27 = \"\";\n    string longest28 = \"\"\
    ;\n    string longest29 = \"\";\n    string longest30 = \"\";\n    string longest31\
    \ = \"\";\n    string longest32 = \"\";\n    string longest33 = \"\";\n    string\
    \ longest34 = \"\";\n    string longest35 = \"\";\n    string longest36 = \"\"\
    ;\n    string longest37 = \"\";\n    string longest38 = \"\";\n    string longest39\
    \ = \"\";\n    string longest40 = \"\";\n    string longest41 = \"\";\n    string\
    \ longest42 = \"\";\n    string longest43 = \"\";\n    string longest44 = \"\"\
    ;\n    string longest45 = \"\";\n    string longest46 = \"\";\n    string longest47\
    \ = \"\";\n    string longest48 = \"\";\n    string longest49 = \"\";\n    string\
    \ longest50 = \"\";\n    string longest51 = \"\";\n    string longest52 = \"\"\
    ;\n    string longest53 = \"\";\n    string longest54 = \"\";\n    string longest55\
    \ = \"\";\n    string longest56 = \"\";\n    string longest57 = \"\";\n    string\
    \ longest58 = \"\";\n    string longest59 = \"\";\n    string longest60 = \"\"\
    ;\n    string longest61 = \"\";\n    string longest62 = \"\";\n    string longest63\
    \ = \"\";\n    string longest64 = \"\";\n    string longest65 = \"\";\n    string\
    \ longest66 = \"\";\n    string longest67 = \"\";\n    string longest68 = \"\"\
    ;\n    string longest69 = \"\";\n    string longest70 = \"\";\n    string longest71\
    \ = \"\";\n    string longest72 = \"\";\n    string longest73 = \"\";\n    string\
    \ longest74 = \"\";\n    string longest75 = \"\";\n    string longest76 = \"\"\
    ;\n    string longest77 = \"\";\n    string longest78 = \"\";\n    string longest79\
    \ = \"\";\n    string longest80 = \"\";\n    string longest81 = \"\";\n    string\
    \ \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpizw003sf.d(92): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpizw003sf.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpizw003sf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i, string.length);\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n        result[i] = string.substr(i, string.length);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ string.length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n       \
    \ result[i] = string.substr(i, string.length);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int end2, int step2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ string.length\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxr157go3.d(89): Error: found `unittest` when expecting `,`

    /tmp/tmpxr157go3.d(97): Error: found `void` when expecting `,`

    /tmp/tmpxr157go3.d(97): Error: found `{` when expecting `,`

    /tmp/tmpxr157go3.d(97): Error: expression expected, not `}`

    /tmp/tmpxr157go3.d(97): Error: found `End of File` when expecting `,`

    /tmp/tmpxr157go3.d(97): Error: found `End of File` when expecting `)`

    /tmp/tmpxr157go3.d(97): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpxr157go3.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxr157go3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(i,\
    \ end - start);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(i, end - start, step);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(i, end - start, step, count);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count, int step2) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(i, end - start, step, count, step2);\n\
    \        i += 1;\n    }\n    return result;\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil0pf5ia.d(108): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0pf5ia.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(;i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(;i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    for(;i < string.length; ++i)\n    {\n        result[i] = string.substr(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, i);\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    for(;i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(start, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int end2) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, i);\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwn8wiw8i.d(106): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwn8wiw8i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] prefixes = new string[string.length];\n\tfor(int i =\
    \ 0; i < string.length; ++i)\n\t{\n\t\tprefixes[i] = string.substr(0, i);\n\t\
    }\n\treturn prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz5soorq4.d(9): Error: `string` is used as a type

    /tmp/tmpz5soorq4.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz5soorq4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i + 1);\n    return result;\n\
    }\n/*\n Return list of all prefixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_prefixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.substr(0, string.length - i);\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n        result[i] = string.substr(0, string.length - i);\n    return\
    \ result;\n}\n/*\n Return list of all prefixes from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_prefixes_reverse(string string, int\
    \ length) \n{\n    string[] result = new string[length];\n    for(int i = 0; i\
    \ < length; ++i)\n        result[i] = string.substr(0, string.length - i);\n \
    \   return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes_reverse(string string,\
    \ int length) \n{\n    string[] result = new string[length];\n    for(int i =\
    \ length - 1; i >= 0; --i)\n        result[i] = string.substr(0, string.length\
    \ - i);\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string, int length, int start) \n{\n    string[] result = new string[length];\n\
    \    for(int i = start; i < length; ++i)\n        result[i] = string.substr(0,\
    \ string.length - i);\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string, int length, int start) \n{\n    string[] result = new string[length];\n\
    \    for(int i = start; i >= 0; --i)\n        result[i] = string.substr(0, string.length\
    \ - i);\n    return result;\n}\n/*\n Return list of all prefix\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8q5d9pvr.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8q5d9pvr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3azj8y3h.d(9): Error: `string` is used as a type

    /tmp/tmp3azj8y3h.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3azj8y3h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0j0zm0yg.d(9): Error: `string` is used as a type

    /tmp/tmp0j0zm0yg.d(9): Error: `string` is used as a type

    /tmp/tmp0j0zm0yg.d(11): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0j0zm0yg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, bool include_end)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step, include_end);\n        i++;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzt9kg_me.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzt9kg_me.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i\
    \ + 1, string.length - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(i + 1, string.length - i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxjzopik.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxjzopik.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(start, length, end, step);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn20z5btl.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn20z5btl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,i);\n\
    \    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    int i = 0;\n  \
    \  for(;i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(string.length-i,string.length);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    int i\
    \ = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i] = string.substr(0,string.length-i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start,string.length-i);\n    }\n    return substrings;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] substrings = new string[string.length];\n    int i = 0;\n    for(;i\
    \ < string.length; ++i)\n    {\n        substrings[i] = string.substr(start,end);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start,end,step);\n    }\n    return substrings;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start,end,step,separator\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcacj3yad.d(98): Error: found `unittest` when expecting `,`

    /tmp/tmpcacj3yad.d(106): Error: found `void` when expecting `,`

    /tmp/tmpcacj3yad.d(106): Error: found `{` when expecting `,`

    /tmp/tmpcacj3yad.d(106): Error: expression expected, not `}`

    /tmp/tmpcacj3yad.d(106): Error: found `End of File` when expecting `,`

    /tmp/tmpcacj3yad.d(106): Error: found `End of File` when expecting `)`

    /tmp/tmpcacj3yad.d(106): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpcacj3yad.d(106): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpcacj3yad.d(106): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcacj3yad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int count) \n{\n    string[] result = new string[string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa6kgfpw1.d(101): Error: found `unittest` when expecting `]`

    /tmp/tmpa6kgfpw1.d(102): Error: semicolon expected, not `{`

    /tmp/tmpa6kgfpw1.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6kgfpw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        prefixes[i] = string.Substring(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        suffixes[i] = string.Substring(i);\n    }\n\
    \    return suffixes;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] substrings = new string[string.length];\n    for(int i = 0;\
    \ i < string.length; i++)\n    {\n        substrings[i] = string.Substring(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        substrings[i]\
    \ = string.Substring(i);\n    }\n    return substrings;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i++)\n    {\n\
    \        substrings[i] = string.Substring(i);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    for(int\
    \ i = start; i < end; i+=step)\n    {\n        substrings[i] = string.Substring(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        substrings[i] = string.Substring(i,length);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf1wfhp6s.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1wfhp6s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = string;\n    for(int i = 1; i < prefixes.length; ++i)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.substr(0, i);\n    }\n    return prefixes;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \       \n*/\nstring[] all_suffixes(string string) \n{\n    string[] suffixes\
    \ = new string[string.length];\n    suffixes[suffixes.length-1] = string;\n  \
    \  for(int i = string.length-1; i >= 0; --i)\n    {\n        suffixes[i] = string.substr(0,\
    \ i) + suffixes[i+1];\n    }\n    return suffixes;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = string;\n    for(int i = 1; i < substrings.length; ++i)\n\
    \    {\n        substrings[i] = substrings[i-1] + string.substr(i);\n    }\n \
    \   return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = string;\n    for(int i = start; i < substrings.length; ++i)\n    {\n     \
    \   substrings[i] = substrings[i-1] + string.substr(i);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] substrings = new string[string.length];\n    substrings[0] = string;\n\
    \    for(int i = start; i < end; ++i)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.substr(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = string;\n    for(int\
    \ i = start; i < end; i += step)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.substr(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, char separator\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fgacbhg.d(92): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fgacbhg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.Length];\n    int i =\
    \ 0;\n    while(i < prefixes.Length)\n    {\n        prefixes[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpraifnjcs.d(9): Error: `string` is used as a type

    /tmp/tmpraifnjcs.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpraifnjcs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptzq48xrs.d(9): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(9): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(24): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(24): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(39): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(39): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(54): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(54): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(69): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(69): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(84): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(84): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(99): Error: `string` is used as a type

    /tmp/tmptzq48xrs.d(99): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptzq48xrs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(start, length);\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaoju4on7.d(9): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(9): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(24): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(24): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(39): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(39): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(54): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(54): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(69): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(69): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(84): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(84): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(99): Error: `string` is used as a type

    /tmp/tmpaoju4on7.d(99): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaoju4on7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(start, end - start);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n{\n    string[] result = new string[string.length];\n  \
    \  int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start, step, separator);\n        i += 1;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp56enl6or.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56enl6or.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int step)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoivy3vvr.d(9): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(9): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(11): Error: no property `Length` for type `string`

    /tmp/tmpoivy3vvr.d(24): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(24): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(26): Error: no property `Length` for type `string`

    /tmp/tmpoivy3vvr.d(39): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(39): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(41): Error: no property `Length` for type `string`

    /tmp/tmpoivy3vvr.d(54): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(54): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(56): Error: no property `Length` for type `string`

    /tmp/tmpoivy3vvr.d(69): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(69): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(71): Error: no property `Length` for type `string`

    /tmp/tmpoivy3vvr.d(84): Error: `string` is used as a type

    /tmp/tmpoivy3vvr.d(84): Error: `string'
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpob0d5wc2.d(9): Error: `string` is used as a type

    /tmp/tmpob0d5wc2.d(9): Error: `string` is used as a type

    /tmp/tmpob0d5wc2.d(10): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpob0d5wc2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(string.length-i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,string.length-i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i)\
    \ + string.substr(i,string.length);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all prefixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes_and_prefixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i) + string.substr(string.length-i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(string.length-i,string.length)\
    \ + string.substr(0,i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbdpw41rp.d(101): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbdpw41rp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzlanrjs6.d(9): Error: `string` is used as a type

    /tmp/tmpzlanrjs6.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzlanrjs6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int separator_length) \n{\n    string[] result = new\
    \ string[string.Length\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = startIndex; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int startIndexInclusive) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i += step)\n    {\n        result[i]\
    \ = string.Substring(i + startIndexInclusive);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr0o8actk.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr0o8actk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string current = string;\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        current = prefix + current;\n        result[i] = current;\n  \
    \      prefix = \"\";\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string suffix = \"\";\n    string current = string;\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        current = current + suffix;\n        result[i] = current;\n\
    \        suffix = \"\";\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string current = \"\";\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        current = current + string;\n        result[i] = current;\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string current = \"\";\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        current = current + string;\n        result[i] = current;\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ length, int start) \n{\n    string current = \"\";\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        current = current + string;\n        result[i] = current;\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ length, int start, int end) \n{\n    string current = \"\";\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        current = current + string;\n        result[i] = current;\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string current = \"\";\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_f9t4s_.d(108): Error: found `unittest` instead of statement

    /tmp/tmpk_f9t4s_.d(116): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_f9t4s_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, int length) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step, length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpod62wpk3.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpod62wpk3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,i);\n\
    \    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    int i = 0;\n  \
    \  for(;i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(string.length-i,string.length);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(string.length-i,string.length);\n\
    \    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(0,i);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(string.length-i,string.length);\n\
    \    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(0,i);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(string.length\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo4s03nl9.d(98): Error: found `unittest` when expecting `,`

    /tmp/tmpo4s03nl9.d(106): Error: found `void` when expecting `,`

    /tmp/tmpo4s03nl9.d(106): Error: found `{` when expecting `,`

    /tmp/tmpo4s03nl9.d(106): Error: expression expected, not `}`

    /tmp/tmpo4s03nl9.d(106): Error: found `End of File` when expecting `,`

    /tmp/tmpo4s03nl9.d(106): Error: found `End of File` when expecting `)`

    /tmp/tmpo4s03nl9.d(106): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpo4s03nl9.d(106): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpo4s03nl9.d(106): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4s03nl9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end) \n{\n \
    \   string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpag3qivpi.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpag3qivpi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbgqtwe7q.d(9): Error: `string` is used as a type

    /tmp/tmpbgqtwe7q.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbgqtwe7q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end) \n{\n    string[] result = new string[string.Length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(start, i - start);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, char character, int startIndex) \n{\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldxqsjml.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldxqsjml.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string prefix) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i) + prefix;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string prefix, string suffix) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_apw_kib.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_apw_kib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i + 1);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(i, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(i, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ length, step);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int step, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, length, step, end);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int step, int end, int step2) \n{\n    string[] result = new string[string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy1zwezco.d(101): Error: found `unittest` when expecting `]`

    /tmp/tmpy1zwezco.d(102): Error: semicolon expected, not `{`

    /tmp/tmpy1zwezco.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1zwezco.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, string separator)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step, separator);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptuk0sxsd.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptuk0sxsd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = startIndex; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, char character) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i += step)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex, int step, char character,\
    \ int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfurd_you.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfurd_you.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcgkqunu2.d(9): Error: `string` is used as a type

    /tmp/tmpcgkqunu2.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcgkqunu2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i + 1, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int len) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n    {\n\
    \        result[i] = string.substr(i, len);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int len, int start2) \n{\n    string\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjz6abgxy.d(101): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpjz6abgxy.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjz6abgxy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsvxxmygm.d(9): Error: `string` is used as a type

    /tmp/tmpsvxxmygm.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvxxmygm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int endSeparator) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovb1sk0x.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovb1sk0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    prefixes[1] = string;\n    for(int i = 2; i < prefixes.length;\
    \ i++)\n    {\n        prefixes[i] = prefixes[i-1] + string.substr(0, i);\n  \
    \  }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    suffixes[0] = \"\
    \";\n    suffixes[1] = string;\n    for(int i = 2; i < suffixes.length; i++)\n\
    \    {\n        suffixes[i] = string.substr(0, i) + suffixes[i-1];\n    }\n  \
    \  return suffixes;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] substrings = new string[string.length];\n    substrings[0] = \"\
    \";\n    substrings[1] = string;\n    for(int i = 2; i < substrings.length; i++)\n\
    \    {\n        substrings[i] = substrings[i-1] + string.substr(i);\n    }\n \
    \   return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    substrings[1] = string;\n    for(int i = 2; i < substrings.length;\
    \ i++)\n    {\n        substrings[i] = substrings[i-1] + string.substr(start,\
    \ i);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    substrings[1] = string;\n    for(int i = 2; i\
    \ < substrings.length; i++)\n    {\n        substrings[i] = substrings[i-1] +\
    \ string.substr(start, i);\n    }\n    return substrings;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] substrings = new string[string.length];\n    substrings[0] = \"\";\n\
    \    substrings[1] = string;\n    for(int i = 2; i < substrings.length; i++)\n\
    \    {\n        substrings[i] = substrings[i-1] + string.substr(start, i);\n \
    \   }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe95t5thi.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe95t5thi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(string.length-i,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(string.length-i,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i) +\
    \ string.substr(string.length-i,i);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_and_prefixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(0,i) + string.substr(0,string.length-i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(string.length-i,i)\
    \ + string.substr(0,i);\n        i++;\n    }\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcs9jwf73.d(107): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcs9jwf73.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,1);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character, int startIndex) \n{\n    string[] result = new string[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpncyg_7q9.d(101): Error: expression expected, not `unittest`

    /tmp/tmpncyg_7q9.d(102): Error: found `{` when expecting `]`

    /tmp/tmpncyg_7q9.d(103): Error: semicolon expected, not `alias`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpncyg_7q9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string prefix) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i) + prefix;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string prefix, string suffix) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_apw_kib.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_apw_kib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int separator_length) \n{\n    string[] result = new\
    \ string[string.Length\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(i\
    \ + 1, string.Length - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i + 1, string.Length - i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int end2)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkscurpmo.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkscurpmo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,1);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character, bool include_character) \n{\n    string[] result = new\
    \ string[string.Length];\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmposs5f75k.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmposs5f75k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprfnc228t.d(9): Error: `string` is used as a type

    /tmp/tmprfnc228t.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprfnc228t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string result = \"\";\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        prefix += string[i];\n      \
    \  result += prefix;\n    }\n    \n    string[] result = new string[result.length()];\n\
    \    for(int i = 0; i < result.length(); ++i)\n    {\n        result[i] = result.substr(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpckcb1ezg.d(9): Error: `string` is used as a type

    /tmp/tmpckcb1ezg.d(10): Error: `string` is used as a type

    /tmp/tmpckcb1ezg.d(17): Error: `string` is used as a type

    /tmp/tmpckcb1ezg.d(17): Error: `string` is used as a type

    /tmp/tmpckcb1ezg.d(17): Error: declaration `tmpckcb1ezg.all_prefixes.result` is
    already defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpckcb1ezg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpunjl151o.d(9): Error: `string` is used as a type

    /tmp/tmpunjl151o.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunjl151o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = string;\n    \n    for(int i = 1; i < prefixes.length; ++i)\n    {\n     \
    \   prefixes[i] = prefixes[i-1] + string.substr(0, i);\n    }\n    \n    return\
    \ prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp00xtq5b1.d(9): Error: `string` is used as a type

    /tmp/tmp00xtq5b1.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00xtq5b1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; i++)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.charAt(i);\n    }\n    return prefixes;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] suffixes = new string[string.length];\n\
    \    suffixes[string.length-1] = \"\";\n    for(int i = string.length-2; i >=\
    \ 0; i--)\n    {\n        suffixes[i] = string.charAt(i) + suffixes[i+1];\n  \
    \  }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; i++)\n    {\n        substrings[i]\
    \ = substrings[i-1] + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = \"\";\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    substrings[0] = \"\";\n    for(int i = start;\
    \ i < end; i++)\n    {\n        substrings[i] = substrings[i-1] + string.charAt(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    for(int i = start; i < end; i+=step)\n    {\n\
    \        substrings[i] = substrings[i-1] + string.charAt(i);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, int count) \n{\n    string[] substrings = new string[string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3r0usku_.d(94): Error: found `unittest` when expecting `]`

    /tmp/tmp3r0usku_.d(95): Error: semicolon expected, not `{`

    /tmp/tmp3r0usku_.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3r0usku_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i+=step)\n    {\n\
    \        result[i] = string.substr(i, length);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int length, int start2) \n{\n    string[] result = \nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplpzsqmc1.d(101): Error: expression expected, not `unittest`

    /tmp/tmplpzsqmc1.d(102): Error: semicolon expected, not `{`

    /tmp/tmplpzsqmc1.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpzsqmc1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i + 1);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(i, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; i++)\n    {\n        result[i] = string.substr(i, i + 1);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.substr(i,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.substr(i,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i+=step)\n    {\n\
    \        result[i] = string.substr(i, i + 1);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int count, string separator) \n{\n    string[] result = new string[string.length\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplkplgkqf.d(101): Error: found `unittest` when expecting `]`

    /tmp/tmplkplgkqf.d(102): Error: semicolon expected, not `{`

    /tmp/tmplkplgkqf.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkplgkqf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    \n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    string[]\
    \ result = new string[string.length()];\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        result[i] = prefix + suffix;\n        \n        for(int\
    \ j = i; j < string.length(); j++)\n        {\n            result[i] = result[i]\
    \ + string[j];\n        }\n    }\n    \n    return result;\n}\n/*\n Return list\
    \ of all suffixes from shortest to longest of the input string\n        \n*/\n\
    string[] all_suffixes(string string) \n{\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        prefix = prefix + string[i];\n        suffix = suffix + string[i];\n\
    \    }\n    \n    string[] result = new string[string.length()];\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        result[i] = prefix + suffix;\n\
    \        \n        for(int j = i; j < string.length(); j++)\n        {\n     \
    \       result[i] = result[i] + string[j];\n        }\n    }\n    \n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        prefix = prefix + string[i];\n     \
    \   suffix = suffix + string[i];\n    }\n    \n    string[] result = new string[string.length()];\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        result[i]\
    \ = prefix + suffix;\n        \n        for(int j = i; j < string.length(); j++)\n\
    \        {\n            result[i] = result[i] + string[j];\n        }\n    }\n\
    \    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix =\
    \ prefix + string[i];\n        suffix = suffix + string[i];\n    }\n    \n   \
    \ string[] result = new string[string.length()];\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        result[i] = prefix + suffix;\n       \
    \ \n        for(int j = i; j < string.length(); j++)\n        {\n            result[i]\
    \ = result[i] + string[j];\n        }\n    }\n    \n    return result;\n}\n/*\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkafk824b.d(119): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkafk824b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end, int step, int length2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_o4xhngq.d(102): Error: expression expected, not `unittest`

    /tmp/tmp_o4xhngq.d(103): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp_o4xhngq.d(104): Error: expression expected, not `alias`

    /tmp/tmp_o4xhngq.d(104): Error: found `candidate` when expecting `)`

    /tmp/tmp_o4xhngq.d(104): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_o4xhngq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        suffixes[i] = string.substr(i, string.length);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        substrings[i] = string.substr(i, length);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int length, int offset) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        substrings[i] = string.substr(i,\
    \ length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpybbgspfu.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybbgspfu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return suffixes;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        substrings[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start,i);\n        i++;\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] substrings = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        substrings[i] = string.substr(start,end);\n\
    \        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start,end,step);\n        i++;\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start,end,\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p9ntypf.d(104): Error: expression expected, not `unittest`

    /tmp/tmp7p9ntypf.d(105): Error: found `{` when expecting `,`

    /tmp/tmp7p9ntypf.d(106): Error: expression expected, not `alias`

    /tmp/tmp7p9ntypf.d(106): Error: found `candidate` when expecting `,`

    /tmp/tmp7p9ntypf.d(106): Error: expression expected, not `=`

    /tmp/tmp7p9ntypf.d(106): Error: found `all_prefixes` when expecting `,`

    /tmp/tmp7p9ntypf.d(106): Error: expression expected, not `;`

    /tmp/tmp7p9ntypf.d(108): Error: found `assert` when expecting `,`

    /tmp/tmp7p9ntypf.d(108): Error: found `;` when expecting `,`

    /tmp/tmp7p9ntypf.d(109): Error: found `;` when expecting `,`

    /tmp/tmp7p9ntypf.d(110): Error: found `;` when expecting `,`

    /tmp/tmp7p9ntypf.d(111): Error: expression expected, not `}`

    /tmp/tmp7p9ntypf.d(112): Error: found `void` when expecting `,`

    /tmp/tmp7p9ntypf.d(112): Error: found `{` when expecting `,`

    /tmp/tmp7p9ntypf.d(112): Error: expression expected, not `}`

    /tmp/tmp7p9ntypf.d(112): Error: found `End of File` when expecting `,`

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character, int startIndex) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr2cwe3u6.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2cwe3u6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end, int step, string separator) \n{\n    string[] result = new string[string.length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpih4d5hla.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpih4d5hla.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n        i += 1;\n    }\n    return prefixes;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] suffixes = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(i,\
    \ string.length);\n        i += 1;\n    }\n    return suffixes;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] substrings =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        substrings[i] = string.substr(i, string.length);\n        i +=\
    \ 1;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start, i);\n        i += 1;\n    }\n    return substrings;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] substrings = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        substrings[i] = string.substr(start, i);\n\
    \        i += 1;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start, i);\n        i += 1;\n    }\n    return substrings;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start, i);\n        i += 1;\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy5_3b0o5.d(106): Error: found `unittest` instead of statement

    /tmp/tmpy5_3b0o5.d(114): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5_3b0o5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.substr(i, string.length, separator);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, string separator, int startIndex) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i += step)\n\
    \    {\n        result[i] = string.substr(i, string.length, separator, startIndex);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp004dk1zz.d(99): Error: basic type expected, not `unittest`

    /tmp/tmp004dk1zz.d(99): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp004dk1zz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    prefixes[1] = string;\n    \n    for (int i = 2; i < prefixes.length;\
    \ i++)\n    {\n        prefixes[i] = prefixes[i-1] + prefixes[i];\n    }\n   \
    \ return prefixes;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] suffixes = new string[string.length];\n    suffixes[0] = \"\";\n\
    \    suffixes[string.length-1] = string;\n    \n    for (int i = string.length-2;\
    \ i >= 0; i--)\n    {\n        suffixes[i] = suffixes[i+1] + suffixes[i];\n  \
    \  }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    substrings[string.length-1] = string;\n    \n    for (int i = string.length-2;\
    \ i >= 0; i--)\n    {\n        substrings[i] = substrings[i+1] + substrings[i];\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    substrings[string.length-1] = string;\n    \n\
    \    for (int i = start; i < string.length; i++)\n    {\n        substrings[i]\
    \ = substrings[i+1] + substrings[i];\n    }\n    return substrings;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = \"\";\n    substrings[string.length-1]\
    \ = string;\n    \n    for (int i = start; i < end; i++)\n    {\n        substrings[i]\
    \ = substrings[i+1] + substrings[i];\n    }\n    return substrings;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    substrings[string.length-1] = string;\n    \n    for (int i = start;\
    \ i < end; i += step)\n    {\n        substrings[i] = substrings[i+1] + substrings[i];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt1v7yo1q.d(97): Error: found `unittest` instead of statement

    /tmp/tmpt1v7yo1q.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1v7yo1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpunjl151o.d(9): Error: `string` is used as a type

    /tmp/tmpunjl151o.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunjl151o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character, int startIndex) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphgykjrh_.d(102): Error: no identifier for declarator `int`

    /tmp/tmphgykjrh_.d(102): Error: expression expected, not `unittest`

    /tmp/tmphgykjrh_.d(103): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmphgykjrh_.d(104): Error: expression expected, not `alias`

    /tmp/tmphgykjrh_.d(104): Error: found `candidate` when expecting `)`

    /tmp/tmphgykjrh_.d(104): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphgykjrh_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp64sh05bh.d(9): Error: `string` is used as a type

    /tmp/tmp64sh05bh.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64sh05bh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; ++i)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.charAt(i);\n    }\n    return prefixes;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] suffixes = new string[string.length];\n\
    \    suffixes[string.length-1] = \"\";\n    for(int i = string.length-2; i >=\
    \ 0; --i)\n    {\n        suffixes[i] = string.charAt(i) + suffixes[i+1];\n  \
    \  }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; ++i)\n    {\n        substrings[i]\
    \ = substrings[i-1] + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = \"\";\n    for(int\
    \ i = start; i < string.length; ++i)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    substrings[0] = \"\";\n    for(int i = start;\
    \ i < end; ++i)\n    {\n        substrings[i] = substrings[i-1] + string.charAt(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    for(int i = start; i < end; i += step)\n    {\n\
    \        substrings[i] = substrings[i-1] + string.charAt(i);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, int length) \n{\n    string[] substrings = new string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpez6y2yth.d(94): Error: semicolon expected, not `unittest`

    /tmp/tmpez6y2yth.d(94): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpez6y2yth.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i + 1);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(i, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; i++)\n    {\n        result[i] = string.substr(i, i + 1);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.substr(i,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int size) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n    {\n\
    \        result[i] = string.substr(i, i + size);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int size, int step2) \n{\n    string[] result = new string[string.length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv6ygbxw8.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv6ygbxw8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.substr(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int step2) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i+=step, i+=step2)\n\
    \    {\n        result[i] = string.substr(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int step2, int step3) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwjwbrqsh.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwjwbrqsh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end, int step, string replacement) \n{\n    string[] result = new string[string.length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphgjd831_.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphgjd831_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int endSeparator) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovb1sk0x.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovb1sk0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcgkqunu2.d(9): Error: `string` is used as a type

    /tmp/tmpcgkqunu2.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcgkqunu2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string prefix) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.Substring(i) + prefix;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string prefix, string suffix) \n{\n    string[] result = new string[string.length\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgzskus29.d(101): Error: found `unittest` when expecting `]`

    /tmp/tmpgzskus29.d(102): Error: semicolon expected, not `{`

    /tmp/tmpgzskus29.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgzskus29.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \       result[i] = string.substr(i, i + 1);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.substr(i, length);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ step) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < string.length; i += step)\n        result[i] = string.substr(i, length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int step, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i += step)\n        result[i] = string.substr(i,\
    \ length, end);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int step, int end, int step2) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i += step)\n        result[i] = string.substr(i, length, end, step2);\n    return\
    \ result;\n}\n/*\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnzwted6h.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzwted6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = string;\n    for(int i = 1; i < prefixes.length; ++i)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.substr(0, i);\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdioyg2f2.d(9): Error: `string` is used as a type

    /tmp/tmpdioyg2f2.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdioyg2f2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(i, string.length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int size) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n    {\n\
    \        result[i] = string.substr(i, size);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int size, int offset) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8dsdjm66.d(101): Error: semicolon expected, not `unittest`

    /tmp/tmp8dsdjm66.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dsdjm66.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcgkqunu2.d(9): Error: `string` is used as a type

    /tmp/tmpcgkqunu2.d(9): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcgkqunu2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164672
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int count, int startIndex) \n{\n    string[] result = new string[string.length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3xxo9ayn.d(102): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3xxo9ayn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.Substring(i+1,\
    \ string.length);\n        i++;\n    }\n    return suffixes;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.Substring(i,i+1);\n        i++;\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        substrings[i] = string.Substring(start, i+1);\n        i++;\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.Substring(start, i+1);\n        i++;\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        substrings[i] = string.Substring(start,\
    \ i+1);\n        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, int length) \n{\n\
    \    string[] substrings = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        substrings[i] = \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmz339b6.d(104): Error: expression expected, not `unittest`

    /tmp/tmpsmz339b6.d(105): Error: found `{` when expecting `;` following statement

    /tmp/tmpsmz339b6.d(112): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmz339b6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164673
