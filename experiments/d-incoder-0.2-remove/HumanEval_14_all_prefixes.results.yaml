language: d
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(; i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    int i = 0;\n  \
    \  for(; i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(i,\
    \ string.length);\n    }\n    return suffixes;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    int i\
    \ = 0;\n    for(; i < string.length; ++i)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start, i);\n    }\n    return substrings;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        substrings[i] = string.substr(start, end - start);\n    }\n  \
    \  return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start, end - start, step);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start, end - start, step, end2);\n    }\n    return substrings;\n\
    }\n/*\n Return \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoxkqdqcs.d(101): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxkqdqcs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end,step);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(start,end,step,count);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3k1l1fcu.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3k1l1fcu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = start; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(i, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = start; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i, length, end, step);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyyhsyc7p.d(101): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmpyyhsyc7p.d(102): Error: found \''{\'' when expecting
    \'']\''\n/tmp/tmpyyhsyc7p.d(103): Error: semicolon expected, not \''alias\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyyhsyc7p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rcwz89c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.substr(i,string.length);\n        i++;\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwjihs1hh.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwjihs1hh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(string.length\
    \ - i - 1, string.length);\n        i++;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes_reverse(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.substr(0, string.length - i);\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return list of all prefixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i)\
    \ + string.substr(i, string.length);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_and_prefixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(0, string.length - i) + string.substr(i,\
    \ string.length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all prefixes from shortest to longest of the input string\n        \n*/\n\
    string[] all_prefixes_and_suffixes_reverse(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(string.length - i - 1, string.length)\
    \ + string.substr(0, string.length - i - 1);\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbobe0mcp.d(104): Error: found \''unittest\'' instead of statement\n/tmp/tmpbobe0mcp.d(112):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbobe0mcp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(i,\
    \ string.length);\n        i++;\n    }\n    return suffixes;\n}\n/*\n Return list\
    \ of all prefixes from shortest to longest of the input string\n        \n*/\n\
    string[] all_prefixes_reverse(string string) \n{\n    string[] prefixes = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        prefixes[i] = string.substr(string.length - i, string.length);\n    \
    \    i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(0,\
    \ string.length - i);\n        i++;\n    }\n    return suffixes;\n}\n/*\n Return\
    \ list of all prefixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_prefixes_reverse(string string) \n{\n    string[] prefixes =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        prefixes[i] = string.substr(string.length - i, string.length);\n\
    \        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(0,\
    \ string.length - i);\n        i++;\n    }\n    return suffixes;\n}\n/*\n Return\
    \ list of all prefixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_prefixes_reverse(string string) \n{\n    string[] prefixes =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuczcem04.d(103): Error: found \''unittest\'' instead of statement\n/tmp/tmpuczcem04.d(111):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuczcem04.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n    {\n\
    \        result[i] = string.substr(i, string.length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2, int end3) \n{\n    string[] \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ks9hhuh.d(101): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmp1ks9hhuh.d(109): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp1ks9hhuh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,1);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character, int length) \n{\n    string[] result = new string[string.length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz9g8rlsl.d(102): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz9g8rlsl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\t\n\tfor(int i\
    \ = 0; i < string.length; i++)\n\t{\n\t\tresult[i] = string.Substring(0, i);\n\
    \t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr986uv5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int end2) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length, end, end2);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpesngaorp.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpesngaorp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(string.length\
    \ - i, string.length);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes_reverse(string string) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(0,\
    \ string.length - i);\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i)\
    \ + string.substr(i, string.length);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all prefixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes_and_prefixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = string.length - 1; i >= 0; --i)\n\
    \    {\n        result[i] = string.substr(0, i) + string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(string.length\
    \ - i, string.length);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes_and_prefixes(string \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbg4qjlqi.d(99): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbg4qjlqi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\tfor (int i =\
    \ 0; i < string.length; i++)\n\t{\n\t\tresult[i] = string.Substring(0, i);\n\t\
    }\n\treturn result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \tstring[] result = new string[string.length];\n\tfor (int i = string.length -\
    \ 1; i >= 0; i--)\n\t{\n\t\tresult[i] = string.Substring(i);\n\t}\n\treturn result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n\tstring[] result =\
    \ new string[string.length];\n\tfor (int i = 0; i < string.length; i++)\n\t{\n\
    \t\tresult[i] = string.Substring(i);\n\t}\n\treturn result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start) \n{\n\tstring[] result = new\
    \ string[string.length];\n\tfor (int i = start; i < string.length; i++)\n\t{\n\
    \t\tresult[i] = string.Substring(i);\n\t}\n\treturn result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length) \n{\n\tstring[]\
    \ result = new string[string.length];\n\tfor (int i = start; i < start + length;\
    \ i++)\n\t{\n\t\tresult[i] = string.Substring(i);\n\t}\n\treturn result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end) \n{\n\tstring[] result = new string[string.length];\n\tfor (int i = start;\
    \ i < start + length; i++)\n\t{\n\t\tresult[i] = string.Substring(i);\n\t}\n\t\
    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step) \n{\n\tstring[] result = new string[string.length];\n\
    \tfor (int i = start; i < start + length; i++)\n\t{\n\t\tresult[i] = string.Substring(i);\n\
    \t}\n\treturn result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int length, int end, int step, string separator) \n{\n\tstring\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp430n7c2v.d(101): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmp430n7c2v.d(109): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp430n7c2v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    prefixes[1] = string;\n    \n    for (int i = 2; i < prefixes.length;\
    \ i++)\n    {\n        prefixes[i] = prefixes[i-1] + prefixes[i];\n    }\n   \
    \ return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm1swgp3t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.Substring(start, i - start);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int length, int startIndex) \n{\n    string\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbqy619_2.d(101): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpbqy619_2.d(109): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpbqy619_2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(i,\
    \ string.length);\n        i++;\n    }\n    return suffixes;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(i, string.length);\n        i++;\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        substrings[i] = string.substr(start, i);\n        i++;\n    }\n\
    \    return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start, i);\n        i++;\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        substrings[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, string separator)\
    \ \n{\n    string[] substrings = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        substrings[i] = string.substr(start,\
    \ i);\n        i++;\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxojuxtoe.d(106): Error: found \''unittest\'' instead of statement\n/tmp/tmpxojuxtoe.d(114):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxojuxtoe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(start, i);\n        i++;\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppah_4zep.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqq0aiisy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_replacement(string string, string\
    \ replacement) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i).Replace(replacement,\
    \ \"\");\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_replacement_2(string\
    \ string, string replacement) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i).Replace(replacement,\
    \ \"\");\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_replacement_3(string\
    \ string, string replacement) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i).Replace(replacement,\
    \ \"\");\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_replacement_4(string\
    \ string, string replacement) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i).Replace(replacement,\
    \ \"\");\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_replacement_5(string\
    \ string, string replacement) \n{\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdtnce7zp.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtnce7zp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end, step);\n    \
    \    i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2t3kaask.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; i++)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.charAt(i);\n    }\n    return prefixes;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] suffixes = new string[string.length];\n\
    \    suffixes[string.length-1] = \"\";\n    for(int i = string.length-2; i >=\
    \ 0; i--)\n    {\n        suffixes[i] = string.charAt(i) + suffixes[i+1];\n  \
    \  }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; i++)\n    {\n        substrings[i]\
    \ = substrings[i-1] + string.substring(i,i+1);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = \"\";\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.substring(i,i+1);\n    }\n    return substrings;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    substrings[0] = \"\";\n    for(int i = start;\
    \ i < end; i++)\n    {\n        substrings[i] = substrings[i-1] + string.substring(i,i+1);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    for(int i = start; i < end; i+=step)\n    {\n\
    \        substrings[i] = substrings[i-1] + string.substring(i,i+1);\n    }\n \
    \   return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string separator) \n{\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfwsfvd5a.d(94): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwsfvd5a.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end,step);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(start,end,step,separator);\n       \
    \ i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6y96a2c3.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6y96a2c3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step, ++end2)\n\
    \    {\n        result[i] = string.Substring(i, end2);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2, int end3) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0pqt3vee.d(101): Error: semicolon expected, not \''unittest\''\n/tmp/tmp0pqt3vee.d(101):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp0pqt3vee.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int count) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpceehg9ho.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpceehg9ho.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        prefixes[i] = string.Substring(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        suffixes[i] = string.Substring(i);\n    }\n\
    \    return suffixes;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] substrings = new string[string.length];\n    for(int i = 0;\
    \ i < string.length; i++)\n    {\n        substrings[i] = string.Substring(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = startIndex; i < string.length; i++)\n    {\n        substrings[i]\
    \ = string.Substring(i);\n    }\n    return substrings;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int startIndex, int endIndex) \n{\n   \
    \ string[] substrings = new string[string.length];\n    for(int i = startIndex;\
    \ i < endIndex; i++)\n    {\n        substrings[i] = string.Substring(i);\n  \
    \  }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = startIndex; i < endIndex; i +=\
    \ step)\n    {\n        substrings[i] = string.Substring(i);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ startIndex, int endIndex, int step, int startIndex2) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = startIndex; i < endIndex; i +=\
    \ step)\n    {\n        substrings[i] = string.Substring(i);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp68pkko8c.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp68pkko8c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings_with_replacements(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i\
    \ + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_offsets(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i, i\
    \ + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_offsets(string\
    \ string, int offset) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ i + offset);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings_with_offsets(string\
    \ string, int offset, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ i + offset, length);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings_with_offsets(string string, int offset, int length, int offset2)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph3j7we8c.d(104): Error: found \''unittest\'' instead of statement\n/tmp/tmph3j7we8c.d(112):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph3j7we8c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    prefixes[1] = string;\n    \n    for (int i = 2; i < prefixes.length;\
    \ i++)\n    {\n        prefixes[i] = prefixes[i-1] + prefixes[i];\n    }\n   \
    \ \n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    suffixes[0] = \"\
    \";\n    suffixes[string.length-1] = string;\n    \n    for (int i = 1; i < suffixes.length;\
    \ i++)\n    {\n        suffixes[i] = suffixes[i-1] + suffixes[i];\n    }\n   \
    \ \n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    substrings[string.length-1] = string;\n    \n    for (int i = 1;\
    \ i < substrings.length; i++)\n    {\n        substrings[i] = substrings[i-1]\
    \ + substrings[i];\n    }\n    \n    return substrings;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start) \n{\n    string[] substrings\
    \ = new string[string.length];\n    substrings[0] = \"\";\n    substrings[start]\
    \ = string;\n    \n    for (int i = start+1; i < substrings.length; i++)\n   \
    \ {\n        substrings[i] = substrings[i-1] + substrings[i];\n    }\n    \n \
    \   return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    substrings[start] = string;\n    \n    for (int\
    \ i = start+1; i < substrings.length; i++)\n    {\n        substrings[i] = substrings[i-1]\
    \ + substrings[i];\n    }\n    \n    for (int i = end-1; i >= 0; i--)\n    {\n\
    \        substrings[i+1] = substrings[i] + substrings[i+1];\n    }\n    \n   \
    \ return substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv9ov3m0z.d(102): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv9ov3m0z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(start, length, end, step);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20hl6x2l.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20hl6x2l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.Substring(i,length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int length, int start2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqy6yl11_.d(102): Error: expression expected, not \''unittest\''\n/tmp/tmpqy6yl11_.d(103):
    Error: semicolon expected, not \''{\''\n/tmp/tmpqy6yl11_.d(110): Error: found
    \''void\'' when expecting \'';\'' following for condition\n/tmp/tmpqy6yl11_.d(110):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpqy6yl11_.d(110): Error: found
    \''}\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqy6yl11_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length, end, step);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzdt1dirz.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzdt1dirz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7chmyqu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i + 1);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \       result[i] = string.substr(i, i + 1);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \        result[i] = string.substr(i, i + 1);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; ++i)\n\
    \        result[i] = string.substr(i, i + 1);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n        result[i] = string.substr(i, i + 1);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ i + length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length, int startIndex) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i += step)\n\
    \        result[i] = string.substr(i, i + length, startIndex);\n    return result;\n\
    }\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqhxy41r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int end2) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8wkvb34w.d(113): Error: basic type expected, not unittest\n/tmp/tmp8wkvb34w.d(113):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8wkvb34w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string current = string;\n    \n\
    \    while(current.length() > 0)\n    {\n        prefix = current + prefix;\n\
    \        current = current.substr(1);\n    }\n    \n    string[] result = new\
    \ string[prefix.length()];\n    for(int i = 0; i < prefix.length(); i++)\n   \
    \ {\n        result[i] = prefix;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87chmyll.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = string;\n    for(int i = 1; i < prefixes.length; i++)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.charAt(i);\n    }\n    return prefixes;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] suffixes = new string[string.length];\n\
    \    suffixes[string.length-1] = string;\n    for(int i = string.length-2; i >=\
    \ 0; i--)\n    {\n        suffixes[i] = string.charAt(i) + suffixes[i+1];\n  \
    \  }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = string;\n    for(int i = 1; i < substrings.length; i++)\n    {\n        substrings[i]\
    \ = substrings[i-1] + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = string;\n    for(int\
    \ i = start; i < substrings.length; i++)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    substrings[0] = string;\n    for(int i = start;\
    \ i < end; i++)\n    {\n        substrings[i] = substrings[i-1] + string.charAt(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = string;\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        substrings[i] = substrings[i-1] + string.charAt(i);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, int len) \n{\n    string\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpumiv7_m0.d(94): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmpumiv7_m0.d(102): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpumiv7_m0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(; i\
    \ < string.length; ++i)\n        result[i] = string.substr(i);\n    return result;\n\
    }\n/*\n Return list of all prefixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_prefixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(string.length - i);\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(0, string.length - i);\n    return result;\n\
    }\n/*\n Return list of all prefixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_prefixes_and_suffixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\n        result[i] = string.substr(0, i) + string.substr(i);\n    return\
    \ result;\n}\n/*\n Return list of all suffixes from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_suffixes_and_prefixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n        result[i] = string.substr(i) + string.substr(0,\
    \ i);\n    return result;\n}\n/*\n Return list of all prefixes from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n        result[i] = string.substr(string.length\
    \ - i) + string.substr(0, string.length - i);\n    return result;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes_and_prefixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    for(; i < string.length;\
    \ ++i)\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz7s1fmy1.d(96): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz7s1fmy1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i + 1, string.length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n        result[i] = string.substr(i, string.length);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ string.length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int size) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n       \
    \ result[i] = string.substr(i, size);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step, int size,\
    \ int start2) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i += step)\n        result[i] = string.substr(i, size, start2);\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphxgfgcf7.d(90): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphxgfgcf7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        suffixes[i] = string.substr(i);\n    }\n \
    \   return suffixes;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] substrings = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        substrings[i] = string.substr(i, string.length);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        substrings[i]\
    \ = string.substr(i, string.length);\n    }\n    return substrings;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ substrings = new string[string.length];\n    for(int i = start; i < end; i++)\n\
    \    {\n        substrings[i] = string.substr(i, string.length);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        substrings[i] = string.substr(i, string.length, separator);\n \
    \   }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8khcuj5y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph5mzz0mm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i).Reverse().ToString();\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i).Reverse().ToString();\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i).Reverse().ToString();\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i).Reverse().ToString();\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i).Reverse().ToString();\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8km8yjw_.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8km8yjw_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int end2) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, length, end, end2);\n    \
    \    i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\n\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9jza6e_g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length, end, step);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzdt1dirz.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzdt1dirz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, i);\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(start, end - start);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, end - start, step);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, bool include_end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(; i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, end - start, step, include_end);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq29m9yfa.d(106): Error: basic type expected, not unittest\n/tmp/tmpq29m9yfa.d(106):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq29m9yfa.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.Length];\n    for(int i = startIndex; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = startIndex; i < endIndex; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = startIndex; i < endIndex; i+=step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int step2) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = startIndex; i < endIndex; i+=step,i+=step2)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex, int step\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbdih6jy3.d(99): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbdih6jy3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    \n    for\
    \ (int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    \n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    \n    for\
    \ (int i = string.Length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    \n    for\
    \ (int i = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   \n    for (int i = start; i < string.Length; i++)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    \n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] result\
    \ = new string[string.Length];\n    \n    for (int i = start; i < end; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    \n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] result = new string[string.Length];\n    \n    for (int\
    \ i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.Length];\n    \n    for (int i = start; i < end; i += step)\n\
    \    {\n        result[i] = string.Substring(i,\n                            \
    \         string.IndexOf(separator, i, StringComparison.OrdinalIgnoreCase));\n\
    \    }\n    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ezf74qy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end, int step, string separator) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi49uhoxb.d(102): Error: expression expected, not \''unittest\''\n/tmp/tmpi49uhoxb.d(103):
    Error: found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpi49uhoxb.d(104):
    Error: expression expected, not \''alias\''\n/tmp/tmpi49uhoxb.d(104): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpi49uhoxb.d(104): Error: found
    \''=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi49uhoxb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = string;\n    int i = 0;\n    while (i < prefixes.length)\n    {\n        prefixes[i+1]\
    \ = prefixes[i] + string.substr(0, i);\n        i += 1;\n    }\n    return prefixes;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes(string string) \n{\n    string[] suffixes\
    \ = new string[string.length];\n    suffixes[0] = string;\n    int i = string.length-1;\n\
    \    while (i >= 0)\n    {\n        suffixes[i+1] = suffixes[i] + string.substr(i);\n\
    \        i -= 1;\n    }\n    return suffixes;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = string;\n    int i = 0;\n    while (i < substrings.length)\n    {\n      \
    \  substrings[i+1] = substrings[i] + string.substr(i);\n        i += 1;\n    }\n\
    \    return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = string;\n    int i = start;\n    while (i < substrings.length)\n    {\n  \
    \      substrings[i+1] = substrings[i] + string.substr(i);\n        i += 1;\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = string;\n    int i = start;\n    while (i < substrings.length)\n\
    \    {\n        substrings[i+1] = substrings[i] + string.substr(i);\n        i\
    \ += 1;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = string;\n    int i = start;\n    while (i < substrings.length)\n\
    \    {\n        substrings[i+1] = substrings[i] + string.substr(i);\n        i\
    \ += step;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to lon\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1h5ap1ml.d(99): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1h5ap1ml.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, string separator)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step, separator);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_okpmsj4.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_okpmsj4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int step)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmtpaeu3x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(0, i);\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < string.length; i++)\n   \
    \     result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < start + length;\
    \ i++)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ step) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < start + length; i += step)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int step, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i += step)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int step, int end, int step2) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; i +=\
    \ step)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substring\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_y0gugkb.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_y0gugkb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, int count) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step, count);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd6anxc3s.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6anxc3s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5brq8602.d(115): Error: expression expected, not \''unittest\''\n/tmp/tmp5brq8602.d(116):
    Error: semicolon expected, not \''{\''\n/tmp/tmp5brq8602.d(123): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5brq8602.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_repetition(string string) \n{\n  \
    \  string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_repetition_with_reverse(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = 0; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings_with_repetition_with_reverse_and_prefix(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings_with_repetition_with_reverse_and_suffix(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings_with_repetition_with_reverse_and_prefix_and_suffix(string\
    \ string) \n{\n    string[] result = \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7arswd5w.d(101): Error: expression expected, not \''unittest\''\n/tmp/tmp7arswd5w.d(102):
    Error: semicolon expected, not \''{\''\n/tmp/tmp7arswd5w.d(109): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7arswd5w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i+=step, count--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int count, string separator) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdun17iqe.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdun17iqe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string longest = \"\";\n    string\
    \ longest2 = \"\";\n    string longest3 = \"\";\n    string longest4 = \"\";\n\
    \    string longest5 = \"\";\n    string longest6 = \"\";\n    string longest7\
    \ = \"\";\n    string longest8 = \"\";\n    string longest9 = \"\";\n    string\
    \ longest10 = \"\";\n    string longest11 = \"\";\n    string longest12 = \"\"\
    ;\n    string longest13 = \"\";\n    string longest14 = \"\";\n    string longest15\
    \ = \"\";\n    string longest16 = \"\";\n    string longest17 = \"\";\n    string\
    \ longest18 = \"\";\n    string longest19 = \"\";\n    string longest20 = \"\"\
    ;\n    string longest21 = \"\";\n    string longest22 = \"\";\n    string longest23\
    \ = \"\";\n    string longest24 = \"\";\n    string longest25 = \"\";\n    string\
    \ longest26 = \"\";\n    string longest27 = \"\";\n    string longest28 = \"\"\
    ;\n    string longest29 = \"\";\n    string longest30 = \"\";\n    string longest31\
    \ = \"\";\n    string longest32 = \"\";\n    string longest33 = \"\";\n    string\
    \ longest34 = \"\";\n    string longest35 = \"\";\n    string longest36 = \"\"\
    ;\n    string longest37 = \"\";\n    string longest38 = \"\";\n    string longest39\
    \ = \"\";\n    string longest40 = \"\";\n    string longest41 = \"\";\n    string\
    \ longest42 = \"\";\n    string longest43 = \"\";\n    string longest44 = \"\"\
    ;\n    string longest45 = \"\";\n    string longest46 = \"\";\n    string longest47\
    \ = \"\";\n    string longest48 = \"\";\n    string longest49 = \"\";\n    string\
    \ longest50 = \"\";\n    string longest51 = \"\";\n    string longest52 = \"\"\
    ;\n    string longest53 = \"\";\n    string longest54 = \"\";\n    string longest55\
    \ = \"\";\n    string longest56 = \"\";\n    string longest57 = \"\";\n    string\
    \ longest58 = \"\";\n    string longest59 = \"\";\n    string longest60 = \"\"\
    ;\n    string longest61 = \"\";\n    string longest62 = \"\";\n    string longest63\
    \ = \"\";\n    string longest64 = \"\";\n    string longest65 = \"\";\n    string\
    \ longest66 = \"\";\n    string longest67 = \"\";\n    string longest68 = \"\"\
    ;\n    string longest69 = \"\";\n    string longest70 = \"\";\n    string longest71\
    \ = \"\";\n    string longest72 = \"\";\n    string longest73 = \"\";\n    string\
    \ longest74 = \"\";\n    string longest75 = \"\";\n    string longest76 = \"\"\
    ;\n    string longest77 = \"\";\n    string longest78 = \"\";\n    string longest79\
    \ = \"\";\n    string longest80 = \"\";\n    string longest81 = \"\";\n    string\
    \ \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8pth83ww.d(92): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmp8pth83ww.d(100): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8pth83ww.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7chmyqu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.substr(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i+=step)\n    {\n        result[i] = string.substr(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, int end2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step, j=end2; j<string.length; j+=step)\n\
    \    {\n        result[i] = string.substr(i, j);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2, int step2) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7o92bc7y.d(88): Error: found \'';\'' when expecting \'')\''\n/tmp/tmp7o92bc7y.d(88):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmp7o92bc7y.d(101):
    Error: semicolon expected, not \''unittest\''\n/tmp/tmp7o92bc7y.d(101): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7o92bc7y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = startIndex; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int step2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i += step2)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex, int step, int step2,\
    \ int step3) \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbfj06mbh.d(99): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbfj06mbh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string[] result = new string[string.size()];\n\
    \    int i = 0;\n    for(; i < string.size(); ++i)\n    {\n        prefix = prefix\
    \ + string[i];\n        result[i] = prefix;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \       \n*/\nstring[] all_suffixes(string string) \n{\n    string suffix = \"\
    \";\n    string[] result = new string[string.size()];\n    int i = 0;\n    for(;\
    \ i < string.size(); ++i)\n    {\n        suffix = string[string.size() - i -\
    \ 1] + suffix;\n        result[i] = suffix;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.size()];\n    int i = 0;\n    for(; i < string.size(); ++i)\n\
    \    {\n        result[i] = string.substr(i, string.size() - i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.size()];\n    int i = 0;\n    for(;\
    \ i < string.size(); ++i)\n    {\n        result[i] = string.substr(i, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int length, int start) \n{\n    string[] result = new string[string.size()];\n\
    \    int i = 0;\n    for(; i < string.size(); ++i)\n    {\n        result[i] =\
    \ string.substr(i, length, start);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int length, int start, int end)\
    \ \n{\n    string[] result = new string[string.size()];\n    int i = 0;\n    for(;\
    \ i < string.size(); ++i)\n    {\n        result[i] = string.substr(i, length,\
    \ start, end);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int length, int start, int end, int step) \n{\n    string[] result =\
    \ new string[string.size()];\n    int i = 0;\n    for(; i < string.size(); ++i)\n\
    \    {\n        result[i] = string.substr(i, length, start, end, step);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp47a_a9mw.d(105): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47a_a9mw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1w8af45.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = start; i < end; i+=step, i++)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2, int end3) \n{\n    string[] result = new string[string.Length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplk5azcsd.d(102): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplk5azcsd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.Substring(start, i - start);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int length, int offset) \n{\n    string[] \nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcp7ze6go.d(101): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpcp7ze6go.d(109): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpcp7ze6go.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i + 1, string.length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n        result[i] = string.substr(i, string.length);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ string.length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n       \
    \ result[i] = string.substr(i, string.length);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int end2, int end3) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ string\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcmikmz1p.d(89): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpcmikmz1p.d(97):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpcmikmz1p.d(97): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpcmikmz1p.d(97): Error: expression
    expected, not \''}\''\n/tmp/tmpcmikmz1p.d(97): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpcmikmz1p.d(97): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpcmikmz1p.d(97):
    Error: found \''EOF\'' when expecting \'';\'' following statement\n/tmp/tmpcmikmz1p.d(97):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmikmz1p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = start; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(i, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < string.Length; i++)\n    {\n        result[i] = string.Substring(i,\
    \ length, end);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    for(int i = start; i < string.Length; i++)\n\
    \    {\n        result[i] = string.Substring(i, length, end, step);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyyhsyc7p.d(101): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmpyyhsyc7p.d(102): Error: found \''{\'' when expecting
    \'']\''\n/tmp/tmpyyhsyc7p.d(103): Error: semicolon expected, not \''alias\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyyhsyc7p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int end2) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length, end, end2);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpesngaorp.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpesngaorp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    \n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    string[]\
    \ result = new string[string.length()];\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        result[i] = prefix + suffix;\n        \n        for(int\
    \ j = i + 1; j < string.length(); j++)\n        {\n            result[j] = result[j]\
    \ + string[i];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qef1h1j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(i, string.length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.substr(i, string.length, separator);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, string separator, int limit) \n{\n    string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_efe3kb5.d(101): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmp_efe3kb5.d(109): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_efe3kb5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(string.length-i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,string.length-i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(string.length-i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,string.length-i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(string.length-i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2s_xw2ue.d(107): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2s_xw2ue.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    \n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    string[]\
    \ result = new string[string.length()];\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        result[i] = prefix + suffix;\n        \n        for(int\
    \ j = i; j < string.length(); j++)\n        {\n            result[i] = result[i]\
    \ + string[j];\n        }\n    }\n    \n    return result;\n}\nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhh6lofh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\t\n\tfor(int i\
    \ = 0; i < string.length; i++)\n\t{\n\t\tresult[i] = string.substr(0, i);\n\t\
    }\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqjpv44le.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i + 1);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i + 1);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.substr(0, i, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int length, int startIndex) \n{\n    string[] result = new string[\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqnpmm4aw.d(101): Error: expression expected, not \''unittest\''\n/tmp/tmpqnpmm4aw.d(102):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpqnpmm4aw.d(103): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqnpmm4aw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.substr(i, length);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int length, int startIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ length, startIndex);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, int length, \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpisu346o1.d(99): Error: basic type expected, not unittest\n/tmp/tmpisu346o1.d(99):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpisu346o1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_replacements(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_replacements(string string, int replacement)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings_with_replacements(string\
    \ string, int replacement, int replacement2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings_with_replacements(string\
    \ string, int replacement, int replacement2, int replacement3) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings_with_replacements(string string, int replacement,\
    \ int replacement2, int replacement3, int replacement4) \n{\n    string[] result\
    \ = new string[string.length];\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4zkq2utq.d(102): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4zkq2utq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i++] = string.substr(i,string.length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1jk48yvh.d(106): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1jk48yvh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end, int step, bool include_end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2erjdlgu.d(102): Error: semicolon expected, not \''unittest\''\n/tmp/tmp2erjdlgu.d(102):
    Error: expression expected, not \''unittest\''\n/tmp/tmp2erjdlgu.d(103): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmp2erjdlgu.d(104):
    Error: expression expected, not \''alias\''\n/tmp/tmp2erjdlgu.d(104): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmp2erjdlgu.d(104): Error: found
    \''=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2erjdlgu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph5mzz0mm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; i++)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.charAt(i);\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwl2h70pc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbes7bueh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\t\n\tfor(int i\
    \ = 0; i < string.length; ++i)\n\t{\n\t\tresult[i] = string.substr(0, i);\n\t\
    }\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcy7f862.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int separator_length) \n{\n    string[] result = new\
    \ string[string.Length\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx3xubiew.d(101): Error: found \''unittest\'' when expecting
    \'']\''\n/tmp/tmpx3xubiew.d(102): Error: semicolon expected, not \''{\''\n/tmp/tmpx3xubiew.d(109):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3xubiew.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    string\
    \ result = \"\";\n    \n    for(int i = 0; i < string.length; i++)\n    {\n  \
    \      prefix = prefix + string[i];\n        suffix = suffix + string[i];\n  \
    \  }\n    \n    for(int i = 0; i < string.length; i++)\n    {\n        result\
    \ = result + prefix + suffix;\n    }\n    \n    string[] result = new string[result.length()];\n\
    \    \n    int i = 0;\n    while(i < result.length())\n    {\n        result[i]\
    \ = result.substring(i);\n        i = i + 1;\n    }\n    \n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes(string string) \n{\n    string prefix = \"\
    \";\n    string suffix = \"\";\n    string result = \"\";\n    \n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        prefix = prefix + string[i];\n\
    \        suffix = suffix + string[i];\n    }\n    \n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result = result + prefix + suffix;\n    }\n    \n    string[]\
    \ result = new string[result.length()];\n    \n    int i = 0;\n    while(i < result.length())\n\
    \    {\n        result[i] = result.substring(i);\n        i = i + 1;\n    }\n\
    \    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    string\
    \ result = \"\";\n    \n    for(int i = 0; i < string.length; i++)\n    {\n  \
    \      prefix = prefix + string[i];\n        suffix = suffix + string[i];\n  \
    \  }\n    \n    for(int i = 0; i < string.length; i++)\n    {\n        result\
    \ = result + prefix + suffix;\n    }\n    \n    string[] result = new string[result.length()];\n\
    \    \n    int i = 0;\n    while(i < result.length())\n    {\n        result[i]\
    \ = result.substring(i);\n        i = i + 1;\n    }\n    \n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string\
    \ prefix = \"\";\n    string suffix = \"\";\n    string result = \"\";\n    \n\
    \    for(int i = 0; i < string.length; i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    for(int i\
    \ = start; i < string.length; i++)\n    {\n        result = result + prefix +\
    \ suffix;\n    }\n    \n    string[] result = new string[result.length()];\n \
    \   \n    int i = 0;\n    while(i < result.length())\n    {\n        result[i]\
    \ = result.substring(i);\n\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_d014lqk.d(127): Error: found \''unittest\'' instead of statement\n/tmp/tmp_d014lqk.d(135):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_d014lqk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    int i = 0;\n  \
    \  for(;i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(i,\
    \ string.length);\n    }\n    return suffixes;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    int i\
    \ = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start, i);\n    }\n    return substrings;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    int i = 0;\n    for(;i < string.length; ++i)\n\
    \    {\n        substrings[i] = string.substr(start, i);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i] = string.substr(start,\
    \ i);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] substrings\
    \ = new string[string.length];\n    int i = 0;\n    for(;i < string.length; ++i)\n\
    \    {\n        substrings[i] = string.substr(start, i);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphoplhfes.d(101): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphoplhfes.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i+=step, count--)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int count, string separator) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdun17iqe.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdun17iqe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i+1,\
    \ string.Length - i);\n        i++;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all prefixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_prefixes_reverse(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n    {\n\
    \        result[i] = string.Substring(i+1, string.Length - i);\n        i++;\n\
    \    }\n    for(int i = string.Length-1; i >= 0; i--)\n    {\n        result[i]\
    \ = string.Substring(0, i);\n    }\n    return result;\n}\n/*\n Return list of\
    \ all suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes_reverse(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(i+1,\
    \ string.Length - i);\n        i++;\n    }\n    for(int i = string.Length-1; i\
    \ >= 0; i--)\n    {\n        result[i] = string.Substring(0, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all prefixes from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_prefixes_reverse(string string) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(i+1, string.Length\
    \ - i);\n        i++;\n    }\n    for(int i = string.Length-1; i >= 0; i--)\n\
    \    {\n        result[i] = string.Substring(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i+1, string.Length - i);\n      \
    \  i++;\n    }\n    for(int i = string.Length-1; i >= 0; \nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxymu4__j.d(104): Error: expression expected, not \''unittest\''\n/tmp/tmpxymu4__j.d(105):
    Error: found \''{\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpxymu4__j.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptsqwnndo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(start, end - start);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ bool include_end) \n{\n    string[] result = new string[string.length];\n  \
    \  int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start, step, include_end);\n        i += 1;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzmqgtiol.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzmqgtiol.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int end2)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, end2);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp41gvmv6n.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41gvmv6n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all prefixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_prefixes_reverse(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i + 1, string.length\
    \ - i - 1);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(0,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all prefixes from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(i\
    \ + 1, string.length - i - 1);\n    }\n    return result;\n}\n/*\n Return list\
    \ of all suffixes from shortest to longest of the input string\n        \n*/\n\
    string[] all_suffixes_and_prefixes(string string) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = string.length - 1; i >= 0; i--)\n  \
    \  {\n        result[i] = string.Substring(0, i + 1);\n    }\n    return result;\n\
    }\n/*\n Return list of all prefixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i + 1, string.length - i -\
    \ 1);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_and_prefixes_reverse(string\
    \ string) \n{\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiixxzf6i.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiixxzf6i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\t\n\tfor(int i\
    \ = 0; i < string.length; i++)\n\t{\n\t\tresult[i] = string.substr(0, i);\n\t\
    }\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqjpv44le.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i+1,\
    \ string.Length - i);\n        i++;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] result = new\
    \ string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n    {\n\
    \        result[i] = string.Substring(i+1, string.Length - i);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length);\n        i++;\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_zu7cwsv.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_zu7cwsv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(0, i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.substr(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < end; i+=step)\n    {\n        result[i] = string.substr(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step, string substr) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i+=step)\n    {\n  \
    \      if(string.substr(i) == substr)\n        {\n            result[i] = string.substr(i);\n\
    \        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string substr, int start2) \n{\n    string[]\
    \ result = new string\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6xu_hfub.d(104): Error: semicolon expected, not \''unittest\''\n/tmp/tmp6xu_hfub.d(104):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6xu_hfub.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int step)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy5ilt5f6.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5ilt5f6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = startIndex; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int startIndexInclusive) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i += step)\n    {\n        result[i]\
    \ = string.Substring(i + startIndexInclusive);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgre7g_ox.d(99): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgre7g_ox.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int length) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; i++)\n\
    \    {\n        result[i] = string.Substring(start, length);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int end, int step, string pattern) \n{\n    string[] result = new\
    \ string[string.length];\n    \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpslzhhdlp.d(102): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpslzhhdlp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string pattern) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        if(string.Substring(i).Contains(pattern))\n        {\n          \
    \  result[i] = string.Substring(i);\n        }\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string pattern, int startIndex) \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptxrjt6gi.d(102): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptxrjt6gi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(0, i);\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < string.length; i++)\n   \
    \     result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < start + length;\
    \ i++)\n        result[i] = string.Substring(i);\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < start + length; i++)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n        result[i] = string.Substring(i);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step, bool include_end) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < start + length; i++)\n\
    \        result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to lon\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpko0jmzy_.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpko0jmzy_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(start);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.Substring(start);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(start);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step, ++end2)\n\
    \    {\n        result[i] = string.Substring(start, end2);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int end2, int end3) \n{\n    string[] result = \nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdn8hjk2a.d(101): Error: expression expected, not \''unittest\''\n/tmp/tmpdn8hjk2a.d(102):
    Error: semicolon expected, not \''{\''\n/tmp/tmpdn8hjk2a.d(109): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdn8hjk2a.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end,step);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.substr(start,end,step,end2);\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to lon\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk8m7tgbd.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk8m7tgbd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.Length];\n    int i =\
    \ 0;\n    while(i < string.Length)\n    {\n        prefixes[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes = new string[string.Length];\n    int i =\
    \ 0;\n    while(i < string.Length)\n    {\n        suffixes[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return suffixes;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.Length];\n    int i\
    \ = 0;\n    while(i < string.Length)\n    {\n        substrings[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start) \n{\n    string[] substrings = new\
    \ string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n    {\n\
    \        substrings[i] = string.Substring(start, i);\n        i++;\n    }\n  \
    \  return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end) \n{\n    string[] substrings = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        substrings[i] =\
    \ string.Substring(start, i);\n        i++;\n    }\n    return substrings;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.Length];\n    int i =\
    \ 0;\n    while(i < string.Length)\n    {\n        substrings[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, string separator)\
    \ \n{\n    string[] substrings = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        substrings[i] = string.Substring(start,\
    \ i);\n        i++\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbbnycke2.d(105): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpbbnycke2.d(113): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\n/tmp/tmpbbnycke2.d(113): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbbnycke2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.Substring(0, i);\n\
    \    return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n        result[i] = string.Substring(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < string.length; i++)\n   \
    \     result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i++)\n       \
    \ result[i] = string.Substring(i);\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    for(int i = start; i < end;\
    \ i += step)\n        result[i] = string.Substring(i);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.Substring(i,1);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, char character, int startIndex) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i += step)\n\
    \        result[i] = string.Substring(i,1,startIndex);\n    return result;\n}\n\
    /*\n Return list of \nunittest\n{\n    alias candidate = all_prefixes;\n\n   \
    \ assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\",\
    \ \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe9xijx0m.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpe9xijx0m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(;i<string.length;i++)\n    {\n        result[i] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        result[i] = string.substr(string.length-i,i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        result[i] = string.substr(0,string.length-i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        result[i] = string.substr(start,i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        result[i] = string.substr(start,end);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(;i<string.length;i++)\n    {\n        result[i] = string.substr(start,end,step);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        result[i] = string.substr(start,end,step,separator);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7e0he5lp.d(106): Error: basic type expected, not unittest\n/tmp/tmp7e0he5lp.d(106):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp7e0he5lp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n \
    \   {\n        result[i] = string.Substring(start, length, end, step);\n     \
    \   i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzdt1dirz.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzdt1dirz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int end2) \n{\n    string[] result =\
    \ new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i++;\n \
    \   }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substring\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp648o92k.d(113): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp648o92k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    \n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    string[]\
    \ result = new string[string.length()];\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        result[i] = prefix + suffix;\n    }\n    \n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes(string string) \n{\n    string prefix = \"\
    \";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix = prefix + string[i];\n        suffix = suffix +\
    \ string[i];\n    }\n    \n    string[] result = new string[string.length()];\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        result[i]\
    \ = prefix + suffix;\n    }\n    \n    return result;\n}\n/*\n Return list of\
    \ all prefixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_prefixes_reverse(string string) \n{\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        prefix = prefix + string[i];\n        suffix = suffix + string[i];\n\
    \    }\n    \n    string[] result = new string[string.length()];\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        result[i] = prefix + suffix;\n\
    \    }\n    \n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    \n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    string[]\
    \ result = new string[string.length()];\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        result[i] = prefix + suffix;\n    }\n    \n    return result;\n\
    }\n/*\n Return list of all prefixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_prefixes_reverse(string string) \n{\n    string prefix\
    \ = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        prefix = prefix + string[i];\n        suffix = suffix +\
    \ string[i];\n    }\n    \n    string[] result = new string[string.length()];\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        result[i]\
    \ = prefix + suffix;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgaywjnsz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all prefixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_prefixes_reverse(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(string.length\
    \ - i - 1, 1);\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(string.length\
    \ - i - 1, 1);\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i)\
    \ + string.substr(i);\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(0,\
    \ i) + string.substr(string.length - i - 1, 1);\n    }\n    return result;\n}\n\
    /*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_and_prefixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(0, i) + string.substr(i, string.length\
    \ - i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_and_prefixes_reverse(string\
    \ string\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsydu1moq.d(99): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsydu1moq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\tfor(int i = 0;\
    \ i < string.length; i++)\n\t\tresult[i] = string.substr(0, i);\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5p7kxpj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(i\
    \ + 1, string.Length - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i + 1, string.Length - i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ string.Length - start);\n        i += 1;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int end2)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy7v_my2u.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7v_my2u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n        result[i] = string.substr(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \       result[i] = string.substr(0, i + 1);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < string.length; i++)\n\
    \        result[i] = string.substr(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i++)\n       \
    \ result[i] = string.substr(i);\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i += step)\n\
    \        result[i] = string.substr(i);\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step, string prefix)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < end; i += step)\n        result[i] = string.substr(i, prefix.length());\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, string prefix, string suffix) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \       result[i] = string.substr(i, prefix.length() + suffix.length());\n   \
    \ return result;\n}\n/*\n Return list of all substrings from \nunittest\n{\n \
    \   alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1koxbiwl.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1koxbiwl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        suffixes[i] = string.substr(i, string.length);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(i, string.length);\n    }\n    return substrings;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ substrings = new string[string.length];\n    for(int i = start; i < end; ++i)\n\
    \    {\n        substrings[i] = string.substr(i, string.length);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        substrings[i] = string.substr(i, string.length, separator);\n   \
    \ }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpew9hnhsm.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpew9hnhsm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int len) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n    {\n\
    \        result[i] = string.substr(i, len);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int len, int start2) \n{\n    string[] \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc4yyf15e.d(101): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpc4yyf15e.d(109): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpc4yyf15e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        suffixes[i] = string.substr(i);\n    }\n \
    \   return suffixes;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] substrings = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; i++)\n    {\n        substrings[i] = string.substr(0, i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        substrings[i]\
    \ = string.substr(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i++)\n    {\n\
    \        substrings[i] = string.substr(i);\n    }\n    return substrings;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    for(int\
    \ i = start; i < end; i += step)\n    {\n        substrings[i] = string.substr(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        substrings[i] = string.substr(i);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq3vtyst8.d(99): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3vtyst8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,end,step);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int len) \n{\n    string[] result = new\
    \ string[string.length];\n    int i = 0;\n    while(i < string.length)\n    {\n\
    \        result[i] = string.substr(start,end,step,len);\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to \n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdus0u_6.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdus0u_6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i<string.length;i++)\n    {\n        prefixes[i] = string.substr(0,i);\n\
    \    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    int i = 0;\n  \
    \  for(;i<string.length;i++)\n    {\n        suffixes[i] = string.substr(string.length-i,string.length);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    int i\
    \ = 0;\n    for(;i<string.length;i++)\n    {\n        substrings[i] = string.substr(i,string.length);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(;i<string.length;i++)\n    {\n        substrings[i] =\
    \ string.substr(start,i);\n    }\n    return substrings;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        substrings[i] = string.substr(start,end);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    int i =\
    \ 0;\n    for(;i<string.length;i++)\n    {\n        substrings[i] = string.substr(start,end,step);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] substrings\
    \ = new string[string.length];\n    int i = 0;\n    for(;i<string.length;i++)\n\
    \    {\n        substrings[i] = string.substr(start,end,step,separator);\n   \
    \ }\n    return substrings;\n}\n/*\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp722wxb1u.d(101): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp722wxb1u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.Length];\n    for(int i = startIndex; i\
    \ < string.Length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = startIndex; i < endIndex; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.Length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int startIndex2) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = startIndex; i < endIndex; i += step, i += startIndex2)\n    {\n\
    \        result[i] = string.Substring(i);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int start\nunittest\n{\n    alias candidate = all_prefixes;\n\n  \
    \  assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpft62_176.d(99): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpft62_176.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjow71g2r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\tfor (int i =\
    \ 0; i < string.length; i++)\n\t\tresult[i] = string.Substring(0, i);\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysfmtelm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i\
    \ + 1, string.length - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(i + 1, string.length - i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, end - start);\n        i +=\
    \ 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ end - start, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int count) \n{\n    string[] result = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ end - start, step, count);\n        i += 1;\n    }\n    return result;\n}\n\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__5dhvbk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rcwz89c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7chmyqu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7chmyqu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] result = new string[string.length];\n\t\n\tfor(int i\
    \ = 0; i < string.length; i++)\n\t{\n\t\tresult[i] = string.Substring(0, i);\n\
    \t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfr986uv5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all prefixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_prefixes_reverse(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = string.length - 1; i >= 0; --i)\n    {\n        result[i] = string.Sub\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnojcxge0.d(104): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpnojcxge0.d(112): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\n/tmp/tmpnojcxge0.d(112): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnojcxge0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string longest = \"\";\n    string\
    \ longest2 = \"\";\n    string longest3 = \"\";\n    string longest4 = \"\";\n\
    \    string longest5 = \"\";\n    string longest6 = \"\";\n    string longest7\
    \ = \"\";\n    string longest8 = \"\";\n    string longest9 = \"\";\n    string\
    \ longest10 = \"\";\n    string longest11 = \"\";\n    string longest12 = \"\"\
    ;\n    string longest13 = \"\";\n    string longest14 = \"\";\n    string longest15\
    \ = \"\";\n    string longest16 = \"\";\n    string longest17 = \"\";\n    string\
    \ longest18 = \"\";\n    string longest19 = \"\";\n    string longest20 = \"\"\
    ;\n    string longest21 = \"\";\n    string longest22 = \"\";\n    string longest23\
    \ = \"\";\n    string longest24 = \"\";\n    string longest25 = \"\";\n    string\
    \ longest26 = \"\";\n    string longest27 = \"\";\n    string longest28 = \"\"\
    ;\n    string longest29 = \"\";\n    string longest30 = \"\";\n    string longest31\
    \ = \"\";\n    string longest32 = \"\";\n    string longest33 = \"\";\n    string\
    \ longest34 = \"\";\n    string longest35 = \"\";\n    string longest36 = \"\"\
    ;\n    string longest37 = \"\";\n    string longest38 = \"\";\n    string longest39\
    \ = \"\";\n    string longest40 = \"\";\n    string longest41 = \"\";\n    string\
    \ longest42 = \"\";\n    string longest43 = \"\";\n    string longest44 = \"\"\
    ;\n    string longest45 = \"\";\n    string longest46 = \"\";\n    string longest47\
    \ = \"\";\n    string longest48 = \"\";\n    string longest49 = \"\";\n    string\
    \ longest50 = \"\";\n    string longest51 = \"\";\n    string longest52 = \"\"\
    ;\n    string longest53 = \"\";\n    string longest54 = \"\";\n    string longest55\
    \ = \"\";\n    string longest56 = \"\";\n    string longest57 = \"\";\n    string\
    \ longest58 = \"\";\n    string longest59 = \"\";\n    string longest60 = \"\"\
    ;\n    string longest61 = \"\";\n    string longest62 = \"\";\n    string longest63\
    \ = \"\";\n    string longest64 = \"\";\n    string longest65 = \"\";\n    string\
    \ longest66 = \"\";\n    string longest67 = \"\";\n    string longest68 = \"\"\
    ;\n    string longest69 = \"\";\n    string longest70 = \"\";\n    string longest71\
    \ = \"\";\n    string longest72 = \"\";\n    string longest73 = \"\";\n    string\
    \ longest74 = \"\";\n    string longest75 = \"\";\n    string longest76 = \"\"\
    ;\n    string longest77 = \"\";\n    string longest78 = \"\";\n    string longest79\
    \ = \"\";\n    string longest80 = \"\";\n    string longest81 = \"\";\n    string\
    \ \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8pth83ww.d(92): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmp8pth83ww.d(100): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8pth83ww.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i, string.length);\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, string.length);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n        result[i] = string.substr(i, string.length);\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ string.length);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int end2) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n       \
    \ result[i] = string.substr(i, string.length);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ int end2, int step2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n        result[i] = string.substr(i,\
    \ string.length\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgbqdmhcs.d(89): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpgbqdmhcs.d(97):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpgbqdmhcs.d(97): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpgbqdmhcs.d(97): Error: expression
    expected, not \''}\''\n/tmp/tmpgbqdmhcs.d(97): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpgbqdmhcs.d(97): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpgbqdmhcs.d(97):
    Error: found \''EOF\'' when expecting \'';\'' following statement\n/tmp/tmpgbqdmhcs.d(97):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgbqdmhcs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(i,\
    \ end - start);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(i, end - start, step);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(i, end - start, step, count);\n     \
    \   i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count, int step2) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(i, end - start, step, count, step2);\n\
    \        i += 1;\n    }\n    return result;\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr8w4we0c.d(108): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8w4we0c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(;i < string.length; ++i)\n    {\n        result[i] = string.substr(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    for(;i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    for(;i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    for(;i < string.length; ++i)\n    {\n        result[i] = string.substr(start,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, i);\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    for(;i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(start, i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, int end2) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        result[i] =\
    \ string.substr(start, i);\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp19ucorqr.d(106): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19ucorqr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n\tstring[] prefixes = new string[string.length];\n\tfor(int i =\
    \ 0; i < string.length; ++i)\n\t{\n\t\tprefixes[i] = string.substr(0, i);\n\t\
    }\n\treturn prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxhjx_sj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i + 1);\n    return result;\n\
    }\n/*\n Return list of all prefixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_prefixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.substr(0, string.length - i);\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_reverse(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; --i)\n        result[i] = string.substr(0, string.length - i);\n    return\
    \ result;\n}\n/*\n Return list of all prefixes from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_prefixes_reverse(string string, int\
    \ length) \n{\n    string[] result = new string[length];\n    for(int i = 0; i\
    \ < length; ++i)\n        result[i] = string.substr(0, string.length - i);\n \
    \   return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes_reverse(string string,\
    \ int length) \n{\n    string[] result = new string[length];\n    for(int i =\
    \ length - 1; i >= 0; --i)\n        result[i] = string.substr(0, string.length\
    \ - i);\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string, int length, int start) \n{\n    string[] result = new string[length];\n\
    \    for(int i = start; i < length; ++i)\n        result[i] = string.substr(0,\
    \ string.length - i);\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string, int length, int start) \n{\n    string[] result = new string[length];\n\
    \    for(int i = start; i >= 0; --i)\n        result[i] = string.substr(0, string.length\
    \ - i);\n    return result;\n}\n/*\n Return list of all prefix\nunittest\n{\n\
    \    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n \
    \   assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkh_bf4rl.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkh_bf4rl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zj7o21x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqq0aiisy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, bool include_end)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step, include_end);\n        i++;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpulpz1t3_.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulpz1t3_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i\
    \ + 1, string.length - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(i + 1, string.length - i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9ip5_a_b.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ip5_a_b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(start, length, end);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(start, length, end, step);\n        i++;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp20hl6x2l.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20hl6x2l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,i);\n\
    \    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    int i = 0;\n  \
    \  for(;i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(string.length-i,string.length);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    int i\
    \ = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i] = string.substr(0,string.length-i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start,string.length-i);\n    }\n    return substrings;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] substrings = new string[string.length];\n    int i = 0;\n    for(;i\
    \ < string.length; ++i)\n    {\n        substrings[i] = string.substr(start,end);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start,end,step);\n    }\n    return substrings;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    for(;i < string.length; ++i)\n    {\n        substrings[i]\
    \ = string.substr(start,end,step,separator\nunittest\n{\n    alias candidate =\
    \ all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfhfq2ilm.d(98): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpfhfq2ilm.d(106):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpfhfq2ilm.d(106): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpfhfq2ilm.d(106): Error: expression
    expected, not \''}\''\n/tmp/tmpfhfq2ilm.d(106): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpfhfq2ilm.d(106): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpfhfq2ilm.d(106):
    Error: found \''EOF\'' when expecting \'';\'' following statement\n/tmp/tmpfhfq2ilm.d(106):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpfhfq2ilm.d(106):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhfq2ilm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int count) \n{\n    string[] result = new string[string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp80wnvq16.d(101): Error: found \''unittest\'' when expecting
    \'']\''\n/tmp/tmp80wnvq16.d(102): Error: semicolon expected, not \''{\''\n/tmp/tmp80wnvq16.d(109):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp80wnvq16.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        prefixes[i] = string.Substring(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        suffixes[i] = string.Substring(i);\n    }\n\
    \    return suffixes;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string)\
    \ \n{\n    string[] substrings = new string[string.length];\n    for(int i = 0;\
    \ i < string.length; i++)\n    {\n        substrings[i] = string.Substring(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < string.length; i++)\n    {\n        substrings[i]\
    \ = string.Substring(i);\n    }\n    return substrings;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i++)\n    {\n\
    \        substrings[i] = string.Substring(i);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    for(int\
    \ i = start; i < end; i+=step)\n    {\n        substrings[i] = string.Substring(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        substrings[i] = string.Substring(i,length);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwpxtg7k_.d(99): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpxtg7k_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = string;\n    for(int i = 1; i < prefixes.length; ++i)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.substr(0, i);\n    }\n    return prefixes;\n}\n/*\n\
    \ Return list of all suffixes from shortest to longest of the input string\n \
    \       \n*/\nstring[] all_suffixes(string string) \n{\n    string[] suffixes\
    \ = new string[string.length];\n    suffixes[suffixes.length-1] = string;\n  \
    \  for(int i = string.length-1; i >= 0; --i)\n    {\n        suffixes[i] = string.substr(0,\
    \ i) + suffixes[i+1];\n    }\n    return suffixes;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = string;\n    for(int i = 1; i < substrings.length; ++i)\n\
    \    {\n        substrings[i] = substrings[i-1] + string.substr(i);\n    }\n \
    \   return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = string;\n    for(int i = start; i < substrings.length; ++i)\n    {\n     \
    \   substrings[i] = substrings[i-1] + string.substr(i);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] substrings = new string[string.length];\n    substrings[0] = string;\n\
    \    for(int i = start; i < end; ++i)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.substr(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = string;\n    for(int\
    \ i = start; i < end; i += step)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.substr(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, char separator\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoxljlha6.d(92): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxljlha6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.Length];\n    int i =\
    \ 0;\n    while(i < prefixes.Length)\n    {\n        prefixes[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpanj9gx9l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while (i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while (i < string.length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while (i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int step)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while\
    \ (i < string.length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49_6rj3x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(start, length);\n        i++;\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdp_sqlm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        result[i] = string.substr(start, end - start);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step,\
    \ string separator) \n{\n    string[] result = new string[string.length];\n  \
    \  int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start, step, separator);\n        i += 1;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8uw_9gwi.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uw_9gwi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while (i < string.Length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while (i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while (i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length, end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int step)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while\
    \ (i < string.Length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmtpaeu3x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptsqwnndo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i++] = string.substr(i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(string.length-i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,string.length-i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(0,i)\
    \ + string.substr(i,string.length);\n    }\n    return result;\n}\n/*\n Return\
    \ list of all prefixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes_and_prefixes(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i++] = string.substr(0,i) + string.substr(string.length-i,string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i++] = string.substr(string.length-i,string.length)\
    \ + string.substr(0,i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp16tm9t4t.d(101): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16tm9t4t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph5mzz0mm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int separator_length) \n{\n    string[] result = new\
    \ string[string.Length\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx3xubiew.d(101): Error: found \''unittest\'' when expecting
    \'']\''\n/tmp/tmpx3xubiew.d(102): Error: semicolon expected, not \''{\''\n/tmp/tmpx3xubiew.d(109):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3xubiew.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = startIndex; i\
    \ < string.length; i++)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, int startIndexInclusive) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i += step)\n    {\n        result[i]\
    \ = string.Substring(i + startIndexInclusive);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3vg7s78y.d(99): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vg7s78y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string current = string;\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        current = prefix + current;\n        result[i] = current;\n  \
    \      prefix = \"\";\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string suffix = \"\";\n    string current = string;\n    string[]\
    \ result = new string[string.length];\n    for(int i = string.length - 1; i >=\
    \ 0; i--)\n    {\n        current = current + suffix;\n        result[i] = current;\n\
    \        suffix = \"\";\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string) \n{\n    string current = \"\";\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        current = current + string;\n        result[i] = current;\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int length) \n{\n    string current = \"\";\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        current = current + string;\n        result[i] = current;\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ length, int start) \n{\n    string current = \"\";\n    string[] result = new\
    \ string[string.length];\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        current = current + string;\n        result[i] = current;\n    }\n  \
    \  return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ length, int start, int end) \n{\n    string current = \"\";\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; i++)\n \
    \   {\n        current = current + string;\n        result[i] = current;\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int length, int start, int end, int step) \n{\n    string current = \"\";\n\
    \    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        \nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2wvj4qyc.d(108): Error: found \''unittest\'' instead of statement\n/tmp/tmp2wvj4qyc.d(116):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2wvj4qyc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, int length) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step, length);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg3g36iu1.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3g36iu1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(0,i);\n\
    \    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    int i = 0;\n  \
    \  for(;i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(string.length-i,string.length);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(string.length-i,string.length);\n\
    \    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(0,i);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(string.length-i,string.length);\n\
    \    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        suffixes[i] = string.substr(0,i);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all prefixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    for(;i < string.length; ++i)\n    {\n        prefixes[i] = string.substr(string.length\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzwxnfimc.d(98): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmpzwxnfimc.d(106):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpzwxnfimc.d(106): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpzwxnfimc.d(106): Error: expression
    expected, not \''}\''\n/tmp/tmpzwxnfimc.d(106): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpzwxnfimc.d(106): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpzwxnfimc.d(106):
    Error: found \''EOF\'' when expecting \'';\'' following statement\n/tmp/tmpzwxnfimc.d(106):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpzwxnfimc.d(106):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzwxnfimc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.Substring(i);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end) \n{\n \
    \   string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length, int end, int step) \n{\n\
    \    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.Substring(start, length,\
    \ end, step);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5_30dqc4.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_30dqc4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i += 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8tv8345q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(start, i - start);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end) \n{\n    string[] result = new string[string.Length];\n    for(int\
    \ i = start; i < end; i++)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(start,\
    \ i - start);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(start, i - start);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step, char character, int startIndex) \n{\nunittest\n{\n    alias\
    \ candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphtngfqmf.d(100): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtngfqmf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string prefix) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i) + prefix;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string prefix, string suffix) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ikzvpn5.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ikzvpn5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i + 1);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(i, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int length)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = 0; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.substr(i, length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ length);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ length, step);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int step, int end) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < string.length; ++i)\n\
    \    {\n        result[i] = string.substr(i, length, step, end);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int length, int step, int end, int step2) \n{\n    string[] result = new string[string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3fhyuezd.d(101): Error: found \''unittest\'' when expecting
    \'']\''\n/tmp/tmp3fhyuezd.d(102): Error: semicolon expected, not \''{\''\n/tmp/tmp3fhyuezd.d(109):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fhyuezd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ i);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        result[i] = string.substr(start,\
    \ end - start);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] result = new string[string.length];\n    int i = 0;\n    while(i <\
    \ string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step);\n        i++;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, string separator)\
    \ \n{\n    string[] result = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        result[i] = string.substr(start, end - start,\
    \ step, separator);\n        i++;\n    }\n    return result;\n}\n/*\n Return list\
    \ of all substrings from shortest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_okpmsj4.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_okpmsj4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex) \n{\n  \
    \  string[] result = new string[string.length];\n    for(int i = startIndex; i\
    \ < string.length; ++i)\n    {\n        result[i] = string.Substring(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int startIndex, int endIndex, int step) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = startIndex; i < endIndex; i += step)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int startIndex, int endIndex,\
    \ int step, char character) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = startIndex; i < endIndex; i += step)\n    {\n        result[i]\
    \ = string.Substring(i);\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int startIndex, int endIndex, int step, char character,\
    \ int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqzthohih.d(99): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqzthohih.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw22pbyh4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i + 1, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int len) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n    {\n\
    \        result[i] = string.substr(i, len);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int len, int start2) \n{\n    string\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpabqyto52.d(101): Error: found \''unittest\'' when expecting
    \'';\'' following statement\n/tmp/tmpabqyto52.d(109): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpabqyto52.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_1w8af45.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int endSeparator) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqvj5qth.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqvj5qth.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    prefixes[1] = string;\n    for(int i = 2; i < prefixes.length;\
    \ i++)\n    {\n        prefixes[i] = prefixes[i-1] + string.substr(0, i);\n  \
    \  }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    suffixes[0] = \"\
    \";\n    suffixes[1] = string;\n    for(int i = 2; i < suffixes.length; i++)\n\
    \    {\n        suffixes[i] = string.substr(0, i) + suffixes[i-1];\n    }\n  \
    \  return suffixes;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] substrings = new string[string.length];\n    substrings[0] = \"\
    \";\n    substrings[1] = string;\n    for(int i = 2; i < substrings.length; i++)\n\
    \    {\n        substrings[i] = substrings[i-1] + string.substr(i);\n    }\n \
    \   return substrings;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    substrings[1] = string;\n    for(int i = 2; i < substrings.length;\
    \ i++)\n    {\n        substrings[i] = substrings[i-1] + string.substr(start,\
    \ i);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    substrings[1] = string;\n    for(int i = 2; i\
    \ < substrings.length; i++)\n    {\n        substrings[i] = substrings[i-1] +\
    \ string.substr(start, i);\n    }\n    return substrings;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int end, int step) \n{\n   \
    \ string[] substrings = new string[string.length];\n    substrings[0] = \"\";\n\
    \    substrings[1] = string;\n    for(int i = 2; i < substrings.length; i++)\n\
    \    {\n        substrings[i] = substrings[i-1] + string.substr(start, i);\n \
    \   }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw10kmf_q.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpw10kmf_q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(string.length-i,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(string.length-i,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0,i) +\
    \ string.substr(string.length-i,i);\n        i++;\n    }\n    return result;\n\
    }\n/*\n Return list of all suffixes from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_suffixes_and_prefixes(string string) \n{\n    string[]\
    \ result = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        result[i] = string.substr(0,i) + string.substr(0,string.length-i);\n\
    \        i++;\n    }\n    return result;\n}\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes_and_suffixes_reverse(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(string.length-i,i)\
    \ + string.substr(0,i);\n        i++;\n    }\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeemfpact.d(107): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeemfpact.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,1);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character, int startIndex) \n{\n    string[] result = new string[\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo87qbovw.d(101): Error: expression expected, not \''unittest\''\n/tmp/tmpo87qbovw.d(102):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpo87qbovw.d(103): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo87qbovw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string prefix) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i) + prefix;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string prefix, string suffix) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ikzvpn5.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ikzvpn5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int separator_length) \n{\n    string[] result = new\
    \ string[string.Length\nunittest\n{\n    alias candidate = all_prefixes;\n\n \
    \   assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx3xubiew.d(101): Error: found \''unittest\'' when expecting
    \'']\''\n/tmp/tmpx3xubiew.d(102): Error: semicolon expected, not \''{\''\n/tmp/tmpx3xubiew.d(109):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3xubiew.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n\
    \    while(i < string.Length)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(i\
    \ + 1, string.Length - i);\n        i += 1;\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(i + 1, string.Length - i);\n    \
    \    i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.Length];\n \
    \   int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ i);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int length) \n{\n    string[] result\
    \ = new string[string.Length];\n    int i = 0;\n    while(i < string.Length)\n\
    \    {\n        result[i] = string.Substring(start, length);\n        i += 1;\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.Length];\n\
    \    int i = 0;\n    while(i < string.Length)\n    {\n        result[i] = string.Substring(start,\
    \ length);\n        i += 1;\n    }\n    return result;\n}\n/*\n Return list of\
    \ all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string, int start, int length, int end, int end2)\
    \ \n{\n    string[] result = new string[string.Length];\n    int i = 0;\n    while(i\
    \ < string.Length)\n    {\n        result[i] = string.Substring(start, length);\n\
    \        i += 1;\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwvhby8c8.d(108): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvhby8c8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,1);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character, bool include_character) \n{\n    string[] result = new\
    \ string[string.Length];\nunittest\n{\n    alias candidate = all_prefixes;\n\n\
    \    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzb982nda.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzb982nda.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyiu565mm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string result = \"\";\n    for(int\
    \ i = 0; i < string.length; ++i)\n    {\n        prefix += string[i];\n      \
    \  result += prefix;\n    }\n    \n    string[] result = new string[result.length()];\n\
    \    for(int i = 0; i < result.length(); ++i)\n    {\n        result[i] = result.substr(0,\
    \ i);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzl4yz8m1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rcwz89c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = string;\n    \n    for(int i = 1; i < prefixes.length; ++i)\n    {\n     \
    \   prefixes[i] = prefixes[i-1] + string.substr(0, i);\n    }\n    \n    return\
    \ prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgsib33h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; i++)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.charAt(i);\n    }\n    return prefixes;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] suffixes = new string[string.length];\n\
    \    suffixes[string.length-1] = \"\";\n    for(int i = string.length-2; i >=\
    \ 0; i--)\n    {\n        suffixes[i] = string.charAt(i) + suffixes[i+1];\n  \
    \  }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; i++)\n    {\n        substrings[i]\
    \ = substrings[i-1] + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = \"\";\n    for(int\
    \ i = start; i < string.length; i++)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    substrings[0] = \"\";\n    for(int i = start;\
    \ i < end; i++)\n    {\n        substrings[i] = substrings[i-1] + string.charAt(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    for(int i = start; i < end; i+=step)\n    {\n\
    \        substrings[i] = substrings[i-1] + string.charAt(i);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, int count) \n{\n    string[] substrings = new string[string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphb0702rj.d(94): Error: found \''unittest\'' when expecting \'']\''\n/tmp/tmphb0702rj.d(95):
    Error: semicolon expected, not \''{\''\n/tmp/tmphb0702rj.d(102): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphb0702rj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < string.length; i++)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i+=step)\n    {\n\
    \        result[i] = string.substr(i, length);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int length, int start2) \n{\n    string[] result = \nunittest\n{\n   \
    \ alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp173ud14b.d(101): Error: expression expected, not \''unittest\''\n/tmp/tmp173ud14b.d(102):
    Error: semicolon expected, not \''{\''\n/tmp/tmp173ud14b.d(109): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp173ud14b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i + 1);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(i, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; i++)\n    {\n        result[i] = string.substr(i, i + 1);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.substr(i,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.substr(i,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i+=step)\n    {\n\
    \        result[i] = string.substr(i, i + 1);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int count, string separator) \n{\n    string[] result = new string[string.length\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm6no10en.d(101): Error: found \''unittest\'' when expecting
    \'']\''\n/tmp/tmpm6no10en.d(102): Error: semicolon expected, not \''{\''\n/tmp/tmpm6no10en.d(109):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6no10en.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string prefix = \"\";\n    string suffix = \"\";\n    \n  \
    \  for(int i = 0; i < string.length(); i++)\n    {\n        prefix = prefix +\
    \ string[i];\n        suffix = suffix + string[i];\n    }\n    \n    string[]\
    \ result = new string[string.length()];\n    \n    for(int i = 0; i < string.length();\
    \ i++)\n    {\n        result[i] = prefix + suffix;\n        \n        for(int\
    \ j = i; j < string.length(); j++)\n        {\n            result[i] = result[i]\
    \ + string[j];\n        }\n    }\n    \n    return result;\n}\n/*\n Return list\
    \ of all suffixes from shortest to longest of the input string\n        \n*/\n\
    string[] all_suffixes(string string) \n{\n    string prefix = \"\";\n    string\
    \ suffix = \"\";\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n\
    \        prefix = prefix + string[i];\n        suffix = suffix + string[i];\n\
    \    }\n    \n    string[] result = new string[string.length()];\n    \n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        result[i] = prefix + suffix;\n\
    \        \n        for(int j = i; j < string.length(); j++)\n        {\n     \
    \       result[i] = result[i] + string[j];\n        }\n    }\n    \n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string) \n{\n   \
    \ string prefix = \"\";\n    string suffix = \"\";\n    \n    for(int i = 0; i\
    \ < string.length(); i++)\n    {\n        prefix = prefix + string[i];\n     \
    \   suffix = suffix + string[i];\n    }\n    \n    string[] result = new string[string.length()];\n\
    \    \n    for(int i = 0; i < string.length(); i++)\n    {\n        result[i]\
    \ = prefix + suffix;\n        \n        for(int j = i; j < string.length(); j++)\n\
    \        {\n            result[i] = result[i] + string[j];\n        }\n    }\n\
    \    \n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string prefix = \"\";\n    string suffix = \"\"\
    ;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        prefix =\
    \ prefix + string[i];\n        suffix = suffix + string[i];\n    }\n    \n   \
    \ string[] result = new string[string.length()];\n    \n    for(int i = 0; i <\
    \ string.length(); i++)\n    {\n        result[i] = prefix + suffix;\n       \
    \ \n        for(int j = i; j < string.length(); j++)\n        {\n            result[i]\
    \ = result[i] + string[j];\n        }\n    }\n    \n    return result;\n}\n/*\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb92f4n7e.d(119): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb92f4n7e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; i++)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; i++)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end, int step, int length2) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq85nub95.d(102): Error: expression expected, not \''unittest\''\n/tmp/tmpq85nub95.d(103):
    Error: found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpq85nub95.d(104):
    Error: expression expected, not \''alias\''\n/tmp/tmpq85nub95.d(104): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpq85nub95.d(104): Error: found
    \''=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq85nub95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] suffixes = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        suffixes[i] = string.substr(i, string.length);\n\
    \    }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    for(int\
    \ i = 0; i < string.length; i++)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        substrings[i] = string.substr(i,\
    \ string.length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int length) \n{\n    string[] substrings\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        substrings[i] = string.substr(i, length);\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int length, int offset) \n{\n    string[] substrings = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        substrings[i] = string.substr(i,\
    \ length);\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest \nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvqb0wl03.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpvqb0wl03.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.substr(0,i);\n\
    \        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return suffixes;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    int i\
    \ = 0;\n    while(i < string.length)\n    {\n        substrings[i] = string.substr(i,string.length);\n\
    \        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start,i);\n        i++;\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] substrings = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        substrings[i] = string.substr(start,end);\n\
    \        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start,end,step);\n        i++;\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int end2) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start,end,\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe5or8p9q.d(104): Error: expression expected, not \''unittest\''\n/tmp/tmpe5or8p9q.d(105):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpe5or8p9q.d(106): Error: expression
    expected, not \''alias\''\n/tmp/tmpe5or8p9q.d(106): Error: found \''candidate\''
    when expecting \'',\''\n/tmp/tmpe5or8p9q.d(106): Error: expression expected, not
    \''=\''\n/tmp/tmpe5or8p9q.d(106): Error: found \''all_prefixes\'' when expecting
    \'',\''\n/tmp/tmpe5or8p9q.d(106): Error: expression expected, not \'';\''\n/tmp/tmpe5or8p9q.d(108):
    Error: found \''assert\'' when expecting \'',\''\n/tmp/tmpe5or8p9q.d(108): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmpe5or8p9q.d(109): Error: found \'';\''
    when expecting \'',\''\n/tmp/tmpe5or8p9q.d(110): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpe5or8p9q.d(111): Error: expression expected, not \''}\''\n/tmp/tmpe5or8p9q.d(112):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmpe5or8p9q.d(112): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmpe5or8p9q.d(112): Error: expression
    expected, not \''}\''\n/tmp/tmpe5or8p9q.d(112): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmpe5or8p9q.d(112): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmpe5or8p9q.d(112):
    Error: found \''EOF\'' when expecting \'';\'' following statement\n/tmp/tmpe5or8p9q.d(112):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpe5or8p9q.d(112):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5or8p9q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character, int startIndex) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4kpzp15k.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4kpzp15k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end, int step, string separator) \n{\n    string[] result = new string[string.length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd6iazg41.d(102): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6iazg41.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.substr(0,\
    \ i);\n        i += 1;\n    }\n    return prefixes;\n}\n/*\n Return list of all\
    \ suffixes from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_suffixes(string string) \n{\n    string[] suffixes = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.substr(i,\
    \ string.length);\n        i += 1;\n    }\n    return suffixes;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string) \n{\n    string[] substrings =\
    \ new string[string.length];\n    int i = 0;\n    while(i < string.length)\n \
    \   {\n        substrings[i] = string.substr(i, string.length);\n        i +=\
    \ 1;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start, i);\n        i += 1;\n    }\n    return substrings;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] substrings = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        substrings[i] = string.substr(start, i);\n\
    \        i += 1;\n    }\n    return substrings;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start, i);\n        i += 1;\n    }\n    return substrings;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.substr(start, i);\n        i += 1;\n\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpirg2svzv.d(106): Error: found \''unittest\'' instead of statement\n/tmp/tmpirg2svzv.d(114):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpirg2svzv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(i, string.length);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.substr(i, string.length, separator);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, string separator, int startIndex) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < end; i += step)\n\
    \    {\n        result[i] = string.substr(i, string.length, separator, startIndex);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx8n9sc2l.d(99): Error: basic type expected, not unittest\n/tmp/tmpx8n9sc2l.d(99):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpx8n9sc2l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    prefixes[1] = string;\n    \n    for (int i = 2; i < prefixes.length;\
    \ i++)\n    {\n        prefixes[i] = prefixes[i-1] + prefixes[i];\n    }\n   \
    \ return prefixes;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] suffixes = new string[string.length];\n    suffixes[0] = \"\";\n\
    \    suffixes[string.length-1] = string;\n    \n    for (int i = string.length-2;\
    \ i >= 0; i--)\n    {\n        suffixes[i] = suffixes[i+1] + suffixes[i];\n  \
    \  }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    substrings[string.length-1] = string;\n    \n    for (int i = string.length-2;\
    \ i >= 0; i--)\n    {\n        substrings[i] = substrings[i+1] + substrings[i];\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    substrings[string.length-1] = string;\n    \n\
    \    for (int i = start; i < string.length; i++)\n    {\n        substrings[i]\
    \ = substrings[i+1] + substrings[i];\n    }\n    return substrings;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = \"\";\n    substrings[string.length-1]\
    \ = string;\n    \n    for (int i = start; i < end; i++)\n    {\n        substrings[i]\
    \ = substrings[i+1] + substrings[i];\n    }\n    return substrings;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int end, int step)\
    \ \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    substrings[string.length-1] = string;\n    \n    for (int i = start;\
    \ i < end; i += step)\n    {\n        substrings[i] = substrings[i+1] + substrings[i];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0cdmqha_.d(97): Error: found \''unittest\'' instead of statement\n/tmp/tmp0cdmqha_.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0cdmqha_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rcwz89c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004034
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.Length];\n    for(int i\
    \ = 0; i < string.Length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.Length];\n    for(int i = string.Length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.Length];\n    for(int i = 0; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.Length];\n    for(int i = start; i < string.Length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.Length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.Length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, char character) \n{\n    string[] result\
    \ = new string[string.Length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, char character, int startIndex) \n{\n    string[] result = new string[string.Length];\n\
    \    for(int \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx7rjwwm5.d(102): Error: no identifier for declarator int\n/tmp/tmpx7rjwwm5.d(102):
    Error: expression expected, not \''unittest\''\n/tmp/tmpx7rjwwm5.d(103): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpx7rjwwm5.d(104):
    Error: expression expected, not \''alias\''\n/tmp/tmpx7rjwwm5.d(104): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpx7rjwwm5.d(104): Error: found
    \''=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx7rjwwm5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    int i = 0;\n\
    \    while(i < string.length)\n    {\n        result[i] = string.substr(0, i);\n\
    \        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa91gopdm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; ++i)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.charAt(i);\n    }\n    return prefixes;\n}\n/*\n Return\
    \ list of all suffixes from shortest to longest of the input string\n        \n\
    */\nstring[] all_suffixes(string string) \n{\n    string[] suffixes = new string[string.length];\n\
    \    suffixes[string.length-1] = \"\";\n    for(int i = string.length-2; i >=\
    \ 0; --i)\n    {\n        suffixes[i] = string.charAt(i) + suffixes[i+1];\n  \
    \  }\n    return suffixes;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string) \n{\n    string[] substrings = new string[string.length];\n    substrings[0]\
    \ = \"\";\n    for(int i = 1; i < string.length; ++i)\n    {\n        substrings[i]\
    \ = substrings[i-1] + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    substrings[0] = \"\";\n    for(int\
    \ i = start; i < string.length; ++i)\n    {\n        substrings[i] = substrings[i-1]\
    \ + string.charAt(i);\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end) \n{\n    string[] substrings\
    \ = new string[string.length];\n    substrings[0] = \"\";\n    for(int i = start;\
    \ i < end; ++i)\n    {\n        substrings[i] = substrings[i-1] + string.charAt(i);\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] substrings = new string[string.length];\n\
    \    substrings[0] = \"\";\n    for(int i = start; i < end; i += step)\n    {\n\
    \        substrings[i] = substrings[i-1] + string.charAt(i);\n    }\n    return\
    \ substrings;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end, int step, int length) \n{\n    string[] substrings = new string\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmputub589p.d(94): Error: semicolon expected, not \''unittest\''\n/tmp/tmputub589p.d(94):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmputub589p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.substr(i + 1);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.substr(i, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; i++)\n    {\n        result[i] = string.substr(i, i + 1);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i++)\n    {\n        result[i] = string.substr(i,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ i + 1);\n    }\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int size) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n    {\n\
    \        result[i] = string.substr(i, i + size);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int size, int step2) \n{\n    string[] result = new string[string.length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_89gdcuv.d(102): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_89gdcuv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(0, i + 1);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = start;\
    \ i < string.length; ++i)\n    {\n        result[i] = string.substr(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int end) \n{\n    string[] result = new string[string.length];\n    for(int\
    \ i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i);\n   \
    \ }\n    return result;\n}\n/*\n Return list of all substrings from shortest to\
    \ longest of the input string\n        \n*/\nstring[] all_substrings(string string,\
    \ int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.substr(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int step2) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i+=step, i+=step2)\n\
    \    {\n        result[i] = string.substr(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int step2, int step3) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__g2z_e1.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__g2z_e1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = start; i\
    \ < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n  \
    \  }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < start + length; ++i)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int end, int step) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < start + length; ++i)\n\
    \    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ end, int step, string replacement) \n{\n    string[] result = new string[string.length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8dddqtrs.d(102): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dddqtrs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; i--)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; i++)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i+=step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string separator) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i+=step)\n   \
    \ {\n        result[i] = string.Substring(i,separator);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string separator, int endSeparator) \n{\n    string[] result = new string[string.length];\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjqvj5qth.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqvj5qth.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw22pbyh4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, string prefix) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = start; i < end; i += step)\n \
    \   {\n        result[i] = string.Substring(i) + prefix;\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, string prefix, string suffix) \n{\n    string[] result = new string[string.length\n\
    unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpen2fo5lz.d(101): Error: found \''unittest\'' when expecting
    \'']\''\n/tmp/tmpen2fo5lz.d(102): Error: semicolon expected, not \''{\''\n/tmp/tmpen2fo5lz.d(109):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpen2fo5lz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n        result[i] = string.substr(0, i);\n   \
    \ return result;\n}\n/*\n Return list of all suffixes from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_suffixes(string string) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n        result[i] = string.substr(i);\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string) \n{\n    string[] result\
    \ = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n \
    \       result[i] = string.substr(i, i + 1);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int length) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = 0; i < string.length; ++i)\n\
    \        result[i] = string.substr(i, length);\n    return result;\n}\n/*\n Return\
    \ list of all substrings from shortest to longest of the input string\n      \
    \  \n*/\nstring[] all_substrings(string string, int start, int length) \n{\n \
    \   string[] result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n        result[i] = string.substr(i, length);\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int length, int\
    \ step) \n{\n    string[] result = new string[string.length];\n    for(int i =\
    \ start; i < string.length; i += step)\n        result[i] = string.substr(i, length);\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start, int length, int step, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < string.length; i += step)\n        result[i] = string.substr(i,\
    \ length, end);\n    return result;\n}\n/*\n Return list of all substrings from\
    \ shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int length, int step, int end, int step2) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ i += step)\n        result[i] = string.substr(i, length, end, step2);\n    return\
    \ result;\n}\n/*\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpox1ewcle.d(91): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpox1ewcle.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    prefixes[0]\
    \ = string;\n    for(int i = 1; i < prefixes.length; ++i)\n    {\n        prefixes[i]\
    \ = prefixes[i-1] + string.substr(0, i);\n    }\n    return prefixes;\n}\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwu4z3rzf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.substr(i);\n    }\n   \
    \ return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.substr(i, string.length);\n    }\n \
    \   return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string, int\
    \ start) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = start; i < string.length; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; ++i)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step) \n{\n    string[] result = new string[string.length];\n\
    \    for(int i = start; i < end; i += step)\n    {\n        result[i] = string.substr(i,\
    \ string.length);\n    }\n    return result;\n}\n/*\n Return list of all substrings\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int size) \n{\n    string[] result = new\
    \ string[string.length];\n    for(int i = start; i < end; i += step)\n    {\n\
    \        result[i] = string.substr(i, size);\n    }\n    return result;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int size, int offset) \n{\n    string[] result = new string\nunittest\n\
    {\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxuij9q3q.d(101): Error: semicolon expected, not \''unittest\''\n/tmp/tmpxuij9q3q.d(101):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpxuij9q3q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; i++)\n    {\n        result[i] = string.substr(0, i);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw22pbyh4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] result = new string[string.length];\n    for(int i\
    \ = 0; i < string.length; ++i)\n    {\n        result[i] = string.Substring(0,\
    \ i);\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_suffixes(string string)\
    \ \n{\n    string[] result = new string[string.length];\n    for(int i = string.length\
    \ - 1; i >= 0; --i)\n    {\n        result[i] = string.Substring(i);\n    }\n\
    \    return result;\n}\n/*\n Return list of all substrings from shortest to longest\
    \ of the input string\n        \n*/\nstring[] all_substrings(string string) \n\
    {\n    string[] result = new string[string.length];\n    for(int i = 0; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ result = new string[string.length];\n    for(int i = start; i < string.length;\
    \ ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return result;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end) \n{\n\
    \    string[] result = new string[string.length];\n    for(int i = start; i <\
    \ end; ++i)\n    {\n        result[i] = string.Substring(i);\n    }\n    return\
    \ result;\n}\n/*\n Return list of all substrings from shortest to longest of the\
    \ input string\n        \n*/\nstring[] all_substrings(string string, int start,\
    \ int end, int step) \n{\n    string[] result = new string[string.length];\n \
    \   for(int i = start; i < end; i += step)\n    {\n        result[i] = string.Substring(i);\n\
    \    }\n    return result;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end, int step, int count) \n{\n    string[] result =\
    \ new string[string.length];\n    for(int i = start; i < end; i += step)\n   \
    \ {\n        result[i] = string.Substring(i);\n    }\n    return result;\n}\n\
    /*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step, int count, int startIndex) \n{\n    string[] result = new string[string.length];\n\
    \nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"\
    WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpovbx_ogi.d(102): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovbx_ogi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Return list of all prefixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_prefixes(string\
    \ string) \n{\n    string[] prefixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        prefixes[i] = string.Substring(0,\
    \ i);\n        i++;\n    }\n    return prefixes;\n}\n/*\n Return list of all suffixes\
    \ from shortest to longest of the input string\n        \n*/\nstring[] all_suffixes(string\
    \ string) \n{\n    string[] suffixes = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        suffixes[i] = string.Substring(i+1,\
    \ string.length);\n        i++;\n    }\n    return suffixes;\n}\n/*\n Return list\
    \ of all substrings from shortest to longest of the input string\n        \n*/\n\
    string[] all_substrings(string string) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.Substring(i,i+1);\n        i++;\n    }\n    return substrings;\n}\n/*\n\
    \ Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start) \n{\n    string[]\
    \ substrings = new string[string.length];\n    int i = 0;\n    while(i < string.length)\n\
    \    {\n        substrings[i] = string.Substring(start, i+1);\n        i++;\n\
    \    }\n    return substrings;\n}\n/*\n Return list of all substrings from shortest\
    \ to longest of the input string\n        \n*/\nstring[] all_substrings(string\
    \ string, int start, int end) \n{\n    string[] substrings = new string[string.length];\n\
    \    int i = 0;\n    while(i < string.length)\n    {\n        substrings[i] =\
    \ string.Substring(start, i+1);\n        i++;\n    }\n    return substrings;\n\
    }\n/*\n Return list of all substrings from shortest to longest of the input string\n\
    \        \n*/\nstring[] all_substrings(string string, int start, int end, int\
    \ step) \n{\n    string[] substrings = new string[string.length];\n    int i =\
    \ 0;\n    while(i < string.length)\n    {\n        substrings[i] = string.Substring(start,\
    \ i+1);\n        i++;\n    }\n    return substrings;\n}\n/*\n Return list of all\
    \ substrings from shortest to longest of the input string\n        \n*/\nstring[]\
    \ all_substrings(string string, int start, int end, int step, int length) \n{\n\
    \    string[] substrings = new string[string.length];\n    int i = 0;\n    while(i\
    \ < string.length)\n    {\n        substrings[i] = \nunittest\n{\n    alias candidate\
    \ = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n   \
    \ assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp561zqssl.d(104): Error: expression expected, not \''unittest\''\n/tmp/tmp561zqssl.d(105):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmp561zqssl.d(112):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp561zqssl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004035
