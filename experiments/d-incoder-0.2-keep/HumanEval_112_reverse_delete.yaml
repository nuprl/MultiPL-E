name: HumanEval_112_reverse_delete
language: humaneval_to_dlang.py
prompt: "import std.math;\nimport std.typecons;\n/*\nTask\n    We are given two strings\
  \ s and c, you have to deleted all the characters in s that are equal to any character\
  \ in c\n    then check if the result string is palindrome.\n    A string is called\
  \ palindrome if it reads the same backward as forward.\n    You should return a\
  \ tuple containing the result string and True/False for the check.\n    Example\n\
  \    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For\
  \ s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"\
  abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \n*/\nTuple!(string,\
  \ bool) reverse_delete(string s, string c) \n"
tests: "unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
  abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\", \"\
  b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"ab\") ==\
  \ tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"dik\"\
  , false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"\
  abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\"\
  , \"v\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\"\
  ) == tuple(\"abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\
  \", true));\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
